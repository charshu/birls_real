webpackJsonp([1],[
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const platform_browser_dynamic_1 = __webpack_require__(238);
	const app_module_1 = __webpack_require__(339);
	platform_browser_dynamic_1.platformBrowserDynamic().bootstrapModule(app_module_1.AppModule)
	    .catch(err => console.error(err));


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {//! moment.js
	//! version : 2.17.1
	//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
	//! license : MIT
	//! momentjs.com
	
	;(function (global, factory) {
	     true ? module.exports = factory() :
	    typeof define === 'function' && define.amd ? define(factory) :
	    global.moment = factory()
	}(this, (function () { 'use strict';
	
	var hookCallback;
	
	function hooks () {
	    return hookCallback.apply(null, arguments);
	}
	
	// This is done to register the method called with moment()
	// without creating circular dependencies.
	function setHookCallback (callback) {
	    hookCallback = callback;
	}
	
	function isArray(input) {
	    return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
	}
	
	function isObject(input) {
	    // IE8 will treat undefined and null as object if it wasn't for
	    // input != null
	    return input != null && Object.prototype.toString.call(input) === '[object Object]';
	}
	
	function isObjectEmpty(obj) {
	    var k;
	    for (k in obj) {
	        // even if its not own property I'd still call it non-empty
	        return false;
	    }
	    return true;
	}
	
	function isNumber(input) {
	    return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
	}
	
	function isDate(input) {
	    return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
	}
	
	function map(arr, fn) {
	    var res = [], i;
	    for (i = 0; i < arr.length; ++i) {
	        res.push(fn(arr[i], i));
	    }
	    return res;
	}
	
	function hasOwnProp(a, b) {
	    return Object.prototype.hasOwnProperty.call(a, b);
	}
	
	function extend(a, b) {
	    for (var i in b) {
	        if (hasOwnProp(b, i)) {
	            a[i] = b[i];
	        }
	    }
	
	    if (hasOwnProp(b, 'toString')) {
	        a.toString = b.toString;
	    }
	
	    if (hasOwnProp(b, 'valueOf')) {
	        a.valueOf = b.valueOf;
	    }
	
	    return a;
	}
	
	function createUTC (input, format, locale, strict) {
	    return createLocalOrUTC(input, format, locale, strict, true).utc();
	}
	
	function defaultParsingFlags() {
	    // We need to deep clone this object.
	    return {
	        empty           : false,
	        unusedTokens    : [],
	        unusedInput     : [],
	        overflow        : -2,
	        charsLeftOver   : 0,
	        nullInput       : false,
	        invalidMonth    : null,
	        invalidFormat   : false,
	        userInvalidated : false,
	        iso             : false,
	        parsedDateParts : [],
	        meridiem        : null
	    };
	}
	
	function getParsingFlags(m) {
	    if (m._pf == null) {
	        m._pf = defaultParsingFlags();
	    }
	    return m._pf;
	}
	
	var some;
	if (Array.prototype.some) {
	    some = Array.prototype.some;
	} else {
	    some = function (fun) {
	        var t = Object(this);
	        var len = t.length >>> 0;
	
	        for (var i = 0; i < len; i++) {
	            if (i in t && fun.call(this, t[i], i, t)) {
	                return true;
	            }
	        }
	
	        return false;
	    };
	}
	
	var some$1 = some;
	
	function isValid(m) {
	    if (m._isValid == null) {
	        var flags = getParsingFlags(m);
	        var parsedParts = some$1.call(flags.parsedDateParts, function (i) {
	            return i != null;
	        });
	        var isNowValid = !isNaN(m._d.getTime()) &&
	            flags.overflow < 0 &&
	            !flags.empty &&
	            !flags.invalidMonth &&
	            !flags.invalidWeekday &&
	            !flags.nullInput &&
	            !flags.invalidFormat &&
	            !flags.userInvalidated &&
	            (!flags.meridiem || (flags.meridiem && parsedParts));
	
	        if (m._strict) {
	            isNowValid = isNowValid &&
	                flags.charsLeftOver === 0 &&
	                flags.unusedTokens.length === 0 &&
	                flags.bigHour === undefined;
	        }
	
	        if (Object.isFrozen == null || !Object.isFrozen(m)) {
	            m._isValid = isNowValid;
	        }
	        else {
	            return isNowValid;
	        }
	    }
	    return m._isValid;
	}
	
	function createInvalid (flags) {
	    var m = createUTC(NaN);
	    if (flags != null) {
	        extend(getParsingFlags(m), flags);
	    }
	    else {
	        getParsingFlags(m).userInvalidated = true;
	    }
	
	    return m;
	}
	
	function isUndefined(input) {
	    return input === void 0;
	}
	
	// Plugins that add properties should also add the key here (null value),
	// so we can properly clone ourselves.
	var momentProperties = hooks.momentProperties = [];
	
	function copyConfig(to, from) {
	    var i, prop, val;
	
	    if (!isUndefined(from._isAMomentObject)) {
	        to._isAMomentObject = from._isAMomentObject;
	    }
	    if (!isUndefined(from._i)) {
	        to._i = from._i;
	    }
	    if (!isUndefined(from._f)) {
	        to._f = from._f;
	    }
	    if (!isUndefined(from._l)) {
	        to._l = from._l;
	    }
	    if (!isUndefined(from._strict)) {
	        to._strict = from._strict;
	    }
	    if (!isUndefined(from._tzm)) {
	        to._tzm = from._tzm;
	    }
	    if (!isUndefined(from._isUTC)) {
	        to._isUTC = from._isUTC;
	    }
	    if (!isUndefined(from._offset)) {
	        to._offset = from._offset;
	    }
	    if (!isUndefined(from._pf)) {
	        to._pf = getParsingFlags(from);
	    }
	    if (!isUndefined(from._locale)) {
	        to._locale = from._locale;
	    }
	
	    if (momentProperties.length > 0) {
	        for (i in momentProperties) {
	            prop = momentProperties[i];
	            val = from[prop];
	            if (!isUndefined(val)) {
	                to[prop] = val;
	            }
	        }
	    }
	
	    return to;
	}
	
	var updateInProgress = false;
	
	// Moment prototype object
	function Moment(config) {
	    copyConfig(this, config);
	    this._d = new Date(config._d != null ? config._d.getTime() : NaN);
	    if (!this.isValid()) {
	        this._d = new Date(NaN);
	    }
	    // Prevent infinite loop in case updateOffset creates new moment
	    // objects.
	    if (updateInProgress === false) {
	        updateInProgress = true;
	        hooks.updateOffset(this);
	        updateInProgress = false;
	    }
	}
	
	function isMoment (obj) {
	    return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
	}
	
	function absFloor (number) {
	    if (number < 0) {
	        // -0 -> 0
	        return Math.ceil(number) || 0;
	    } else {
	        return Math.floor(number);
	    }
	}
	
	function toInt(argumentForCoercion) {
	    var coercedNumber = +argumentForCoercion,
	        value = 0;
	
	    if (coercedNumber !== 0 && isFinite(coercedNumber)) {
	        value = absFloor(coercedNumber);
	    }
	
	    return value;
	}
	
	// compare two arrays, return the number of differences
	function compareArrays(array1, array2, dontConvert) {
	    var len = Math.min(array1.length, array2.length),
	        lengthDiff = Math.abs(array1.length - array2.length),
	        diffs = 0,
	        i;
	    for (i = 0; i < len; i++) {
	        if ((dontConvert && array1[i] !== array2[i]) ||
	            (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
	            diffs++;
	        }
	    }
	    return diffs + lengthDiff;
	}
	
	function warn(msg) {
	    if (hooks.suppressDeprecationWarnings === false &&
	            (typeof console !==  'undefined') && console.warn) {
	        console.warn('Deprecation warning: ' + msg);
	    }
	}
	
	function deprecate(msg, fn) {
	    var firstTime = true;
	
	    return extend(function () {
	        if (hooks.deprecationHandler != null) {
	            hooks.deprecationHandler(null, msg);
	        }
	        if (firstTime) {
	            var args = [];
	            var arg;
	            for (var i = 0; i < arguments.length; i++) {
	                arg = '';
	                if (typeof arguments[i] === 'object') {
	                    arg += '\n[' + i + '] ';
	                    for (var key in arguments[0]) {
	                        arg += key + ': ' + arguments[0][key] + ', ';
	                    }
	                    arg = arg.slice(0, -2); // Remove trailing comma and space
	                } else {
	                    arg = arguments[i];
	                }
	                args.push(arg);
	            }
	            warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
	            firstTime = false;
	        }
	        return fn.apply(this, arguments);
	    }, fn);
	}
	
	var deprecations = {};
	
	function deprecateSimple(name, msg) {
	    if (hooks.deprecationHandler != null) {
	        hooks.deprecationHandler(name, msg);
	    }
	    if (!deprecations[name]) {
	        warn(msg);
	        deprecations[name] = true;
	    }
	}
	
	hooks.suppressDeprecationWarnings = false;
	hooks.deprecationHandler = null;
	
	function isFunction(input) {
	    return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
	}
	
	function set (config) {
	    var prop, i;
	    for (i in config) {
	        prop = config[i];
	        if (isFunction(prop)) {
	            this[i] = prop;
	        } else {
	            this['_' + i] = prop;
	        }
	    }
	    this._config = config;
	    // Lenient ordinal parsing accepts just a number in addition to
	    // number + (possibly) stuff coming from _ordinalParseLenient.
	    this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\d{1,2}/).source);
	}
	
	function mergeConfigs(parentConfig, childConfig) {
	    var res = extend({}, parentConfig), prop;
	    for (prop in childConfig) {
	        if (hasOwnProp(childConfig, prop)) {
	            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
	                res[prop] = {};
	                extend(res[prop], parentConfig[prop]);
	                extend(res[prop], childConfig[prop]);
	            } else if (childConfig[prop] != null) {
	                res[prop] = childConfig[prop];
	            } else {
	                delete res[prop];
	            }
	        }
	    }
	    for (prop in parentConfig) {
	        if (hasOwnProp(parentConfig, prop) &&
	                !hasOwnProp(childConfig, prop) &&
	                isObject(parentConfig[prop])) {
	            // make sure changes to properties don't modify parent config
	            res[prop] = extend({}, res[prop]);
	        }
	    }
	    return res;
	}
	
	function Locale(config) {
	    if (config != null) {
	        this.set(config);
	    }
	}
	
	var keys;
	
	if (Object.keys) {
	    keys = Object.keys;
	} else {
	    keys = function (obj) {
	        var i, res = [];
	        for (i in obj) {
	            if (hasOwnProp(obj, i)) {
	                res.push(i);
	            }
	        }
	        return res;
	    };
	}
	
	var keys$1 = keys;
	
	var defaultCalendar = {
	    sameDay : '[Today at] LT',
	    nextDay : '[Tomorrow at] LT',
	    nextWeek : 'dddd [at] LT',
	    lastDay : '[Yesterday at] LT',
	    lastWeek : '[Last] dddd [at] LT',
	    sameElse : 'L'
	};
	
	function calendar (key, mom, now) {
	    var output = this._calendar[key] || this._calendar['sameElse'];
	    return isFunction(output) ? output.call(mom, now) : output;
	}
	
	var defaultLongDateFormat = {
	    LTS  : 'h:mm:ss A',
	    LT   : 'h:mm A',
	    L    : 'MM/DD/YYYY',
	    LL   : 'MMMM D, YYYY',
	    LLL  : 'MMMM D, YYYY h:mm A',
	    LLLL : 'dddd, MMMM D, YYYY h:mm A'
	};
	
	function longDateFormat (key) {
	    var format = this._longDateFormat[key],
	        formatUpper = this._longDateFormat[key.toUpperCase()];
	
	    if (format || !formatUpper) {
	        return format;
	    }
	
	    this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
	        return val.slice(1);
	    });
	
	    return this._longDateFormat[key];
	}
	
	var defaultInvalidDate = 'Invalid date';
	
	function invalidDate () {
	    return this._invalidDate;
	}
	
	var defaultOrdinal = '%d';
	var defaultOrdinalParse = /\d{1,2}/;
	
	function ordinal (number) {
	    return this._ordinal.replace('%d', number);
	}
	
	var defaultRelativeTime = {
	    future : 'in %s',
	    past   : '%s ago',
	    s  : 'a few seconds',
	    m  : 'a minute',
	    mm : '%d minutes',
	    h  : 'an hour',
	    hh : '%d hours',
	    d  : 'a day',
	    dd : '%d days',
	    M  : 'a month',
	    MM : '%d months',
	    y  : 'a year',
	    yy : '%d years'
	};
	
	function relativeTime (number, withoutSuffix, string, isFuture) {
	    var output = this._relativeTime[string];
	    return (isFunction(output)) ?
	        output(number, withoutSuffix, string, isFuture) :
	        output.replace(/%d/i, number);
	}
	
	function pastFuture (diff, output) {
	    var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
	    return isFunction(format) ? format(output) : format.replace(/%s/i, output);
	}
	
	var aliases = {};
	
	function addUnitAlias (unit, shorthand) {
	    var lowerCase = unit.toLowerCase();
	    aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
	}
	
	function normalizeUnits(units) {
	    return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
	}
	
	function normalizeObjectUnits(inputObject) {
	    var normalizedInput = {},
	        normalizedProp,
	        prop;
	
	    for (prop in inputObject) {
	        if (hasOwnProp(inputObject, prop)) {
	            normalizedProp = normalizeUnits(prop);
	            if (normalizedProp) {
	                normalizedInput[normalizedProp] = inputObject[prop];
	            }
	        }
	    }
	
	    return normalizedInput;
	}
	
	var priorities = {};
	
	function addUnitPriority(unit, priority) {
	    priorities[unit] = priority;
	}
	
	function getPrioritizedUnits(unitsObj) {
	    var units = [];
	    for (var u in unitsObj) {
	        units.push({unit: u, priority: priorities[u]});
	    }
	    units.sort(function (a, b) {
	        return a.priority - b.priority;
	    });
	    return units;
	}
	
	function makeGetSet (unit, keepTime) {
	    return function (value) {
	        if (value != null) {
	            set$1(this, unit, value);
	            hooks.updateOffset(this, keepTime);
	            return this;
	        } else {
	            return get(this, unit);
	        }
	    };
	}
	
	function get (mom, unit) {
	    return mom.isValid() ?
	        mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
	}
	
	function set$1 (mom, unit, value) {
	    if (mom.isValid()) {
	        mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
	    }
	}
	
	// MOMENTS
	
	function stringGet (units) {
	    units = normalizeUnits(units);
	    if (isFunction(this[units])) {
	        return this[units]();
	    }
	    return this;
	}
	
	
	function stringSet (units, value) {
	    if (typeof units === 'object') {
	        units = normalizeObjectUnits(units);
	        var prioritized = getPrioritizedUnits(units);
	        for (var i = 0; i < prioritized.length; i++) {
	            this[prioritized[i].unit](units[prioritized[i].unit]);
	        }
	    } else {
	        units = normalizeUnits(units);
	        if (isFunction(this[units])) {
	            return this[units](value);
	        }
	    }
	    return this;
	}
	
	function zeroFill(number, targetLength, forceSign) {
	    var absNumber = '' + Math.abs(number),
	        zerosToFill = targetLength - absNumber.length,
	        sign = number >= 0;
	    return (sign ? (forceSign ? '+' : '') : '-') +
	        Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
	}
	
	var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;
	
	var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;
	
	var formatFunctions = {};
	
	var formatTokenFunctions = {};
	
	// token:    'M'
	// padded:   ['MM', 2]
	// ordinal:  'Mo'
	// callback: function () { this.month() + 1 }
	function addFormatToken (token, padded, ordinal, callback) {
	    var func = callback;
	    if (typeof callback === 'string') {
	        func = function () {
	            return this[callback]();
	        };
	    }
	    if (token) {
	        formatTokenFunctions[token] = func;
	    }
	    if (padded) {
	        formatTokenFunctions[padded[0]] = function () {
	            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
	        };
	    }
	    if (ordinal) {
	        formatTokenFunctions[ordinal] = function () {
	            return this.localeData().ordinal(func.apply(this, arguments), token);
	        };
	    }
	}
	
	function removeFormattingTokens(input) {
	    if (input.match(/\[[\s\S]/)) {
	        return input.replace(/^\[|\]$/g, '');
	    }
	    return input.replace(/\\/g, '');
	}
	
	function makeFormatFunction(format) {
	    var array = format.match(formattingTokens), i, length;
	
	    for (i = 0, length = array.length; i < length; i++) {
	        if (formatTokenFunctions[array[i]]) {
	            array[i] = formatTokenFunctions[array[i]];
	        } else {
	            array[i] = removeFormattingTokens(array[i]);
	        }
	    }
	
	    return function (mom) {
	        var output = '', i;
	        for (i = 0; i < length; i++) {
	            output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
	        }
	        return output;
	    };
	}
	
	// format date using native date object
	function formatMoment(m, format) {
	    if (!m.isValid()) {
	        return m.localeData().invalidDate();
	    }
	
	    format = expandFormat(format, m.localeData());
	    formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
	
	    return formatFunctions[format](m);
	}
	
	function expandFormat(format, locale) {
	    var i = 5;
	
	    function replaceLongDateFormatTokens(input) {
	        return locale.longDateFormat(input) || input;
	    }
	
	    localFormattingTokens.lastIndex = 0;
	    while (i >= 0 && localFormattingTokens.test(format)) {
	        format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
	        localFormattingTokens.lastIndex = 0;
	        i -= 1;
	    }
	
	    return format;
	}
	
	var match1         = /\d/;            //       0 - 9
	var match2         = /\d\d/;          //      00 - 99
	var match3         = /\d{3}/;         //     000 - 999
	var match4         = /\d{4}/;         //    0000 - 9999
	var match6         = /[+-]?\d{6}/;    // -999999 - 999999
	var match1to2      = /\d\d?/;         //       0 - 99
	var match3to4      = /\d\d\d\d?/;     //     999 - 9999
	var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
	var match1to3      = /\d{1,3}/;       //       0 - 999
	var match1to4      = /\d{1,4}/;       //       0 - 9999
	var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999
	
	var matchUnsigned  = /\d+/;           //       0 - inf
	var matchSigned    = /[+-]?\d+/;      //    -inf - inf
	
	var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
	var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z
	
	var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123
	
	// any word (or two) characters or numbers including two/three word month in arabic.
	// includes scottish gaelic two word and hyphenated months
	var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;
	
	
	var regexes = {};
	
	function addRegexToken (token, regex, strictRegex) {
	    regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
	        return (isStrict && strictRegex) ? strictRegex : regex;
	    };
	}
	
	function getParseRegexForToken (token, config) {
	    if (!hasOwnProp(regexes, token)) {
	        return new RegExp(unescapeFormat(token));
	    }
	
	    return regexes[token](config._strict, config._locale);
	}
	
	// Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
	function unescapeFormat(s) {
	    return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
	        return p1 || p2 || p3 || p4;
	    }));
	}
	
	function regexEscape(s) {
	    return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
	}
	
	var tokens = {};
	
	function addParseToken (token, callback) {
	    var i, func = callback;
	    if (typeof token === 'string') {
	        token = [token];
	    }
	    if (isNumber(callback)) {
	        func = function (input, array) {
	            array[callback] = toInt(input);
	        };
	    }
	    for (i = 0; i < token.length; i++) {
	        tokens[token[i]] = func;
	    }
	}
	
	function addWeekParseToken (token, callback) {
	    addParseToken(token, function (input, array, config, token) {
	        config._w = config._w || {};
	        callback(input, config._w, config, token);
	    });
	}
	
	function addTimeToArrayFromToken(token, input, config) {
	    if (input != null && hasOwnProp(tokens, token)) {
	        tokens[token](input, config._a, config, token);
	    }
	}
	
	var YEAR = 0;
	var MONTH = 1;
	var DATE = 2;
	var HOUR = 3;
	var MINUTE = 4;
	var SECOND = 5;
	var MILLISECOND = 6;
	var WEEK = 7;
	var WEEKDAY = 8;
	
	var indexOf;
	
	if (Array.prototype.indexOf) {
	    indexOf = Array.prototype.indexOf;
	} else {
	    indexOf = function (o) {
	        // I know
	        var i;
	        for (i = 0; i < this.length; ++i) {
	            if (this[i] === o) {
	                return i;
	            }
	        }
	        return -1;
	    };
	}
	
	var indexOf$1 = indexOf;
	
	function daysInMonth(year, month) {
	    return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
	}
	
	// FORMATTING
	
	addFormatToken('M', ['MM', 2], 'Mo', function () {
	    return this.month() + 1;
	});
	
	addFormatToken('MMM', 0, 0, function (format) {
	    return this.localeData().monthsShort(this, format);
	});
	
	addFormatToken('MMMM', 0, 0, function (format) {
	    return this.localeData().months(this, format);
	});
	
	// ALIASES
	
	addUnitAlias('month', 'M');
	
	// PRIORITY
	
	addUnitPriority('month', 8);
	
	// PARSING
	
	addRegexToken('M',    match1to2);
	addRegexToken('MM',   match1to2, match2);
	addRegexToken('MMM',  function (isStrict, locale) {
	    return locale.monthsShortRegex(isStrict);
	});
	addRegexToken('MMMM', function (isStrict, locale) {
	    return locale.monthsRegex(isStrict);
	});
	
	addParseToken(['M', 'MM'], function (input, array) {
	    array[MONTH] = toInt(input) - 1;
	});
	
	addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
	    var month = config._locale.monthsParse(input, token, config._strict);
	    // if we didn't find a month name, mark the date as invalid.
	    if (month != null) {
	        array[MONTH] = month;
	    } else {
	        getParsingFlags(config).invalidMonth = input;
	    }
	});
	
	// LOCALES
	
	var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
	var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
	function localeMonths (m, format) {
	    if (!m) {
	        return this._months;
	    }
	    return isArray(this._months) ? this._months[m.month()] :
	        this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
	}
	
	var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
	function localeMonthsShort (m, format) {
	    if (!m) {
	        return this._monthsShort;
	    }
	    return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
	        this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
	}
	
	function handleStrictParse(monthName, format, strict) {
	    var i, ii, mom, llc = monthName.toLocaleLowerCase();
	    if (!this._monthsParse) {
	        // this is not used
	        this._monthsParse = [];
	        this._longMonthsParse = [];
	        this._shortMonthsParse = [];
	        for (i = 0; i < 12; ++i) {
	            mom = createUTC([2000, i]);
	            this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
	            this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
	        }
	    }
	
	    if (strict) {
	        if (format === 'MMM') {
	            ii = indexOf$1.call(this._shortMonthsParse, llc);
	            return ii !== -1 ? ii : null;
	        } else {
	            ii = indexOf$1.call(this._longMonthsParse, llc);
	            return ii !== -1 ? ii : null;
	        }
	    } else {
	        if (format === 'MMM') {
	            ii = indexOf$1.call(this._shortMonthsParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._longMonthsParse, llc);
	            return ii !== -1 ? ii : null;
	        } else {
	            ii = indexOf$1.call(this._longMonthsParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._shortMonthsParse, llc);
	            return ii !== -1 ? ii : null;
	        }
	    }
	}
	
	function localeMonthsParse (monthName, format, strict) {
	    var i, mom, regex;
	
	    if (this._monthsParseExact) {
	        return handleStrictParse.call(this, monthName, format, strict);
	    }
	
	    if (!this._monthsParse) {
	        this._monthsParse = [];
	        this._longMonthsParse = [];
	        this._shortMonthsParse = [];
	    }
	
	    // TODO: add sorting
	    // Sorting makes sure if one month (or abbr) is a prefix of another
	    // see sorting in computeMonthsParse
	    for (i = 0; i < 12; i++) {
	        // make the regex if we don't have it already
	        mom = createUTC([2000, i]);
	        if (strict && !this._longMonthsParse[i]) {
	            this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
	            this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
	        }
	        if (!strict && !this._monthsParse[i]) {
	            regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
	            this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
	        }
	        // test the regex
	        if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
	            return i;
	        } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
	            return i;
	        } else if (!strict && this._monthsParse[i].test(monthName)) {
	            return i;
	        }
	    }
	}
	
	// MOMENTS
	
	function setMonth (mom, value) {
	    var dayOfMonth;
	
	    if (!mom.isValid()) {
	        // No op
	        return mom;
	    }
	
	    if (typeof value === 'string') {
	        if (/^\d+$/.test(value)) {
	            value = toInt(value);
	        } else {
	            value = mom.localeData().monthsParse(value);
	            // TODO: Another silent failure?
	            if (!isNumber(value)) {
	                return mom;
	            }
	        }
	    }
	
	    dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
	    mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
	    return mom;
	}
	
	function getSetMonth (value) {
	    if (value != null) {
	        setMonth(this, value);
	        hooks.updateOffset(this, true);
	        return this;
	    } else {
	        return get(this, 'Month');
	    }
	}
	
	function getDaysInMonth () {
	    return daysInMonth(this.year(), this.month());
	}
	
	var defaultMonthsShortRegex = matchWord;
	function monthsShortRegex (isStrict) {
	    if (this._monthsParseExact) {
	        if (!hasOwnProp(this, '_monthsRegex')) {
	            computeMonthsParse.call(this);
	        }
	        if (isStrict) {
	            return this._monthsShortStrictRegex;
	        } else {
	            return this._monthsShortRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_monthsShortRegex')) {
	            this._monthsShortRegex = defaultMonthsShortRegex;
	        }
	        return this._monthsShortStrictRegex && isStrict ?
	            this._monthsShortStrictRegex : this._monthsShortRegex;
	    }
	}
	
	var defaultMonthsRegex = matchWord;
	function monthsRegex (isStrict) {
	    if (this._monthsParseExact) {
	        if (!hasOwnProp(this, '_monthsRegex')) {
	            computeMonthsParse.call(this);
	        }
	        if (isStrict) {
	            return this._monthsStrictRegex;
	        } else {
	            return this._monthsRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_monthsRegex')) {
	            this._monthsRegex = defaultMonthsRegex;
	        }
	        return this._monthsStrictRegex && isStrict ?
	            this._monthsStrictRegex : this._monthsRegex;
	    }
	}
	
	function computeMonthsParse () {
	    function cmpLenRev(a, b) {
	        return b.length - a.length;
	    }
	
	    var shortPieces = [], longPieces = [], mixedPieces = [],
	        i, mom;
	    for (i = 0; i < 12; i++) {
	        // make the regex if we don't have it already
	        mom = createUTC([2000, i]);
	        shortPieces.push(this.monthsShort(mom, ''));
	        longPieces.push(this.months(mom, ''));
	        mixedPieces.push(this.months(mom, ''));
	        mixedPieces.push(this.monthsShort(mom, ''));
	    }
	    // Sorting makes sure if one month (or abbr) is a prefix of another it
	    // will match the longer piece.
	    shortPieces.sort(cmpLenRev);
	    longPieces.sort(cmpLenRev);
	    mixedPieces.sort(cmpLenRev);
	    for (i = 0; i < 12; i++) {
	        shortPieces[i] = regexEscape(shortPieces[i]);
	        longPieces[i] = regexEscape(longPieces[i]);
	    }
	    for (i = 0; i < 24; i++) {
	        mixedPieces[i] = regexEscape(mixedPieces[i]);
	    }
	
	    this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	    this._monthsShortRegex = this._monthsRegex;
	    this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
	    this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
	}
	
	// FORMATTING
	
	addFormatToken('Y', 0, 0, function () {
	    var y = this.year();
	    return y <= 9999 ? '' + y : '+' + y;
	});
	
	addFormatToken(0, ['YY', 2], 0, function () {
	    return this.year() % 100;
	});
	
	addFormatToken(0, ['YYYY',   4],       0, 'year');
	addFormatToken(0, ['YYYYY',  5],       0, 'year');
	addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');
	
	// ALIASES
	
	addUnitAlias('year', 'y');
	
	// PRIORITIES
	
	addUnitPriority('year', 1);
	
	// PARSING
	
	addRegexToken('Y',      matchSigned);
	addRegexToken('YY',     match1to2, match2);
	addRegexToken('YYYY',   match1to4, match4);
	addRegexToken('YYYYY',  match1to6, match6);
	addRegexToken('YYYYYY', match1to6, match6);
	
	addParseToken(['YYYYY', 'YYYYYY'], YEAR);
	addParseToken('YYYY', function (input, array) {
	    array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
	});
	addParseToken('YY', function (input, array) {
	    array[YEAR] = hooks.parseTwoDigitYear(input);
	});
	addParseToken('Y', function (input, array) {
	    array[YEAR] = parseInt(input, 10);
	});
	
	// HELPERS
	
	function daysInYear(year) {
	    return isLeapYear(year) ? 366 : 365;
	}
	
	function isLeapYear(year) {
	    return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
	}
	
	// HOOKS
	
	hooks.parseTwoDigitYear = function (input) {
	    return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
	};
	
	// MOMENTS
	
	var getSetYear = makeGetSet('FullYear', true);
	
	function getIsLeapYear () {
	    return isLeapYear(this.year());
	}
	
	function createDate (y, m, d, h, M, s, ms) {
	    //can't just apply() to create a date:
	    //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
	    var date = new Date(y, m, d, h, M, s, ms);
	
	    //the date constructor remaps years 0-99 to 1900-1999
	    if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
	        date.setFullYear(y);
	    }
	    return date;
	}
	
	function createUTCDate (y) {
	    var date = new Date(Date.UTC.apply(null, arguments));
	
	    //the Date.UTC function remaps years 0-99 to 1900-1999
	    if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
	        date.setUTCFullYear(y);
	    }
	    return date;
	}
	
	// start-of-first-week - start-of-year
	function firstWeekOffset(year, dow, doy) {
	    var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
	        fwd = 7 + dow - doy,
	        // first-week day local weekday -- which local weekday is fwd
	        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
	
	    return -fwdlw + fwd - 1;
	}
	
	//http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
	function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
	    var localWeekday = (7 + weekday - dow) % 7,
	        weekOffset = firstWeekOffset(year, dow, doy),
	        dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
	        resYear, resDayOfYear;
	
	    if (dayOfYear <= 0) {
	        resYear = year - 1;
	        resDayOfYear = daysInYear(resYear) + dayOfYear;
	    } else if (dayOfYear > daysInYear(year)) {
	        resYear = year + 1;
	        resDayOfYear = dayOfYear - daysInYear(year);
	    } else {
	        resYear = year;
	        resDayOfYear = dayOfYear;
	    }
	
	    return {
	        year: resYear,
	        dayOfYear: resDayOfYear
	    };
	}
	
	function weekOfYear(mom, dow, doy) {
	    var weekOffset = firstWeekOffset(mom.year(), dow, doy),
	        week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
	        resWeek, resYear;
	
	    if (week < 1) {
	        resYear = mom.year() - 1;
	        resWeek = week + weeksInYear(resYear, dow, doy);
	    } else if (week > weeksInYear(mom.year(), dow, doy)) {
	        resWeek = week - weeksInYear(mom.year(), dow, doy);
	        resYear = mom.year() + 1;
	    } else {
	        resYear = mom.year();
	        resWeek = week;
	    }
	
	    return {
	        week: resWeek,
	        year: resYear
	    };
	}
	
	function weeksInYear(year, dow, doy) {
	    var weekOffset = firstWeekOffset(year, dow, doy),
	        weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
	    return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
	}
	
	// FORMATTING
	
	addFormatToken('w', ['ww', 2], 'wo', 'week');
	addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');
	
	// ALIASES
	
	addUnitAlias('week', 'w');
	addUnitAlias('isoWeek', 'W');
	
	// PRIORITIES
	
	addUnitPriority('week', 5);
	addUnitPriority('isoWeek', 5);
	
	// PARSING
	
	addRegexToken('w',  match1to2);
	addRegexToken('ww', match1to2, match2);
	addRegexToken('W',  match1to2);
	addRegexToken('WW', match1to2, match2);
	
	addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
	    week[token.substr(0, 1)] = toInt(input);
	});
	
	// HELPERS
	
	// LOCALES
	
	function localeWeek (mom) {
	    return weekOfYear(mom, this._week.dow, this._week.doy).week;
	}
	
	var defaultLocaleWeek = {
	    dow : 0, // Sunday is the first day of the week.
	    doy : 6  // The week that contains Jan 1st is the first week of the year.
	};
	
	function localeFirstDayOfWeek () {
	    return this._week.dow;
	}
	
	function localeFirstDayOfYear () {
	    return this._week.doy;
	}
	
	// MOMENTS
	
	function getSetWeek (input) {
	    var week = this.localeData().week(this);
	    return input == null ? week : this.add((input - week) * 7, 'd');
	}
	
	function getSetISOWeek (input) {
	    var week = weekOfYear(this, 1, 4).week;
	    return input == null ? week : this.add((input - week) * 7, 'd');
	}
	
	// FORMATTING
	
	addFormatToken('d', 0, 'do', 'day');
	
	addFormatToken('dd', 0, 0, function (format) {
	    return this.localeData().weekdaysMin(this, format);
	});
	
	addFormatToken('ddd', 0, 0, function (format) {
	    return this.localeData().weekdaysShort(this, format);
	});
	
	addFormatToken('dddd', 0, 0, function (format) {
	    return this.localeData().weekdays(this, format);
	});
	
	addFormatToken('e', 0, 0, 'weekday');
	addFormatToken('E', 0, 0, 'isoWeekday');
	
	// ALIASES
	
	addUnitAlias('day', 'd');
	addUnitAlias('weekday', 'e');
	addUnitAlias('isoWeekday', 'E');
	
	// PRIORITY
	addUnitPriority('day', 11);
	addUnitPriority('weekday', 11);
	addUnitPriority('isoWeekday', 11);
	
	// PARSING
	
	addRegexToken('d',    match1to2);
	addRegexToken('e',    match1to2);
	addRegexToken('E',    match1to2);
	addRegexToken('dd',   function (isStrict, locale) {
	    return locale.weekdaysMinRegex(isStrict);
	});
	addRegexToken('ddd',   function (isStrict, locale) {
	    return locale.weekdaysShortRegex(isStrict);
	});
	addRegexToken('dddd',   function (isStrict, locale) {
	    return locale.weekdaysRegex(isStrict);
	});
	
	addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
	    var weekday = config._locale.weekdaysParse(input, token, config._strict);
	    // if we didn't get a weekday name, mark the date as invalid
	    if (weekday != null) {
	        week.d = weekday;
	    } else {
	        getParsingFlags(config).invalidWeekday = input;
	    }
	});
	
	addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
	    week[token] = toInt(input);
	});
	
	// HELPERS
	
	function parseWeekday(input, locale) {
	    if (typeof input !== 'string') {
	        return input;
	    }
	
	    if (!isNaN(input)) {
	        return parseInt(input, 10);
	    }
	
	    input = locale.weekdaysParse(input);
	    if (typeof input === 'number') {
	        return input;
	    }
	
	    return null;
	}
	
	function parseIsoWeekday(input, locale) {
	    if (typeof input === 'string') {
	        return locale.weekdaysParse(input) % 7 || 7;
	    }
	    return isNaN(input) ? null : input;
	}
	
	// LOCALES
	
	var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
	function localeWeekdays (m, format) {
	    if (!m) {
	        return this._weekdays;
	    }
	    return isArray(this._weekdays) ? this._weekdays[m.day()] :
	        this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
	}
	
	var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
	function localeWeekdaysShort (m) {
	    return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
	}
	
	var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
	function localeWeekdaysMin (m) {
	    return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
	}
	
	function handleStrictParse$1(weekdayName, format, strict) {
	    var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
	    if (!this._weekdaysParse) {
	        this._weekdaysParse = [];
	        this._shortWeekdaysParse = [];
	        this._minWeekdaysParse = [];
	
	        for (i = 0; i < 7; ++i) {
	            mom = createUTC([2000, 1]).day(i);
	            this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
	            this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
	            this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
	        }
	    }
	
	    if (strict) {
	        if (format === 'dddd') {
	            ii = indexOf$1.call(this._weekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        } else if (format === 'ddd') {
	            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        } else {
	            ii = indexOf$1.call(this._minWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        }
	    } else {
	        if (format === 'dddd') {
	            ii = indexOf$1.call(this._weekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._minWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        } else if (format === 'ddd') {
	            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._weekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._minWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        } else {
	            ii = indexOf$1.call(this._minWeekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._weekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        }
	    }
	}
	
	function localeWeekdaysParse (weekdayName, format, strict) {
	    var i, mom, regex;
	
	    if (this._weekdaysParseExact) {
	        return handleStrictParse$1.call(this, weekdayName, format, strict);
	    }
	
	    if (!this._weekdaysParse) {
	        this._weekdaysParse = [];
	        this._minWeekdaysParse = [];
	        this._shortWeekdaysParse = [];
	        this._fullWeekdaysParse = [];
	    }
	
	    for (i = 0; i < 7; i++) {
	        // make the regex if we don't have it already
	
	        mom = createUTC([2000, 1]).day(i);
	        if (strict && !this._fullWeekdaysParse[i]) {
	            this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
	            this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
	            this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
	        }
	        if (!this._weekdaysParse[i]) {
	            regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
	            this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
	        }
	        // test the regex
	        if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
	            return i;
	        } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
	            return i;
	        } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
	            return i;
	        } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
	            return i;
	        }
	    }
	}
	
	// MOMENTS
	
	function getSetDayOfWeek (input) {
	    if (!this.isValid()) {
	        return input != null ? this : NaN;
	    }
	    var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
	    if (input != null) {
	        input = parseWeekday(input, this.localeData());
	        return this.add(input - day, 'd');
	    } else {
	        return day;
	    }
	}
	
	function getSetLocaleDayOfWeek (input) {
	    if (!this.isValid()) {
	        return input != null ? this : NaN;
	    }
	    var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
	    return input == null ? weekday : this.add(input - weekday, 'd');
	}
	
	function getSetISODayOfWeek (input) {
	    if (!this.isValid()) {
	        return input != null ? this : NaN;
	    }
	
	    // behaves the same as moment#day except
	    // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
	    // as a setter, sunday should belong to the previous week.
	
	    if (input != null) {
	        var weekday = parseIsoWeekday(input, this.localeData());
	        return this.day(this.day() % 7 ? weekday : weekday - 7);
	    } else {
	        return this.day() || 7;
	    }
	}
	
	var defaultWeekdaysRegex = matchWord;
	function weekdaysRegex (isStrict) {
	    if (this._weekdaysParseExact) {
	        if (!hasOwnProp(this, '_weekdaysRegex')) {
	            computeWeekdaysParse.call(this);
	        }
	        if (isStrict) {
	            return this._weekdaysStrictRegex;
	        } else {
	            return this._weekdaysRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_weekdaysRegex')) {
	            this._weekdaysRegex = defaultWeekdaysRegex;
	        }
	        return this._weekdaysStrictRegex && isStrict ?
	            this._weekdaysStrictRegex : this._weekdaysRegex;
	    }
	}
	
	var defaultWeekdaysShortRegex = matchWord;
	function weekdaysShortRegex (isStrict) {
	    if (this._weekdaysParseExact) {
	        if (!hasOwnProp(this, '_weekdaysRegex')) {
	            computeWeekdaysParse.call(this);
	        }
	        if (isStrict) {
	            return this._weekdaysShortStrictRegex;
	        } else {
	            return this._weekdaysShortRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_weekdaysShortRegex')) {
	            this._weekdaysShortRegex = defaultWeekdaysShortRegex;
	        }
	        return this._weekdaysShortStrictRegex && isStrict ?
	            this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
	    }
	}
	
	var defaultWeekdaysMinRegex = matchWord;
	function weekdaysMinRegex (isStrict) {
	    if (this._weekdaysParseExact) {
	        if (!hasOwnProp(this, '_weekdaysRegex')) {
	            computeWeekdaysParse.call(this);
	        }
	        if (isStrict) {
	            return this._weekdaysMinStrictRegex;
	        } else {
	            return this._weekdaysMinRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_weekdaysMinRegex')) {
	            this._weekdaysMinRegex = defaultWeekdaysMinRegex;
	        }
	        return this._weekdaysMinStrictRegex && isStrict ?
	            this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
	    }
	}
	
	
	function computeWeekdaysParse () {
	    function cmpLenRev(a, b) {
	        return b.length - a.length;
	    }
	
	    var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
	        i, mom, minp, shortp, longp;
	    for (i = 0; i < 7; i++) {
	        // make the regex if we don't have it already
	        mom = createUTC([2000, 1]).day(i);
	        minp = this.weekdaysMin(mom, '');
	        shortp = this.weekdaysShort(mom, '');
	        longp = this.weekdays(mom, '');
	        minPieces.push(minp);
	        shortPieces.push(shortp);
	        longPieces.push(longp);
	        mixedPieces.push(minp);
	        mixedPieces.push(shortp);
	        mixedPieces.push(longp);
	    }
	    // Sorting makes sure if one weekday (or abbr) is a prefix of another it
	    // will match the longer piece.
	    minPieces.sort(cmpLenRev);
	    shortPieces.sort(cmpLenRev);
	    longPieces.sort(cmpLenRev);
	    mixedPieces.sort(cmpLenRev);
	    for (i = 0; i < 7; i++) {
	        shortPieces[i] = regexEscape(shortPieces[i]);
	        longPieces[i] = regexEscape(longPieces[i]);
	        mixedPieces[i] = regexEscape(mixedPieces[i]);
	    }
	
	    this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	    this._weekdaysShortRegex = this._weekdaysRegex;
	    this._weekdaysMinRegex = this._weekdaysRegex;
	
	    this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
	    this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
	    this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
	}
	
	// FORMATTING
	
	function hFormat() {
	    return this.hours() % 12 || 12;
	}
	
	function kFormat() {
	    return this.hours() || 24;
	}
	
	addFormatToken('H', ['HH', 2], 0, 'hour');
	addFormatToken('h', ['hh', 2], 0, hFormat);
	addFormatToken('k', ['kk', 2], 0, kFormat);
	
	addFormatToken('hmm', 0, 0, function () {
	    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
	});
	
	addFormatToken('hmmss', 0, 0, function () {
	    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
	        zeroFill(this.seconds(), 2);
	});
	
	addFormatToken('Hmm', 0, 0, function () {
	    return '' + this.hours() + zeroFill(this.minutes(), 2);
	});
	
	addFormatToken('Hmmss', 0, 0, function () {
	    return '' + this.hours() + zeroFill(this.minutes(), 2) +
	        zeroFill(this.seconds(), 2);
	});
	
	function meridiem (token, lowercase) {
	    addFormatToken(token, 0, 0, function () {
	        return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
	    });
	}
	
	meridiem('a', true);
	meridiem('A', false);
	
	// ALIASES
	
	addUnitAlias('hour', 'h');
	
	// PRIORITY
	addUnitPriority('hour', 13);
	
	// PARSING
	
	function matchMeridiem (isStrict, locale) {
	    return locale._meridiemParse;
	}
	
	addRegexToken('a',  matchMeridiem);
	addRegexToken('A',  matchMeridiem);
	addRegexToken('H',  match1to2);
	addRegexToken('h',  match1to2);
	addRegexToken('HH', match1to2, match2);
	addRegexToken('hh', match1to2, match2);
	
	addRegexToken('hmm', match3to4);
	addRegexToken('hmmss', match5to6);
	addRegexToken('Hmm', match3to4);
	addRegexToken('Hmmss', match5to6);
	
	addParseToken(['H', 'HH'], HOUR);
	addParseToken(['a', 'A'], function (input, array, config) {
	    config._isPm = config._locale.isPM(input);
	    config._meridiem = input;
	});
	addParseToken(['h', 'hh'], function (input, array, config) {
	    array[HOUR] = toInt(input);
	    getParsingFlags(config).bigHour = true;
	});
	addParseToken('hmm', function (input, array, config) {
	    var pos = input.length - 2;
	    array[HOUR] = toInt(input.substr(0, pos));
	    array[MINUTE] = toInt(input.substr(pos));
	    getParsingFlags(config).bigHour = true;
	});
	addParseToken('hmmss', function (input, array, config) {
	    var pos1 = input.length - 4;
	    var pos2 = input.length - 2;
	    array[HOUR] = toInt(input.substr(0, pos1));
	    array[MINUTE] = toInt(input.substr(pos1, 2));
	    array[SECOND] = toInt(input.substr(pos2));
	    getParsingFlags(config).bigHour = true;
	});
	addParseToken('Hmm', function (input, array, config) {
	    var pos = input.length - 2;
	    array[HOUR] = toInt(input.substr(0, pos));
	    array[MINUTE] = toInt(input.substr(pos));
	});
	addParseToken('Hmmss', function (input, array, config) {
	    var pos1 = input.length - 4;
	    var pos2 = input.length - 2;
	    array[HOUR] = toInt(input.substr(0, pos1));
	    array[MINUTE] = toInt(input.substr(pos1, 2));
	    array[SECOND] = toInt(input.substr(pos2));
	});
	
	// LOCALES
	
	function localeIsPM (input) {
	    // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
	    // Using charAt should be more compatible.
	    return ((input + '').toLowerCase().charAt(0) === 'p');
	}
	
	var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
	function localeMeridiem (hours, minutes, isLower) {
	    if (hours > 11) {
	        return isLower ? 'pm' : 'PM';
	    } else {
	        return isLower ? 'am' : 'AM';
	    }
	}
	
	
	// MOMENTS
	
	// Setting the hour should keep the time, because the user explicitly
	// specified which hour he wants. So trying to maintain the same hour (in
	// a new timezone) makes sense. Adding/subtracting hours does not follow
	// this rule.
	var getSetHour = makeGetSet('Hours', true);
	
	// months
	// week
	// weekdays
	// meridiem
	var baseConfig = {
	    calendar: defaultCalendar,
	    longDateFormat: defaultLongDateFormat,
	    invalidDate: defaultInvalidDate,
	    ordinal: defaultOrdinal,
	    ordinalParse: defaultOrdinalParse,
	    relativeTime: defaultRelativeTime,
	
	    months: defaultLocaleMonths,
	    monthsShort: defaultLocaleMonthsShort,
	
	    week: defaultLocaleWeek,
	
	    weekdays: defaultLocaleWeekdays,
	    weekdaysMin: defaultLocaleWeekdaysMin,
	    weekdaysShort: defaultLocaleWeekdaysShort,
	
	    meridiemParse: defaultLocaleMeridiemParse
	};
	
	// internal storage for locale config files
	var locales = {};
	var localeFamilies = {};
	var globalLocale;
	
	function normalizeLocale(key) {
	    return key ? key.toLowerCase().replace('_', '-') : key;
	}
	
	// pick the locale from the array
	// try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
	// substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
	function chooseLocale(names) {
	    var i = 0, j, next, locale, split;
	
	    while (i < names.length) {
	        split = normalizeLocale(names[i]).split('-');
	        j = split.length;
	        next = normalizeLocale(names[i + 1]);
	        next = next ? next.split('-') : null;
	        while (j > 0) {
	            locale = loadLocale(split.slice(0, j).join('-'));
	            if (locale) {
	                return locale;
	            }
	            if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
	                //the next array item is better than a shallower substring of this one
	                break;
	            }
	            j--;
	        }
	        i++;
	    }
	    return null;
	}
	
	function loadLocale(name) {
	    var oldLocale = null;
	    // TODO: Find a better way to register and load all the locales in Node
	    if (!locales[name] && (typeof module !== 'undefined') &&
	            module && module.exports) {
	        try {
	            oldLocale = globalLocale._abbr;
	            __webpack_require__(539)("./" + name);
	            // because defineLocale currently also sets the global locale, we
	            // want to undo that for lazy loaded locales
	            getSetGlobalLocale(oldLocale);
	        } catch (e) { }
	    }
	    return locales[name];
	}
	
	// This function will load locale and then set the global locale.  If
	// no arguments are passed in, it will simply return the current global
	// locale key.
	function getSetGlobalLocale (key, values) {
	    var data;
	    if (key) {
	        if (isUndefined(values)) {
	            data = getLocale(key);
	        }
	        else {
	            data = defineLocale(key, values);
	        }
	
	        if (data) {
	            // moment.duration._locale = moment._locale = data;
	            globalLocale = data;
	        }
	    }
	
	    return globalLocale._abbr;
	}
	
	function defineLocale (name, config) {
	    if (config !== null) {
	        var parentConfig = baseConfig;
	        config.abbr = name;
	        if (locales[name] != null) {
	            deprecateSimple('defineLocaleOverride',
	                    'use moment.updateLocale(localeName, config) to change ' +
	                    'an existing locale. moment.defineLocale(localeName, ' +
	                    'config) should only be used for creating a new locale ' +
	                    'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
	            parentConfig = locales[name]._config;
	        } else if (config.parentLocale != null) {
	            if (locales[config.parentLocale] != null) {
	                parentConfig = locales[config.parentLocale]._config;
	            } else {
	                if (!localeFamilies[config.parentLocale]) {
	                    localeFamilies[config.parentLocale] = [];
	                }
	                localeFamilies[config.parentLocale].push({
	                    name: name,
	                    config: config
	                });
	                return null;
	            }
	        }
	        locales[name] = new Locale(mergeConfigs(parentConfig, config));
	
	        if (localeFamilies[name]) {
	            localeFamilies[name].forEach(function (x) {
	                defineLocale(x.name, x.config);
	            });
	        }
	
	        // backwards compat for now: also set the locale
	        // make sure we set the locale AFTER all child locales have been
	        // created, so we won't end up with the child locale set.
	        getSetGlobalLocale(name);
	
	
	        return locales[name];
	    } else {
	        // useful for testing
	        delete locales[name];
	        return null;
	    }
	}
	
	function updateLocale(name, config) {
	    if (config != null) {
	        var locale, parentConfig = baseConfig;
	        // MERGE
	        if (locales[name] != null) {
	            parentConfig = locales[name]._config;
	        }
	        config = mergeConfigs(parentConfig, config);
	        locale = new Locale(config);
	        locale.parentLocale = locales[name];
	        locales[name] = locale;
	
	        // backwards compat for now: also set the locale
	        getSetGlobalLocale(name);
	    } else {
	        // pass null for config to unupdate, useful for tests
	        if (locales[name] != null) {
	            if (locales[name].parentLocale != null) {
	                locales[name] = locales[name].parentLocale;
	            } else if (locales[name] != null) {
	                delete locales[name];
	            }
	        }
	    }
	    return locales[name];
	}
	
	// returns locale data
	function getLocale (key) {
	    var locale;
	
	    if (key && key._locale && key._locale._abbr) {
	        key = key._locale._abbr;
	    }
	
	    if (!key) {
	        return globalLocale;
	    }
	
	    if (!isArray(key)) {
	        //short-circuit everything else
	        locale = loadLocale(key);
	        if (locale) {
	            return locale;
	        }
	        key = [key];
	    }
	
	    return chooseLocale(key);
	}
	
	function listLocales() {
	    return keys$1(locales);
	}
	
	function checkOverflow (m) {
	    var overflow;
	    var a = m._a;
	
	    if (a && getParsingFlags(m).overflow === -2) {
	        overflow =
	            a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
	            a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
	            a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
	            a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
	            a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
	            a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
	            -1;
	
	        if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
	            overflow = DATE;
	        }
	        if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
	            overflow = WEEK;
	        }
	        if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
	            overflow = WEEKDAY;
	        }
	
	        getParsingFlags(m).overflow = overflow;
	    }
	
	    return m;
	}
	
	// iso 8601 regex
	// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
	var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
	var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
	
	var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;
	
	var isoDates = [
	    ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
	    ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
	    ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
	    ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
	    ['YYYY-DDD', /\d{4}-\d{3}/],
	    ['YYYY-MM', /\d{4}-\d\d/, false],
	    ['YYYYYYMMDD', /[+-]\d{10}/],
	    ['YYYYMMDD', /\d{8}/],
	    // YYYYMM is NOT allowed by the standard
	    ['GGGG[W]WWE', /\d{4}W\d{3}/],
	    ['GGGG[W]WW', /\d{4}W\d{2}/, false],
	    ['YYYYDDD', /\d{7}/]
	];
	
	// iso time formats and regexes
	var isoTimes = [
	    ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
	    ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
	    ['HH:mm:ss', /\d\d:\d\d:\d\d/],
	    ['HH:mm', /\d\d:\d\d/],
	    ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
	    ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
	    ['HHmmss', /\d\d\d\d\d\d/],
	    ['HHmm', /\d\d\d\d/],
	    ['HH', /\d\d/]
	];
	
	var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;
	
	// date from iso format
	function configFromISO(config) {
	    var i, l,
	        string = config._i,
	        match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
	        allowTime, dateFormat, timeFormat, tzFormat;
	
	    if (match) {
	        getParsingFlags(config).iso = true;
	
	        for (i = 0, l = isoDates.length; i < l; i++) {
	            if (isoDates[i][1].exec(match[1])) {
	                dateFormat = isoDates[i][0];
	                allowTime = isoDates[i][2] !== false;
	                break;
	            }
	        }
	        if (dateFormat == null) {
	            config._isValid = false;
	            return;
	        }
	        if (match[3]) {
	            for (i = 0, l = isoTimes.length; i < l; i++) {
	                if (isoTimes[i][1].exec(match[3])) {
	                    // match[2] should be 'T' or space
	                    timeFormat = (match[2] || ' ') + isoTimes[i][0];
	                    break;
	                }
	            }
	            if (timeFormat == null) {
	                config._isValid = false;
	                return;
	            }
	        }
	        if (!allowTime && timeFormat != null) {
	            config._isValid = false;
	            return;
	        }
	        if (match[4]) {
	            if (tzRegex.exec(match[4])) {
	                tzFormat = 'Z';
	            } else {
	                config._isValid = false;
	                return;
	            }
	        }
	        config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
	        configFromStringAndFormat(config);
	    } else {
	        config._isValid = false;
	    }
	}
	
	// date from iso format or fallback
	function configFromString(config) {
	    var matched = aspNetJsonRegex.exec(config._i);
	
	    if (matched !== null) {
	        config._d = new Date(+matched[1]);
	        return;
	    }
	
	    configFromISO(config);
	    if (config._isValid === false) {
	        delete config._isValid;
	        hooks.createFromInputFallback(config);
	    }
	}
	
	hooks.createFromInputFallback = deprecate(
	    'value provided is not in a recognized ISO format. moment construction falls back to js Date(), ' +
	    'which is not reliable across all browsers and versions. Non ISO date formats are ' +
	    'discouraged and will be removed in an upcoming major release. Please refer to ' +
	    'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
	    function (config) {
	        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
	    }
	);
	
	// Pick the first defined of two or three arguments.
	function defaults(a, b, c) {
	    if (a != null) {
	        return a;
	    }
	    if (b != null) {
	        return b;
	    }
	    return c;
	}
	
	function currentDateArray(config) {
	    // hooks is actually the exported moment object
	    var nowValue = new Date(hooks.now());
	    if (config._useUTC) {
	        return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
	    }
	    return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
	}
	
	// convert an array to a date.
	// the array should mirror the parameters below
	// note: all values past the year are optional and will default to the lowest possible value.
	// [year, month, day , hour, minute, second, millisecond]
	function configFromArray (config) {
	    var i, date, input = [], currentDate, yearToUse;
	
	    if (config._d) {
	        return;
	    }
	
	    currentDate = currentDateArray(config);
	
	    //compute day of the year from weeks and weekdays
	    if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
	        dayOfYearFromWeekInfo(config);
	    }
	
	    //if the day of the year is set, figure out what it is
	    if (config._dayOfYear) {
	        yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
	
	        if (config._dayOfYear > daysInYear(yearToUse)) {
	            getParsingFlags(config)._overflowDayOfYear = true;
	        }
	
	        date = createUTCDate(yearToUse, 0, config._dayOfYear);
	        config._a[MONTH] = date.getUTCMonth();
	        config._a[DATE] = date.getUTCDate();
	    }
	
	    // Default to current date.
	    // * if no year, month, day of month are given, default to today
	    // * if day of month is given, default month and year
	    // * if month is given, default only year
	    // * if year is given, don't default anything
	    for (i = 0; i < 3 && config._a[i] == null; ++i) {
	        config._a[i] = input[i] = currentDate[i];
	    }
	
	    // Zero out whatever was not defaulted, including time
	    for (; i < 7; i++) {
	        config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
	    }
	
	    // Check for 24:00:00.000
	    if (config._a[HOUR] === 24 &&
	            config._a[MINUTE] === 0 &&
	            config._a[SECOND] === 0 &&
	            config._a[MILLISECOND] === 0) {
	        config._nextDay = true;
	        config._a[HOUR] = 0;
	    }
	
	    config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
	    // Apply timezone offset from input. The actual utcOffset can be changed
	    // with parseZone.
	    if (config._tzm != null) {
	        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
	    }
	
	    if (config._nextDay) {
	        config._a[HOUR] = 24;
	    }
	}
	
	function dayOfYearFromWeekInfo(config) {
	    var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;
	
	    w = config._w;
	    if (w.GG != null || w.W != null || w.E != null) {
	        dow = 1;
	        doy = 4;
	
	        // TODO: We need to take the current isoWeekYear, but that depends on
	        // how we interpret now (local, utc, fixed offset). So create
	        // a now version of current config (take local/utc/offset flags, and
	        // create now).
	        weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
	        week = defaults(w.W, 1);
	        weekday = defaults(w.E, 1);
	        if (weekday < 1 || weekday > 7) {
	            weekdayOverflow = true;
	        }
	    } else {
	        dow = config._locale._week.dow;
	        doy = config._locale._week.doy;
	
	        var curWeek = weekOfYear(createLocal(), dow, doy);
	
	        weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
	
	        // Default to current week.
	        week = defaults(w.w, curWeek.week);
	
	        if (w.d != null) {
	            // weekday -- low day numbers are considered next week
	            weekday = w.d;
	            if (weekday < 0 || weekday > 6) {
	                weekdayOverflow = true;
	            }
	        } else if (w.e != null) {
	            // local weekday -- counting starts from begining of week
	            weekday = w.e + dow;
	            if (w.e < 0 || w.e > 6) {
	                weekdayOverflow = true;
	            }
	        } else {
	            // default to begining of week
	            weekday = dow;
	        }
	    }
	    if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
	        getParsingFlags(config)._overflowWeeks = true;
	    } else if (weekdayOverflow != null) {
	        getParsingFlags(config)._overflowWeekday = true;
	    } else {
	        temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
	        config._a[YEAR] = temp.year;
	        config._dayOfYear = temp.dayOfYear;
	    }
	}
	
	// constant that refers to the ISO standard
	hooks.ISO_8601 = function () {};
	
	// date from string and format string
	function configFromStringAndFormat(config) {
	    // TODO: Move this to another part of the creation flow to prevent circular deps
	    if (config._f === hooks.ISO_8601) {
	        configFromISO(config);
	        return;
	    }
	
	    config._a = [];
	    getParsingFlags(config).empty = true;
	
	    // This array is used to make a Date, either with `new Date` or `Date.UTC`
	    var string = '' + config._i,
	        i, parsedInput, tokens, token, skipped,
	        stringLength = string.length,
	        totalParsedInputLength = 0;
	
	    tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];
	
	    for (i = 0; i < tokens.length; i++) {
	        token = tokens[i];
	        parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
	        // console.log('token', token, 'parsedInput', parsedInput,
	        //         'regex', getParseRegexForToken(token, config));
	        if (parsedInput) {
	            skipped = string.substr(0, string.indexOf(parsedInput));
	            if (skipped.length > 0) {
	                getParsingFlags(config).unusedInput.push(skipped);
	            }
	            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
	            totalParsedInputLength += parsedInput.length;
	        }
	        // don't parse if it's not a known token
	        if (formatTokenFunctions[token]) {
	            if (parsedInput) {
	                getParsingFlags(config).empty = false;
	            }
	            else {
	                getParsingFlags(config).unusedTokens.push(token);
	            }
	            addTimeToArrayFromToken(token, parsedInput, config);
	        }
	        else if (config._strict && !parsedInput) {
	            getParsingFlags(config).unusedTokens.push(token);
	        }
	    }
	
	    // add remaining unparsed input length to the string
	    getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
	    if (string.length > 0) {
	        getParsingFlags(config).unusedInput.push(string);
	    }
	
	    // clear _12h flag if hour is <= 12
	    if (config._a[HOUR] <= 12 &&
	        getParsingFlags(config).bigHour === true &&
	        config._a[HOUR] > 0) {
	        getParsingFlags(config).bigHour = undefined;
	    }
	
	    getParsingFlags(config).parsedDateParts = config._a.slice(0);
	    getParsingFlags(config).meridiem = config._meridiem;
	    // handle meridiem
	    config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
	
	    configFromArray(config);
	    checkOverflow(config);
	}
	
	
	function meridiemFixWrap (locale, hour, meridiem) {
	    var isPm;
	
	    if (meridiem == null) {
	        // nothing to do
	        return hour;
	    }
	    if (locale.meridiemHour != null) {
	        return locale.meridiemHour(hour, meridiem);
	    } else if (locale.isPM != null) {
	        // Fallback
	        isPm = locale.isPM(meridiem);
	        if (isPm && hour < 12) {
	            hour += 12;
	        }
	        if (!isPm && hour === 12) {
	            hour = 0;
	        }
	        return hour;
	    } else {
	        // this is not supposed to happen
	        return hour;
	    }
	}
	
	// date from string and array of format strings
	function configFromStringAndArray(config) {
	    var tempConfig,
	        bestMoment,
	
	        scoreToBeat,
	        i,
	        currentScore;
	
	    if (config._f.length === 0) {
	        getParsingFlags(config).invalidFormat = true;
	        config._d = new Date(NaN);
	        return;
	    }
	
	    for (i = 0; i < config._f.length; i++) {
	        currentScore = 0;
	        tempConfig = copyConfig({}, config);
	        if (config._useUTC != null) {
	            tempConfig._useUTC = config._useUTC;
	        }
	        tempConfig._f = config._f[i];
	        configFromStringAndFormat(tempConfig);
	
	        if (!isValid(tempConfig)) {
	            continue;
	        }
	
	        // if there is any input that was not parsed add a penalty for that format
	        currentScore += getParsingFlags(tempConfig).charsLeftOver;
	
	        //or tokens
	        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
	
	        getParsingFlags(tempConfig).score = currentScore;
	
	        if (scoreToBeat == null || currentScore < scoreToBeat) {
	            scoreToBeat = currentScore;
	            bestMoment = tempConfig;
	        }
	    }
	
	    extend(config, bestMoment || tempConfig);
	}
	
	function configFromObject(config) {
	    if (config._d) {
	        return;
	    }
	
	    var i = normalizeObjectUnits(config._i);
	    config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
	        return obj && parseInt(obj, 10);
	    });
	
	    configFromArray(config);
	}
	
	function createFromConfig (config) {
	    var res = new Moment(checkOverflow(prepareConfig(config)));
	    if (res._nextDay) {
	        // Adding is smart enough around DST
	        res.add(1, 'd');
	        res._nextDay = undefined;
	    }
	
	    return res;
	}
	
	function prepareConfig (config) {
	    var input = config._i,
	        format = config._f;
	
	    config._locale = config._locale || getLocale(config._l);
	
	    if (input === null || (format === undefined && input === '')) {
	        return createInvalid({nullInput: true});
	    }
	
	    if (typeof input === 'string') {
	        config._i = input = config._locale.preparse(input);
	    }
	
	    if (isMoment(input)) {
	        return new Moment(checkOverflow(input));
	    } else if (isDate(input)) {
	        config._d = input;
	    } else if (isArray(format)) {
	        configFromStringAndArray(config);
	    } else if (format) {
	        configFromStringAndFormat(config);
	    }  else {
	        configFromInput(config);
	    }
	
	    if (!isValid(config)) {
	        config._d = null;
	    }
	
	    return config;
	}
	
	function configFromInput(config) {
	    var input = config._i;
	    if (input === undefined) {
	        config._d = new Date(hooks.now());
	    } else if (isDate(input)) {
	        config._d = new Date(input.valueOf());
	    } else if (typeof input === 'string') {
	        configFromString(config);
	    } else if (isArray(input)) {
	        config._a = map(input.slice(0), function (obj) {
	            return parseInt(obj, 10);
	        });
	        configFromArray(config);
	    } else if (typeof(input) === 'object') {
	        configFromObject(config);
	    } else if (isNumber(input)) {
	        // from milliseconds
	        config._d = new Date(input);
	    } else {
	        hooks.createFromInputFallback(config);
	    }
	}
	
	function createLocalOrUTC (input, format, locale, strict, isUTC) {
	    var c = {};
	
	    if (locale === true || locale === false) {
	        strict = locale;
	        locale = undefined;
	    }
	
	    if ((isObject(input) && isObjectEmpty(input)) ||
	            (isArray(input) && input.length === 0)) {
	        input = undefined;
	    }
	    // object construction must be done this way.
	    // https://github.com/moment/moment/issues/1423
	    c._isAMomentObject = true;
	    c._useUTC = c._isUTC = isUTC;
	    c._l = locale;
	    c._i = input;
	    c._f = format;
	    c._strict = strict;
	
	    return createFromConfig(c);
	}
	
	function createLocal (input, format, locale, strict) {
	    return createLocalOrUTC(input, format, locale, strict, false);
	}
	
	var prototypeMin = deprecate(
	    'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
	    function () {
	        var other = createLocal.apply(null, arguments);
	        if (this.isValid() && other.isValid()) {
	            return other < this ? this : other;
	        } else {
	            return createInvalid();
	        }
	    }
	);
	
	var prototypeMax = deprecate(
	    'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
	    function () {
	        var other = createLocal.apply(null, arguments);
	        if (this.isValid() && other.isValid()) {
	            return other > this ? this : other;
	        } else {
	            return createInvalid();
	        }
	    }
	);
	
	// Pick a moment m from moments so that m[fn](other) is true for all
	// other. This relies on the function fn to be transitive.
	//
	// moments should either be an array of moment objects or an array, whose
	// first element is an array of moment objects.
	function pickBy(fn, moments) {
	    var res, i;
	    if (moments.length === 1 && isArray(moments[0])) {
	        moments = moments[0];
	    }
	    if (!moments.length) {
	        return createLocal();
	    }
	    res = moments[0];
	    for (i = 1; i < moments.length; ++i) {
	        if (!moments[i].isValid() || moments[i][fn](res)) {
	            res = moments[i];
	        }
	    }
	    return res;
	}
	
	// TODO: Use [].sort instead?
	function min () {
	    var args = [].slice.call(arguments, 0);
	
	    return pickBy('isBefore', args);
	}
	
	function max () {
	    var args = [].slice.call(arguments, 0);
	
	    return pickBy('isAfter', args);
	}
	
	var now = function () {
	    return Date.now ? Date.now() : +(new Date());
	};
	
	function Duration (duration) {
	    var normalizedInput = normalizeObjectUnits(duration),
	        years = normalizedInput.year || 0,
	        quarters = normalizedInput.quarter || 0,
	        months = normalizedInput.month || 0,
	        weeks = normalizedInput.week || 0,
	        days = normalizedInput.day || 0,
	        hours = normalizedInput.hour || 0,
	        minutes = normalizedInput.minute || 0,
	        seconds = normalizedInput.second || 0,
	        milliseconds = normalizedInput.millisecond || 0;
	
	    // representation for dateAddRemove
	    this._milliseconds = +milliseconds +
	        seconds * 1e3 + // 1000
	        minutes * 6e4 + // 1000 * 60
	        hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
	    // Because of dateAddRemove treats 24 hours as different from a
	    // day when working around DST, we need to store them separately
	    this._days = +days +
	        weeks * 7;
	    // It is impossible translate months into days without knowing
	    // which months you are are talking about, so we have to store
	    // it separately.
	    this._months = +months +
	        quarters * 3 +
	        years * 12;
	
	    this._data = {};
	
	    this._locale = getLocale();
	
	    this._bubble();
	}
	
	function isDuration (obj) {
	    return obj instanceof Duration;
	}
	
	function absRound (number) {
	    if (number < 0) {
	        return Math.round(-1 * number) * -1;
	    } else {
	        return Math.round(number);
	    }
	}
	
	// FORMATTING
	
	function offset (token, separator) {
	    addFormatToken(token, 0, 0, function () {
	        var offset = this.utcOffset();
	        var sign = '+';
	        if (offset < 0) {
	            offset = -offset;
	            sign = '-';
	        }
	        return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
	    });
	}
	
	offset('Z', ':');
	offset('ZZ', '');
	
	// PARSING
	
	addRegexToken('Z',  matchShortOffset);
	addRegexToken('ZZ', matchShortOffset);
	addParseToken(['Z', 'ZZ'], function (input, array, config) {
	    config._useUTC = true;
	    config._tzm = offsetFromString(matchShortOffset, input);
	});
	
	// HELPERS
	
	// timezone chunker
	// '+10:00' > ['10',  '00']
	// '-1530'  > ['-15', '30']
	var chunkOffset = /([\+\-]|\d\d)/gi;
	
	function offsetFromString(matcher, string) {
	    var matches = (string || '').match(matcher);
	
	    if (matches === null) {
	        return null;
	    }
	
	    var chunk   = matches[matches.length - 1] || [];
	    var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
	    var minutes = +(parts[1] * 60) + toInt(parts[2]);
	
	    return minutes === 0 ?
	      0 :
	      parts[0] === '+' ? minutes : -minutes;
	}
	
	// Return a moment from input, that is local/utc/zone equivalent to model.
	function cloneWithOffset(input, model) {
	    var res, diff;
	    if (model._isUTC) {
	        res = model.clone();
	        diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
	        // Use low-level api, because this fn is low-level api.
	        res._d.setTime(res._d.valueOf() + diff);
	        hooks.updateOffset(res, false);
	        return res;
	    } else {
	        return createLocal(input).local();
	    }
	}
	
	function getDateOffset (m) {
	    // On Firefox.24 Date#getTimezoneOffset returns a floating point.
	    // https://github.com/moment/moment/pull/1871
	    return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
	}
	
	// HOOKS
	
	// This function will be called whenever a moment is mutated.
	// It is intended to keep the offset in sync with the timezone.
	hooks.updateOffset = function () {};
	
	// MOMENTS
	
	// keepLocalTime = true means only change the timezone, without
	// affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
	// 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
	// +0200, so we adjust the time as needed, to be valid.
	//
	// Keeping the time actually adds/subtracts (one hour)
	// from the actual represented time. That is why we call updateOffset
	// a second time. In case it wants us to change the offset again
	// _changeInProgress == true case, then we have to adjust, because
	// there is no such time in the given timezone.
	function getSetOffset (input, keepLocalTime) {
	    var offset = this._offset || 0,
	        localAdjust;
	    if (!this.isValid()) {
	        return input != null ? this : NaN;
	    }
	    if (input != null) {
	        if (typeof input === 'string') {
	            input = offsetFromString(matchShortOffset, input);
	            if (input === null) {
	                return this;
	            }
	        } else if (Math.abs(input) < 16) {
	            input = input * 60;
	        }
	        if (!this._isUTC && keepLocalTime) {
	            localAdjust = getDateOffset(this);
	        }
	        this._offset = input;
	        this._isUTC = true;
	        if (localAdjust != null) {
	            this.add(localAdjust, 'm');
	        }
	        if (offset !== input) {
	            if (!keepLocalTime || this._changeInProgress) {
	                addSubtract(this, createDuration(input - offset, 'm'), 1, false);
	            } else if (!this._changeInProgress) {
	                this._changeInProgress = true;
	                hooks.updateOffset(this, true);
	                this._changeInProgress = null;
	            }
	        }
	        return this;
	    } else {
	        return this._isUTC ? offset : getDateOffset(this);
	    }
	}
	
	function getSetZone (input, keepLocalTime) {
	    if (input != null) {
	        if (typeof input !== 'string') {
	            input = -input;
	        }
	
	        this.utcOffset(input, keepLocalTime);
	
	        return this;
	    } else {
	        return -this.utcOffset();
	    }
	}
	
	function setOffsetToUTC (keepLocalTime) {
	    return this.utcOffset(0, keepLocalTime);
	}
	
	function setOffsetToLocal (keepLocalTime) {
	    if (this._isUTC) {
	        this.utcOffset(0, keepLocalTime);
	        this._isUTC = false;
	
	        if (keepLocalTime) {
	            this.subtract(getDateOffset(this), 'm');
	        }
	    }
	    return this;
	}
	
	function setOffsetToParsedOffset () {
	    if (this._tzm != null) {
	        this.utcOffset(this._tzm);
	    } else if (typeof this._i === 'string') {
	        var tZone = offsetFromString(matchOffset, this._i);
	        if (tZone != null) {
	            this.utcOffset(tZone);
	        }
	        else {
	            this.utcOffset(0, true);
	        }
	    }
	    return this;
	}
	
	function hasAlignedHourOffset (input) {
	    if (!this.isValid()) {
	        return false;
	    }
	    input = input ? createLocal(input).utcOffset() : 0;
	
	    return (this.utcOffset() - input) % 60 === 0;
	}
	
	function isDaylightSavingTime () {
	    return (
	        this.utcOffset() > this.clone().month(0).utcOffset() ||
	        this.utcOffset() > this.clone().month(5).utcOffset()
	    );
	}
	
	function isDaylightSavingTimeShifted () {
	    if (!isUndefined(this._isDSTShifted)) {
	        return this._isDSTShifted;
	    }
	
	    var c = {};
	
	    copyConfig(c, this);
	    c = prepareConfig(c);
	
	    if (c._a) {
	        var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
	        this._isDSTShifted = this.isValid() &&
	            compareArrays(c._a, other.toArray()) > 0;
	    } else {
	        this._isDSTShifted = false;
	    }
	
	    return this._isDSTShifted;
	}
	
	function isLocal () {
	    return this.isValid() ? !this._isUTC : false;
	}
	
	function isUtcOffset () {
	    return this.isValid() ? this._isUTC : false;
	}
	
	function isUtc () {
	    return this.isValid() ? this._isUTC && this._offset === 0 : false;
	}
	
	// ASP.NET json date format regex
	var aspNetRegex = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;
	
	// from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
	// somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
	// and further modified to allow for strings containing both week and day
	var isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;
	
	function createDuration (input, key) {
	    var duration = input,
	        // matching against regexp is expensive, do it on demand
	        match = null,
	        sign,
	        ret,
	        diffRes;
	
	    if (isDuration(input)) {
	        duration = {
	            ms : input._milliseconds,
	            d  : input._days,
	            M  : input._months
	        };
	    } else if (isNumber(input)) {
	        duration = {};
	        if (key) {
	            duration[key] = input;
	        } else {
	            duration.milliseconds = input;
	        }
	    } else if (!!(match = aspNetRegex.exec(input))) {
	        sign = (match[1] === '-') ? -1 : 1;
	        duration = {
	            y  : 0,
	            d  : toInt(match[DATE])                         * sign,
	            h  : toInt(match[HOUR])                         * sign,
	            m  : toInt(match[MINUTE])                       * sign,
	            s  : toInt(match[SECOND])                       * sign,
	            ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
	        };
	    } else if (!!(match = isoRegex.exec(input))) {
	        sign = (match[1] === '-') ? -1 : 1;
	        duration = {
	            y : parseIso(match[2], sign),
	            M : parseIso(match[3], sign),
	            w : parseIso(match[4], sign),
	            d : parseIso(match[5], sign),
	            h : parseIso(match[6], sign),
	            m : parseIso(match[7], sign),
	            s : parseIso(match[8], sign)
	        };
	    } else if (duration == null) {// checks for null or undefined
	        duration = {};
	    } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
	        diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
	
	        duration = {};
	        duration.ms = diffRes.milliseconds;
	        duration.M = diffRes.months;
	    }
	
	    ret = new Duration(duration);
	
	    if (isDuration(input) && hasOwnProp(input, '_locale')) {
	        ret._locale = input._locale;
	    }
	
	    return ret;
	}
	
	createDuration.fn = Duration.prototype;
	
	function parseIso (inp, sign) {
	    // We'd normally use ~~inp for this, but unfortunately it also
	    // converts floats to ints.
	    // inp may be undefined, so careful calling replace on it.
	    var res = inp && parseFloat(inp.replace(',', '.'));
	    // apply sign while we're at it
	    return (isNaN(res) ? 0 : res) * sign;
	}
	
	function positiveMomentsDifference(base, other) {
	    var res = {milliseconds: 0, months: 0};
	
	    res.months = other.month() - base.month() +
	        (other.year() - base.year()) * 12;
	    if (base.clone().add(res.months, 'M').isAfter(other)) {
	        --res.months;
	    }
	
	    res.milliseconds = +other - +(base.clone().add(res.months, 'M'));
	
	    return res;
	}
	
	function momentsDifference(base, other) {
	    var res;
	    if (!(base.isValid() && other.isValid())) {
	        return {milliseconds: 0, months: 0};
	    }
	
	    other = cloneWithOffset(other, base);
	    if (base.isBefore(other)) {
	        res = positiveMomentsDifference(base, other);
	    } else {
	        res = positiveMomentsDifference(other, base);
	        res.milliseconds = -res.milliseconds;
	        res.months = -res.months;
	    }
	
	    return res;
	}
	
	// TODO: remove 'name' arg after deprecation is removed
	function createAdder(direction, name) {
	    return function (val, period) {
	        var dur, tmp;
	        //invert the arguments, but complain about it
	        if (period !== null && !isNaN(+period)) {
	            deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
	            'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
	            tmp = val; val = period; period = tmp;
	        }
	
	        val = typeof val === 'string' ? +val : val;
	        dur = createDuration(val, period);
	        addSubtract(this, dur, direction);
	        return this;
	    };
	}
	
	function addSubtract (mom, duration, isAdding, updateOffset) {
	    var milliseconds = duration._milliseconds,
	        days = absRound(duration._days),
	        months = absRound(duration._months);
	
	    if (!mom.isValid()) {
	        // No op
	        return;
	    }
	
	    updateOffset = updateOffset == null ? true : updateOffset;
	
	    if (milliseconds) {
	        mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
	    }
	    if (days) {
	        set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
	    }
	    if (months) {
	        setMonth(mom, get(mom, 'Month') + months * isAdding);
	    }
	    if (updateOffset) {
	        hooks.updateOffset(mom, days || months);
	    }
	}
	
	var add      = createAdder(1, 'add');
	var subtract = createAdder(-1, 'subtract');
	
	function getCalendarFormat(myMoment, now) {
	    var diff = myMoment.diff(now, 'days', true);
	    return diff < -6 ? 'sameElse' :
	            diff < -1 ? 'lastWeek' :
	            diff < 0 ? 'lastDay' :
	            diff < 1 ? 'sameDay' :
	            diff < 2 ? 'nextDay' :
	            diff < 7 ? 'nextWeek' : 'sameElse';
	}
	
	function calendar$1 (time, formats) {
	    // We want to compare the start of today, vs this.
	    // Getting start-of-today depends on whether we're local/utc/offset or not.
	    var now = time || createLocal(),
	        sod = cloneWithOffset(now, this).startOf('day'),
	        format = hooks.calendarFormat(this, sod) || 'sameElse';
	
	    var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);
	
	    return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
	}
	
	function clone () {
	    return new Moment(this);
	}
	
	function isAfter (input, units) {
	    var localInput = isMoment(input) ? input : createLocal(input);
	    if (!(this.isValid() && localInput.isValid())) {
	        return false;
	    }
	    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
	    if (units === 'millisecond') {
	        return this.valueOf() > localInput.valueOf();
	    } else {
	        return localInput.valueOf() < this.clone().startOf(units).valueOf();
	    }
	}
	
	function isBefore (input, units) {
	    var localInput = isMoment(input) ? input : createLocal(input);
	    if (!(this.isValid() && localInput.isValid())) {
	        return false;
	    }
	    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
	    if (units === 'millisecond') {
	        return this.valueOf() < localInput.valueOf();
	    } else {
	        return this.clone().endOf(units).valueOf() < localInput.valueOf();
	    }
	}
	
	function isBetween (from, to, units, inclusivity) {
	    inclusivity = inclusivity || '()';
	    return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&
	        (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
	}
	
	function isSame (input, units) {
	    var localInput = isMoment(input) ? input : createLocal(input),
	        inputMs;
	    if (!(this.isValid() && localInput.isValid())) {
	        return false;
	    }
	    units = normalizeUnits(units || 'millisecond');
	    if (units === 'millisecond') {
	        return this.valueOf() === localInput.valueOf();
	    } else {
	        inputMs = localInput.valueOf();
	        return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
	    }
	}
	
	function isSameOrAfter (input, units) {
	    return this.isSame(input, units) || this.isAfter(input,units);
	}
	
	function isSameOrBefore (input, units) {
	    return this.isSame(input, units) || this.isBefore(input,units);
	}
	
	function diff (input, units, asFloat) {
	    var that,
	        zoneDelta,
	        delta, output;
	
	    if (!this.isValid()) {
	        return NaN;
	    }
	
	    that = cloneWithOffset(input, this);
	
	    if (!that.isValid()) {
	        return NaN;
	    }
	
	    zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
	
	    units = normalizeUnits(units);
	
	    if (units === 'year' || units === 'month' || units === 'quarter') {
	        output = monthDiff(this, that);
	        if (units === 'quarter') {
	            output = output / 3;
	        } else if (units === 'year') {
	            output = output / 12;
	        }
	    } else {
	        delta = this - that;
	        output = units === 'second' ? delta / 1e3 : // 1000
	            units === 'minute' ? delta / 6e4 : // 1000 * 60
	            units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
	            units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
	            units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
	            delta;
	    }
	    return asFloat ? output : absFloor(output);
	}
	
	function monthDiff (a, b) {
	    // difference in months
	    var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
	        // b is in (anchor - 1 month, anchor + 1 month)
	        anchor = a.clone().add(wholeMonthDiff, 'months'),
	        anchor2, adjust;
	
	    if (b - anchor < 0) {
	        anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
	        // linear across the month
	        adjust = (b - anchor) / (anchor - anchor2);
	    } else {
	        anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
	        // linear across the month
	        adjust = (b - anchor) / (anchor2 - anchor);
	    }
	
	    //check for negative zero, return zero if negative zero
	    return -(wholeMonthDiff + adjust) || 0;
	}
	
	hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
	hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';
	
	function toString () {
	    return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
	}
	
	function toISOString () {
	    var m = this.clone().utc();
	    if (0 < m.year() && m.year() <= 9999) {
	        if (isFunction(Date.prototype.toISOString)) {
	            // native implementation is ~50x faster, use it when we can
	            return this.toDate().toISOString();
	        } else {
	            return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
	        }
	    } else {
	        return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
	    }
	}
	
	/**
	 * Return a human readable representation of a moment that can
	 * also be evaluated to get a new moment which is the same
	 *
	 * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
	 */
	function inspect () {
	    if (!this.isValid()) {
	        return 'moment.invalid(/* ' + this._i + ' */)';
	    }
	    var func = 'moment';
	    var zone = '';
	    if (!this.isLocal()) {
	        func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
	        zone = 'Z';
	    }
	    var prefix = '[' + func + '("]';
	    var year = (0 < this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
	    var datetime = '-MM-DD[T]HH:mm:ss.SSS';
	    var suffix = zone + '[")]';
	
	    return this.format(prefix + year + datetime + suffix);
	}
	
	function format (inputString) {
	    if (!inputString) {
	        inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
	    }
	    var output = formatMoment(this, inputString);
	    return this.localeData().postformat(output);
	}
	
	function from (time, withoutSuffix) {
	    if (this.isValid() &&
	            ((isMoment(time) && time.isValid()) ||
	             createLocal(time).isValid())) {
	        return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
	    } else {
	        return this.localeData().invalidDate();
	    }
	}
	
	function fromNow (withoutSuffix) {
	    return this.from(createLocal(), withoutSuffix);
	}
	
	function to (time, withoutSuffix) {
	    if (this.isValid() &&
	            ((isMoment(time) && time.isValid()) ||
	             createLocal(time).isValid())) {
	        return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
	    } else {
	        return this.localeData().invalidDate();
	    }
	}
	
	function toNow (withoutSuffix) {
	    return this.to(createLocal(), withoutSuffix);
	}
	
	// If passed a locale key, it will set the locale for this
	// instance.  Otherwise, it will return the locale configuration
	// variables for this instance.
	function locale (key) {
	    var newLocaleData;
	
	    if (key === undefined) {
	        return this._locale._abbr;
	    } else {
	        newLocaleData = getLocale(key);
	        if (newLocaleData != null) {
	            this._locale = newLocaleData;
	        }
	        return this;
	    }
	}
	
	var lang = deprecate(
	    'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
	    function (key) {
	        if (key === undefined) {
	            return this.localeData();
	        } else {
	            return this.locale(key);
	        }
	    }
	);
	
	function localeData () {
	    return this._locale;
	}
	
	function startOf (units) {
	    units = normalizeUnits(units);
	    // the following switch intentionally omits break keywords
	    // to utilize falling through the cases.
	    switch (units) {
	        case 'year':
	            this.month(0);
	            /* falls through */
	        case 'quarter':
	        case 'month':
	            this.date(1);
	            /* falls through */
	        case 'week':
	        case 'isoWeek':
	        case 'day':
	        case 'date':
	            this.hours(0);
	            /* falls through */
	        case 'hour':
	            this.minutes(0);
	            /* falls through */
	        case 'minute':
	            this.seconds(0);
	            /* falls through */
	        case 'second':
	            this.milliseconds(0);
	    }
	
	    // weeks are a special case
	    if (units === 'week') {
	        this.weekday(0);
	    }
	    if (units === 'isoWeek') {
	        this.isoWeekday(1);
	    }
	
	    // quarters are also special
	    if (units === 'quarter') {
	        this.month(Math.floor(this.month() / 3) * 3);
	    }
	
	    return this;
	}
	
	function endOf (units) {
	    units = normalizeUnits(units);
	    if (units === undefined || units === 'millisecond') {
	        return this;
	    }
	
	    // 'date' is an alias for 'day', so it should be considered as such.
	    if (units === 'date') {
	        units = 'day';
	    }
	
	    return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
	}
	
	function valueOf () {
	    return this._d.valueOf() - ((this._offset || 0) * 60000);
	}
	
	function unix () {
	    return Math.floor(this.valueOf() / 1000);
	}
	
	function toDate () {
	    return new Date(this.valueOf());
	}
	
	function toArray () {
	    var m = this;
	    return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
	}
	
	function toObject () {
	    var m = this;
	    return {
	        years: m.year(),
	        months: m.month(),
	        date: m.date(),
	        hours: m.hours(),
	        minutes: m.minutes(),
	        seconds: m.seconds(),
	        milliseconds: m.milliseconds()
	    };
	}
	
	function toJSON () {
	    // new Date(NaN).toJSON() === null
	    return this.isValid() ? this.toISOString() : null;
	}
	
	function isValid$1 () {
	    return isValid(this);
	}
	
	function parsingFlags () {
	    return extend({}, getParsingFlags(this));
	}
	
	function invalidAt () {
	    return getParsingFlags(this).overflow;
	}
	
	function creationData() {
	    return {
	        input: this._i,
	        format: this._f,
	        locale: this._locale,
	        isUTC: this._isUTC,
	        strict: this._strict
	    };
	}
	
	// FORMATTING
	
	addFormatToken(0, ['gg', 2], 0, function () {
	    return this.weekYear() % 100;
	});
	
	addFormatToken(0, ['GG', 2], 0, function () {
	    return this.isoWeekYear() % 100;
	});
	
	function addWeekYearFormatToken (token, getter) {
	    addFormatToken(0, [token, token.length], 0, getter);
	}
	
	addWeekYearFormatToken('gggg',     'weekYear');
	addWeekYearFormatToken('ggggg',    'weekYear');
	addWeekYearFormatToken('GGGG',  'isoWeekYear');
	addWeekYearFormatToken('GGGGG', 'isoWeekYear');
	
	// ALIASES
	
	addUnitAlias('weekYear', 'gg');
	addUnitAlias('isoWeekYear', 'GG');
	
	// PRIORITY
	
	addUnitPriority('weekYear', 1);
	addUnitPriority('isoWeekYear', 1);
	
	
	// PARSING
	
	addRegexToken('G',      matchSigned);
	addRegexToken('g',      matchSigned);
	addRegexToken('GG',     match1to2, match2);
	addRegexToken('gg',     match1to2, match2);
	addRegexToken('GGGG',   match1to4, match4);
	addRegexToken('gggg',   match1to4, match4);
	addRegexToken('GGGGG',  match1to6, match6);
	addRegexToken('ggggg',  match1to6, match6);
	
	addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
	    week[token.substr(0, 2)] = toInt(input);
	});
	
	addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
	    week[token] = hooks.parseTwoDigitYear(input);
	});
	
	// MOMENTS
	
	function getSetWeekYear (input) {
	    return getSetWeekYearHelper.call(this,
	            input,
	            this.week(),
	            this.weekday(),
	            this.localeData()._week.dow,
	            this.localeData()._week.doy);
	}
	
	function getSetISOWeekYear (input) {
	    return getSetWeekYearHelper.call(this,
	            input, this.isoWeek(), this.isoWeekday(), 1, 4);
	}
	
	function getISOWeeksInYear () {
	    return weeksInYear(this.year(), 1, 4);
	}
	
	function getWeeksInYear () {
	    var weekInfo = this.localeData()._week;
	    return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
	}
	
	function getSetWeekYearHelper(input, week, weekday, dow, doy) {
	    var weeksTarget;
	    if (input == null) {
	        return weekOfYear(this, dow, doy).year;
	    } else {
	        weeksTarget = weeksInYear(input, dow, doy);
	        if (week > weeksTarget) {
	            week = weeksTarget;
	        }
	        return setWeekAll.call(this, input, week, weekday, dow, doy);
	    }
	}
	
	function setWeekAll(weekYear, week, weekday, dow, doy) {
	    var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
	        date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
	
	    this.year(date.getUTCFullYear());
	    this.month(date.getUTCMonth());
	    this.date(date.getUTCDate());
	    return this;
	}
	
	// FORMATTING
	
	addFormatToken('Q', 0, 'Qo', 'quarter');
	
	// ALIASES
	
	addUnitAlias('quarter', 'Q');
	
	// PRIORITY
	
	addUnitPriority('quarter', 7);
	
	// PARSING
	
	addRegexToken('Q', match1);
	addParseToken('Q', function (input, array) {
	    array[MONTH] = (toInt(input) - 1) * 3;
	});
	
	// MOMENTS
	
	function getSetQuarter (input) {
	    return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
	}
	
	// FORMATTING
	
	addFormatToken('D', ['DD', 2], 'Do', 'date');
	
	// ALIASES
	
	addUnitAlias('date', 'D');
	
	// PRIOROITY
	addUnitPriority('date', 9);
	
	// PARSING
	
	addRegexToken('D',  match1to2);
	addRegexToken('DD', match1to2, match2);
	addRegexToken('Do', function (isStrict, locale) {
	    return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;
	});
	
	addParseToken(['D', 'DD'], DATE);
	addParseToken('Do', function (input, array) {
	    array[DATE] = toInt(input.match(match1to2)[0], 10);
	});
	
	// MOMENTS
	
	var getSetDayOfMonth = makeGetSet('Date', true);
	
	// FORMATTING
	
	addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');
	
	// ALIASES
	
	addUnitAlias('dayOfYear', 'DDD');
	
	// PRIORITY
	addUnitPriority('dayOfYear', 4);
	
	// PARSING
	
	addRegexToken('DDD',  match1to3);
	addRegexToken('DDDD', match3);
	addParseToken(['DDD', 'DDDD'], function (input, array, config) {
	    config._dayOfYear = toInt(input);
	});
	
	// HELPERS
	
	// MOMENTS
	
	function getSetDayOfYear (input) {
	    var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
	    return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
	}
	
	// FORMATTING
	
	addFormatToken('m', ['mm', 2], 0, 'minute');
	
	// ALIASES
	
	addUnitAlias('minute', 'm');
	
	// PRIORITY
	
	addUnitPriority('minute', 14);
	
	// PARSING
	
	addRegexToken('m',  match1to2);
	addRegexToken('mm', match1to2, match2);
	addParseToken(['m', 'mm'], MINUTE);
	
	// MOMENTS
	
	var getSetMinute = makeGetSet('Minutes', false);
	
	// FORMATTING
	
	addFormatToken('s', ['ss', 2], 0, 'second');
	
	// ALIASES
	
	addUnitAlias('second', 's');
	
	// PRIORITY
	
	addUnitPriority('second', 15);
	
	// PARSING
	
	addRegexToken('s',  match1to2);
	addRegexToken('ss', match1to2, match2);
	addParseToken(['s', 'ss'], SECOND);
	
	// MOMENTS
	
	var getSetSecond = makeGetSet('Seconds', false);
	
	// FORMATTING
	
	addFormatToken('S', 0, 0, function () {
	    return ~~(this.millisecond() / 100);
	});
	
	addFormatToken(0, ['SS', 2], 0, function () {
	    return ~~(this.millisecond() / 10);
	});
	
	addFormatToken(0, ['SSS', 3], 0, 'millisecond');
	addFormatToken(0, ['SSSS', 4], 0, function () {
	    return this.millisecond() * 10;
	});
	addFormatToken(0, ['SSSSS', 5], 0, function () {
	    return this.millisecond() * 100;
	});
	addFormatToken(0, ['SSSSSS', 6], 0, function () {
	    return this.millisecond() * 1000;
	});
	addFormatToken(0, ['SSSSSSS', 7], 0, function () {
	    return this.millisecond() * 10000;
	});
	addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
	    return this.millisecond() * 100000;
	});
	addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
	    return this.millisecond() * 1000000;
	});
	
	
	// ALIASES
	
	addUnitAlias('millisecond', 'ms');
	
	// PRIORITY
	
	addUnitPriority('millisecond', 16);
	
	// PARSING
	
	addRegexToken('S',    match1to3, match1);
	addRegexToken('SS',   match1to3, match2);
	addRegexToken('SSS',  match1to3, match3);
	
	var token;
	for (token = 'SSSS'; token.length <= 9; token += 'S') {
	    addRegexToken(token, matchUnsigned);
	}
	
	function parseMs(input, array) {
	    array[MILLISECOND] = toInt(('0.' + input) * 1000);
	}
	
	for (token = 'S'; token.length <= 9; token += 'S') {
	    addParseToken(token, parseMs);
	}
	// MOMENTS
	
	var getSetMillisecond = makeGetSet('Milliseconds', false);
	
	// FORMATTING
	
	addFormatToken('z',  0, 0, 'zoneAbbr');
	addFormatToken('zz', 0, 0, 'zoneName');
	
	// MOMENTS
	
	function getZoneAbbr () {
	    return this._isUTC ? 'UTC' : '';
	}
	
	function getZoneName () {
	    return this._isUTC ? 'Coordinated Universal Time' : '';
	}
	
	var proto = Moment.prototype;
	
	proto.add               = add;
	proto.calendar          = calendar$1;
	proto.clone             = clone;
	proto.diff              = diff;
	proto.endOf             = endOf;
	proto.format            = format;
	proto.from              = from;
	proto.fromNow           = fromNow;
	proto.to                = to;
	proto.toNow             = toNow;
	proto.get               = stringGet;
	proto.invalidAt         = invalidAt;
	proto.isAfter           = isAfter;
	proto.isBefore          = isBefore;
	proto.isBetween         = isBetween;
	proto.isSame            = isSame;
	proto.isSameOrAfter     = isSameOrAfter;
	proto.isSameOrBefore    = isSameOrBefore;
	proto.isValid           = isValid$1;
	proto.lang              = lang;
	proto.locale            = locale;
	proto.localeData        = localeData;
	proto.max               = prototypeMax;
	proto.min               = prototypeMin;
	proto.parsingFlags      = parsingFlags;
	proto.set               = stringSet;
	proto.startOf           = startOf;
	proto.subtract          = subtract;
	proto.toArray           = toArray;
	proto.toObject          = toObject;
	proto.toDate            = toDate;
	proto.toISOString       = toISOString;
	proto.inspect           = inspect;
	proto.toJSON            = toJSON;
	proto.toString          = toString;
	proto.unix              = unix;
	proto.valueOf           = valueOf;
	proto.creationData      = creationData;
	
	// Year
	proto.year       = getSetYear;
	proto.isLeapYear = getIsLeapYear;
	
	// Week Year
	proto.weekYear    = getSetWeekYear;
	proto.isoWeekYear = getSetISOWeekYear;
	
	// Quarter
	proto.quarter = proto.quarters = getSetQuarter;
	
	// Month
	proto.month       = getSetMonth;
	proto.daysInMonth = getDaysInMonth;
	
	// Week
	proto.week           = proto.weeks        = getSetWeek;
	proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;
	proto.weeksInYear    = getWeeksInYear;
	proto.isoWeeksInYear = getISOWeeksInYear;
	
	// Day
	proto.date       = getSetDayOfMonth;
	proto.day        = proto.days             = getSetDayOfWeek;
	proto.weekday    = getSetLocaleDayOfWeek;
	proto.isoWeekday = getSetISODayOfWeek;
	proto.dayOfYear  = getSetDayOfYear;
	
	// Hour
	proto.hour = proto.hours = getSetHour;
	
	// Minute
	proto.minute = proto.minutes = getSetMinute;
	
	// Second
	proto.second = proto.seconds = getSetSecond;
	
	// Millisecond
	proto.millisecond = proto.milliseconds = getSetMillisecond;
	
	// Offset
	proto.utcOffset            = getSetOffset;
	proto.utc                  = setOffsetToUTC;
	proto.local                = setOffsetToLocal;
	proto.parseZone            = setOffsetToParsedOffset;
	proto.hasAlignedHourOffset = hasAlignedHourOffset;
	proto.isDST                = isDaylightSavingTime;
	proto.isLocal              = isLocal;
	proto.isUtcOffset          = isUtcOffset;
	proto.isUtc                = isUtc;
	proto.isUTC                = isUtc;
	
	// Timezone
	proto.zoneAbbr = getZoneAbbr;
	proto.zoneName = getZoneName;
	
	// Deprecations
	proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
	proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
	proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
	proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
	proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);
	
	function createUnix (input) {
	    return createLocal(input * 1000);
	}
	
	function createInZone () {
	    return createLocal.apply(null, arguments).parseZone();
	}
	
	function preParsePostFormat (string) {
	    return string;
	}
	
	var proto$1 = Locale.prototype;
	
	proto$1.calendar        = calendar;
	proto$1.longDateFormat  = longDateFormat;
	proto$1.invalidDate     = invalidDate;
	proto$1.ordinal         = ordinal;
	proto$1.preparse        = preParsePostFormat;
	proto$1.postformat      = preParsePostFormat;
	proto$1.relativeTime    = relativeTime;
	proto$1.pastFuture      = pastFuture;
	proto$1.set             = set;
	
	// Month
	proto$1.months            =        localeMonths;
	proto$1.monthsShort       =        localeMonthsShort;
	proto$1.monthsParse       =        localeMonthsParse;
	proto$1.monthsRegex       = monthsRegex;
	proto$1.monthsShortRegex  = monthsShortRegex;
	
	// Week
	proto$1.week = localeWeek;
	proto$1.firstDayOfYear = localeFirstDayOfYear;
	proto$1.firstDayOfWeek = localeFirstDayOfWeek;
	
	// Day of Week
	proto$1.weekdays       =        localeWeekdays;
	proto$1.weekdaysMin    =        localeWeekdaysMin;
	proto$1.weekdaysShort  =        localeWeekdaysShort;
	proto$1.weekdaysParse  =        localeWeekdaysParse;
	
	proto$1.weekdaysRegex       =        weekdaysRegex;
	proto$1.weekdaysShortRegex  =        weekdaysShortRegex;
	proto$1.weekdaysMinRegex    =        weekdaysMinRegex;
	
	// Hours
	proto$1.isPM = localeIsPM;
	proto$1.meridiem = localeMeridiem;
	
	function get$1 (format, index, field, setter) {
	    var locale = getLocale();
	    var utc = createUTC().set(setter, index);
	    return locale[field](utc, format);
	}
	
	function listMonthsImpl (format, index, field) {
	    if (isNumber(format)) {
	        index = format;
	        format = undefined;
	    }
	
	    format = format || '';
	
	    if (index != null) {
	        return get$1(format, index, field, 'month');
	    }
	
	    var i;
	    var out = [];
	    for (i = 0; i < 12; i++) {
	        out[i] = get$1(format, i, field, 'month');
	    }
	    return out;
	}
	
	// ()
	// (5)
	// (fmt, 5)
	// (fmt)
	// (true)
	// (true, 5)
	// (true, fmt, 5)
	// (true, fmt)
	function listWeekdaysImpl (localeSorted, format, index, field) {
	    if (typeof localeSorted === 'boolean') {
	        if (isNumber(format)) {
	            index = format;
	            format = undefined;
	        }
	
	        format = format || '';
	    } else {
	        format = localeSorted;
	        index = format;
	        localeSorted = false;
	
	        if (isNumber(format)) {
	            index = format;
	            format = undefined;
	        }
	
	        format = format || '';
	    }
	
	    var locale = getLocale(),
	        shift = localeSorted ? locale._week.dow : 0;
	
	    if (index != null) {
	        return get$1(format, (index + shift) % 7, field, 'day');
	    }
	
	    var i;
	    var out = [];
	    for (i = 0; i < 7; i++) {
	        out[i] = get$1(format, (i + shift) % 7, field, 'day');
	    }
	    return out;
	}
	
	function listMonths (format, index) {
	    return listMonthsImpl(format, index, 'months');
	}
	
	function listMonthsShort (format, index) {
	    return listMonthsImpl(format, index, 'monthsShort');
	}
	
	function listWeekdays (localeSorted, format, index) {
	    return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
	}
	
	function listWeekdaysShort (localeSorted, format, index) {
	    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
	}
	
	function listWeekdaysMin (localeSorted, format, index) {
	    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
	}
	
	getSetGlobalLocale('en', {
	    ordinalParse: /\d{1,2}(th|st|nd|rd)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (toInt(number % 100 / 10) === 1) ? 'th' :
	            (b === 1) ? 'st' :
	            (b === 2) ? 'nd' :
	            (b === 3) ? 'rd' : 'th';
	        return number + output;
	    }
	});
	
	// Side effect imports
	hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
	hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);
	
	var mathAbs = Math.abs;
	
	function abs () {
	    var data           = this._data;
	
	    this._milliseconds = mathAbs(this._milliseconds);
	    this._days         = mathAbs(this._days);
	    this._months       = mathAbs(this._months);
	
	    data.milliseconds  = mathAbs(data.milliseconds);
	    data.seconds       = mathAbs(data.seconds);
	    data.minutes       = mathAbs(data.minutes);
	    data.hours         = mathAbs(data.hours);
	    data.months        = mathAbs(data.months);
	    data.years         = mathAbs(data.years);
	
	    return this;
	}
	
	function addSubtract$1 (duration, input, value, direction) {
	    var other = createDuration(input, value);
	
	    duration._milliseconds += direction * other._milliseconds;
	    duration._days         += direction * other._days;
	    duration._months       += direction * other._months;
	
	    return duration._bubble();
	}
	
	// supports only 2.0-style add(1, 's') or add(duration)
	function add$1 (input, value) {
	    return addSubtract$1(this, input, value, 1);
	}
	
	// supports only 2.0-style subtract(1, 's') or subtract(duration)
	function subtract$1 (input, value) {
	    return addSubtract$1(this, input, value, -1);
	}
	
	function absCeil (number) {
	    if (number < 0) {
	        return Math.floor(number);
	    } else {
	        return Math.ceil(number);
	    }
	}
	
	function bubble () {
	    var milliseconds = this._milliseconds;
	    var days         = this._days;
	    var months       = this._months;
	    var data         = this._data;
	    var seconds, minutes, hours, years, monthsFromDays;
	
	    // if we have a mix of positive and negative values, bubble down first
	    // check: https://github.com/moment/moment/issues/2166
	    if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
	            (milliseconds <= 0 && days <= 0 && months <= 0))) {
	        milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
	        days = 0;
	        months = 0;
	    }
	
	    // The following code bubbles up values, see the tests for
	    // examples of what that means.
	    data.milliseconds = milliseconds % 1000;
	
	    seconds           = absFloor(milliseconds / 1000);
	    data.seconds      = seconds % 60;
	
	    minutes           = absFloor(seconds / 60);
	    data.minutes      = minutes % 60;
	
	    hours             = absFloor(minutes / 60);
	    data.hours        = hours % 24;
	
	    days += absFloor(hours / 24);
	
	    // convert days to months
	    monthsFromDays = absFloor(daysToMonths(days));
	    months += monthsFromDays;
	    days -= absCeil(monthsToDays(monthsFromDays));
	
	    // 12 months -> 1 year
	    years = absFloor(months / 12);
	    months %= 12;
	
	    data.days   = days;
	    data.months = months;
	    data.years  = years;
	
	    return this;
	}
	
	function daysToMonths (days) {
	    // 400 years have 146097 days (taking into account leap year rules)
	    // 400 years have 12 months === 4800
	    return days * 4800 / 146097;
	}
	
	function monthsToDays (months) {
	    // the reverse of daysToMonths
	    return months * 146097 / 4800;
	}
	
	function as (units) {
	    var days;
	    var months;
	    var milliseconds = this._milliseconds;
	
	    units = normalizeUnits(units);
	
	    if (units === 'month' || units === 'year') {
	        days   = this._days   + milliseconds / 864e5;
	        months = this._months + daysToMonths(days);
	        return units === 'month' ? months : months / 12;
	    } else {
	        // handle milliseconds separately because of floating point math errors (issue #1867)
	        days = this._days + Math.round(monthsToDays(this._months));
	        switch (units) {
	            case 'week'   : return days / 7     + milliseconds / 6048e5;
	            case 'day'    : return days         + milliseconds / 864e5;
	            case 'hour'   : return days * 24    + milliseconds / 36e5;
	            case 'minute' : return days * 1440  + milliseconds / 6e4;
	            case 'second' : return days * 86400 + milliseconds / 1000;
	            // Math.floor prevents floating point math errors here
	            case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
	            default: throw new Error('Unknown unit ' + units);
	        }
	    }
	}
	
	// TODO: Use this.as('ms')?
	function valueOf$1 () {
	    return (
	        this._milliseconds +
	        this._days * 864e5 +
	        (this._months % 12) * 2592e6 +
	        toInt(this._months / 12) * 31536e6
	    );
	}
	
	function makeAs (alias) {
	    return function () {
	        return this.as(alias);
	    };
	}
	
	var asMilliseconds = makeAs('ms');
	var asSeconds      = makeAs('s');
	var asMinutes      = makeAs('m');
	var asHours        = makeAs('h');
	var asDays         = makeAs('d');
	var asWeeks        = makeAs('w');
	var asMonths       = makeAs('M');
	var asYears        = makeAs('y');
	
	function get$2 (units) {
	    units = normalizeUnits(units);
	    return this[units + 's']();
	}
	
	function makeGetter(name) {
	    return function () {
	        return this._data[name];
	    };
	}
	
	var milliseconds = makeGetter('milliseconds');
	var seconds      = makeGetter('seconds');
	var minutes      = makeGetter('minutes');
	var hours        = makeGetter('hours');
	var days         = makeGetter('days');
	var months       = makeGetter('months');
	var years        = makeGetter('years');
	
	function weeks () {
	    return absFloor(this.days() / 7);
	}
	
	var round = Math.round;
	var thresholds = {
	    s: 45,  // seconds to minute
	    m: 45,  // minutes to hour
	    h: 22,  // hours to day
	    d: 26,  // days to month
	    M: 11   // months to year
	};
	
	// helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
	function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
	    return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
	}
	
	function relativeTime$1 (posNegDuration, withoutSuffix, locale) {
	    var duration = createDuration(posNegDuration).abs();
	    var seconds  = round(duration.as('s'));
	    var minutes  = round(duration.as('m'));
	    var hours    = round(duration.as('h'));
	    var days     = round(duration.as('d'));
	    var months   = round(duration.as('M'));
	    var years    = round(duration.as('y'));
	
	    var a = seconds < thresholds.s && ['s', seconds]  ||
	            minutes <= 1           && ['m']           ||
	            minutes < thresholds.m && ['mm', minutes] ||
	            hours   <= 1           && ['h']           ||
	            hours   < thresholds.h && ['hh', hours]   ||
	            days    <= 1           && ['d']           ||
	            days    < thresholds.d && ['dd', days]    ||
	            months  <= 1           && ['M']           ||
	            months  < thresholds.M && ['MM', months]  ||
	            years   <= 1           && ['y']           || ['yy', years];
	
	    a[2] = withoutSuffix;
	    a[3] = +posNegDuration > 0;
	    a[4] = locale;
	    return substituteTimeAgo.apply(null, a);
	}
	
	// This function allows you to set the rounding function for relative time strings
	function getSetRelativeTimeRounding (roundingFunction) {
	    if (roundingFunction === undefined) {
	        return round;
	    }
	    if (typeof(roundingFunction) === 'function') {
	        round = roundingFunction;
	        return true;
	    }
	    return false;
	}
	
	// This function allows you to set a threshold for relative time strings
	function getSetRelativeTimeThreshold (threshold, limit) {
	    if (thresholds[threshold] === undefined) {
	        return false;
	    }
	    if (limit === undefined) {
	        return thresholds[threshold];
	    }
	    thresholds[threshold] = limit;
	    return true;
	}
	
	function humanize (withSuffix) {
	    var locale = this.localeData();
	    var output = relativeTime$1(this, !withSuffix, locale);
	
	    if (withSuffix) {
	        output = locale.pastFuture(+this, output);
	    }
	
	    return locale.postformat(output);
	}
	
	var abs$1 = Math.abs;
	
	function toISOString$1() {
	    // for ISO strings we do not use the normal bubbling rules:
	    //  * milliseconds bubble up until they become hours
	    //  * days do not bubble at all
	    //  * months bubble up until they become years
	    // This is because there is no context-free conversion between hours and days
	    // (think of clock changes)
	    // and also not between days and months (28-31 days per month)
	    var seconds = abs$1(this._milliseconds) / 1000;
	    var days         = abs$1(this._days);
	    var months       = abs$1(this._months);
	    var minutes, hours, years;
	
	    // 3600 seconds -> 60 minutes -> 1 hour
	    minutes           = absFloor(seconds / 60);
	    hours             = absFloor(minutes / 60);
	    seconds %= 60;
	    minutes %= 60;
	
	    // 12 months -> 1 year
	    years  = absFloor(months / 12);
	    months %= 12;
	
	
	    // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
	    var Y = years;
	    var M = months;
	    var D = days;
	    var h = hours;
	    var m = minutes;
	    var s = seconds;
	    var total = this.asSeconds();
	
	    if (!total) {
	        // this is the same as C#'s (Noda) and python (isodate)...
	        // but not other JS (goog.date)
	        return 'P0D';
	    }
	
	    return (total < 0 ? '-' : '') +
	        'P' +
	        (Y ? Y + 'Y' : '') +
	        (M ? M + 'M' : '') +
	        (D ? D + 'D' : '') +
	        ((h || m || s) ? 'T' : '') +
	        (h ? h + 'H' : '') +
	        (m ? m + 'M' : '') +
	        (s ? s + 'S' : '');
	}
	
	var proto$2 = Duration.prototype;
	
	proto$2.abs            = abs;
	proto$2.add            = add$1;
	proto$2.subtract       = subtract$1;
	proto$2.as             = as;
	proto$2.asMilliseconds = asMilliseconds;
	proto$2.asSeconds      = asSeconds;
	proto$2.asMinutes      = asMinutes;
	proto$2.asHours        = asHours;
	proto$2.asDays         = asDays;
	proto$2.asWeeks        = asWeeks;
	proto$2.asMonths       = asMonths;
	proto$2.asYears        = asYears;
	proto$2.valueOf        = valueOf$1;
	proto$2._bubble        = bubble;
	proto$2.get            = get$2;
	proto$2.milliseconds   = milliseconds;
	proto$2.seconds        = seconds;
	proto$2.minutes        = minutes;
	proto$2.hours          = hours;
	proto$2.days           = days;
	proto$2.weeks          = weeks;
	proto$2.months         = months;
	proto$2.years          = years;
	proto$2.humanize       = humanize;
	proto$2.toISOString    = toISOString$1;
	proto$2.toString       = toISOString$1;
	proto$2.toJSON         = toISOString$1;
	proto$2.locale         = locale;
	proto$2.localeData     = localeData;
	
	// Deprecations
	proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
	proto$2.lang = lang;
	
	// Side effect imports
	
	// FORMATTING
	
	addFormatToken('X', 0, 0, 'unix');
	addFormatToken('x', 0, 0, 'valueOf');
	
	// PARSING
	
	addRegexToken('x', matchSigned);
	addRegexToken('X', matchTimestamp);
	addParseToken('X', function (input, array, config) {
	    config._d = new Date(parseFloat(input, 10) * 1000);
	});
	addParseToken('x', function (input, array, config) {
	    config._d = new Date(toInt(input));
	});
	
	// Side effect imports
	
	
	hooks.version = '2.17.1';
	
	setHookCallback(createLocal);
	
	hooks.fn                    = proto;
	hooks.min                   = min;
	hooks.max                   = max;
	hooks.now                   = now;
	hooks.utc                   = createUTC;
	hooks.unix                  = createUnix;
	hooks.months                = listMonths;
	hooks.isDate                = isDate;
	hooks.locale                = getSetGlobalLocale;
	hooks.invalid               = createInvalid;
	hooks.duration              = createDuration;
	hooks.isMoment              = isMoment;
	hooks.weekdays              = listWeekdays;
	hooks.parseZone             = createInZone;
	hooks.localeData            = getLocale;
	hooks.isDuration            = isDuration;
	hooks.monthsShort           = listMonthsShort;
	hooks.weekdaysMin           = listWeekdaysMin;
	hooks.defineLocale          = defineLocale;
	hooks.updateLocale          = updateLocale;
	hooks.locales               = listLocales;
	hooks.weekdaysShort         = listWeekdaysShort;
	hooks.normalizeUnits        = normalizeUnits;
	hooks.relativeTimeRounding = getSetRelativeTimeRounding;
	hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
	hooks.calendarFormat        = getCalendarFormat;
	hooks.prototype             = proto;
	
	return hooks;
	
	})));
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(331)(module)))

/***/ },
/* 2 */,
/* 3 */,
/* 4 */,
/* 5 */,
/* 6 */,
/* 7 */,
/* 8 */,
/* 9 */,
/* 10 */,
/* 11 */,
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var documents = __webpack_require__(221);
	var WithFragments = documents.WithFragments,
	    GroupDoc = documents.GroupDoc;
	
	/**
	 * Embodies a plain text fragment (beware: not a structured text)
	 * @constructor
	 * @global
	 * @alias Fragments:Text
	 */
	function Text(data) {
	  this.value = data;
	}
	Text.prototype = {
	  /**
	   * Turns the fragment into a useable HTML version of it.
	   * If the native HTML code doesn't suit your design, this function is meant to be overriden.
	   *
	   * @returns {string} - basic HTML code for the fragment
	   */
	  asHtml: function () {
	    return "<span>" + this.value + "</span>";
	  },
	
	  /**
	   * Turns the fragment into a useable text version of it.
	   *
	   * @returns {string} - basic text version of the fragment
	   */
	  asText: function() {
	    return this.value;
	  }
	};
	/**
	 * Embodies a document link fragment (a link that is internal to a prismic.io repository)
	 * @constructor
	 * @global
	 * @alias Fragments:DocumentLink
	 */
	function DocumentLink(data) {
	  this.value = data;
	
	  this.document = data.document;
	  /**
	   * @field
	   * @description the linked document id
	   */
	  this.id = data.document.id;
	  /**
	   * @field
	   * @description the linked document uid
	   */
	  this.uid = data.document.uid;
	  /**
	   * @field
	   * @description the linked document tags
	   */
	  this.tags = data.document.tags;
	  /**
	   * @field
	   * @description the linked document slug
	   */
	  this.slug = data.document.slug;
	  /**
	   * @field
	   * @description the linked document type
	   */
	  this.type = data.document.type;
	
	  var fragmentsData = {};
	  if (data.document.data) {
	    for (var field in data.document.data[data.document.type]) {
	      fragmentsData[data.document.type + '.' + field] = data.document.data[data.document.type][field];
	    }
	  }
	  /**
	   * @field
	   * @description the fragment list, if the fetchLinks parameter was used in at query time
	   */
	  this.fragments = parseFragments(fragmentsData);
	  /**
	   * @field
	   * @description true if the link is broken, false otherwise
	   */
	  this.isBroken = data.isBroken;
	}
	
	DocumentLink.prototype = Object.create(WithFragments.prototype);
	
	/**
	 * Turns the fragment into a useable HTML version of it.
	 * If the native HTML code doesn't suit your design, this function is meant to be overriden.
	 *
	 * @params {object} ctx - mandatory ctx object, with a useable linkResolver function (please read prismic.io online documentation about this)
	 * @returns {string} - basic HTML code for the fragment
	 */
	DocumentLink.prototype.asHtml = function (ctx) {
	  return "<a href=\""+this.url(ctx)+"\">"+this.url(ctx)+"</a>";
	};
	
	/**
	 * Returns the URL of the document link.
	 *
	 * @params {object} linkResolver - mandatory linkResolver function (please read prismic.io online documentation about this)
	 * @returns {string} - the proper URL to use
	 */
	DocumentLink.prototype.url = function (linkResolver) {
	  return linkResolver(this, this.isBroken);
	};
	
	/**
	 * Turns the fragment into a useable text version of it.
	 *
	 * @returns {string} - basic text version of the fragment
	 */
	DocumentLink.prototype.asText = function(linkResolver) {
	  return this.url(linkResolver);
	};
	
	/**
	 * Embodies a web link fragment
	 * @constructor
	 * @global
	 * @alias Fragments:WebLink
	 */
	function WebLink(data) {
	  /**
	   * @field
	   * @description the JSON object exactly as is returned in the "data" field of the JSON responses (see API documentation: https://developers.prismic.io/documentation/UjBe8bGIJ3EKtgBZ/api-documentation#json-responses)
	   */
	  this.value = data;
	}
	WebLink.prototype = {
	  /**
	   * Turns the fragment into a useable HTML version of it.
	   * If the native HTML code doesn't suit your design, this function is meant to be overriden.
	   *
	   * @returns {string} - basic HTML code for the fragment
	   */
	  asHtml: function () {
	    return "<a href=\""+this.url()+"\">"+this.url()+"</a>";
	  },
	  /**
	   * Returns the URL of the link.
	   *
	   * @returns {string} - the proper URL to use
	   */
	  url: function() {
	    return this.value.url;
	  },
	
	  /**
	   * Turns the fragment into a useable text version of it.
	   *
	   * @returns {string} - basic text version of the fragment
	   */
	  asText: function() {
	    return this.url();
	  }
	};
	
	/**
	 * Embodies a file link fragment
	 * @constructor
	 * @global
	 * @alias Fragments:FileLink
	 */
	function FileLink(data) {
	  /**
	   * @field
	   * @description the JSON object exactly as is returned in the "data" field of the JSON responses (see API documentation: https://developers.prismic.io/documentation/UjBe8bGIJ3EKtgBZ/api-documentation#json-responses)
	   */
	  this.value = data;
	}
	FileLink.prototype = {
	  /**
	   * Turns the fragment into a useable HTML version of it.
	   * If the native HTML code doesn't suit your design, this function is meant to be overriden.
	   *
	   * @returns {string} - basic HTML code for the fragment
	   */
	  asHtml: function () {
	    return "<a href=\""+this.url()+"\">"+this.value.file.name+"</a>";
	  },
	  /**
	   * Returns the URL of the link.
	   *
	   * @returns {string} - the proper URL to use
	   */
	  url: function() {
	    return this.value.file.url;
	  },
	
	  /**
	   * Turns the fragment into a useable text version of it.
	   *
	   * @returns {string} - basic text version of the fragment
	   */
	  asText: function() {
	    return this.url();
	  }
	};
	
	/**
	 * Embodies an image link fragment
	 * @constructor
	 * @global
	 * @alias Fragments:ImageLink
	 */
	function ImageLink(data) {
	  /**
	   *
	   * @field
	   * @description the JSON object exactly as is returned in the "data" field of the JSON responses (see API documentation: https://developers.prismic.io/documentation/UjBe8bGIJ3EKtgBZ/api-documentation#json-responses)
	   */
	  this.value = data;
	}
	ImageLink.prototype = {
	  /**
	   * Turns the fragment into a useable HTML version of it.
	   * If the native HTML code doesn't suit your design, this function is meant to be overriden.
	   *
	   * @returns {string} - basic HTML code for the fragment
	   */
	  asHtml: function () {
	    return "<a href=\"" + this.url() + "\"><img src=\"" + this.url() + "\" alt=\"" + (this.alt || "") + "\"></a>";
	  },
	  /**
	   * Returns the URL of the link.
	   *
	   * @returns {string} - the proper URL to use
	   */
	  url: function() {
	    return this.value.image.url;
	  },
	
	  /**
	   * Turns the fragment into a useable text version of it.
	   *
	   * @returns {string} - basic text version of the fragment
	   */
	  asText: function() {
	    return this.url();
	  }
	};
	
	/**
	 * Embodies a select fragment
	 * @constructor
	 * @global
	 * @alias Fragments:Select
	 */
	function Select(data) {
	  /**
	   * @field
	   * @description the text value of the fragment
	   */
	  this.value = data;
	}
	Select.prototype = {
	  /**
	   * Turns the fragment into a useable HTML version of it.
	   * If the native HTML code doesn't suit your design, this function is meant to be overriden.
	   *
	   * @returns {string} - basic HTML code for the fragment
	   */
	  asHtml: function () {
	    return "<span>" + this.value + "</span>";
	  },
	
	  /**
	   * Turns the fragment into a useable text version of it.
	   *
	   * @returns {string} - basic text version of the fragment
	   */
	  asText: function() {
	    return this.value;
	  }
	};
	
	/**
	 * Embodies a color fragment
	 * @constructor
	 * @global
	 * @alias Fragments:Color
	 */
	function Color(data) {
	  /**
	   * @field
	   * @description the text value of the fragment
	   */
	  this.value = data;
	}
	Color.prototype = {
	  /**
	   * Turns the fragment into a useable HTML version of it.
	   * If the native HTML code doesn't suit your design, this function is meant to be overriden.
	   *
	   * @returns {string} - basic HTML code for the fragment
	   */
	  asHtml: function () {
	    return "<span>" + this.value + "</span>";
	  },
	
	  /**
	   * Turns the fragment into a useable text version of it.
	   *
	   * @returns {string} - basic text version of the fragment
	   */
	  asText: function() {
	    return this.value;
	  }
	};
	
	/**
	 * Embodies a geopoint
	 * @constructor
	 * @global
	 * @alias Fragments:GeoPoint
	 */
	function GeoPoint(data) {
	  /**
	   * @field
	   * @description the latitude of the geo point
	   */
	  this.latitude = data.latitude;
	  /**
	   * @field
	   * @description the longitude of the geo point
	   */
	  this.longitude = data.longitude;
	}
	
	GeoPoint.prototype = {
	  /**
	   * Turns the fragment into a useable HTML version of it.
	   * If the native HTML code doesn't suit your design, this function is meant to be overriden.
	   *
	   * @returns {string} - basic HTML code for the fragment
	   */
	  asHtml: function () {
	    return '<div class="geopoint"><span class="latitude">' + this.latitude + '</span><span class="longitude">' + this.longitude + '</span></div>';
	  },
	
	  /**
	   * Turns the fragment into a useable text version of it.
	   *
	   * @returns {string} - basic text version of the fragment
	   */
	  asText: function() {
	    return '(' + this.latitude + "," + this.longitude + ')';
	  }
	};
	
	/**
	 * Embodies a Number fragment
	 * @constructor
	 * @global
	 * @alias Fragments:Num
	 */
	function Num(data) {
	  /**
	   * @field
	   * @description the integer value of the fragment
	   */
	  this.value = data;
	}
	Num.prototype = {
	  /**
	   * Turns the fragment into a useable HTML version of it.
	   * If the native HTML code doesn't suit your design, this function is meant to be overriden.
	   *
	   * @returns {string} - basic HTML code for the fragment
	   */
	  asHtml: function () {
	    return "<span>" + this.value + "</span>";
	  },
	
	  /**
	   * Turns the fragment into a useable text version of it.
	   *
	   * @returns {string} - basic text version of the fragment
	   */
	  asText: function() {
	    if (this.value === null) {
	      return null;
	    } else {
	      return this.value.toString();
	    }
	  }
	};
	
	/**
	 * Embodies a Date fragment
	 * @constructor
	 * @global
	 * @alias Fragments:Date
	 */
	function DateFragment(data) {
	  /**
	   * @field
	   * @description the Date value of the fragment (as a regular JS Date object)
	   */
	  this.value = new Date(data);
	}
	
	DateFragment.prototype = {
	  /**
	   * Turns the fragment into a useable HTML version of it.
	   * If the native HTML code doesn't suit your design, this function is meant to be overriden.
	   *
	   * @returns {string} - basic HTML code for the fragment
	   */
	  asHtml: function () {
	    return "<time>" + this.value + "</time>";
	  },
	
	  /**
	   * Turns the fragment into a useable text version of it.
	   *
	   * @returns {string} - basic text version of the fragment
	   */
	  asText: function() {
	    if (this.value === null) {
	      return null;
	    } else {
	      return this.value.toString();
	    }
	  }
	};
	
	/**
	 * Embodies a Timestamp fragment
	 * @constructor
	 * @global
	 * @alias Fragments:Timestamp
	 */
	function Timestamp(data) {
	  /**
	   * @field
	   * @description the Date value of the fragment (as a regular JS Date object)
	   */
	  // Adding ":" in the locale if needed, so JS considers it ISO8601-compliant
	  if (data) {
	    var correctIso8601Date = (data.length == 24) ? data.substring(0, 22) + ':' + data.substring(22, 24) : data;
	    this.value = new Date(correctIso8601Date);
	  }
	  else {
	    this.value = null;
	  }
	}
	
	Timestamp.prototype = {
	  /**
	   * Turns the fragment into a useable HTML version of it.
	   * If the native HTML code doesn't suit your design, this function is meant to be overriden.
	   *
	   * @returns {string} - basic HTML code for the fragment
	   */
	  asHtml: function () {
	    return "<time>" + this.value + "</time>";
	  },
	
	  /**
	   * Turns the fragment into a useable text version of it.
	   *
	   * @returns {string} - basic text version of the fragment
	   */
	  asText: function() {
	    if (this.value === null) {
	      return null;
	    } else {
	      return this.value.toString();
	    }
	  }
	};
	
	/**
	 * Embodies an embed fragment
	 * @constructor
	 * @global
	 * @alias Fragments:Embed
	 */
	function Embed(data) {
	  /**
	   * @field
	   * @description the JSON object exactly as is returned in the "data" field of the JSON responses (see API documentation: https://developers.prismic.io/documentation/UjBe8bGIJ3EKtgBZ/api-documentation#json-responses)
	   */
	  this.value = data;
	}
	
	Embed.prototype = {
	  /**
	   * Turns the fragment into a useable HTML version of it.
	   * If the native HTML code doesn't suit your design, this function is meant to be overriden.
	   *
	   * @returns {string} - basic HTML code for the fragment
	   */
	  asHtml: function () {
	    return this.value.oembed.html;
	  },
	
	  /**
	   * Turns the fragment into a useable text version of it.
	   *
	   * @returns {string} - basic text version of the fragment
	   */
	  asText: function() {
	    return "";
	  }
	};
	
	/**
	 * Embodies an Image fragment
	 * @constructor
	 * @global
	 * @alias Fragments:ImageEl
	 */
	function ImageEl(main, views) {
	  /**
	   * @field
	   * @description the main ImageView for this image
	   */
	  this.main = main;
	
	
	  /**
	   * @field
	   * @description the url of the main ImageView for this image
	   */
	  this.url = main.url;
	
	  /**
	   * @field
	   * @description an array of all the other ImageViews for this image
	   */
	  this.views = views || {};
	}
	ImageEl.prototype = {
	  /**
	   * Gets the view of the image, from its name
	   *
	   * @param {string} name - the name of the view to get
	   * @returns {ImageView} - the proper view
	   */
	  getView: function(name) {
	    if (name === "main") {
	      return this.main;
	    } else {
	      return this.views[name];
	    }
	  },
	  /**
	   * Turns the fragment into a useable HTML version of it.
	   * If the native HTML code doesn't suit your design, this function is meant to be overriden.
	   *
	   * @returns {string} - basic HTML code for the fragment
	   */
	  asHtml: function () {
	    return this.main.asHtml();
	  },
	
	  /**
	   * Turns the fragment into a useable text version of it.
	   *
	   * @returns {string} - basic text version of the fragment
	   */
	  asText: function() {
	    return "";
	  }
	};
	
	/**
	 * Embodies an image view (an image in prismic.io can be defined with several different thumbnail sizes, each size is called a "view")
	 * @constructor
	 * @global
	 * @alias Fragments:ImageView
	 */
	function ImageView(url, width, height, alt) {
	  /**
	   * @field
	   * @description the URL of the ImageView (useable as it, in a <img> tag in HTML, for instance)
	   */
	  this.url = url;
	  /**
	   * @field
	   * @description the width of the ImageView
	   */
	  this.width = width;
	  /**
	   * @field
	   * @description the height of the ImageView
	   */
	  this.height = height;
	  /**
	   * @field
	   * @description the alt text for the ImageView
	   */
	  this.alt = alt;
	}
	ImageView.prototype = {
	  ratio: function () {
	    return this.width / this.height;
	  },
	  /**
	   * Turns the fragment into a useable HTML version of it.
	   * If the native HTML code doesn't suit your design, this function is meant to be overriden.
	   *
	   * @returns {string} - basic HTML code for the fragment
	   */
	  asHtml: function () {
	    return "<img src=\"" + this.url + "\" width=\"" + this.width + "\" height=\"" + this.height + "\" alt=\"" + (this.alt || "") + "\">";
	  },
	
	  /**
	   * Turns the fragment into a useable text version of it.
	   *
	   * @returns {string} - basic text version of the fragment
	   */
	  asText: function() {
	    return "";
	  }
	};
	
	
	/**
	 * Embodies a fragment of type "Separator" (only used in Slices)
	 * @constructor
	 * @global
	 * @alias Fragments:Separator
	 */
	function Separator() {
	}
	Separator.prototype = {
	  asHtml: function() {
	    return "<hr/>";
	  },
	  asText: function() {
	    return "----";
	  }
	};
	
	/**
	 * Embodies a fragment of type "Group" (which is a group of subfragments)
	 * @constructor
	 * @global
	 * @alias Fragments:Group
	 */
	function Group(data) {
	  this.value = [];
	  for (var i = 0; i < data.length; i++) {
	    this.value.push(new GroupDoc(data[i]));
	  }
	}
	Group.prototype = {
	  /**
	   * Turns the fragment into a useable HTML version of it.
	   * If the native HTML code doesn't suit your design, this function is meant to be overriden.
	   * @params {function} linkResolver - linkResolver function (please read prismic.io online documentation about this)
	   * @returns {string} - basic HTML code for the fragment
	   */
	  asHtml: function(linkResolver) {
	    var output = "";
	    for (var i = 0; i < this.value.length; i++) {
	      output += this.value[i].asHtml(linkResolver);
	    }
	    return output;
	  },
	  /**
	   * Turns the Group fragment into an array in order to access its items (groups of fragments),
	   * or to loop through them.
	   * @params {object} ctx - mandatory ctx object, with a useable linkResolver function (please read prismic.io online documentation about this)
	   * @returns {Array} - the array of groups, each group being a JSON object with subfragment name as keys, and subfragment as values
	   */
	  toArray: function(){
	    return this.value;
	  },
	
	  /**
	   * Turns the fragment into a useable text version of it.
	   *
	   * @returns {string} - basic text version of the fragment
	   */
	  asText: function(linkResolver) {
	    var output = "";
	    for (var i=0; i<this.value.length; i++) {
	      output += this.value[i].asText(linkResolver) + '\n';
	    }
	    return output;
	  },
	
	  getFirstImage: function() {
	    return this.toArray().reduce(function(image, fragment) {
	      if (image) return image;
	      else {
	        return fragment.getFirstImage();
	      }
	    }, null);
	  },
	
	  getFirstTitle: function() {
	    return this.toArray().reduce(function(st, fragment) {
	      if (st) return st;
	      else {
	        return fragment.getFirstTitle();
	      }
	    }, null);
	  },
	
	  getFirstParagraph: function() {
	    return this.toArray().reduce(function(st, fragment) {
	      if (st) return st;
	      else {
	        return fragment.getFirstParagraph();
	      }
	    }, null);
	  }
	};
	
	
	/**
	 * Embodies a structured text fragment
	 * @constructor
	 * @global
	 * @alias Fragments:StructuredText
	 */
	function StructuredText(blocks) {
	
	  this.blocks = blocks;
	
	}
	
	StructuredText.prototype = {
	
	  /**
	   * @returns {object} the first heading block in the text
	   */
	  getTitle: function () {
	    for(var i=0; i<this.blocks.length; i++) {
	      var block = this.blocks[i];
	      if(block.type.indexOf('heading') === 0) {
	        return block;
	      }
	    }
	    return null;
	  },
	
	  /**
	   * @returns {object} the first block of type paragraph
	   */
	  getFirstParagraph: function() {
	    for(var i=0; i<this.blocks.length; i++) {
	      var block = this.blocks[i];
	      if(block.type == 'paragraph') {
	        return block;
	      }
	    }
	    return null;
	  },
	
	  /**
	   * @returns {array} all paragraphs
	   */
	  getParagraphs: function() {
	    var paragraphs = [];
	    for(var i=0; i<this.blocks.length; i++) {
	      var block = this.blocks[i];
	      if(block.type == 'paragraph') {
	        paragraphs.push(block);
	      }
	    }
	    return paragraphs;
	  },
	
	  /**
	   * @returns {object} the nth paragraph
	   */
	  getParagraph: function(n) {
	    return this.getParagraphs()[n];
	  },
	
	  /**
	   * @returns {object}
	   */
	  getFirstImage: function() {
	    for(var i=0; i<this.blocks.length; i++) {
	      var block = this.blocks[i];
	      if(block.type == 'image') {
	        return new ImageView(
	          block.url,
	          block.dimensions.width,
	          block.dimensions.height,
	          block.alt
	        );
	      }
	    }
	    return null;
	  },
	
	  /**
	   * Turns the fragment into a useable HTML version of it.
	   * If the native HTML code doesn't suit your design, this function is meant to be overriden.
	   * @params {function} linkResolver - please read prismic.io online documentation about link resolvers
	   * @params {function} htmlSerializer optional HTML serializer to customize the output
	   * @returns {string} - basic HTML code for the fragment
	   */
	  asHtml: function(linkResolver, htmlSerializer) {
	    var blockGroups = [],
	        blockGroup,
	        block,
	        html = [];
	    if (!isFunction(linkResolver)) {
	      // Backward compatibility with the old ctx argument
	      var ctx = linkResolver;
	      linkResolver = function(doc, isBroken) {
	        return ctx.linkResolver(ctx, doc, isBroken);
	      };
	    }
	    if (Array.isArray(this.blocks)) {
	
	      for(var i=0; i < this.blocks.length; i++) {
	        block = this.blocks[i];
	
	        // Resolve image links
	        if (block.type == "image" && block.linkTo) {
	          var link = initField(block.linkTo);
	          block.linkUrl = link.url(linkResolver);
	        }
	
	        if (block.type !== "list-item" && block.type !== "o-list-item") {
	          // it's not a type that groups
	          blockGroups.push(block);
	          blockGroup = null;
	        } else if (!blockGroup || blockGroup.type != ("group-" + block.type)) {
	          // it's a new type or no BlockGroup was set so far
	          blockGroup = {
	            type: "group-" + block.type,
	            blocks: [block]
	          };
	          blockGroups.push(blockGroup);
	        } else {
	          // it's the same type as before, no touching blockGroup
	          blockGroup.blocks.push(block);
	        }
	      }
	
	      var blockContent = function(block) {
	        var content = "";
	        if (block.blocks) {
	          block.blocks.forEach(function (block2) {
	            content = content + serialize(block2, blockContent(block2), htmlSerializer);
	          });
	        } else {
	          content = insertSpans(block.text, block.spans, linkResolver, htmlSerializer);
	        }
	        return content;
	      };
	
	      blockGroups.forEach(function (blockGroup) {
	        html.push(serialize(blockGroup, blockContent(blockGroup), htmlSerializer));
	      });
	
	    }
	
	    return html.join('');
	
	  },
	
	  /**
	   * Turns the fragment into a useable text version of it.
	   *
	   * @returns {string} - basic text version of the fragment
	   */
	  asText: function() {
	    var output = [];
	    for(var i=0; i<this.blocks.length; i++) {
	      var block = this.blocks[i];
	      if (block.text) {
	        output.push(block.text);
	      }
	    }
	    return output.join(' ');
	  }
	
	};
	
	function htmlEscape(input) {
	  return input && input.replace(/&/g, "&amp;")
	    .replace(/</g, "&lt;")
	    .replace(/>/g, "&gt;")
	    .replace(/\n/g, "<br>");
	}
	
	/**
	 * Parses a block that has spans, and inserts the proper HTML code.
	 *
	 * @param {string} text - the original text of the block
	 * @param {object} spans - the spans as returned by the API
	 * @param {object} linkResolver - the function to build links that may be in the fragment (please read prismic.io's online documentation about this)
	 * @param {function} htmlSerializer - optional serializer
	 * @returns {string} - the HTML output
	 */
	function insertSpans(text, spans, linkResolver, htmlSerializer) {
	  if (!spans || !spans.length) {
	    return htmlEscape(text);
	  }
	
	  var tagsStart = {};
	  var tagsEnd = {};
	
	  spans.forEach(function (span) {
	    if (!tagsStart[span.start]) { tagsStart[span.start] = []; }
	    if (!tagsEnd[span.end]) { tagsEnd[span.end] = []; }
	
	    tagsStart[span.start].push(span);
	    tagsEnd[span.end].unshift(span);
	  });
	
	  var c;
	  var html = "";
	  var stack = [];
	  for (var pos = 0, len = text.length + 1; pos < len; pos++) { // Looping to length + 1 to catch closing tags
	    if (tagsEnd[pos]) {
	      tagsEnd[pos].forEach(function () {
	        // Close a tag
	        var tag = stack.pop();
	        // Continue only if block contains content.
	        if (typeof tag !== 'undefined') {
	          var innerHtml = serialize(tag.span, tag.text, htmlSerializer);
	          if (stack.length === 0) {
	            // The tag was top level
	            html += innerHtml;
	          } else {
	            // Add the content to the parent tag
	            stack[stack.length - 1].text += innerHtml;
	          }
	        }
	      });
	    }
	    if (tagsStart[pos]) {
	      // Sort bigger tags first to ensure the right tag hierarchy
	      tagsStart[pos].sort(function (a, b) {
	        return (b.end - b.start) - (a.end - a.start);
	      });
	      tagsStart[pos].forEach(function (span) {
	        // Open a tag
	        var url = null;
	        if (span.type == "hyperlink") {
	          var fragment = initField(span.data);
	          if (fragment) {
	            url = fragment.url(linkResolver);
	          } else {
	            if (console && console.error) console.error('Impossible to convert span.data as a Fragment', span);
	            return;
	          }
	          span.url = url;
	        }
	        var elt = {
	          span: span,
	          text: ""
	        };
	        stack.push(elt);
	      });
	    }
	    if (pos < text.length) {
	      c = text[pos];
	      if (stack.length === 0) {
	        // Top-level text
	        html += htmlEscape(c);
	      } else {
	        // Inner text of a span
	        stack[stack.length - 1].text += htmlEscape(c);
	      }
	    }
	  }
	
	  return html;
	}
	
	/**
	 * Embodies a Slice fragment
	 * @constructor
	 * @global
	 * @alias Fragments:Slice
	 */
	function Slice(sliceType, label, value) {
	  this.sliceType = sliceType;
	  this.label = label;
	  this.value = value;
	}
	
	Slice.prototype = {
	  /**
	   * Turns the fragment into a useable HTML version of it.
	   * If the native HTML code doesn't suit your design, this function is meant to be overriden.
	   *
	   * @returns {string} - basic HTML code for the fragment
	   */
	  asHtml: function (linkResolver) {
	    var classes = ['slice'];
	    if (this.label) classes.push(this.label);
	    return '<div data-slicetype="' + this.sliceType + '" class="' + classes.join(' ') + '">' +
	      this.value.asHtml(linkResolver) +
	      '</div>';
	
	  },
	
	  /**
	   * Turns the fragment into a useable text version of it.
	   *
	   * @returns {string} - basic text version of the fragment
	   */
	  asText: function(linkResolver) {
	    return this.value.asText(linkResolver);
	  },
	
	  /**
	   * Get the first Image in slice.
	   * @returns {object}
	   */
	  getFirstImage: function() {
	    var fragment = this.value;
	    if(typeof fragment.getFirstImage === "function") {
	      return fragment.getFirstImage();
	    } else if (fragment instanceof ImageEl) {
	      return fragment;
	    } else return null;
	  },
	
	  getFirstTitle: function() {
	    var fragment = this.value;
	    if(typeof fragment.getFirstTitle === "function") {
	      return fragment.getFirstTitle();
	    } else if (fragment instanceof StructuredText) {
	      return fragment.getTitle();
	    } else return null;
	  },
	
	  getFirstParagraph: function() {
	    var fragment = this.value;
	    if(typeof fragment.getFirstParagraph === "function") {
	      return fragment.getFirstParagraph();
	    } else return null;
	  }
	
	};
	
	/**
	 * Embodies a SliceZone fragment
	 * @constructor
	 * @global
	 * @alias Fragments:SliceZone
	 */
	function SliceZone(data) {
	  this.value = [];
	  for (var i = 0; i < data.length; i++) {
	    var sliceType = data[i]['slice_type'];
	    var fragment = initField(data[i]['value']);
	    var label = data[i]['slice_label'] || null;
	    if (sliceType && fragment) {
	      this.value.push(new Slice(sliceType, label, fragment));
	    }
	  }
	  this.slices = this.value;
	}
	
	SliceZone.prototype = {
	  /**
	   * Turns the fragment into a useable HTML version of it.
	   * If the native HTML code doesn't suit your design, this function is meant to be overriden.
	   *
	   * @returns {string} - basic HTML code for the fragment
	   */
	  asHtml: function (linkResolver) {
	    var output = "";
	    for (var i = 0; i < this.value.length; i++) {
	      output += this.value[i].asHtml(linkResolver);
	    }
	    return output;
	  },
	
	  /**
	   * Turns the fragment into a useable text version of it.
	   *
	   * @returns {string} - basic text version of the fragment
	   */
	  asText: function(linkResolver) {
	    var output = "";
	    for (var i = 0; i < this.value.length; i++) {
	      output += this.value[i].asText(linkResolver) + '\n';
	    }
	    return output;
	  },
	
	  getFirstImage: function() {
	    return this.value.reduce(function(image, slice) {
	      if (image) return image;
	      else {
	        return slice.getFirstImage();
	      }
	    }, null);
	  },
	
	  getFirstTitle: function() {
	    return this.value.reduce(function(text, slice) {
	      if (text) return text;
	      else {
	        return slice.getFirstTitle();
	      }
	    }, null);
	  },
	
	  getFirstParagraph: function() {
	    return this.value.reduce(function(paragraph, slice) {
	      if (paragraph) return paragraph;
	      else {
	        return slice.getFirstParagraph();
	      }
	    }, null);
	  }
	};
	
	/**
	 * From a fragment's name, casts it into the proper object type (like Prismic.Fragments.StructuredText)
	 *
	 * @private
	 * @param {string} field - the fragment's name
	 * @returns {object} - the object of the proper Fragments type.
	 */
	function initField(field) {
	
	  var classForType = {
	    "Color": Color,
	    "Number": Num,
	    "Date": DateFragment,
	    "Timestamp": Timestamp,
	    "Text": Text,
	    "Embed": Embed,
	    "GeoPoint": GeoPoint,
	    "Select": Select,
	    "StructuredText": StructuredText,
	    "Link.document": DocumentLink,
	    "Link.web": WebLink,
	    "Link.file": FileLink,
	    "Link.image": ImageLink,
	    "Separator": Separator,
	    "Group": Group,
	    "SliceZone": SliceZone
	  };
	
	  if (classForType[field.type]) {
	    return new classForType[field.type](field.value);
	  }
	
	  if (field.type === "Image") {
	    var img = field.value.main;
	    var output = new ImageEl(
	      new ImageView(
	        img.url,
	        img.dimensions.width,
	        img.dimensions.height,
	        img.alt
	      ),
	      {}
	    );
	    for (var name in field.value.views) {
	      img = field.value.views[name];
	      output.views[name] = new ImageView(
	        img.url,
	        img.dimensions.width,
	        img.dimensions.height,
	        img.alt
	      );
	    }
	    return output;
	  }
	
	  if (console && console.log) console.log("Fragment type not supported: ", field.type);
	  return null;
	
	}
	
	function parseFragments(json) {
	  var result = {};
	  for (var key in json) {
	    if (json.hasOwnProperty(key)) {
	      if (Array.isArray(json[key])) {
	        result[key] = json[key].map(function (fragment) {
	          return initField(fragment);
	        });
	      } else {
	        result[key] = initField(json[key]);
	      }
	    }
	  }
	  return result;
	}
	
	
	function isFunction(f) {
	  var getType = {};
	  return f && getType.toString.call(f) === '[object Function]';
	}
	
	function serialize(element, content, htmlSerializer) {
	  // Return the user customized output (if available)
	  if (htmlSerializer) {
	    var custom = htmlSerializer(element, content);
	    if (custom) {
	      return custom;
	    }
	  }
	
	  // Fall back to the default HTML output
	  var TAG_NAMES = {
	    "heading1": "h1",
	    "heading2": "h2",
	    "heading3": "h3",
	    "heading4": "h4",
	    "heading5": "h5",
	    "heading6": "h6",
	    "paragraph": "p",
	    "preformatted": "pre",
	    "list-item": "li",
	    "o-list-item": "li",
	    "group-list-item": "ul",
	    "group-o-list-item": "ol",
	    "strong": "strong",
	    "em": "em"
	  };
	
	  if (TAG_NAMES[element.type]) {
	    var name = TAG_NAMES[element.type];
	    var classCode = element.label ? (' class="' + element.label + '"') : '';
	    return '<' + name + classCode + '>' + content + '</' + name + '>';
	  }
	
	  if (element.type == "image") {
	    var label = element.label ? (" " + element.label) : "";
	    var imgTag = '<img src="' + element.url + '" alt="' + (element.alt || "") + '">';
	    return '<p class="block-img' + label + '">' +
	      (element.linkUrl ? ('<a href="' + element.linkUrl + '">' + imgTag + '</a>') : imgTag) +
	      '</p>';
	  }
	
	  if (element.type == "embed") {
	    return '<div data-oembed="'+ element.embed_url +
	      '" data-oembed-type="'+ element.type +
	      '" data-oembed-provider="'+ element.provider_name +
	      (element.label ? ('" class="' + element.label) : '') +
	      '">' + element.oembed.html+"</div>";
	  }
	
	  if (element.type === 'hyperlink') {
	    return '<a href="' + element.url + '">' + content + '</a>';
	  }
	
	  if (element.type === 'label') {
	    return '<span class="' + element.data.label + '">' + content + '</span>';
	  }
	
	  return "<!-- Warning: " + element.type + " not implemented. Upgrade the Developer Kit. -->" + content;
	}
	
	module.exports = {
	  Embed: Embed,
	  Image: ImageEl,
	  ImageView: ImageView,
	  Text: Text,
	  Number: Num,
	  Date: DateFragment,
	  Timestamp: Timestamp,
	  Select: Select,
	  Color: Color,
	  StructuredText: StructuredText,
	  WebLink: WebLink,
	  DocumentLink: DocumentLink,
	  ImageLink: ImageLink,
	  FileLink: FileLink,
	  Separator: Separator,
	  Group: Group,
	  GeoPoint: GeoPoint,
	  Slice: Slice,
	  SliceZone: SliceZone,
	  initField: initField,
	  parseFragments: parseFragments,
	  insertSpans: insertSpans
	};


/***/ },
/* 13 */,
/* 14 */,
/* 15 */,
/* 16 */,
/* 17 */,
/* 18 */,
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const prismic_service_1 = __webpack_require__(344);
	exports.PrismicService = prismic_service_1.PrismicService;
	exports.PRISMIC_PROVIDERS = [
	    prismic_service_1.PrismicService
	];


/***/ },
/* 20 */,
/* 21 */,
/* 22 */,
/* 23 */,
/* 24 */,
/* 25 */,
/* 26 */,
/* 27 */,
/* 28 */,
/* 29 */,
/* 30 */,
/* 31 */,
/* 32 */,
/* 33 */,
/* 34 */,
/* 35 */,
/* 36 */,
/* 37 */,
/* 38 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 39 */,
/* 40 */,
/* 41 */,
/* 42 */,
/* 43 */,
/* 44 */,
/* 45 */,
/* 46 */,
/* 47 */,
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	// a duplex stream is just a stream that is both readable and writable.
	// Since JS doesn't have multiple prototypal inheritance, this class
	// prototypally inherits from Readable, and then parasitically from
	// Writable.
	
	'use strict';
	
	/*<replacement>*/
	
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    keys.push(key);
	  }return keys;
	};
	/*</replacement>*/
	
	module.exports = Duplex;
	
	/*<replacement>*/
	var processNextTick = __webpack_require__(222);
	/*</replacement>*/
	
	/*<replacement>*/
	var util = __webpack_require__(65);
	util.inherits = __webpack_require__(38);
	/*</replacement>*/
	
	var Readable = __webpack_require__(306);
	var Writable = __webpack_require__(224);
	
	util.inherits(Duplex, Readable);
	
	var keys = objectKeys(Writable.prototype);
	for (var v = 0; v < keys.length; v++) {
	  var method = keys[v];
	  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
	}
	
	function Duplex(options) {
	  if (!(this instanceof Duplex)) return new Duplex(options);
	
	  Readable.call(this, options);
	  Writable.call(this, options);
	
	  if (options && options.readable === false) this.readable = false;
	
	  if (options && options.writable === false) this.writable = false;
	
	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;
	
	  this.once('end', onend);
	}
	
	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended) return;
	
	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  processNextTick(onEndNT, this);
	}
	
	function onEndNT(self) {
	  self.end();
	}
	
	function forEach(xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

/***/ },
/* 49 */,
/* 50 */,
/* 51 */,
/* 52 */,
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */
	
	'use strict'
	
	var base64 = __webpack_require__(358)
	var ieee754 = __webpack_require__(536)
	var isArray = __webpack_require__(297)
	
	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50
	
	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.
	
	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()
	
	/*
	 * Export kMaxLength after typed array support is determined.
	 */
	exports.kMaxLength = kMaxLength()
	
	function typedArraySupport () {
	  try {
	    var arr = new Uint8Array(1)
	    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
	    return arr.foo() === 42 && // typed array instances can be augmented
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}
	
	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}
	
	function createBuffer (that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length)
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer(length)
	    }
	    that.length = length
	  }
	
	  return that
	}
	
	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */
	
	function Buffer (arg, encodingOrOffset, length) {
	  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
	    return new Buffer(arg, encodingOrOffset, length)
	  }
	
	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(this, arg)
	  }
	  return from(this, arg, encodingOrOffset, length)
	}
	
	Buffer.poolSize = 8192 // not used by this implementation
	
	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer._augment = function (arr) {
	  arr.__proto__ = Buffer.prototype
	  return arr
	}
	
	function from (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }
	
	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length)
	  }
	
	  if (typeof value === 'string') {
	    return fromString(that, value, encodingOrOffset)
	  }
	
	  return fromObject(that, value)
	}
	
	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(null, value, encodingOrOffset, length)
	}
	
	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	  if (typeof Symbol !== 'undefined' && Symbol.species &&
	      Buffer[Symbol.species] === Buffer) {
	    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
	    Object.defineProperty(Buffer, Symbol.species, {
	      value: null,
	      configurable: true
	    })
	  }
	}
	
	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}
	
	function alloc (that, size, fill, encoding) {
	  assertSize(size)
	  if (size <= 0) {
	    return createBuffer(that, size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(that, size).fill(fill, encoding)
	      : createBuffer(that, size).fill(fill)
	  }
	  return createBuffer(that, size)
	}
	
	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(null, size, fill, encoding)
	}
	
	function allocUnsafe (that, size) {
	  assertSize(size)
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0
	    }
	  }
	  return that
	}
	
	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(null, size)
	}
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(null, size)
	}
	
	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8'
	  }
	
	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }
	
	  var length = byteLength(string, encoding) | 0
	  that = createBuffer(that, length)
	
	  var actual = that.write(string, encoding)
	
	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual)
	  }
	
	  return that
	}
	
	function fromArrayLike (that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0
	  that = createBuffer(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}
	
	function fromArrayBuffer (that, array, byteOffset, length) {
	  array.byteLength // this throws if `array` is not a valid ArrayBuffer
	
	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }
	
	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }
	
	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array)
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset)
	  } else {
	    array = new Uint8Array(array, byteOffset, length)
	  }
	
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array)
	  }
	  return that
	}
	
	function fromObject (that, obj) {
	  if (Buffer.isBuffer(obj)) {
	    var len = checked(obj.length) | 0
	    that = createBuffer(that, len)
	
	    if (that.length === 0) {
	      return that
	    }
	
	    obj.copy(that, 0, 0, len)
	    return that
	  }
	
	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0)
	      }
	      return fromArrayLike(that, obj)
	    }
	
	    if (obj.type === 'Buffer' && isArray(obj.data)) {
	      return fromArrayLike(that, obj.data)
	    }
	  }
	
	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}
	
	function checked (length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}
	
	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
	    length = 0
	  }
	  return Buffer.alloc(+length)
	}
	
	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}
	
	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }
	
	  if (a === b) return 0
	
	  var x = a.length
	  var y = b.length
	
	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i]
	      y = b[i]
	      break
	    }
	  }
	
	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}
	
	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}
	
	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }
	
	  if (list.length === 0) {
	    return Buffer.alloc(0)
	  }
	
	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length
	    }
	  }
	
	  var buffer = Buffer.allocUnsafe(length)
	  var pos = 0
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i]
	    if (!Buffer.isBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos)
	    pos += buf.length
	  }
	  return buffer
	}
	
	function byteLength (string, encoding) {
	  if (Buffer.isBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string
	  }
	
	  var len = string.length
	  if (len === 0) return 0
	
	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength
	
	function slowToString (encoding, start, end) {
	  var loweredCase = false
	
	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.
	
	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }
	
	  if (end === undefined || end > this.length) {
	    end = this.length
	  }
	
	  if (end <= 0) {
	    return ''
	  }
	
	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0
	  start >>>= 0
	
	  if (end <= start) {
	    return ''
	  }
	
	  if (!encoding) encoding = 'utf8'
	
	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)
	
	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)
	
	      case 'ascii':
	        return asciiSlice(this, start, end)
	
	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)
	
	      case 'base64':
	        return base64Slice(this, start, end)
	
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)
	
	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	
	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer.prototype._isBuffer = true
	
	function swap (b, n, m) {
	  var i = b[n]
	  b[n] = b[m]
	  b[m] = i
	}
	
	Buffer.prototype.swap16 = function swap16 () {
	  var len = this.length
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1)
	  }
	  return this
	}
	
	Buffer.prototype.swap32 = function swap32 () {
	  var len = this.length
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3)
	    swap(this, i + 1, i + 2)
	  }
	  return this
	}
	
	Buffer.prototype.swap64 = function swap64 () {
	  var len = this.length
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7)
	    swap(this, i + 1, i + 6)
	    swap(this, i + 2, i + 5)
	    swap(this, i + 3, i + 4)
	  }
	  return this
	}
	
	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}
	
	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}
	
	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}
	
	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!Buffer.isBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }
	
	  if (start === undefined) {
	    start = 0
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0
	  }
	  if (thisStart === undefined) {
	    thisStart = 0
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length
	  }
	
	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }
	
	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }
	
	  start >>>= 0
	  end >>>= 0
	  thisStart >>>= 0
	  thisEnd >>>= 0
	
	  if (this === target) return 0
	
	  var x = thisEnd - thisStart
	  var y = end - start
	  var len = Math.min(x, y)
	
	  var thisCopy = this.slice(thisStart, thisEnd)
	  var targetCopy = target.slice(start, end)
	
	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i]
	      y = targetCopy[i]
	      break
	    }
	  }
	
	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}
	
	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1
	
	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset
	    byteOffset = 0
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000
	  }
	  byteOffset = +byteOffset  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1)
	  }
	
	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0
	    else return -1
	  }
	
	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer.from(val, encoding)
	  }
	
	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (Buffer.isBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF // Search for a byte value [0-255]
	    if (Buffer.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }
	
	  throw new TypeError('val must be string, number or Buffer')
	}
	
	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1
	  var arrLength = arr.length
	  var valLength = val.length
	
	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase()
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2
	      arrLength /= 2
	      valLength /= 2
	      byteOffset /= 2
	    }
	  }
	
	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }
	
	  var i
	  if (dir) {
	    var foundIndex = -1
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex
	        foundIndex = -1
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false
	          break
	        }
	      }
	      if (found) return i
	    }
	  }
	
	  return -1
	}
	
	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	}
	
	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	}
	
	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	}
	
	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }
	
	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')
	
	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed
	  }
	  return i
	}
	
	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}
	
	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}
	
	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}
	
	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}
	
	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}
	
	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }
	
	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining
	
	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }
	
	  if (!encoding) encoding = 'utf8'
	
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)
	
	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)
	
	      case 'ascii':
	        return asciiWrite(this, string, offset, length)
	
	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)
	
	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)
	
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)
	
	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	
	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}
	
	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}
	
	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []
	
	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1
	
	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint
	
	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }
	
	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }
	
	    res.push(codePoint)
	    i += bytesPerSequence
	  }
	
	  return decodeCodePointsArray(res)
	}
	
	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000
	
	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }
	
	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}
	
	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)
	
	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}
	
	function latin1Slice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)
	
	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}
	
	function hexSlice (buf, start, end) {
	  var len = buf.length
	
	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len
	
	  var out = ''
	  for (var i = start; i < end; ++i) {
	    out += toHex(buf[i])
	  }
	  return out
	}
	
	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}
	
	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end
	
	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }
	
	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }
	
	  if (end < start) end = start
	
	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end)
	    newBuf.__proto__ = Buffer.prototype
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start]
	    }
	  }
	
	  return newBuf
	}
	
	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}
	
	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	
	  return val
	}
	
	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }
	
	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }
	
	  return val
	}
	
	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}
	
	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}
	
	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}
	
	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}
	
	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}
	
	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80
	
	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)
	
	  return val
	}
	
	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80
	
	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)
	
	  return val
	}
	
	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}
	
	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}
	
	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}
	
	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}
	
	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}
	
	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}
	
	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}
	
	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}
	
	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}
	
	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}
	
	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }
	
	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }
	
	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}
	
	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}
	
	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}
	
	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}
	
	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}
	
	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}
	
	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}
	
	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)
	
	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }
	
	  var i = 0
	  var mul = 1
	  var sub = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)
	
	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }
	
	  var i = byteLength - 1
	  var mul = 1
	  var sub = 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}
	
	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}
	
	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}
	
	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}
	
	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}
	
	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}
	
	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}
	
	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}
	
	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}
	
	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}
	
	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}
	
	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}
	
	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start
	
	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0
	
	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')
	
	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }
	
	  var len = end - start
	  var i
	
	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    )
	  }
	
	  return len
	}
	
	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start
	      start = 0
	      end = this.length
	    } else if (typeof end === 'string') {
	      encoding = end
	      end = this.length
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0)
	      if (code < 256) {
	        val = code
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255
	  }
	
	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }
	
	  if (end <= start) {
	    return this
	  }
	
	  start = start >>> 0
	  end = end === undefined ? this.length : end >>> 0
	
	  if (!val) val = 0
	
	  var i
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val
	    }
	  } else {
	    var bytes = Buffer.isBuffer(val)
	      ? val
	      : utf8ToBytes(new Buffer(val, encoding).toString())
	    var len = bytes.length
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len]
	    }
	  }
	
	  return this
	}
	
	// HELPER FUNCTIONS
	// ================
	
	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g
	
	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}
	
	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}
	
	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}
	
	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []
	
	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i)
	
	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }
	
	        // valid lead
	        leadSurrogate = codePoint
	
	        continue
	      }
	
	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }
	
	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }
	
	    leadSurrogate = null
	
	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }
	
	  return bytes
	}
	
	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}
	
	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break
	
	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }
	
	  return byteArray
	}
	
	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}
	
	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}
	
	function isnan (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 54 */,
/* 55 */,
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var experiments = __webpack_require__(301),
	    Predicates = __webpack_require__(302),
	    api = __webpack_require__(553),
	    Fragments = __webpack_require__(12),
	    QuickRoutes = __webpack_require__(557),
	    documents = __webpack_require__(221);
	
	var Api = api.Api,
	    Experiments = experiments.Experiments;
	
	/**
	 * The kit's main entry point; initialize your API like this: Prismic.api(url, {accessToken: "XXX"})
	 *
	 * @global
	 * @alias Api
	 * @constructor
	 * @param {string} url - The mandatory URL of the prismic.io API endpoint (like: https://lesbonneschoses.prismic.io/api)
	 * @param {function} options.callback - Optional callback function that is called after the API was retrieved, which will be called with two parameters: a potential error object and the API object
	 * @param {string} options.accessToken - The accessToken, necessary if the API is set as private
	 * @param {string} options.req - The NodeJS request (only use in a NodeJS context)
	 * @param {function} options.requestHandler - Environment specific HTTP request handling function
	 * @param {object} options.apiCache - A cache object with get/set functions for caching API responses
	 * @param {int} options.apiDataTTL - How long (in seconds) to cache data used by the client to make calls (e.g. refs). Defaults to 5 seconds
	 * @returns {Api} - The Api object that can be manipulated
	 */
	function getApi(url, options) {
	  options = options || {};
	  if (typeof arguments[1] == 'function') {
	    // Legacy (1) the second argument is the callback
	    options = {
	      "complete": arguments[1],
	      "accessToken": arguments[2],
	      "requestHandler": arguments[3],
	      "apiCache": arguments[4],
	      "apiDataTTL": arguments[5]
	    };
	  } else if (typeof arguments[1] == 'string') {
	    // Legacy (2) the second argument is the accessToken
	    options = {
	      "accessToken": arguments[1],
	      "requestHandler": arguments[2],
	      "apiCache": arguments[3],
	      "apiDataTTL": arguments[4]
	    };
	  }
	  var api = new Api(url, options || {});
	  //Use cached api data if available
	  return new Promise(function(resolve, reject) {
	    var cb = function(err, value, xhr) {
	      if (options.complete) options.complete(err, value, xhr);
	      if (err) {
	        reject(err);
	      } else {
	        resolve(value);
	      }
	    };
	    api.get(function (err, data) {
	      if (!err && data) {
	        api.data = data;
	        api.bookmarks = data.bookmarks;
	        api.experiments = new Experiments(data.experiments);
	      }
	
	      cb(err, api);
	    });
	
	    return api;
	  });
	}
	
	module.exports = {
	  experimentCookie: api.experimentCookie,
	  previewCookie: api.previewCookie,
	  Document: documents.Document,
	  SearchForm: api.SearchForm,
	  Form: api.Form,
	  Experiments: Experiments,
	  Predicates: Predicates,
	  Fragments: Fragments,
	  QuickRoutes: QuickRoutes,
	  api: getApi,
	  Api: getApi, // Backward compatibility
	  parseDoc: api.parseDoc
	};
	
	module.exports.Prismic = module.exports; // Backward compatibility


/***/ },
/* 57 */,
/* 58 */,
/* 59 */,
/* 60 */,
/* 61 */,
/* 62 */,
/* 63 */,
/* 64 */,
/* 65 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	
	function isArray(arg) {
	  if (Array.isArray) {
	    return Array.isArray(arg);
	  }
	  return objectToString(arg) === '[object Array]';
	}
	exports.isArray = isArray;
	
	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;
	
	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;
	
	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;
	
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;
	
	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;
	
	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;
	
	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;
	
	function isRegExp(re) {
	  return objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;
	
	function isDate(d) {
	  return objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;
	
	function isError(e) {
	  return (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;
	
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;
	
	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;
	
	exports.isBuffer = Buffer.isBuffer;
	
	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


/***/ },
/* 66 */,
/* 67 */,
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @license Angular v2.4.7
	 * (c) 2010-2017 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	(function (global, factory) {
	     true ? factory(exports, __webpack_require__(3), __webpack_require__(623), __webpack_require__(49), __webpack_require__(4), __webpack_require__(316)) :
	    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'rxjs/operator/toPromise', 'rxjs/Subject', 'rxjs/Observable', 'rxjs/observable/fromPromise'], factory) :
	    (factory((global.ng = global.ng || {}, global.ng.forms = global.ng.forms || {}),global.ng.core,global.Rx.Observable.prototype,global.Rx,global.Rx,global.Rx.Observable));
	}(this, function (exports,_angular_core,rxjs_operator_toPromise,rxjs_Subject,rxjs_Observable,rxjs_observable_fromPromise) { 'use strict';
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * Base class for control directives.
	     *
	     * Only used internally in the forms module.
	     *
	     * \@stable
	     * @abstract
	     */
	    var AbstractControlDirective = (function () {
	        function AbstractControlDirective() {
	        }
	        Object.defineProperty(AbstractControlDirective.prototype, "control", {
	            /**
	             * @return {?}
	             */
	            get: function () { throw new Error('unimplemented'); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlDirective.prototype, "value", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.control ? this.control.value : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlDirective.prototype, "valid", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.control ? this.control.valid : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlDirective.prototype, "invalid", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.control ? this.control.invalid : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlDirective.prototype, "pending", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.control ? this.control.pending : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlDirective.prototype, "errors", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.control ? this.control.errors : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlDirective.prototype, "pristine", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.control ? this.control.pristine : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlDirective.prototype, "dirty", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.control ? this.control.dirty : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlDirective.prototype, "touched", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.control ? this.control.touched : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlDirective.prototype, "untouched", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.control ? this.control.untouched : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlDirective.prototype, "disabled", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.control ? this.control.disabled : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlDirective.prototype, "enabled", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.control ? this.control.enabled : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlDirective.prototype, "statusChanges", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.control ? this.control.statusChanges : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlDirective.prototype, "valueChanges", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.control ? this.control.valueChanges : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlDirective.prototype, "path", {
	            /**
	             * @return {?}
	             */
	            get: function () { return null; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?=} value
	         * @return {?}
	         */
	        AbstractControlDirective.prototype.reset = function (value) {
	            if (value === void 0) { value = undefined; }
	            if (this.control)
	                this.control.reset(value);
	        };
	        /**
	         * @param {?} errorCode
	         * @param {?=} path
	         * @return {?}
	         */
	        AbstractControlDirective.prototype.hasError = function (errorCode, path) {
	            if (path === void 0) { path = null; }
	            return this.control ? this.control.hasError(errorCode, path) : false;
	        };
	        /**
	         * @param {?} errorCode
	         * @param {?=} path
	         * @return {?}
	         */
	        AbstractControlDirective.prototype.getError = function (errorCode, path) {
	            if (path === void 0) { path = null; }
	            return this.control ? this.control.getError(errorCode, path) : null;
	        };
	        return AbstractControlDirective;
	    }());
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$1 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * A directive that contains multiple {\@link NgControl}s.
	     *
	     * Only used by the forms module.
	     *
	     * \@stable
	     */
	    var ControlContainer = (function (_super) {
	        __extends$1(ControlContainer, _super);
	        function ControlContainer() {
	            _super.apply(this, arguments);
	        }
	        Object.defineProperty(ControlContainer.prototype, "formDirective", {
	            /**
	             * Get the form to which this container belongs.
	             * @return {?}
	             */
	            get: function () { return null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ControlContainer.prototype, "path", {
	            /**
	             * Get the path to this container.
	             * @return {?}
	             */
	            get: function () { return null; },
	            enumerable: true,
	            configurable: true
	        });
	        return ControlContainer;
	    }(AbstractControlDirective));
	
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function isPresent(obj) {
	        return obj != null;
	    }
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function isBlank(obj) {
	        return obj == null;
	    }
	    /**
	     * @param {?} a
	     * @param {?} b
	     * @return {?}
	     */
	    function looseIdentical(a, b) {
	        return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
	    }
	    /**
	     * @param {?} o
	     * @return {?}
	     */
	    function isJsObject(o) {
	        return o !== null && (typeof o === 'function' || typeof o === 'object');
	    }
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function isPrimitive(obj) {
	        return !isJsObject(obj);
	    }
	
	    /**
	     * Wraps Javascript Objects
	     */
	    var StringMapWrapper = (function () {
	        function StringMapWrapper() {
	        }
	        /**
	         * @param {?} m1
	         * @param {?} m2
	         * @return {?}
	         */
	        StringMapWrapper.merge = function (m1, m2) {
	            var /** @type {?} */ m = {};
	            for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {
	                var k = _a[_i];
	                m[k] = m1[k];
	            }
	            for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {
	                var k = _c[_b];
	                m[k] = m2[k];
	            }
	            return m;
	        };
	        /**
	         * @param {?} m1
	         * @param {?} m2
	         * @return {?}
	         */
	        StringMapWrapper.equals = function (m1, m2) {
	            var /** @type {?} */ k1 = Object.keys(m1);
	            var /** @type {?} */ k2 = Object.keys(m2);
	            if (k1.length != k2.length) {
	                return false;
	            }
	            for (var /** @type {?} */ i = 0; i < k1.length; i++) {
	                var /** @type {?} */ key = k1[i];
	                if (m1[key] !== m2[key]) {
	                    return false;
	                }
	            }
	            return true;
	        };
	        return StringMapWrapper;
	    }());
	    var ListWrapper = (function () {
	        function ListWrapper() {
	        }
	        /**
	         * @param {?} arr
	         * @param {?} condition
	         * @return {?}
	         */
	        ListWrapper.findLast = function (arr, condition) {
	            for (var /** @type {?} */ i = arr.length - 1; i >= 0; i--) {
	                if (condition(arr[i])) {
	                    return arr[i];
	                }
	            }
	            return null;
	        };
	        /**
	         * @param {?} list
	         * @param {?} items
	         * @return {?}
	         */
	        ListWrapper.removeAll = function (list, items) {
	            for (var /** @type {?} */ i = 0; i < items.length; ++i) {
	                var /** @type {?} */ index = list.indexOf(items[i]);
	                if (index > -1) {
	                    list.splice(index, 1);
	                }
	            }
	        };
	        /**
	         * @param {?} list
	         * @param {?} el
	         * @return {?}
	         */
	        ListWrapper.remove = function (list, el) {
	            var /** @type {?} */ index = list.indexOf(el);
	            if (index > -1) {
	                list.splice(index, 1);
	                return true;
	            }
	            return false;
	        };
	        /**
	         * @param {?} a
	         * @param {?} b
	         * @return {?}
	         */
	        ListWrapper.equals = function (a, b) {
	            if (a.length != b.length)
	                return false;
	            for (var /** @type {?} */ i = 0; i < a.length; ++i) {
	                if (a[i] !== b[i])
	                    return false;
	            }
	            return true;
	        };
	        /**
	         * @param {?} list
	         * @return {?}
	         */
	        ListWrapper.flatten = function (list) {
	            return list.reduce(function (flat, item) {
	                var /** @type {?} */ flatItem = Array.isArray(item) ? ListWrapper.flatten(item) : item;
	                return ((flat)).concat(flatItem);
	            }, []);
	        };
	        return ListWrapper;
	    }());
	
	    var /** @type {?} */ isPromise = _angular_core.__core_private__.isPromise;
	    var /** @type {?} */ isObservable = _angular_core.__core_private__.isObservable;
	
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    function isEmptyInputValue(value) {
	        // we don't check for string here so it also works with arrays
	        return value == null || value.length === 0;
	    }
	    /**
	     * Providers for validators to be used for {@link FormControl}s in a form.
	     *
	     * Provide this using `multi: true` to add validators.
	     *
	     * ### Example
	     *
	     * {@example core/forms/ts/ng_validators/ng_validators.ts region='ng_validators'}
	     * @stable
	     */
	    var /** @type {?} */ NG_VALIDATORS = new _angular_core.OpaqueToken('NgValidators');
	    /**
	     * Providers for asynchronous validators to be used for {@link FormControl}s
	     * in a form.
	     *
	     * Provide this using `multi: true` to add validators.
	     *
	     * See {@link NG_VALIDATORS} for more details.
	     *
	     * @stable
	     */
	    var /** @type {?} */ NG_ASYNC_VALIDATORS = new _angular_core.OpaqueToken('NgAsyncValidators');
	    /**
	     * Provides a set of validators used by form controls.
	     *
	     * A validator is a function that processes a {\@link FormControl} or collection of
	     * controls and returns a map of errors. A null map means that validation has passed.
	     *
	     * ### Example
	     *
	     * ```typescript
	     * var loginControl = new FormControl("", Validators.required)
	     * ```
	     *
	     * \@stable
	     */
	    var Validators = (function () {
	        function Validators() {
	        }
	        /**
	         * Validator that requires controls to have a non-empty value.
	         * @param {?} control
	         * @return {?}
	         */
	        Validators.required = function (control) {
	            return isEmptyInputValue(control.value) ? { 'required': true } : null;
	        };
	        /**
	         * Validator that requires control value to be true.
	         * @param {?} control
	         * @return {?}
	         */
	        Validators.requiredTrue = function (control) {
	            return control.value === true ? null : { 'required': true };
	        };
	        /**
	         * Validator that requires controls to have a value of a minimum length.
	         * @param {?} minLength
	         * @return {?}
	         */
	        Validators.minLength = function (minLength) {
	            return function (control) {
	                if (isEmptyInputValue(control.value)) {
	                    return null; // don't validate empty values to allow optional controls
	                }
	                var /** @type {?} */ length = control.value ? control.value.length : 0;
	                return length < minLength ?
	                    { 'minlength': { 'requiredLength': minLength, 'actualLength': length } } :
	                    null;
	            };
	        };
	        /**
	         * Validator that requires controls to have a value of a maximum length.
	         * @param {?} maxLength
	         * @return {?}
	         */
	        Validators.maxLength = function (maxLength) {
	            return function (control) {
	                var /** @type {?} */ length = control.value ? control.value.length : 0;
	                return length > maxLength ?
	                    { 'maxlength': { 'requiredLength': maxLength, 'actualLength': length } } :
	                    null;
	            };
	        };
	        /**
	         * Validator that requires a control to match a regex to its value.
	         * @param {?} pattern
	         * @return {?}
	         */
	        Validators.pattern = function (pattern) {
	            if (!pattern)
	                return Validators.nullValidator;
	            var /** @type {?} */ regex;
	            var /** @type {?} */ regexStr;
	            if (typeof pattern === 'string') {
	                regexStr = "^" + pattern + "$";
	                regex = new RegExp(regexStr);
	            }
	            else {
	                regexStr = pattern.toString();
	                regex = pattern;
	            }
	            return function (control) {
	                if (isEmptyInputValue(control.value)) {
	                    return null; // don't validate empty values to allow optional controls
	                }
	                var /** @type {?} */ value = control.value;
	                return regex.test(value) ? null :
	                    { 'pattern': { 'requiredPattern': regexStr, 'actualValue': value } };
	            };
	        };
	        /**
	         * No-op validator.
	         * @param {?} c
	         * @return {?}
	         */
	        Validators.nullValidator = function (c) { return null; };
	        /**
	         * Compose multiple validators into a single function that returns the union
	         * of the individual error maps.
	         * @param {?} validators
	         * @return {?}
	         */
	        Validators.compose = function (validators) {
	            if (!validators)
	                return null;
	            var /** @type {?} */ presentValidators = validators.filter(isPresent);
	            if (presentValidators.length == 0)
	                return null;
	            return function (control) {
	                return _mergeErrors(_executeValidators(control, presentValidators));
	            };
	        };
	        /**
	         * @param {?} validators
	         * @return {?}
	         */
	        Validators.composeAsync = function (validators) {
	            if (!validators)
	                return null;
	            var /** @type {?} */ presentValidators = validators.filter(isPresent);
	            if (presentValidators.length == 0)
	                return null;
	            return function (control) {
	                var /** @type {?} */ promises = _executeAsyncValidators(control, presentValidators).map(_convertToPromise);
	                return Promise.all(promises).then(_mergeErrors);
	            };
	        };
	        return Validators;
	    }());
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function _convertToPromise(obj) {
	        return isPromise(obj) ? obj : rxjs_operator_toPromise.toPromise.call(obj);
	    }
	    /**
	     * @param {?} control
	     * @param {?} validators
	     * @return {?}
	     */
	    function _executeValidators(control, validators) {
	        return validators.map(function (v) { return v(control); });
	    }
	    /**
	     * @param {?} control
	     * @param {?} validators
	     * @return {?}
	     */
	    function _executeAsyncValidators(control, validators) {
	        return validators.map(function (v) { return v(control); });
	    }
	    /**
	     * @param {?} arrayOfErrors
	     * @return {?}
	     */
	    function _mergeErrors(arrayOfErrors) {
	        var /** @type {?} */ res = arrayOfErrors.reduce(function (res, errors) {
	            return isPresent(errors) ? StringMapWrapper.merge(res, errors) : res;
	        }, {});
	        return Object.keys(res).length === 0 ? null : res;
	    }
	
	    /**
	     * Used to provide a {@link ControlValueAccessor} for form controls.
	     *
	     * See {@link DefaultValueAccessor} for how to implement one.
	     * @stable
	     */
	    var /** @type {?} */ NG_VALUE_ACCESSOR = new _angular_core.OpaqueToken('NgValueAccessor');
	
	    var /** @type {?} */ CHECKBOX_VALUE_ACCESSOR = {
	        provide: NG_VALUE_ACCESSOR,
	        useExisting: _angular_core.forwardRef(function () { return CheckboxControlValueAccessor; }),
	        multi: true,
	    };
	    /**
	     * The accessor for writing a value and listening to changes on a checkbox input element.
	     *
	     *  ### Example
	     *  ```
	     *  <input type="checkbox" name="rememberLogin" ngModel>
	     *  ```
	     *
	     *  \@stable
	     */
	    var CheckboxControlValueAccessor = (function () {
	        /**
	         * @param {?} _renderer
	         * @param {?} _elementRef
	         */
	        function CheckboxControlValueAccessor(_renderer, _elementRef) {
	            this._renderer = _renderer;
	            this._elementRef = _elementRef;
	            this.onChange = function (_) { };
	            this.onTouched = function () { };
	        }
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        CheckboxControlValueAccessor.prototype.writeValue = function (value) {
	            this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', value);
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        CheckboxControlValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        CheckboxControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	        /**
	         * @param {?} isDisabled
	         * @return {?}
	         */
	        CheckboxControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
	            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
	        };
	        CheckboxControlValueAccessor.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',
	                        host: { '(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()' },
	                        providers: [CHECKBOX_VALUE_ACCESSOR]
	                    },] },
	        ];
	        /** @nocollapse */
	        CheckboxControlValueAccessor.ctorParameters = function () { return [
	            { type: _angular_core.Renderer, },
	            { type: _angular_core.ElementRef, },
	        ]; };
	        return CheckboxControlValueAccessor;
	    }());
	
	    var /** @type {?} */ DEFAULT_VALUE_ACCESSOR = {
	        provide: NG_VALUE_ACCESSOR,
	        useExisting: _angular_core.forwardRef(function () { return DefaultValueAccessor; }),
	        multi: true
	    };
	    /**
	     * The default accessor for writing a value and listening to changes that is used by the
	     * {\@link NgModel}, {\@link FormControlDirective}, and {\@link FormControlName} directives.
	     *
	     *  ### Example
	     *  ```
	     *  <input type="text" name="searchQuery" ngModel>
	     *  ```
	     *
	     *  \@stable
	     */
	    var DefaultValueAccessor = (function () {
	        /**
	         * @param {?} _renderer
	         * @param {?} _elementRef
	         */
	        function DefaultValueAccessor(_renderer, _elementRef) {
	            this._renderer = _renderer;
	            this._elementRef = _elementRef;
	            this.onChange = function (_) { };
	            this.onTouched = function () { };
	        }
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        DefaultValueAccessor.prototype.writeValue = function (value) {
	            var /** @type {?} */ normalizedValue = value == null ? '' : value;
	            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        DefaultValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        DefaultValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	        /**
	         * @param {?} isDisabled
	         * @return {?}
	         */
	        DefaultValueAccessor.prototype.setDisabledState = function (isDisabled) {
	            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
	        };
	        DefaultValueAccessor.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',
	                        // TODO: vsavkin replace the above selector with the one below it once
	                        // https://github.com/angular/angular/issues/3011 is implemented
	                        // selector: '[ngControl],[ngModel],[ngFormControl]',
	                        host: { '(input)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },
	                        providers: [DEFAULT_VALUE_ACCESSOR]
	                    },] },
	        ];
	        /** @nocollapse */
	        DefaultValueAccessor.ctorParameters = function () { return [
	            { type: _angular_core.Renderer, },
	            { type: _angular_core.ElementRef, },
	        ]; };
	        return DefaultValueAccessor;
	    }());
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * @param {?} validator
	     * @return {?}
	     */
	    function normalizeValidator(validator) {
	        if (((validator)).validate) {
	            return function (c) { return ((validator)).validate(c); };
	        }
	        else {
	            return (validator);
	        }
	    }
	    /**
	     * @param {?} validator
	     * @return {?}
	     */
	    function normalizeAsyncValidator(validator) {
	        if (((validator)).validate) {
	            return function (c) { return ((validator)).validate(c); };
	        }
	        else {
	            return (validator);
	        }
	    }
	
	    var /** @type {?} */ NUMBER_VALUE_ACCESSOR = {
	        provide: NG_VALUE_ACCESSOR,
	        useExisting: _angular_core.forwardRef(function () { return NumberValueAccessor; }),
	        multi: true
	    };
	    /**
	     * The accessor for writing a number value and listening to changes that is used by the
	     * {\@link NgModel}, {\@link FormControlDirective}, and {\@link FormControlName} directives.
	     *
	     *  ### Example
	     *  ```
	     *  <input type="number" [(ngModel)]="age">
	     *  ```
	     */
	    var NumberValueAccessor = (function () {
	        /**
	         * @param {?} _renderer
	         * @param {?} _elementRef
	         */
	        function NumberValueAccessor(_renderer, _elementRef) {
	            this._renderer = _renderer;
	            this._elementRef = _elementRef;
	            this.onChange = function (_) { };
	            this.onTouched = function () { };
	        }
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        NumberValueAccessor.prototype.writeValue = function (value) {
	            // The value needs to be normalized for IE9, otherwise it is set to 'null' when null
	            var /** @type {?} */ normalizedValue = value == null ? '' : value;
	            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        NumberValueAccessor.prototype.registerOnChange = function (fn) {
	            this.onChange = function (value) { fn(value == '' ? null : parseFloat(value)); };
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        NumberValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	        /**
	         * @param {?} isDisabled
	         * @return {?}
	         */
	        NumberValueAccessor.prototype.setDisabledState = function (isDisabled) {
	            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
	        };
	        NumberValueAccessor.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',
	                        host: {
	                            '(change)': 'onChange($event.target.value)',
	                            '(input)': 'onChange($event.target.value)',
	                            '(blur)': 'onTouched()'
	                        },
	                        providers: [NUMBER_VALUE_ACCESSOR]
	                    },] },
	        ];
	        /** @nocollapse */
	        NumberValueAccessor.ctorParameters = function () { return [
	            { type: _angular_core.Renderer, },
	            { type: _angular_core.ElementRef, },
	        ]; };
	        return NumberValueAccessor;
	    }());
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$2 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * @return {?}
	     */
	    function unimplemented() {
	        throw new Error('unimplemented');
	    }
	    /**
	     * A base class that all control directive extend.
	     * It binds a {\@link FormControl} object to a DOM element.
	     *
	     * Used internally by Angular forms.
	     *
	     * \@stable
	     * @abstract
	     */
	    var NgControl = (function (_super) {
	        __extends$2(NgControl, _super);
	        function NgControl() {
	            _super.apply(this, arguments);
	            /** @internal */
	            this._parent = null;
	            this.name = null;
	            this.valueAccessor = null;
	            /** @internal */
	            this._rawValidators = [];
	            /** @internal */
	            this._rawAsyncValidators = [];
	        }
	        Object.defineProperty(NgControl.prototype, "validator", {
	            /**
	             * @return {?}
	             */
	            get: function () { return (unimplemented()); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgControl.prototype, "asyncValidator", {
	            /**
	             * @return {?}
	             */
	            get: function () { return (unimplemented()); },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @abstract
	         * @param {?} newValue
	         * @return {?}
	         */
	        NgControl.prototype.viewToModelUpdate = function (newValue) { };
	        return NgControl;
	    }(AbstractControlDirective));
	
	    var /** @type {?} */ RADIO_VALUE_ACCESSOR = {
	        provide: NG_VALUE_ACCESSOR,
	        useExisting: _angular_core.forwardRef(function () { return RadioControlValueAccessor; }),
	        multi: true
	    };
	    /**
	     * Internal class used by Angular to uncheck radio buttons with the matching name.
	     */
	    var RadioControlRegistry = (function () {
	        function RadioControlRegistry() {
	            this._accessors = [];
	        }
	        /**
	         * @param {?} control
	         * @param {?} accessor
	         * @return {?}
	         */
	        RadioControlRegistry.prototype.add = function (control, accessor) {
	            this._accessors.push([control, accessor]);
	        };
	        /**
	         * @param {?} accessor
	         * @return {?}
	         */
	        RadioControlRegistry.prototype.remove = function (accessor) {
	            for (var /** @type {?} */ i = this._accessors.length - 1; i >= 0; --i) {
	                if (this._accessors[i][1] === accessor) {
	                    this._accessors.splice(i, 1);
	                    return;
	                }
	            }
	        };
	        /**
	         * @param {?} accessor
	         * @return {?}
	         */
	        RadioControlRegistry.prototype.select = function (accessor) {
	            var _this = this;
	            this._accessors.forEach(function (c) {
	                if (_this._isSameGroup(c, accessor) && c[1] !== accessor) {
	                    c[1].fireUncheck(accessor.value);
	                }
	            });
	        };
	        /**
	         * @param {?} controlPair
	         * @param {?} accessor
	         * @return {?}
	         */
	        RadioControlRegistry.prototype._isSameGroup = function (controlPair, accessor) {
	            if (!controlPair[0].control)
	                return false;
	            return controlPair[0]._parent === accessor._control._parent &&
	                controlPair[1].name === accessor.name;
	        };
	        RadioControlRegistry.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        RadioControlRegistry.ctorParameters = function () { return []; };
	        return RadioControlRegistry;
	    }());
	    /**
	     * \@whatItDoes Writes radio control values and listens to radio control changes.
	     *
	     * Used by {\@link NgModel}, {\@link FormControlDirective}, and {\@link FormControlName}
	     * to keep the view synced with the {\@link FormControl} model.
	     *
	     * \@howToUse
	     *
	     * If you have imported the {\@link FormsModule} or the {\@link ReactiveFormsModule}, this
	     * value accessor will be active on any radio control that has a form directive. You do
	     * **not** need to add a special selector to activate it.
	     *
	     * ### How to use radio buttons with form directives
	     *
	     * To use radio buttons in a template-driven form, you'll want to ensure that radio buttons
	     * in the same group have the same `name` attribute.  Radio buttons with different `name`
	     * attributes do not affect each other.
	     *
	     * {\@example forms/ts/radioButtons/radio_button_example.ts region='TemplateDriven'}
	     *
	     * When using radio buttons in a reactive form, radio buttons in the same group should have the
	     * same `formControlName`. You can also add a `name` attribute, but it's optional.
	     *
	     * {\@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}
	     *
	     *  * **npm package**: `\@angular/forms`
	     *
	     *  \@stable
	     */
	    var RadioControlValueAccessor = (function () {
	        /**
	         * @param {?} _renderer
	         * @param {?} _elementRef
	         * @param {?} _registry
	         * @param {?} _injector
	         */
	        function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {
	            this._renderer = _renderer;
	            this._elementRef = _elementRef;
	            this._registry = _registry;
	            this._injector = _injector;
	            this.onChange = function () { };
	            this.onTouched = function () { };
	        }
	        /**
	         * @return {?}
	         */
	        RadioControlValueAccessor.prototype.ngOnInit = function () {
	            this._control = this._injector.get(NgControl);
	            this._checkName();
	            this._registry.add(this._control, this);
	        };
	        /**
	         * @return {?}
	         */
	        RadioControlValueAccessor.prototype.ngOnDestroy = function () { this._registry.remove(this); };
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        RadioControlValueAccessor.prototype.writeValue = function (value) {
	            this._state = value === this.value;
	            this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', this._state);
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        RadioControlValueAccessor.prototype.registerOnChange = function (fn) {
	            var _this = this;
	            this._fn = fn;
	            this.onChange = function () {
	                fn(_this.value);
	                _this._registry.select(_this);
	            };
	        };
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        RadioControlValueAccessor.prototype.fireUncheck = function (value) { this.writeValue(value); };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        RadioControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	        /**
	         * @param {?} isDisabled
	         * @return {?}
	         */
	        RadioControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
	            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
	        };
	        /**
	         * @return {?}
	         */
	        RadioControlValueAccessor.prototype._checkName = function () {
	            if (this.name && this.formControlName && this.name !== this.formControlName) {
	                this._throwNameError();
	            }
	            if (!this.name && this.formControlName)
	                this.name = this.formControlName;
	        };
	        /**
	         * @return {?}
	         */
	        RadioControlValueAccessor.prototype._throwNameError = function () {
	            throw new Error("\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <input type=\"radio\" formControlName=\"food\" name=\"food\">\n    ");
	        };
	        RadioControlValueAccessor.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',
	                        host: { '(change)': 'onChange()', '(blur)': 'onTouched()' },
	                        providers: [RADIO_VALUE_ACCESSOR]
	                    },] },
	        ];
	        /** @nocollapse */
	        RadioControlValueAccessor.ctorParameters = function () { return [
	            { type: _angular_core.Renderer, },
	            { type: _angular_core.ElementRef, },
	            { type: RadioControlRegistry, },
	            { type: _angular_core.Injector, },
	        ]; };
	        RadioControlValueAccessor.propDecorators = {
	            'name': [{ type: _angular_core.Input },],
	            'formControlName': [{ type: _angular_core.Input },],
	            'value': [{ type: _angular_core.Input },],
	        };
	        return RadioControlValueAccessor;
	    }());
	
	    var /** @type {?} */ RANGE_VALUE_ACCESSOR = {
	        provide: NG_VALUE_ACCESSOR,
	        useExisting: _angular_core.forwardRef(function () { return RangeValueAccessor; }),
	        multi: true
	    };
	    /**
	     * The accessor for writing a range value and listening to changes that is used by the
	     * {\@link NgModel}, {\@link FormControlDirective}, and {\@link FormControlName} directives.
	     *
	     *  ### Example
	     *  ```
	     *  <input type="range" [(ngModel)]="age" >
	     *  ```
	     */
	    var RangeValueAccessor = (function () {
	        /**
	         * @param {?} _renderer
	         * @param {?} _elementRef
	         */
	        function RangeValueAccessor(_renderer, _elementRef) {
	            this._renderer = _renderer;
	            this._elementRef = _elementRef;
	            this.onChange = function (_) { };
	            this.onTouched = function () { };
	        }
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        RangeValueAccessor.prototype.writeValue = function (value) {
	            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', parseFloat(value));
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        RangeValueAccessor.prototype.registerOnChange = function (fn) {
	            this.onChange = function (value) { fn(value == '' ? null : parseFloat(value)); };
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        RangeValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	        /**
	         * @param {?} isDisabled
	         * @return {?}
	         */
	        RangeValueAccessor.prototype.setDisabledState = function (isDisabled) {
	            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
	        };
	        RangeValueAccessor.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: 'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',
	                        host: {
	                            '(change)': 'onChange($event.target.value)',
	                            '(input)': 'onChange($event.target.value)',
	                            '(blur)': 'onTouched()'
	                        },
	                        providers: [RANGE_VALUE_ACCESSOR]
	                    },] },
	        ];
	        /** @nocollapse */
	        RangeValueAccessor.ctorParameters = function () { return [
	            { type: _angular_core.Renderer, },
	            { type: _angular_core.ElementRef, },
	        ]; };
	        return RangeValueAccessor;
	    }());
	
	    var /** @type {?} */ SELECT_VALUE_ACCESSOR = {
	        provide: NG_VALUE_ACCESSOR,
	        useExisting: _angular_core.forwardRef(function () { return SelectControlValueAccessor; }),
	        multi: true
	    };
	    /**
	     * @param {?} id
	     * @param {?} value
	     * @return {?}
	     */
	    function _buildValueString(id, value) {
	        if (id == null)
	            return "" + value;
	        if (!isPrimitive(value))
	            value = 'Object';
	        return (id + ": " + value).slice(0, 50);
	    }
	    /**
	     * @param {?} valueString
	     * @return {?}
	     */
	    function _extractId(valueString) {
	        return valueString.split(':')[0];
	    }
	    /**
	     * \@whatItDoes Writes values and listens to changes on a select element.
	     *
	     * Used by {\@link NgModel}, {\@link FormControlDirective}, and {\@link FormControlName}
	     * to keep the view synced with the {\@link FormControl} model.
	     *
	     * \@howToUse
	     *
	     * If you have imported the {\@link FormsModule} or the {\@link ReactiveFormsModule}, this
	     * value accessor will be active on any select control that has a form directive. You do
	     * **not** need to add a special selector to activate it.
	     *
	     * ### How to use select controls with form directives
	     *
	     * To use a select in a template-driven form, simply add an `ngModel` and a `name`
	     * attribute to the main `<select>` tag.
	     *
	     * If your option values are simple strings, you can bind to the normal `value` property
	     * on the option.  If your option values happen to be objects (and you'd like to save the
	     * selection in your form as an object), use `ngValue` instead:
	     *
	     * {\@example forms/ts/selectControl/select_control_example.ts region='Component'}
	     *
	     * In reactive forms, you'll also want to add your form directive (`formControlName` or
	     * `formControl`) on the main `<select>` tag. Like in the former example, you have the
	     * choice of binding to the  `value` or `ngValue` property on the select's options.
	     *
	     * {\@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}
	     *
	     * Note: We listen to the 'change' event because 'input' events aren't fired
	     * for selects in Firefox and IE:
	     * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350
	     * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/
	     *
	     * * **npm package**: `\@angular/forms`
	     *
	     * \@stable
	     */
	    var SelectControlValueAccessor = (function () {
	        /**
	         * @param {?} _renderer
	         * @param {?} _elementRef
	         */
	        function SelectControlValueAccessor(_renderer, _elementRef) {
	            this._renderer = _renderer;
	            this._elementRef = _elementRef;
	            /** @internal */
	            this._optionMap = new Map();
	            /** @internal */
	            this._idCounter = 0;
	            this.onChange = function (_) { };
	            this.onTouched = function () { };
	        }
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        SelectControlValueAccessor.prototype.writeValue = function (value) {
	            this.value = value;
	            var /** @type {?} */ id = this._getOptionId(value);
	            if (id == null) {
	                this._renderer.setElementProperty(this._elementRef.nativeElement, 'selectedIndex', -1);
	            }
	            var /** @type {?} */ valueString = _buildValueString(id, value);
	            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', valueString);
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        SelectControlValueAccessor.prototype.registerOnChange = function (fn) {
	            var _this = this;
	            this.onChange = function (valueString) {
	                _this.value = valueString;
	                fn(_this._getOptionValue(valueString));
	            };
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        SelectControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	        /**
	         * @param {?} isDisabled
	         * @return {?}
	         */
	        SelectControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
	            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
	        };
	        /**
	         * \@internal
	         * @return {?}
	         */
	        SelectControlValueAccessor.prototype._registerOption = function () { return (this._idCounter++).toString(); };
	        /**
	         * \@internal
	         * @param {?} value
	         * @return {?}
	         */
	        SelectControlValueAccessor.prototype._getOptionId = function (value) {
	            for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {
	                var id = _a[_i];
	                if (looseIdentical(this._optionMap.get(id), value))
	                    return id;
	            }
	            return null;
	        };
	        /**
	         * \@internal
	         * @param {?} valueString
	         * @return {?}
	         */
	        SelectControlValueAccessor.prototype._getOptionValue = function (valueString) {
	            var /** @type {?} */ id = _extractId(valueString);
	            return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;
	        };
	        SelectControlValueAccessor.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',
	                        host: { '(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },
	                        providers: [SELECT_VALUE_ACCESSOR]
	                    },] },
	        ];
	        /** @nocollapse */
	        SelectControlValueAccessor.ctorParameters = function () { return [
	            { type: _angular_core.Renderer, },
	            { type: _angular_core.ElementRef, },
	        ]; };
	        return SelectControlValueAccessor;
	    }());
	    /**
	     * \@whatItDoes Marks `<option>` as dynamic, so Angular can be notified when options change.
	     *
	     * \@howToUse
	     *
	     * See docs for {\@link SelectControlValueAccessor} for usage examples.
	     *
	     * \@stable
	     */
	    var NgSelectOption = (function () {
	        /**
	         * @param {?} _element
	         * @param {?} _renderer
	         * @param {?} _select
	         */
	        function NgSelectOption(_element, _renderer, _select) {
	            this._element = _element;
	            this._renderer = _renderer;
	            this._select = _select;
	            if (this._select)
	                this.id = this._select._registerOption();
	        }
	        Object.defineProperty(NgSelectOption.prototype, "ngValue", {
	            /**
	             * @param {?} value
	             * @return {?}
	             */
	            set: function (value) {
	                if (this._select == null)
	                    return;
	                this._select._optionMap.set(this.id, value);
	                this._setElementValue(_buildValueString(this.id, value));
	                this._select.writeValue(this._select.value);
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgSelectOption.prototype, "value", {
	            /**
	             * @param {?} value
	             * @return {?}
	             */
	            set: function (value) {
	                this._setElementValue(value);
	                if (this._select)
	                    this._select.writeValue(this._select.value);
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * \@internal
	         * @param {?} value
	         * @return {?}
	         */
	        NgSelectOption.prototype._setElementValue = function (value) {
	            this._renderer.setElementProperty(this._element.nativeElement, 'value', value);
	        };
	        /**
	         * @return {?}
	         */
	        NgSelectOption.prototype.ngOnDestroy = function () {
	            if (this._select) {
	                this._select._optionMap.delete(this.id);
	                this._select.writeValue(this._select.value);
	            }
	        };
	        NgSelectOption.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: 'option' },] },
	        ];
	        /** @nocollapse */
	        NgSelectOption.ctorParameters = function () { return [
	            { type: _angular_core.ElementRef, },
	            { type: _angular_core.Renderer, },
	            { type: SelectControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },
	        ]; };
	        NgSelectOption.propDecorators = {
	            'ngValue': [{ type: _angular_core.Input, args: ['ngValue',] },],
	            'value': [{ type: _angular_core.Input, args: ['value',] },],
	        };
	        return NgSelectOption;
	    }());
	
	    var /** @type {?} */ SELECT_MULTIPLE_VALUE_ACCESSOR = {
	        provide: NG_VALUE_ACCESSOR,
	        useExisting: _angular_core.forwardRef(function () { return SelectMultipleControlValueAccessor; }),
	        multi: true
	    };
	    /**
	     * @param {?} id
	     * @param {?} value
	     * @return {?}
	     */
	    function _buildValueString$1(id, value) {
	        if (id == null)
	            return "" + value;
	        if (typeof value === 'string')
	            value = "'" + value + "'";
	        if (!isPrimitive(value))
	            value = 'Object';
	        return (id + ": " + value).slice(0, 50);
	    }
	    /**
	     * @param {?} valueString
	     * @return {?}
	     */
	    function _extractId$1(valueString) {
	        return valueString.split(':')[0];
	    }
	    /**
	     * The accessor for writing a value and listening to changes on a select element.
	     *
	     * \@stable
	     */
	    var SelectMultipleControlValueAccessor = (function () {
	        /**
	         * @param {?} _renderer
	         * @param {?} _elementRef
	         */
	        function SelectMultipleControlValueAccessor(_renderer, _elementRef) {
	            this._renderer = _renderer;
	            this._elementRef = _elementRef;
	            /** @internal */
	            this._optionMap = new Map();
	            /** @internal */
	            this._idCounter = 0;
	            this.onChange = function (_) { };
	            this.onTouched = function () { };
	        }
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        SelectMultipleControlValueAccessor.prototype.writeValue = function (value) {
	            var _this = this;
	            this.value = value;
	            var /** @type {?} */ optionSelectedStateSetter;
	            if (Array.isArray(value)) {
	                // convert values to ids
	                var /** @type {?} */ ids_1 = value.map(function (v) { return _this._getOptionId(v); });
	                optionSelectedStateSetter = function (opt, o) { opt._setSelected(ids_1.indexOf(o.toString()) > -1); };
	            }
	            else {
	                optionSelectedStateSetter = function (opt, o) { opt._setSelected(false); };
	            }
	            this._optionMap.forEach(optionSelectedStateSetter);
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        SelectMultipleControlValueAccessor.prototype.registerOnChange = function (fn) {
	            var _this = this;
	            this.onChange = function (_) {
	                var /** @type {?} */ selected = [];
	                if (_.hasOwnProperty('selectedOptions')) {
	                    var /** @type {?} */ options = _.selectedOptions;
	                    for (var /** @type {?} */ i = 0; i < options.length; i++) {
	                        var /** @type {?} */ opt = options.item(i);
	                        var /** @type {?} */ val = _this._getOptionValue(opt.value);
	                        selected.push(val);
	                    }
	                }
	                else {
	                    var /** @type {?} */ options = (_.options);
	                    for (var /** @type {?} */ i = 0; i < options.length; i++) {
	                        var /** @type {?} */ opt = options.item(i);
	                        if (opt.selected) {
	                            var /** @type {?} */ val = _this._getOptionValue(opt.value);
	                            selected.push(val);
	                        }
	                    }
	                }
	                _this.value = selected;
	                fn(selected);
	            };
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        SelectMultipleControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	        /**
	         * @param {?} isDisabled
	         * @return {?}
	         */
	        SelectMultipleControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
	            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
	        };
	        /**
	         * \@internal
	         * @param {?} value
	         * @return {?}
	         */
	        SelectMultipleControlValueAccessor.prototype._registerOption = function (value) {
	            var /** @type {?} */ id = (this._idCounter++).toString();
	            this._optionMap.set(id, value);
	            return id;
	        };
	        /**
	         * \@internal
	         * @param {?} value
	         * @return {?}
	         */
	        SelectMultipleControlValueAccessor.prototype._getOptionId = function (value) {
	            for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {
	                var id = _a[_i];
	                if (looseIdentical(this._optionMap.get(id)._value, value))
	                    return id;
	            }
	            return null;
	        };
	        /**
	         * \@internal
	         * @param {?} valueString
	         * @return {?}
	         */
	        SelectMultipleControlValueAccessor.prototype._getOptionValue = function (valueString) {
	            var /** @type {?} */ id = _extractId$1(valueString);
	            return this._optionMap.has(id) ? this._optionMap.get(id)._value : valueString;
	        };
	        SelectMultipleControlValueAccessor.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',
	                        host: { '(change)': 'onChange($event.target)', '(blur)': 'onTouched()' },
	                        providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]
	                    },] },
	        ];
	        /** @nocollapse */
	        SelectMultipleControlValueAccessor.ctorParameters = function () { return [
	            { type: _angular_core.Renderer, },
	            { type: _angular_core.ElementRef, },
	        ]; };
	        return SelectMultipleControlValueAccessor;
	    }());
	    /**
	     * Marks `<option>` as dynamic, so Angular can be notified when options change.
	     *
	     * ### Example
	     *
	     * ```
	     * <select multiple name="city" ngModel>
	     *   <option *ngFor="let c of cities" [value]="c"></option>
	     * </select>
	     * ```
	     */
	    var NgSelectMultipleOption = (function () {
	        /**
	         * @param {?} _element
	         * @param {?} _renderer
	         * @param {?} _select
	         */
	        function NgSelectMultipleOption(_element, _renderer, _select) {
	            this._element = _element;
	            this._renderer = _renderer;
	            this._select = _select;
	            if (this._select) {
	                this.id = this._select._registerOption(this);
	            }
	        }
	        Object.defineProperty(NgSelectMultipleOption.prototype, "ngValue", {
	            /**
	             * @param {?} value
	             * @return {?}
	             */
	            set: function (value) {
	                if (this._select == null)
	                    return;
	                this._value = value;
	                this._setElementValue(_buildValueString$1(this.id, value));
	                this._select.writeValue(this._select.value);
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgSelectMultipleOption.prototype, "value", {
	            /**
	             * @param {?} value
	             * @return {?}
	             */
	            set: function (value) {
	                if (this._select) {
	                    this._value = value;
	                    this._setElementValue(_buildValueString$1(this.id, value));
	                    this._select.writeValue(this._select.value);
	                }
	                else {
	                    this._setElementValue(value);
	                }
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * \@internal
	         * @param {?} value
	         * @return {?}
	         */
	        NgSelectMultipleOption.prototype._setElementValue = function (value) {
	            this._renderer.setElementProperty(this._element.nativeElement, 'value', value);
	        };
	        /**
	         * \@internal
	         * @param {?} selected
	         * @return {?}
	         */
	        NgSelectMultipleOption.prototype._setSelected = function (selected) {
	            this._renderer.setElementProperty(this._element.nativeElement, 'selected', selected);
	        };
	        /**
	         * @return {?}
	         */
	        NgSelectMultipleOption.prototype.ngOnDestroy = function () {
	            if (this._select) {
	                this._select._optionMap.delete(this.id);
	                this._select.writeValue(this._select.value);
	            }
	        };
	        NgSelectMultipleOption.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: 'option' },] },
	        ];
	        /** @nocollapse */
	        NgSelectMultipleOption.ctorParameters = function () { return [
	            { type: _angular_core.ElementRef, },
	            { type: _angular_core.Renderer, },
	            { type: SelectMultipleControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },
	        ]; };
	        NgSelectMultipleOption.propDecorators = {
	            'ngValue': [{ type: _angular_core.Input, args: ['ngValue',] },],
	            'value': [{ type: _angular_core.Input, args: ['value',] },],
	        };
	        return NgSelectMultipleOption;
	    }());
	
	    /**
	     * @param {?} name
	     * @param {?} parent
	     * @return {?}
	     */
	    function controlPath(name, parent) {
	        return parent.path.concat([name]);
	    }
	    /**
	     * @param {?} control
	     * @param {?} dir
	     * @return {?}
	     */
	    function setUpControl(control, dir) {
	        if (!control)
	            _throwError(dir, 'Cannot find control with');
	        if (!dir.valueAccessor)
	            _throwError(dir, 'No value accessor for form control with');
	        control.validator = Validators.compose([control.validator, dir.validator]);
	        control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);
	        dir.valueAccessor.writeValue(control.value);
	        // view -> model
	        dir.valueAccessor.registerOnChange(function (newValue) {
	            dir.viewToModelUpdate(newValue);
	            control.markAsDirty();
	            control.setValue(newValue, { emitModelToViewChange: false });
	        });
	        // touched
	        dir.valueAccessor.registerOnTouched(function () { return control.markAsTouched(); });
	        control.registerOnChange(function (newValue, emitModelEvent) {
	            // control -> view
	            dir.valueAccessor.writeValue(newValue);
	            // control -> ngModel
	            if (emitModelEvent)
	                dir.viewToModelUpdate(newValue);
	        });
	        if (dir.valueAccessor.setDisabledState) {
	            control.registerOnDisabledChange(function (isDisabled) { dir.valueAccessor.setDisabledState(isDisabled); });
	        }
	        // re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4
	        dir._rawValidators.forEach(function (validator) {
	            if (((validator)).registerOnValidatorChange)
	                ((validator)).registerOnValidatorChange(function () { return control.updateValueAndValidity(); });
	        });
	        dir._rawAsyncValidators.forEach(function (validator) {
	            if (((validator)).registerOnValidatorChange)
	                ((validator)).registerOnValidatorChange(function () { return control.updateValueAndValidity(); });
	        });
	    }
	    /**
	     * @param {?} control
	     * @param {?} dir
	     * @return {?}
	     */
	    function cleanUpControl(control, dir) {
	        dir.valueAccessor.registerOnChange(function () { return _noControlError(dir); });
	        dir.valueAccessor.registerOnTouched(function () { return _noControlError(dir); });
	        dir._rawValidators.forEach(function (validator) {
	            if (validator.registerOnValidatorChange) {
	                validator.registerOnValidatorChange(null);
	            }
	        });
	        dir._rawAsyncValidators.forEach(function (validator) {
	            if (validator.registerOnValidatorChange) {
	                validator.registerOnValidatorChange(null);
	            }
	        });
	        if (control)
	            control._clearChangeFns();
	    }
	    /**
	     * @param {?} control
	     * @param {?} dir
	     * @return {?}
	     */
	    function setUpFormContainer(control, dir) {
	        if (isBlank(control))
	            _throwError(dir, 'Cannot find control with');
	        control.validator = Validators.compose([control.validator, dir.validator]);
	        control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);
	    }
	    /**
	     * @param {?} dir
	     * @return {?}
	     */
	    function _noControlError(dir) {
	        return _throwError(dir, 'There is no FormControl instance attached to form control element with');
	    }
	    /**
	     * @param {?} dir
	     * @param {?} message
	     * @return {?}
	     */
	    function _throwError(dir, message) {
	        var /** @type {?} */ messageEnd;
	        if (dir.path.length > 1) {
	            messageEnd = "path: '" + dir.path.join(' -> ') + "'";
	        }
	        else if (dir.path[0]) {
	            messageEnd = "name: '" + dir.path + "'";
	        }
	        else {
	            messageEnd = 'unspecified name attribute';
	        }
	        throw new Error(message + " " + messageEnd);
	    }
	    /**
	     * @param {?} validators
	     * @return {?}
	     */
	    function composeValidators(validators) {
	        return isPresent(validators) ? Validators.compose(validators.map(normalizeValidator)) : null;
	    }
	    /**
	     * @param {?} validators
	     * @return {?}
	     */
	    function composeAsyncValidators(validators) {
	        return isPresent(validators) ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) :
	            null;
	    }
	    /**
	     * @param {?} changes
	     * @param {?} viewModel
	     * @return {?}
	     */
	    function isPropertyUpdated(changes, viewModel) {
	        if (!changes.hasOwnProperty('model'))
	            return false;
	        var /** @type {?} */ change = changes['model'];
	        if (change.isFirstChange())
	            return true;
	        return !looseIdentical(viewModel, change.currentValue);
	    }
	    var /** @type {?} */ BUILTIN_ACCESSORS = [
	        CheckboxControlValueAccessor,
	        RangeValueAccessor,
	        NumberValueAccessor,
	        SelectControlValueAccessor,
	        SelectMultipleControlValueAccessor,
	        RadioControlValueAccessor,
	    ];
	    /**
	     * @param {?} valueAccessor
	     * @return {?}
	     */
	    function isBuiltInAccessor(valueAccessor) {
	        return BUILTIN_ACCESSORS.some(function (a) { return valueAccessor.constructor === a; });
	    }
	    /**
	     * @param {?} dir
	     * @param {?} valueAccessors
	     * @return {?}
	     */
	    function selectValueAccessor(dir, valueAccessors) {
	        if (!valueAccessors)
	            return null;
	        var /** @type {?} */ defaultAccessor;
	        var /** @type {?} */ builtinAccessor;
	        var /** @type {?} */ customAccessor;
	        valueAccessors.forEach(function (v) {
	            if (v.constructor === DefaultValueAccessor) {
	                defaultAccessor = v;
	            }
	            else if (isBuiltInAccessor(v)) {
	                if (builtinAccessor)
	                    _throwError(dir, 'More than one built-in value accessor matches form control with');
	                builtinAccessor = v;
	            }
	            else {
	                if (customAccessor)
	                    _throwError(dir, 'More than one custom value accessor matches form control with');
	                customAccessor = v;
	            }
	        });
	        if (customAccessor)
	            return customAccessor;
	        if (builtinAccessor)
	            return builtinAccessor;
	        if (defaultAccessor)
	            return defaultAccessor;
	        _throwError(dir, 'No valid value accessor for form control with');
	        return null;
	    }
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * This is a base class for code shared between {\@link NgModelGroup} and {\@link FormGroupName}.
	     *
	     * \@stable
	     */
	    var AbstractFormGroupDirective = (function (_super) {
	        __extends(AbstractFormGroupDirective, _super);
	        function AbstractFormGroupDirective() {
	            _super.apply(this, arguments);
	        }
	        /**
	         * @return {?}
	         */
	        AbstractFormGroupDirective.prototype.ngOnInit = function () {
	            this._checkParentType();
	            this.formDirective.addFormGroup(this);
	        };
	        /**
	         * @return {?}
	         */
	        AbstractFormGroupDirective.prototype.ngOnDestroy = function () {
	            if (this.formDirective) {
	                this.formDirective.removeFormGroup(this);
	            }
	        };
	        Object.defineProperty(AbstractFormGroupDirective.prototype, "control", {
	            /**
	             * Get the {\@link FormGroup} backing this binding.
	             * @return {?}
	             */
	            get: function () { return this.formDirective.getFormGroup(this); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractFormGroupDirective.prototype, "path", {
	            /**
	             * Get the path to this control group.
	             * @return {?}
	             */
	            get: function () { return controlPath(this.name, this._parent); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractFormGroupDirective.prototype, "formDirective", {
	            /**
	             * Get the {\@link Form} to which this group belongs.
	             * @return {?}
	             */
	            get: function () { return this._parent ? this._parent.formDirective : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractFormGroupDirective.prototype, "validator", {
	            /**
	             * @return {?}
	             */
	            get: function () { return composeValidators(this._validators); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractFormGroupDirective.prototype, "asyncValidator", {
	            /**
	             * @return {?}
	             */
	            get: function () { return composeAsyncValidators(this._asyncValidators); },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * \@internal
	         * @return {?}
	         */
	        AbstractFormGroupDirective.prototype._checkParentType = function () { };
	        return AbstractFormGroupDirective;
	    }(ControlContainer));
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$3 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var AbstractControlStatus = (function () {
	        /**
	         * @param {?} cd
	         */
	        function AbstractControlStatus(cd) {
	            this._cd = cd;
	        }
	        Object.defineProperty(AbstractControlStatus.prototype, "ngClassUntouched", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._cd.control ? this._cd.control.untouched : false; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlStatus.prototype, "ngClassTouched", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._cd.control ? this._cd.control.touched : false; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlStatus.prototype, "ngClassPristine", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._cd.control ? this._cd.control.pristine : false; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlStatus.prototype, "ngClassDirty", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._cd.control ? this._cd.control.dirty : false; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlStatus.prototype, "ngClassValid", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._cd.control ? this._cd.control.valid : false; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlStatus.prototype, "ngClassInvalid", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._cd.control ? this._cd.control.invalid : false; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlStatus.prototype, "ngClassPending", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._cd.control ? this._cd.control.pending : false; },
	            enumerable: true,
	            configurable: true
	        });
	        return AbstractControlStatus;
	    }());
	    var /** @type {?} */ ngControlStatusHost = {
	        '[class.ng-untouched]': 'ngClassUntouched',
	        '[class.ng-touched]': 'ngClassTouched',
	        '[class.ng-pristine]': 'ngClassPristine',
	        '[class.ng-dirty]': 'ngClassDirty',
	        '[class.ng-valid]': 'ngClassValid',
	        '[class.ng-invalid]': 'ngClassInvalid',
	        '[class.ng-pending]': 'ngClassPending',
	    };
	    /**
	     * Directive automatically applied to Angular form controls that sets CSS classes
	     * based on control status (valid/invalid/dirty/etc).
	     *
	     * \@stable
	     */
	    var NgControlStatus = (function (_super) {
	        __extends$3(NgControlStatus, _super);
	        /**
	         * @param {?} cd
	         */
	        function NgControlStatus(cd) {
	            _super.call(this, cd);
	        }
	        NgControlStatus.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[formControlName],[ngModel],[formControl]', host: ngControlStatusHost },] },
	        ];
	        /** @nocollapse */
	        NgControlStatus.ctorParameters = function () { return [
	            { type: NgControl, decorators: [{ type: _angular_core.Self },] },
	        ]; };
	        return NgControlStatus;
	    }(AbstractControlStatus));
	    /**
	     * Directive automatically applied to Angular form groups that sets CSS classes
	     * based on control status (valid/invalid/dirty/etc).
	     *
	     * \@stable
	     */
	    var NgControlStatusGroup = (function (_super) {
	        __extends$3(NgControlStatusGroup, _super);
	        /**
	         * @param {?} cd
	         */
	        function NgControlStatusGroup(cd) {
	            _super.call(this, cd);
	        }
	        NgControlStatusGroup.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',
	                        host: ngControlStatusHost
	                    },] },
	        ];
	        /** @nocollapse */
	        NgControlStatusGroup.ctorParameters = function () { return [
	            { type: ControlContainer, decorators: [{ type: _angular_core.Self },] },
	        ]; };
	        return NgControlStatusGroup;
	    }(AbstractControlStatus));
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$5 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * Use by directives and components to emit custom Events.
	     *
	     * ### Examples
	     *
	     * In the following example, `Zippy` alternatively emits `open` and `close` events when its
	     * title gets clicked:
	     *
	     * ```
	     * \@Component({
	     *   selector: 'zippy',
	     *   template: `
	     *   <div class="zippy">
	     *     <div (click)="toggle()">Toggle</div>
	     *     <div [hidden]="!visible">
	     *       <ng-content></ng-content>
	     *     </div>
	     *  </div>`})
	     * export class Zippy {
	     *   visible: boolean = true;
	     *   \@Output() open: EventEmitter<any> = new EventEmitter();
	     *   \@Output() close: EventEmitter<any> = new EventEmitter();
	     *
	     *   toggle() {
	     *     this.visible = !this.visible;
	     *     if (this.visible) {
	     *       this.open.emit(null);
	     *     } else {
	     *       this.close.emit(null);
	     *     }
	     *   }
	     * }
	     * ```
	     *
	     * The events payload can be accessed by the parameter `$event` on the components output event
	     * handler:
	     *
	     * ```
	     * <zippy (open)="onOpen($event)" (close)="onClose($event)"></zippy>
	     * ```
	     *
	     * Uses Rx.Observable but provides an adapter to make it work as specified here:
	     * https://github.com/jhusain/observable-spec
	     *
	     * Once a reference implementation of the spec is available, switch to it.
	     * \@stable
	     */
	    var EventEmitter = (function (_super) {
	        __extends$5(EventEmitter, _super);
	        /**
	         * Creates an instance of [EventEmitter], which depending on [isAsync],
	         * delivers events synchronously or asynchronously.
	         * @param {?=} isAsync
	         */
	        function EventEmitter(isAsync) {
	            if (isAsync === void 0) { isAsync = false; }
	            _super.call(this);
	            this.__isAsync = isAsync;
	        }
	        /**
	         * @param {?=} value
	         * @return {?}
	         */
	        EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };
	        /**
	         * @param {?=} generatorOrNext
	         * @param {?=} error
	         * @param {?=} complete
	         * @return {?}
	         */
	        EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {
	            var /** @type {?} */ schedulerFn;
	            var /** @type {?} */ errorFn = function (err) { return null; };
	            var /** @type {?} */ completeFn = function () { return null; };
	            if (generatorOrNext && typeof generatorOrNext === 'object') {
	                schedulerFn = this.__isAsync ? function (value) {
	                    setTimeout(function () { return generatorOrNext.next(value); });
	                } : function (value) { generatorOrNext.next(value); };
	                if (generatorOrNext.error) {
	                    errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :
	                        function (err) { generatorOrNext.error(err); };
	                }
	                if (generatorOrNext.complete) {
	                    completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :
	                        function () { generatorOrNext.complete(); };
	                }
	            }
	            else {
	                schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :
	                    function (value) { generatorOrNext(value); };
	                if (error) {
	                    errorFn =
	                        this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };
	                }
	                if (complete) {
	                    completeFn =
	                        this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };
	                }
	            }
	            return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
	        };
	        return EventEmitter;
	    }(rxjs_Subject.Subject));
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$6 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * Indicates that a FormControl is valid, i.e. that no errors exist in the input value.
	     */
	    var /** @type {?} */ VALID = 'VALID';
	    /**
	     * Indicates that a FormControl is invalid, i.e. that an error exists in the input value.
	     */
	    var /** @type {?} */ INVALID = 'INVALID';
	    /**
	     * Indicates that a FormControl is pending, i.e. that async validation is occurring and
	     * errors are not yet available for the input value.
	     */
	    var /** @type {?} */ PENDING = 'PENDING';
	    /**
	     * Indicates that a FormControl is disabled, i.e. that the control is exempt from ancestor
	     * calculations of validity or value.
	     */
	    var /** @type {?} */ DISABLED = 'DISABLED';
	    /**
	     * @param {?} control
	     * @param {?} path
	     * @param {?} delimiter
	     * @return {?}
	     */
	    function _find(control, path, delimiter) {
	        if (path == null)
	            return null;
	        if (!(path instanceof Array)) {
	            path = ((path)).split(delimiter);
	        }
	        if (path instanceof Array && (path.length === 0))
	            return null;
	        return ((path)).reduce(function (v, name) {
	            if (v instanceof FormGroup) {
	                return v.controls[name] || null;
	            }
	            if (v instanceof FormArray) {
	                return v.at(/** @type {?} */ (name)) || null;
	            }
	            return null;
	        }, control);
	    }
	    /**
	     * @param {?} r
	     * @return {?}
	     */
	    function toObservable(r) {
	        return isPromise(r) ? rxjs_observable_fromPromise.fromPromise(r) : r;
	    }
	    /**
	     * @param {?} validator
	     * @return {?}
	     */
	    function coerceToValidator(validator) {
	        return Array.isArray(validator) ? composeValidators(validator) : validator;
	    }
	    /**
	     * @param {?} asyncValidator
	     * @return {?}
	     */
	    function coerceToAsyncValidator(asyncValidator) {
	        return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) : asyncValidator;
	    }
	    /**
	     * \@whatItDoes This is the base class for {\@link FormControl}, {\@link FormGroup}, and
	     * {\@link FormArray}.
	     *
	     * It provides some of the shared behavior that all controls and groups of controls have, like
	     * running validators, calculating status, and resetting state. It also defines the properties
	     * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be
	     * instantiated directly.
	     *
	     * \@stable
	     * @abstract
	     */
	    var AbstractControl = (function () {
	        /**
	         * @param {?} validator
	         * @param {?} asyncValidator
	         */
	        function AbstractControl(validator, asyncValidator) {
	            this.validator = validator;
	            this.asyncValidator = asyncValidator;
	            /** @internal */
	            this._onCollectionChange = function () { };
	            this._pristine = true;
	            this._touched = false;
	            /** @internal */
	            this._onDisabledChange = [];
	        }
	        Object.defineProperty(AbstractControl.prototype, "value", {
	            /**
	             * The value of the control.
	             * @return {?}
	             */
	            get: function () { return this._value; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControl.prototype, "parent", {
	            /**
	             * The parent control.
	             * @return {?}
	             */
	            get: function () { return this._parent; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControl.prototype, "status", {
	            /**
	             * The validation status of the control. There are four possible
	             * validation statuses:
	             *
	             * * **VALID**:  control has passed all validation checks
	             * * **INVALID**: control has failed at least one validation check
	             * * **PENDING**: control is in the midst of conducting a validation check
	             * * **DISABLED**: control is exempt from validation checks
	             *
	             * These statuses are mutually exclusive, so a control cannot be
	             * both valid AND invalid or invalid AND disabled.
	             * @return {?}
	             */
	            get: function () { return this._status; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControl.prototype, "valid", {
	            /**
	             * A control is `valid` when its `status === VALID`.
	             *
	             * In order to have this status, the control must have passed all its
	             * validation checks.
	             * @return {?}
	             */
	            get: function () { return this._status === VALID; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControl.prototype, "invalid", {
	            /**
	             * A control is `invalid` when its `status === INVALID`.
	             *
	             * In order to have this status, the control must have failed
	             * at least one of its validation checks.
	             * @return {?}
	             */
	            get: function () { return this._status === INVALID; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControl.prototype, "pending", {
	            /**
	             * A control is `pending` when its `status === PENDING`.
	             *
	             * In order to have this status, the control must be in the
	             * middle of conducting a validation check.
	             * @return {?}
	             */
	            get: function () { return this._status == PENDING; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControl.prototype, "disabled", {
	            /**
	             * A control is `disabled` when its `status === DISABLED`.
	             *
	             * Disabled controls are exempt from validation checks and
	             * are not included in the aggregate value of their ancestor
	             * controls.
	             * @return {?}
	             */
	            get: function () { return this._status === DISABLED; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControl.prototype, "enabled", {
	            /**
	             * A control is `enabled` as long as its `status !== DISABLED`.
	             *
	             * In other words, it has a status of `VALID`, `INVALID`, or
	             * `PENDING`.
	             * @return {?}
	             */
	            get: function () { return this._status !== DISABLED; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControl.prototype, "errors", {
	            /**
	             * Returns any errors generated by failing validation. If there
	             * are no errors, it will return null.
	             * @return {?}
	             */
	            get: function () { return this._errors; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControl.prototype, "pristine", {
	            /**
	             * A control is `pristine` if the user has not yet changed
	             * the value in the UI.
	             *
	             * Note that programmatic changes to a control's value will
	             * *not* mark it dirty.
	             * @return {?}
	             */
	            get: function () { return this._pristine; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControl.prototype, "dirty", {
	            /**
	             * A control is `dirty` if the user has changed the value
	             * in the UI.
	             *
	             * Note that programmatic changes to a control's value will
	             * *not* mark it dirty.
	             * @return {?}
	             */
	            get: function () { return !this.pristine; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControl.prototype, "touched", {
	            /**
	             * A control is marked `touched` once the user has triggered
	             * a `blur` event on it.
	             * @return {?}
	             */
	            get: function () { return this._touched; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControl.prototype, "untouched", {
	            /**
	             * A control is `untouched` if the user has not yet triggered
	             * a `blur` event on it.
	             * @return {?}
	             */
	            get: function () { return !this._touched; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControl.prototype, "valueChanges", {
	            /**
	             * Emits an event every time the value of the control changes, in
	             * the UI or programmatically.
	             * @return {?}
	             */
	            get: function () { return this._valueChanges; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControl.prototype, "statusChanges", {
	            /**
	             * Emits an event every time the validation status of the control
	             * is re-calculated.
	             * @return {?}
	             */
	            get: function () { return this._statusChanges; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * Sets the synchronous validators that are active on this control.  Calling
	         * this will overwrite any existing sync validators.
	         * @param {?} newValidator
	         * @return {?}
	         */
	        AbstractControl.prototype.setValidators = function (newValidator) {
	            this.validator = coerceToValidator(newValidator);
	        };
	        /**
	         * Sets the async validators that are active on this control. Calling this
	         * will overwrite any existing async validators.
	         * @param {?} newValidator
	         * @return {?}
	         */
	        AbstractControl.prototype.setAsyncValidators = function (newValidator) {
	            this.asyncValidator = coerceToAsyncValidator(newValidator);
	        };
	        /**
	         * Empties out the sync validator list.
	         * @return {?}
	         */
	        AbstractControl.prototype.clearValidators = function () { this.validator = null; };
	        /**
	         * Empties out the async validator list.
	         * @return {?}
	         */
	        AbstractControl.prototype.clearAsyncValidators = function () { this.asyncValidator = null; };
	        /**
	         * Marks the control as `touched`.
	         *
	         * This will also mark all direct ancestors as `touched` to maintain
	         * the model.
	         * @param {?=} __0
	         * @return {?}
	         */
	        AbstractControl.prototype.markAsTouched = function (_a) {
	            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
	            this._touched = true;
	            if (this._parent && !onlySelf) {
	                this._parent.markAsTouched({ onlySelf: onlySelf });
	            }
	        };
	        /**
	         * Marks the control as `untouched`.
	         *
	         * If the control has any children, it will also mark all children as `untouched`
	         * to maintain the model, and re-calculate the `touched` status of all parent
	         * controls.
	         * @param {?=} __0
	         * @return {?}
	         */
	        AbstractControl.prototype.markAsUntouched = function (_a) {
	            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
	            this._touched = false;
	            this._forEachChild(function (control) { control.markAsUntouched({ onlySelf: true }); });
	            if (this._parent && !onlySelf) {
	                this._parent._updateTouched({ onlySelf: onlySelf });
	            }
	        };
	        /**
	         * Marks the control as `dirty`.
	         *
	         * This will also mark all direct ancestors as `dirty` to maintain
	         * the model.
	         * @param {?=} __0
	         * @return {?}
	         */
	        AbstractControl.prototype.markAsDirty = function (_a) {
	            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
	            this._pristine = false;
	            if (this._parent && !onlySelf) {
	                this._parent.markAsDirty({ onlySelf: onlySelf });
	            }
	        };
	        /**
	         * Marks the control as `pristine`.
	         *
	         * If the control has any children, it will also mark all children as `pristine`
	         * to maintain the model, and re-calculate the `pristine` status of all parent
	         * controls.
	         * @param {?=} __0
	         * @return {?}
	         */
	        AbstractControl.prototype.markAsPristine = function (_a) {
	            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
	            this._pristine = true;
	            this._forEachChild(function (control) { control.markAsPristine({ onlySelf: true }); });
	            if (this._parent && !onlySelf) {
	                this._parent._updatePristine({ onlySelf: onlySelf });
	            }
	        };
	        /**
	         * Marks the control as `pending`.
	         * @param {?=} __0
	         * @return {?}
	         */
	        AbstractControl.prototype.markAsPending = function (_a) {
	            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
	            this._status = PENDING;
	            if (this._parent && !onlySelf) {
	                this._parent.markAsPending({ onlySelf: onlySelf });
	            }
	        };
	        /**
	         * Disables the control. This means the control will be exempt from validation checks and
	         * excluded from the aggregate value of any parent. Its status is `DISABLED`.
	         *
	         * If the control has children, all children will be disabled to maintain the model.
	         * @param {?=} __0
	         * @return {?}
	         */
	        AbstractControl.prototype.disable = function (_a) {
	            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
	            this._status = DISABLED;
	            this._errors = null;
	            this._forEachChild(function (control) { control.disable({ onlySelf: true }); });
	            this._updateValue();
	            if (emitEvent !== false) {
	                this._valueChanges.emit(this._value);
	                this._statusChanges.emit(this._status);
	            }
	            this._updateAncestors(onlySelf);
	            this._onDisabledChange.forEach(function (changeFn) { return changeFn(true); });
	        };
	        /**
	         * Enables the control. This means the control will be included in validation checks and
	         * the aggregate value of its parent. Its status is re-calculated based on its value and
	         * its validators.
	         *
	         * If the control has children, all children will be enabled.
	         * @param {?=} __0
	         * @return {?}
	         */
	        AbstractControl.prototype.enable = function (_a) {
	            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
	            this._status = VALID;
	            this._forEachChild(function (control) { control.enable({ onlySelf: true }); });
	            this.updateValueAndValidity({ onlySelf: true, emitEvent: emitEvent });
	            this._updateAncestors(onlySelf);
	            this._onDisabledChange.forEach(function (changeFn) { return changeFn(false); });
	        };
	        /**
	         * @param {?} onlySelf
	         * @return {?}
	         */
	        AbstractControl.prototype._updateAncestors = function (onlySelf) {
	            if (this._parent && !onlySelf) {
	                this._parent.updateValueAndValidity();
	                this._parent._updatePristine();
	                this._parent._updateTouched();
	            }
	        };
	        /**
	         * @param {?} parent
	         * @return {?}
	         */
	        AbstractControl.prototype.setParent = function (parent) { this._parent = parent; };
	        /**
	         * Sets the value of the control. Abstract method (implemented in sub-classes).
	         * @abstract
	         * @param {?} value
	         * @param {?=} options
	         * @return {?}
	         */
	        AbstractControl.prototype.setValue = function (value, options) { };
	        /**
	         * Patches the value of the control. Abstract method (implemented in sub-classes).
	         * @abstract
	         * @param {?} value
	         * @param {?=} options
	         * @return {?}
	         */
	        AbstractControl.prototype.patchValue = function (value, options) { };
	        /**
	         * Resets the control. Abstract method (implemented in sub-classes).
	         * @abstract
	         * @param {?=} value
	         * @param {?=} options
	         * @return {?}
	         */
	        AbstractControl.prototype.reset = function (value, options) { };
	        /**
	         * Re-calculates the value and validation status of the control.
	         *
	         * By default, it will also update the value and validity of its ancestors.
	         * @param {?=} __0
	         * @return {?}
	         */
	        AbstractControl.prototype.updateValueAndValidity = function (_a) {
	            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
	            this._setInitialStatus();
	            this._updateValue();
	            if (this.enabled) {
	                this._errors = this._runValidator();
	                this._status = this._calculateStatus();
	                if (this._status === VALID || this._status === PENDING) {
	                    this._runAsyncValidator(emitEvent);
	                }
	            }
	            if (emitEvent !== false) {
	                this._valueChanges.emit(this._value);
	                this._statusChanges.emit(this._status);
	            }
	            if (this._parent && !onlySelf) {
	                this._parent.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
	            }
	        };
	        /**
	         * \@internal
	         * @param {?=} __0
	         * @return {?}
	         */
	        AbstractControl.prototype._updateTreeValidity = function (_a) {
	            var emitEvent = (_a === void 0 ? { emitEvent: true } : _a).emitEvent;
	            this._forEachChild(function (ctrl) { return ctrl._updateTreeValidity({ emitEvent: emitEvent }); });
	            this.updateValueAndValidity({ onlySelf: true, emitEvent: emitEvent });
	        };
	        /**
	         * @return {?}
	         */
	        AbstractControl.prototype._setInitialStatus = function () { this._status = this._allControlsDisabled() ? DISABLED : VALID; };
	        /**
	         * @return {?}
	         */
	        AbstractControl.prototype._runValidator = function () {
	            return this.validator ? this.validator(this) : null;
	        };
	        /**
	         * @param {?} emitEvent
	         * @return {?}
	         */
	        AbstractControl.prototype._runAsyncValidator = function (emitEvent) {
	            var _this = this;
	            if (this.asyncValidator) {
	                this._status = PENDING;
	                this._cancelExistingSubscription();
	                var /** @type {?} */ obs = toObservable(this.asyncValidator(this));
	                if (!(isObservable(obs))) {
	                    throw new Error("expected the following validator to return Promise or Observable: " + this.asyncValidator + ". If you are using FormBuilder; did you forget to brace your validators in an array?");
	                }
	                this._asyncValidationSubscription =
	                    obs.subscribe({ next: function (res) { return _this.setErrors(res, { emitEvent: emitEvent }); } });
	            }
	        };
	        /**
	         * @return {?}
	         */
	        AbstractControl.prototype._cancelExistingSubscription = function () {
	            if (this._asyncValidationSubscription) {
	                this._asyncValidationSubscription.unsubscribe();
	            }
	        };
	        /**
	         * Sets errors on a form control.
	         *
	         * This is used when validations are run manually by the user, rather than automatically.
	         *
	         * Calling `setErrors` will also update the validity of the parent control.
	         *
	         * ### Example
	         *
	         * ```
	         * const login = new FormControl("someLogin");
	         * login.setErrors({
	         *   "notUnique": true
	         * });
	         *
	         * expect(login.valid).toEqual(false);
	         * expect(login.errors).toEqual({"notUnique": true});
	         *
	         * login.setValue("someOtherLogin");
	         *
	         * expect(login.valid).toEqual(true);
	         * ```
	         * @param {?} errors
	         * @param {?=} __1
	         * @return {?}
	         */
	        AbstractControl.prototype.setErrors = function (errors, _a) {
	            var emitEvent = (_a === void 0 ? {} : _a).emitEvent;
	            this._errors = errors;
	            this._updateControlsErrors(emitEvent !== false);
	        };
	        /**
	         * Retrieves a child control given the control's name or path.
	         *
	         * Paths can be passed in as an array or a string delimited by a dot.
	         *
	         * To get a control nested within a `person` sub-group:
	         *
	         * * `this.form.get('person.name');`
	         *
	         * -OR-
	         *
	         * * `this.form.get(['person', 'name']);`
	         * @param {?} path
	         * @return {?}
	         */
	        AbstractControl.prototype.get = function (path) { return _find(this, path, '.'); };
	        /**
	         * Returns true if the control with the given path has the error specified. Otherwise
	         * returns null or undefined.
	         *
	         * If no path is given, it checks for the error on the present control.
	         * @param {?} errorCode
	         * @param {?=} path
	         * @return {?}
	         */
	        AbstractControl.prototype.getError = function (errorCode, path) {
	            if (path === void 0) { path = null; }
	            var /** @type {?} */ control = path ? this.get(path) : this;
	            return control && control._errors ? control._errors[errorCode] : null;
	        };
	        /**
	         * Returns true if the control with the given path has the error specified. Otherwise
	         * returns false.
	         *
	         * If no path is given, it checks for the error on the present control.
	         * @param {?} errorCode
	         * @param {?=} path
	         * @return {?}
	         */
	        AbstractControl.prototype.hasError = function (errorCode, path) {
	            if (path === void 0) { path = null; }
	            return !!this.getError(errorCode, path);
	        };
	        Object.defineProperty(AbstractControl.prototype, "root", {
	            /**
	             * Retrieves the top-level ancestor of this control.
	             * @return {?}
	             */
	            get: function () {
	                var /** @type {?} */ x = this;
	                while (x._parent) {
	                    x = x._parent;
	                }
	                return x;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * \@internal
	         * @param {?} emitEvent
	         * @return {?}
	         */
	        AbstractControl.prototype._updateControlsErrors = function (emitEvent) {
	            this._status = this._calculateStatus();
	            if (emitEvent) {
	                this._statusChanges.emit(this._status);
	            }
	            if (this._parent) {
	                this._parent._updateControlsErrors(emitEvent);
	            }
	        };
	        /**
	         * \@internal
	         * @return {?}
	         */
	        AbstractControl.prototype._initObservables = function () {
	            this._valueChanges = new EventEmitter();
	            this._statusChanges = new EventEmitter();
	        };
	        /**
	         * @return {?}
	         */
	        AbstractControl.prototype._calculateStatus = function () {
	            if (this._allControlsDisabled())
	                return DISABLED;
	            if (this._errors)
	                return INVALID;
	            if (this._anyControlsHaveStatus(PENDING))
	                return PENDING;
	            if (this._anyControlsHaveStatus(INVALID))
	                return INVALID;
	            return VALID;
	        };
	        /**
	         * \@internal
	         * @abstract
	         * @return {?}
	         */
	        AbstractControl.prototype._updateValue = function () { };
	        /**
	         * \@internal
	         * @abstract
	         * @param {?} cb
	         * @return {?}
	         */
	        AbstractControl.prototype._forEachChild = function (cb) { };
	        /**
	         * \@internal
	         * @abstract
	         * @param {?} condition
	         * @return {?}
	         */
	        AbstractControl.prototype._anyControls = function (condition) { };
	        /**
	         * \@internal
	         * @abstract
	         * @return {?}
	         */
	        AbstractControl.prototype._allControlsDisabled = function () { };
	        /**
	         * \@internal
	         * @param {?} status
	         * @return {?}
	         */
	        AbstractControl.prototype._anyControlsHaveStatus = function (status) {
	            return this._anyControls(function (control) { return control.status === status; });
	        };
	        /**
	         * \@internal
	         * @return {?}
	         */
	        AbstractControl.prototype._anyControlsDirty = function () {
	            return this._anyControls(function (control) { return control.dirty; });
	        };
	        /**
	         * \@internal
	         * @return {?}
	         */
	        AbstractControl.prototype._anyControlsTouched = function () {
	            return this._anyControls(function (control) { return control.touched; });
	        };
	        /**
	         * \@internal
	         * @param {?=} __0
	         * @return {?}
	         */
	        AbstractControl.prototype._updatePristine = function (_a) {
	            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
	            this._pristine = !this._anyControlsDirty();
	            if (this._parent && !onlySelf) {
	                this._parent._updatePristine({ onlySelf: onlySelf });
	            }
	        };
	        /**
	         * \@internal
	         * @param {?=} __0
	         * @return {?}
	         */
	        AbstractControl.prototype._updateTouched = function (_a) {
	            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
	            this._touched = this._anyControlsTouched();
	            if (this._parent && !onlySelf) {
	                this._parent._updateTouched({ onlySelf: onlySelf });
	            }
	        };
	        /**
	         * \@internal
	         * @param {?} formState
	         * @return {?}
	         */
	        AbstractControl.prototype._isBoxedValue = function (formState) {
	            return typeof formState === 'object' && formState !== null &&
	                Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;
	        };
	        /**
	         * \@internal
	         * @param {?} fn
	         * @return {?}
	         */
	        AbstractControl.prototype._registerOnCollectionChange = function (fn) { this._onCollectionChange = fn; };
	        return AbstractControl;
	    }());
	    /**
	     * \@whatItDoes Tracks the value and validation status of an individual form control.
	     *
	     * It is one of the three fundamental building blocks of Angular forms, along with
	     * {\@link FormGroup} and {\@link FormArray}.
	     *
	     * \@howToUse
	     *
	     * When instantiating a {\@link FormControl}, you can pass in an initial value as the
	     * first argument. Example:
	     *
	     * ```ts
	     * const ctrl = new FormControl('some value');
	     * console.log(ctrl.value);     // 'some value'
	     * ```
	     *
	     * You can also initialize the control with a form state object on instantiation,
	     * which includes both the value and whether or not the control is disabled.
	     * You can't use the value key without the disabled key; both are required
	     * to use this way of initialization.
	     *
	     * ```ts
	     * const ctrl = new FormControl({value: 'n/a', disabled: true});
	     * console.log(ctrl.value);     // 'n/a'
	     * console.log(ctrl.status);   // 'DISABLED'
	     * ```
	     *
	     * To include a sync validator (or an array of sync validators) with the control,
	     * pass it in as the second argument. Async validators are also supported, but
	     * have to be passed in separately as the third arg.
	     *
	     * ```ts
	     * const ctrl = new FormControl('', Validators.required);
	     * console.log(ctrl.value);     // ''
	     * console.log(ctrl.status);   // 'INVALID'
	     * ```
	     *
	     * See its superclass, {\@link AbstractControl}, for more properties and methods.
	     *
	     * * **npm package**: `\@angular/forms`
	     *
	     * \@stable
	     */
	    var FormControl = (function (_super) {
	        __extends$6(FormControl, _super);
	        /**
	         * @param {?=} formState
	         * @param {?=} validator
	         * @param {?=} asyncValidator
	         */
	        function FormControl(formState, validator, asyncValidator) {
	            if (formState === void 0) { formState = null; }
	            if (validator === void 0) { validator = null; }
	            if (asyncValidator === void 0) { asyncValidator = null; }
	            _super.call(this, coerceToValidator(validator), coerceToAsyncValidator(asyncValidator));
	            /** @internal */
	            this._onChange = [];
	            this._applyFormState(formState);
	            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });
	            this._initObservables();
	        }
	        /**
	         * Set the value of the form control to `value`.
	         *
	         * If `onlySelf` is `true`, this change will only affect the validation of this `FormControl`
	         * and not its parent component. This defaults to false.
	         *
	         * If `emitEvent` is `true`, this
	         * change will cause a `valueChanges` event on the `FormControl` to be emitted. This defaults
	         * to true (as it falls through to `updateValueAndValidity`).
	         *
	         * If `emitModelToViewChange` is `true`, the view will be notified about the new value
	         * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not
	         * specified.
	         *
	         * If `emitViewToModelChange` is `true`, an ngModelChange event will be fired to update the
	         * model.  This is the default behavior if `emitViewToModelChange` is not specified.
	         * @param {?} value
	         * @param {?=} __1
	         * @return {?}
	         */
	        FormControl.prototype.setValue = function (value, _a) {
	            var _this = this;
	            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent, emitModelToViewChange = _b.emitModelToViewChange, emitViewToModelChange = _b.emitViewToModelChange;
	            this._value = value;
	            if (this._onChange.length && emitModelToViewChange !== false) {
	                this._onChange.forEach(function (changeFn) { return changeFn(_this._value, emitViewToModelChange !== false); });
	            }
	            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
	        };
	        /**
	         * Patches the value of a control.
	         *
	         * This function is functionally the same as {\@link FormControl.setValue} at this level.
	         * It exists for symmetry with {\@link FormGroup.patchValue} on `FormGroups` and `FormArrays`,
	         * where it does behave differently.
	         * @param {?} value
	         * @param {?=} options
	         * @return {?}
	         */
	        FormControl.prototype.patchValue = function (value, options) {
	            if (options === void 0) { options = {}; }
	            this.setValue(value, options);
	        };
	        /**
	         * Resets the form control. This means by default:
	         *
	         * * it is marked as `pristine`
	         * * it is marked as `untouched`
	         * * value is set to null
	         *
	         * You can also reset to a specific form state by passing through a standalone
	         * value or a form state object that contains both a value and a disabled state
	         * (these are the only two properties that cannot be calculated).
	         *
	         * Ex:
	         *
	         * ```ts
	         * this.control.reset('Nancy');
	         *
	         * console.log(this.control.value);  // 'Nancy'
	         * ```
	         *
	         * OR
	         *
	         * ```
	         * this.control.reset({value: 'Nancy', disabled: true});
	         *
	         * console.log(this.control.value);  // 'Nancy'
	         * console.log(this.control.status);  // 'DISABLED'
	         * ```
	         * @param {?=} formState
	         * @param {?=} __1
	         * @return {?}
	         */
	        FormControl.prototype.reset = function (formState, _a) {
	            if (formState === void 0) { formState = null; }
	            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
	            this._applyFormState(formState);
	            this.markAsPristine({ onlySelf: onlySelf });
	            this.markAsUntouched({ onlySelf: onlySelf });
	            this.setValue(this._value, { onlySelf: onlySelf, emitEvent: emitEvent });
	        };
	        /**
	         * \@internal
	         * @return {?}
	         */
	        FormControl.prototype._updateValue = function () { };
	        /**
	         * \@internal
	         * @param {?} condition
	         * @return {?}
	         */
	        FormControl.prototype._anyControls = function (condition) { return false; };
	        /**
	         * \@internal
	         * @return {?}
	         */
	        FormControl.prototype._allControlsDisabled = function () { return this.disabled; };
	        /**
	         * Register a listener for change events.
	         * @param {?} fn
	         * @return {?}
	         */
	        FormControl.prototype.registerOnChange = function (fn) { this._onChange.push(fn); };
	        /**
	         * \@internal
	         * @return {?}
	         */
	        FormControl.prototype._clearChangeFns = function () {
	            this._onChange = [];
	            this._onDisabledChange = [];
	            this._onCollectionChange = function () { };
	        };
	        /**
	         * Register a listener for disabled events.
	         * @param {?} fn
	         * @return {?}
	         */
	        FormControl.prototype.registerOnDisabledChange = function (fn) {
	            this._onDisabledChange.push(fn);
	        };
	        /**
	         * \@internal
	         * @param {?} cb
	         * @return {?}
	         */
	        FormControl.prototype._forEachChild = function (cb) { };
	        /**
	         * @param {?} formState
	         * @return {?}
	         */
	        FormControl.prototype._applyFormState = function (formState) {
	            if (this._isBoxedValue(formState)) {
	                this._value = formState.value;
	                formState.disabled ? this.disable({ onlySelf: true, emitEvent: false }) :
	                    this.enable({ onlySelf: true, emitEvent: false });
	            }
	            else {
	                this._value = formState;
	            }
	        };
	        return FormControl;
	    }(AbstractControl));
	    /**
	     * \@whatItDoes Tracks the value and validity state of a group of {\@link FormControl}
	     * instances.
	     *
	     * A `FormGroup` aggregates the values of each child {\@link FormControl} into one object,
	     * with each control name as the key.  It calculates its status by reducing the statuses
	     * of its children. For example, if one of the controls in a group is invalid, the entire
	     * group becomes invalid.
	     *
	     * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,
	     * along with {\@link FormControl} and {\@link FormArray}.
	     *
	     * \@howToUse
	     *
	     * When instantiating a {\@link FormGroup}, pass in a collection of child controls as the first
	     * argument. The key for each child will be the name under which it is registered.
	     *
	     * ### Example
	     *
	     * ```
	     * const form = new FormGroup({
	     *   first: new FormControl('Nancy', Validators.minLength(2)),
	     *   last: new FormControl('Drew'),
	     * });
	     *
	     * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}
	     * console.log(form.status);  // 'VALID'
	     * ```
	     *
	     * You can also include group-level validators as the second arg, or group-level async
	     * validators as the third arg. These come in handy when you want to perform validation
	     * that considers the value of more than one child control.
	     *
	     * ### Example
	     *
	     * ```
	     * const form = new FormGroup({
	     *   password: new FormControl('', Validators.minLength(2)),
	     *   passwordConfirm: new FormControl('', Validators.minLength(2)),
	     * }, passwordMatchValidator);
	     *
	     *
	     * function passwordMatchValidator(g: FormGroup) {
	     *    return g.get('password').value === g.get('passwordConfirm').value
	     *       ? null : {'mismatch': true};
	     * }
	     * ```
	     *
	     * * **npm package**: `\@angular/forms`
	     *
	     * \@stable
	     */
	    var FormGroup = (function (_super) {
	        __extends$6(FormGroup, _super);
	        /**
	         * @param {?} controls
	         * @param {?=} validator
	         * @param {?=} asyncValidator
	         */
	        function FormGroup(controls, validator, asyncValidator) {
	            if (validator === void 0) { validator = null; }
	            if (asyncValidator === void 0) { asyncValidator = null; }
	            _super.call(this, validator, asyncValidator);
	            this.controls = controls;
	            this._initObservables();
	            this._setUpControls();
	            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });
	        }
	        /**
	         * Registers a control with the group's list of controls.
	         *
	         * This method does not update value or validity of the control, so for
	         * most cases you'll want to use {\@link FormGroup.addControl} instead.
	         * @param {?} name
	         * @param {?} control
	         * @return {?}
	         */
	        FormGroup.prototype.registerControl = function (name, control) {
	            if (this.controls[name])
	                return this.controls[name];
	            this.controls[name] = control;
	            control.setParent(this);
	            control._registerOnCollectionChange(this._onCollectionChange);
	            return control;
	        };
	        /**
	         * Add a control to this group.
	         * @param {?} name
	         * @param {?} control
	         * @return {?}
	         */
	        FormGroup.prototype.addControl = function (name, control) {
	            this.registerControl(name, control);
	            this.updateValueAndValidity();
	            this._onCollectionChange();
	        };
	        /**
	         * Remove a control from this group.
	         * @param {?} name
	         * @return {?}
	         */
	        FormGroup.prototype.removeControl = function (name) {
	            if (this.controls[name])
	                this.controls[name]._registerOnCollectionChange(function () { });
	            delete (this.controls[name]);
	            this.updateValueAndValidity();
	            this._onCollectionChange();
	        };
	        /**
	         * Replace an existing control.
	         * @param {?} name
	         * @param {?} control
	         * @return {?}
	         */
	        FormGroup.prototype.setControl = function (name, control) {
	            if (this.controls[name])
	                this.controls[name]._registerOnCollectionChange(function () { });
	            delete (this.controls[name]);
	            if (control)
	                this.registerControl(name, control);
	            this.updateValueAndValidity();
	            this._onCollectionChange();
	        };
	        /**
	         * Check whether there is an enabled control with the given name in the group.
	         *
	         * It will return false for disabled controls. If you'd like to check for
	         * existence in the group only, use {\@link AbstractControl.get} instead.
	         * @param {?} controlName
	         * @return {?}
	         */
	        FormGroup.prototype.contains = function (controlName) {
	            return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;
	        };
	        /**
	         *  Sets the value of the {\@link FormGroup}. It accepts an object that matches
	         *  the structure of the group, with control names as keys.
	         *
	         * This method performs strict checks, so it will throw an error if you try
	         * to set the value of a control that doesn't exist or if you exclude the
	         * value of a control.
	         *
	         *  ### Example
	         *
	         *  ```
	         *  const form = new FormGroup({
	         *     first: new FormControl(),
	         *     last: new FormControl()
	         *  });
	         *  console.log(form.value);   // {first: null, last: null}
	         *
	         *  form.setValue({first: 'Nancy', last: 'Drew'});
	         *  console.log(form.value);   // {first: 'Nancy', last: 'Drew'}
	         *
	         *  ```
	         * @param {?} value
	         * @param {?=} __1
	         * @return {?}
	         */
	        FormGroup.prototype.setValue = function (value, _a) {
	            var _this = this;
	            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
	            this._checkAllValuesPresent(value);
	            Object.keys(value).forEach(function (name) {
	                _this._throwIfControlMissing(name);
	                _this.controls[name].setValue(value[name], { onlySelf: true, emitEvent: emitEvent });
	            });
	            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
	        };
	        /**
	         *  Patches the value of the {\@link FormGroup}. It accepts an object with control
	         *  names as keys, and will do its best to match the values to the correct controls
	         *  in the group.
	         *
	         *  It accepts both super-sets and sub-sets of the group without throwing an error.
	         *
	         *  ### Example
	         *
	         *  ```
	         *  const form = new FormGroup({
	         *     first: new FormControl(),
	         *     last: new FormControl()
	         *  });
	         *  console.log(form.value);   // {first: null, last: null}
	         *
	         *  form.patchValue({first: 'Nancy'});
	         *  console.log(form.value);   // {first: 'Nancy', last: null}
	         *
	         *  ```
	         * @param {?} value
	         * @param {?=} __1
	         * @return {?}
	         */
	        FormGroup.prototype.patchValue = function (value, _a) {
	            var _this = this;
	            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
	            Object.keys(value).forEach(function (name) {
	                if (_this.controls[name]) {
	                    _this.controls[name].patchValue(value[name], { onlySelf: true, emitEvent: emitEvent });
	                }
	            });
	            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
	        };
	        /**
	         * Resets the {\@link FormGroup}. This means by default:
	         *
	         * * The group and all descendants are marked `pristine`
	         * * The group and all descendants are marked `untouched`
	         * * The value of all descendants will be null or null maps
	         *
	         * You can also reset to a specific form state by passing in a map of states
	         * that matches the structure of your form, with control names as keys. The state
	         * can be a standalone value or a form state object with both a value and a disabled
	         * status.
	         *
	         * ### Example
	         *
	         * ```ts
	         * this.form.reset({first: 'name', last: 'last name'});
	         *
	         * console.log(this.form.value);  // {first: 'name', last: 'last name'}
	         * ```
	         *
	         * - OR -
	         *
	         * ```
	         * this.form.reset({
	         *   first: {value: 'name', disabled: true},
	         *   last: 'last'
	         * });
	         *
	         * console.log(this.form.value);  // {first: 'name', last: 'last name'}
	         * console.log(this.form.get('first').status);  // 'DISABLED'
	         * ```
	         * @param {?=} value
	         * @param {?=} __1
	         * @return {?}
	         */
	        FormGroup.prototype.reset = function (value, _a) {
	            if (value === void 0) { value = {}; }
	            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
	            this._forEachChild(function (control, name) {
	                control.reset(value[name], { onlySelf: true, emitEvent: emitEvent });
	            });
	            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
	            this._updatePristine({ onlySelf: onlySelf });
	            this._updateTouched({ onlySelf: onlySelf });
	        };
	        /**
	         * The aggregate value of the {\@link FormGroup}, including any disabled controls.
	         *
	         * If you'd like to include all values regardless of disabled status, use this method.
	         * Otherwise, the `value` property is the best way to get the value of the group.
	         * @return {?}
	         */
	        FormGroup.prototype.getRawValue = function () {
	            return this._reduceChildren({}, function (acc, control, name) {
	                acc[name] = control.value;
	                return acc;
	            });
	        };
	        /**
	         * \@internal
	         * @param {?} name
	         * @return {?}
	         */
	        FormGroup.prototype._throwIfControlMissing = function (name) {
	            if (!Object.keys(this.controls).length) {
	                throw new Error("\n        There are no form controls registered with this group yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      ");
	            }
	            if (!this.controls[name]) {
	                throw new Error("Cannot find form control with name: " + name + ".");
	            }
	        };
	        /**
	         * \@internal
	         * @param {?} cb
	         * @return {?}
	         */
	        FormGroup.prototype._forEachChild = function (cb) {
	            var _this = this;
	            Object.keys(this.controls).forEach(function (k) { return cb(_this.controls[k], k); });
	        };
	        /**
	         * \@internal
	         * @return {?}
	         */
	        FormGroup.prototype._setUpControls = function () {
	            var _this = this;
	            this._forEachChild(function (control) {
	                control.setParent(_this);
	                control._registerOnCollectionChange(_this._onCollectionChange);
	            });
	        };
	        /**
	         * \@internal
	         * @return {?}
	         */
	        FormGroup.prototype._updateValue = function () { this._value = this._reduceValue(); };
	        /**
	         * \@internal
	         * @param {?} condition
	         * @return {?}
	         */
	        FormGroup.prototype._anyControls = function (condition) {
	            var _this = this;
	            var /** @type {?} */ res = false;
	            this._forEachChild(function (control, name) {
	                res = res || (_this.contains(name) && condition(control));
	            });
	            return res;
	        };
	        /**
	         * \@internal
	         * @return {?}
	         */
	        FormGroup.prototype._reduceValue = function () {
	            var _this = this;
	            return this._reduceChildren({}, function (acc, control, name) {
	                if (control.enabled || _this.disabled) {
	                    acc[name] = control.value;
	                }
	                return acc;
	            });
	        };
	        /**
	         * \@internal
	         * @param {?} initValue
	         * @param {?} fn
	         * @return {?}
	         */
	        FormGroup.prototype._reduceChildren = function (initValue, fn) {
	            var /** @type {?} */ res = initValue;
	            this._forEachChild(function (control, name) { res = fn(res, control, name); });
	            return res;
	        };
	        /**
	         * \@internal
	         * @return {?}
	         */
	        FormGroup.prototype._allControlsDisabled = function () {
	            for (var _i = 0, _a = Object.keys(this.controls); _i < _a.length; _i++) {
	                var controlName = _a[_i];
	                if (this.controls[controlName].enabled) {
	                    return false;
	                }
	            }
	            return Object.keys(this.controls).length > 0 || this.disabled;
	        };
	        /**
	         * \@internal
	         * @param {?} value
	         * @return {?}
	         */
	        FormGroup.prototype._checkAllValuesPresent = function (value) {
	            this._forEachChild(function (control, name) {
	                if (value[name] === undefined) {
	                    throw new Error("Must supply a value for form control with name: '" + name + "'.");
	                }
	            });
	        };
	        return FormGroup;
	    }(AbstractControl));
	    /**
	     * \@whatItDoes Tracks the value and validity state of an array of {\@link FormControl},
	     * {\@link FormGroup} or {\@link FormArray} instances.
	     *
	     * A `FormArray` aggregates the values of each child {\@link FormControl} into an array.
	     * It calculates its status by reducing the statuses of its children. For example, if one of
	     * the controls in a `FormArray` is invalid, the entire array becomes invalid.
	     *
	     * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,
	     * along with {\@link FormControl} and {\@link FormGroup}.
	     *
	     * \@howToUse
	     *
	     * When instantiating a {\@link FormArray}, pass in an array of child controls as the first
	     * argument.
	     *
	     * ### Example
	     *
	     * ```
	     * const arr = new FormArray([
	     *   new FormControl('Nancy', Validators.minLength(2)),
	     *   new FormControl('Drew'),
	     * ]);
	     *
	     * console.log(arr.value);   // ['Nancy', 'Drew']
	     * console.log(arr.status);  // 'VALID'
	     * ```
	     *
	     * You can also include array-level validators as the second arg, or array-level async
	     * validators as the third arg. These come in handy when you want to perform validation
	     * that considers the value of more than one child control.
	     *
	     * ### Adding or removing controls
	     *
	     * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods
	     * in `FormArray` itself. These methods ensure the controls are properly tracked in the
	     * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate
	     * the `FormArray` directly, as that will result in strange and unexpected behavior such
	     * as broken change detection.
	     *
	     * * **npm package**: `\@angular/forms`
	     *
	     * \@stable
	     */
	    var FormArray = (function (_super) {
	        __extends$6(FormArray, _super);
	        /**
	         * @param {?} controls
	         * @param {?=} validator
	         * @param {?=} asyncValidator
	         */
	        function FormArray(controls, validator, asyncValidator) {
	            if (validator === void 0) { validator = null; }
	            if (asyncValidator === void 0) { asyncValidator = null; }
	            _super.call(this, validator, asyncValidator);
	            this.controls = controls;
	            this._initObservables();
	            this._setUpControls();
	            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });
	        }
	        /**
	         * Get the {\@link AbstractControl} at the given `index` in the array.
	         * @param {?} index
	         * @return {?}
	         */
	        FormArray.prototype.at = function (index) { return this.controls[index]; };
	        /**
	         * Insert a new {\@link AbstractControl} at the end of the array.
	         * @param {?} control
	         * @return {?}
	         */
	        FormArray.prototype.push = function (control) {
	            this.controls.push(control);
	            this._registerControl(control);
	            this.updateValueAndValidity();
	            this._onCollectionChange();
	        };
	        /**
	         * Insert a new {\@link AbstractControl} at the given `index` in the array.
	         * @param {?} index
	         * @param {?} control
	         * @return {?}
	         */
	        FormArray.prototype.insert = function (index, control) {
	            this.controls.splice(index, 0, control);
	            this._registerControl(control);
	            this.updateValueAndValidity();
	            this._onCollectionChange();
	        };
	        /**
	         * Remove the control at the given `index` in the array.
	         * @param {?} index
	         * @return {?}
	         */
	        FormArray.prototype.removeAt = function (index) {
	            if (this.controls[index])
	                this.controls[index]._registerOnCollectionChange(function () { });
	            this.controls.splice(index, 1);
	            this.updateValueAndValidity();
	            this._onCollectionChange();
	        };
	        /**
	         * Replace an existing control.
	         * @param {?} index
	         * @param {?} control
	         * @return {?}
	         */
	        FormArray.prototype.setControl = function (index, control) {
	            if (this.controls[index])
	                this.controls[index]._registerOnCollectionChange(function () { });
	            this.controls.splice(index, 1);
	            if (control) {
	                this.controls.splice(index, 0, control);
	                this._registerControl(control);
	            }
	            this.updateValueAndValidity();
	            this._onCollectionChange();
	        };
	        Object.defineProperty(FormArray.prototype, "length", {
	            /**
	             * Length of the control array.
	             * @return {?}
	             */
	            get: function () { return this.controls.length; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         *  Sets the value of the {\@link FormArray}. It accepts an array that matches
	         *  the structure of the control.
	         *
	         * This method performs strict checks, so it will throw an error if you try
	         * to set the value of a control that doesn't exist or if you exclude the
	         * value of a control.
	         *
	         *  ### Example
	         *
	         *  ```
	         *  const arr = new FormArray([
	         *     new FormControl(),
	         *     new FormControl()
	         *  ]);
	         *  console.log(arr.value);   // [null, null]
	         *
	         *  arr.setValue(['Nancy', 'Drew']);
	         *  console.log(arr.value);   // ['Nancy', 'Drew']
	         *  ```
	         * @param {?} value
	         * @param {?=} __1
	         * @return {?}
	         */
	        FormArray.prototype.setValue = function (value, _a) {
	            var _this = this;
	            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
	            this._checkAllValuesPresent(value);
	            value.forEach(function (newValue, index) {
	                _this._throwIfControlMissing(index);
	                _this.at(index).setValue(newValue, { onlySelf: true, emitEvent: emitEvent });
	            });
	            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
	        };
	        /**
	         *  Patches the value of the {\@link FormArray}. It accepts an array that matches the
	         *  structure of the control, and will do its best to match the values to the correct
	         *  controls in the group.
	         *
	         *  It accepts both super-sets and sub-sets of the array without throwing an error.
	         *
	         *  ### Example
	         *
	         *  ```
	         *  const arr = new FormArray([
	         *     new FormControl(),
	         *     new FormControl()
	         *  ]);
	         *  console.log(arr.value);   // [null, null]
	         *
	         *  arr.patchValue(['Nancy']);
	         *  console.log(arr.value);   // ['Nancy', null]
	         *  ```
	         * @param {?} value
	         * @param {?=} __1
	         * @return {?}
	         */
	        FormArray.prototype.patchValue = function (value, _a) {
	            var _this = this;
	            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
	            value.forEach(function (newValue, index) {
	                if (_this.at(index)) {
	                    _this.at(index).patchValue(newValue, { onlySelf: true, emitEvent: emitEvent });
	                }
	            });
	            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
	        };
	        /**
	         * Resets the {\@link FormArray}. This means by default:
	         *
	         * * The array and all descendants are marked `pristine`
	         * * The array and all descendants are marked `untouched`
	         * * The value of all descendants will be null or null maps
	         *
	         * You can also reset to a specific form state by passing in an array of states
	         * that matches the structure of the control. The state can be a standalone value
	         * or a form state object with both a value and a disabled status.
	         *
	         * ### Example
	         *
	         * ```ts
	         * this.arr.reset(['name', 'last name']);
	         *
	         * console.log(this.arr.value);  // ['name', 'last name']
	         * ```
	         *
	         * - OR -
	         *
	         * ```
	         * this.arr.reset([
	         *   {value: 'name', disabled: true},
	         *   'last'
	         * ]);
	         *
	         * console.log(this.arr.value);  // ['name', 'last name']
	         * console.log(this.arr.get(0).status);  // 'DISABLED'
	         * ```
	         * @param {?=} value
	         * @param {?=} __1
	         * @return {?}
	         */
	        FormArray.prototype.reset = function (value, _a) {
	            if (value === void 0) { value = []; }
	            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
	            this._forEachChild(function (control, index) {
	                control.reset(value[index], { onlySelf: true, emitEvent: emitEvent });
	            });
	            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
	            this._updatePristine({ onlySelf: onlySelf });
	            this._updateTouched({ onlySelf: onlySelf });
	        };
	        /**
	         * The aggregate value of the array, including any disabled controls.
	         *
	         * If you'd like to include all values regardless of disabled status, use this method.
	         * Otherwise, the `value` property is the best way to get the value of the array.
	         * @return {?}
	         */
	        FormArray.prototype.getRawValue = function () { return this.controls.map(function (control) { return control.value; }); };
	        /**
	         * \@internal
	         * @param {?} index
	         * @return {?}
	         */
	        FormArray.prototype._throwIfControlMissing = function (index) {
	            if (!this.controls.length) {
	                throw new Error("\n        There are no form controls registered with this array yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      ");
	            }
	            if (!this.at(index)) {
	                throw new Error("Cannot find form control at index " + index);
	            }
	        };
	        /**
	         * \@internal
	         * @param {?} cb
	         * @return {?}
	         */
	        FormArray.prototype._forEachChild = function (cb) {
	            this.controls.forEach(function (control, index) { cb(control, index); });
	        };
	        /**
	         * \@internal
	         * @return {?}
	         */
	        FormArray.prototype._updateValue = function () {
	            var _this = this;
	            this._value = this.controls.filter(function (control) { return control.enabled || _this.disabled; })
	                .map(function (control) { return control.value; });
	        };
	        /**
	         * \@internal
	         * @param {?} condition
	         * @return {?}
	         */
	        FormArray.prototype._anyControls = function (condition) {
	            return this.controls.some(function (control) { return control.enabled && condition(control); });
	        };
	        /**
	         * \@internal
	         * @return {?}
	         */
	        FormArray.prototype._setUpControls = function () {
	            var _this = this;
	            this._forEachChild(function (control) { return _this._registerControl(control); });
	        };
	        /**
	         * \@internal
	         * @param {?} value
	         * @return {?}
	         */
	        FormArray.prototype._checkAllValuesPresent = function (value) {
	            this._forEachChild(function (control, i) {
	                if (value[i] === undefined) {
	                    throw new Error("Must supply a value for form control at index: " + i + ".");
	                }
	            });
	        };
	        /**
	         * \@internal
	         * @return {?}
	         */
	        FormArray.prototype._allControlsDisabled = function () {
	            for (var _i = 0, _a = this.controls; _i < _a.length; _i++) {
	                var control = _a[_i];
	                if (control.enabled)
	                    return false;
	            }
	            return this.controls.length > 0 || this.disabled;
	        };
	        /**
	         * @param {?} control
	         * @return {?}
	         */
	        FormArray.prototype._registerControl = function (control) {
	            control.setParent(this);
	            control._registerOnCollectionChange(this._onCollectionChange);
	        };
	        return FormArray;
	    }(AbstractControl));
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$4 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ formDirectiveProvider = {
	        provide: ControlContainer,
	        useExisting: _angular_core.forwardRef(function () { return NgForm; })
	    };
	    var /** @type {?} */ resolvedPromise = Promise.resolve(null);
	    /**
	     * \@whatItDoes Creates a top-level {\@link FormGroup} instance and binds it to a form
	     * to track aggregate form value and validation status.
	     *
	     * \@howToUse
	     *
	     * As soon as you import the `FormsModule`, this directive becomes active by default on
	     * all `<form>` tags.  You don't need to add a special selector.
	     *
	     * You can export the directive into a local template variable using `ngForm` as the key
	     * (ex: `#myForm="ngForm"`). This is optional, but useful.  Many properties from the underlying
	     * {\@link FormGroup} instance are duplicated on the directive itself, so a reference to it
	     * will give you access to the aggregate value and validity status of the form, as well as
	     * user interaction properties like `dirty` and `touched`.
	     *
	     * To register child controls with the form, you'll want to use {\@link NgModel} with a
	     * `name` attribute.  You can also use {\@link NgModelGroup} if you'd like to create
	     * sub-groups within the form.
	     *
	     * You can listen to the directive's `ngSubmit` event to be notified when the user has
	     * triggered a form submission. The `ngSubmit` event will be emitted with the original form
	     * submission event.
	     *
	     * {\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}
	     *
	     * * **npm package**: `\@angular/forms`
	     *
	     * * **NgModule**: `FormsModule`
	     *
	     *  \@stable
	     */
	    var NgForm = (function (_super) {
	        __extends$4(NgForm, _super);
	        /**
	         * @param {?} validators
	         * @param {?} asyncValidators
	         */
	        function NgForm(validators, asyncValidators) {
	            _super.call(this);
	            this._submitted = false;
	            this.ngSubmit = new EventEmitter();
	            this.form =
	                new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));
	        }
	        Object.defineProperty(NgForm.prototype, "submitted", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._submitted; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgForm.prototype, "formDirective", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgForm.prototype, "control", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.form; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgForm.prototype, "path", {
	            /**
	             * @return {?}
	             */
	            get: function () { return []; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgForm.prototype, "controls", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.form.controls; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} dir
	         * @return {?}
	         */
	        NgForm.prototype.addControl = function (dir) {
	            var _this = this;
	            resolvedPromise.then(function () {
	                var /** @type {?} */ container = _this._findContainer(dir.path);
	                dir._control = (container.registerControl(dir.name, dir.control));
	                setUpControl(dir.control, dir);
	                dir.control.updateValueAndValidity({ emitEvent: false });
	            });
	        };
	        /**
	         * @param {?} dir
	         * @return {?}
	         */
	        NgForm.prototype.getControl = function (dir) { return (this.form.get(dir.path)); };
	        /**
	         * @param {?} dir
	         * @return {?}
	         */
	        NgForm.prototype.removeControl = function (dir) {
	            var _this = this;
	            resolvedPromise.then(function () {
	                var /** @type {?} */ container = _this._findContainer(dir.path);
	                if (container) {
	                    container.removeControl(dir.name);
	                }
	            });
	        };
	        /**
	         * @param {?} dir
	         * @return {?}
	         */
	        NgForm.prototype.addFormGroup = function (dir) {
	            var _this = this;
	            resolvedPromise.then(function () {
	                var /** @type {?} */ container = _this._findContainer(dir.path);
	                var /** @type {?} */ group = new FormGroup({});
	                setUpFormContainer(group, dir);
	                container.registerControl(dir.name, group);
	                group.updateValueAndValidity({ emitEvent: false });
	            });
	        };
	        /**
	         * @param {?} dir
	         * @return {?}
	         */
	        NgForm.prototype.removeFormGroup = function (dir) {
	            var _this = this;
	            resolvedPromise.then(function () {
	                var /** @type {?} */ container = _this._findContainer(dir.path);
	                if (container) {
	                    container.removeControl(dir.name);
	                }
	            });
	        };
	        /**
	         * @param {?} dir
	         * @return {?}
	         */
	        NgForm.prototype.getFormGroup = function (dir) { return (this.form.get(dir.path)); };
	        /**
	         * @param {?} dir
	         * @param {?} value
	         * @return {?}
	         */
	        NgForm.prototype.updateModel = function (dir, value) {
	            var _this = this;
	            resolvedPromise.then(function () {
	                var /** @type {?} */ ctrl = (_this.form.get(dir.path));
	                ctrl.setValue(value);
	            });
	        };
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        NgForm.prototype.setValue = function (value) { this.control.setValue(value); };
	        /**
	         * @param {?} $event
	         * @return {?}
	         */
	        NgForm.prototype.onSubmit = function ($event) {
	            this._submitted = true;
	            this.ngSubmit.emit($event);
	            return false;
	        };
	        /**
	         * @return {?}
	         */
	        NgForm.prototype.onReset = function () { this.resetForm(); };
	        /**
	         * @param {?=} value
	         * @return {?}
	         */
	        NgForm.prototype.resetForm = function (value) {
	            if (value === void 0) { value = undefined; }
	            this.form.reset(value);
	            this._submitted = false;
	        };
	        /**
	         * \@internal
	         * @param {?} path
	         * @return {?}
	         */
	        NgForm.prototype._findContainer = function (path) {
	            path.pop();
	            return path.length ? (this.form.get(path)) : this.form;
	        };
	        NgForm.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]',
	                        providers: [formDirectiveProvider],
	                        host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },
	                        outputs: ['ngSubmit'],
	                        exportAs: 'ngForm'
	                    },] },
	        ];
	        /** @nocollapse */
	        NgForm.ctorParameters = function () { return [
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },
	        ]; };
	        return NgForm;
	    }(ControlContainer));
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var /** @type {?} */ Examples = {
	        formControlName: "\n    <div [formGroup]=\"myGroup\">\n      <input formControlName=\"firstName\">\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       firstName: new FormControl()\n    });",
	        formGroupName: "\n    <div [formGroup]=\"myGroup\">\n       <div formGroupName=\"person\">\n          <input formControlName=\"firstName\">\n       </div>\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       person: new FormGroup({ firstName: new FormControl() })\n    });",
	        formArrayName: "\n    <div [formGroup]=\"myGroup\">\n      <div formArrayName=\"cities\">\n        <div *ngFor=\"let city of cityArray.controls; let i=index\">\n          <input [formControlName]=\"i\">\n        </div>\n      </div>\n    </div>\n\n    In your class:\n\n    this.cityArray = new FormArray([new FormControl('SF')]);\n    this.myGroup = new FormGroup({\n      cities: this.cityArray\n    });",
	        ngModelGroup: "\n    <form>\n       <div ngModelGroup=\"person\">\n          <input [(ngModel)]=\"person.name\" name=\"firstName\">\n       </div>\n    </form>",
	        ngModelWithFormGroup: "\n    <div [formGroup]=\"myGroup\">\n       <input formControlName=\"firstName\">\n       <input [(ngModel)]=\"showMoreControls\" [ngModelOptions]=\"{standalone: true}\">\n    </div>\n  "
	    };
	
	    var TemplateDrivenErrors = (function () {
	        function TemplateDrivenErrors() {
	        }
	        /**
	         * @return {?}
	         */
	        TemplateDrivenErrors.modelParentException = function () {
	            throw new Error("\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\n      formGroup's partner directive \"formControlName\" instead.  Example:\n\n      " + Examples.formControlName + "\n\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\n\n      Example:\n\n      " + Examples.ngModelWithFormGroup);
	        };
	        /**
	         * @return {?}
	         */
	        TemplateDrivenErrors.formGroupNameException = function () {
	            throw new Error("\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\n\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\n\n      " + Examples.formGroupName + "\n\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\n\n      " + Examples.ngModelGroup);
	        };
	        /**
	         * @return {?}
	         */
	        TemplateDrivenErrors.missingNameException = function () {
	            throw new Error("If ngModel is used within a form tag, either the name attribute must be set or the form\n      control must be defined as 'standalone' in ngModelOptions.\n\n      Example 1: <input [(ngModel)]=\"person.firstName\" name=\"first\">\n      Example 2: <input [(ngModel)]=\"person.firstName\" [ngModelOptions]=\"{standalone: true}\">");
	        };
	        /**
	         * @return {?}
	         */
	        TemplateDrivenErrors.modelGroupParentException = function () {
	            throw new Error("\n      ngModelGroup cannot be used with a parent formGroup directive.\n\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\n\n      " + Examples.formGroupName + "\n\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\n\n      " + Examples.ngModelGroup);
	        };
	        return TemplateDrivenErrors;
	    }());
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$8 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ modelGroupProvider = {
	        provide: ControlContainer,
	        useExisting: _angular_core.forwardRef(function () { return NgModelGroup; })
	    };
	    /**
	     * \@whatItDoes Creates and binds a {\@link FormGroup} instance to a DOM element.
	     *
	     * \@howToUse
	     *
	     * This directive can only be used as a child of {\@link NgForm} (or in other words,
	     * within `<form>` tags).
	     *
	     * Use this directive if you'd like to create a sub-group within a form. This can
	     * come in handy if you want to validate a sub-group of your form separately from
	     * the rest of your form, or if some values in your domain model make more sense to
	     * consume together in a nested object.
	     *
	     * Pass in the name you'd like this sub-group to have and it will become the key
	     * for the sub-group in the form's full value. You can also export the directive into
	     * a local template variable using `ngModelGroup` (ex: `#myGroup="ngModelGroup"`).
	     *
	     * {\@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}
	     *
	     * * **npm package**: `\@angular/forms`
	     *
	     * * **NgModule**: `FormsModule`
	     *
	     * \@stable
	     */
	    var NgModelGroup = (function (_super) {
	        __extends$8(NgModelGroup, _super);
	        /**
	         * @param {?} parent
	         * @param {?} validators
	         * @param {?} asyncValidators
	         */
	        function NgModelGroup(parent, validators, asyncValidators) {
	            _super.call(this);
	            this._parent = parent;
	            this._validators = validators;
	            this._asyncValidators = asyncValidators;
	        }
	        /**
	         * \@internal
	         * @return {?}
	         */
	        NgModelGroup.prototype._checkParentType = function () {
	            if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {
	                TemplateDrivenErrors.modelGroupParentException();
	            }
	        };
	        NgModelGroup.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup' },] },
	        ];
	        /** @nocollapse */
	        NgModelGroup.ctorParameters = function () { return [
	            { type: ControlContainer, decorators: [{ type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },
	        ]; };
	        NgModelGroup.propDecorators = {
	            'name': [{ type: _angular_core.Input, args: ['ngModelGroup',] },],
	        };
	        return NgModelGroup;
	    }(AbstractFormGroupDirective));
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$7 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ formControlBinding = {
	        provide: NgControl,
	        useExisting: _angular_core.forwardRef(function () { return NgModel; })
	    };
	    /**
	     * `ngModel` forces an additional change detection run when its inputs change:
	     * E.g.:
	     * ```
	     * <div>{{myModel.valid}}</div>
	     * <input [(ngModel)]="myValue" #myModel="ngModel">
	     * ```
	     * I.e. `ngModel` can export itself on the element and then be used in the template.
	     * Normally, this would result in expressions before the `input` that use the exported directive
	     * to have and old value as they have been
	     * dirty checked before. As this is a very common case for `ngModel`, we added this second change
	     * detection run.
	     *
	     * Notes:
	     * - this is just one extra run no matter how many `ngModel` have been changed.
	     * - this is a general problem when using `exportAs` for directives!
	     */
	    var /** @type {?} */ resolvedPromise$1 = Promise.resolve(null);
	    /**
	     * \@whatItDoes Creates a {\@link FormControl} instance from a domain model and binds it
	     * to a form control element.
	     *
	     * The {\@link FormControl} instance will track the value, user interaction, and
	     * validation status of the control and keep the view synced with the model. If used
	     * within a parent form, the directive will also register itself with the form as a child
	     * control.
	     *
	     * \@howToUse
	     *
	     * This directive can be used by itself or as part of a larger form. All you need is the
	     * `ngModel` selector to activate it.
	     *
	     * It accepts a domain model as an optional {\@link \@Input}. If you have a one-way binding
	     * to `ngModel` with `[]` syntax, changing the value of the domain model in the component
	     * class will set the value in the view. If you have a two-way binding with `[()]` syntax
	     * (also known as 'banana-box syntax'), the value in the UI will always be synced back to
	     * the domain model in your class as well.
	     *
	     * If you wish to inspect the properties of the associated {\@link FormControl} (like
	     * validity state), you can also export the directive into a local template variable using
	     * `ngModel` as the key (ex: `#myVar="ngModel"`). You can then access the control using the
	     * directive's `control` property, but most properties you'll need (like `valid` and `dirty`)
	     * will fall through to the control anyway, so you can access them directly. You can see a
	     * full list of properties directly available in {\@link AbstractControlDirective}.
	     *
	     * The following is an example of a simple standalone control using `ngModel`:
	     *
	     * {\@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}
	     *
	     * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute
	     * so that the control can be registered with the parent form under that name.
	     *
	     * It's worth noting that in the context of a parent form, you often can skip one-way or
	     * two-way binding because the parent form will sync the value for you. You can access
	     * its properties by exporting it into a local template variable using `ngForm` (ex:
	     * `#f="ngForm"`). Then you can pass it where it needs to go on submit.
	     *
	     * If you do need to populate initial values into your form, using a one-way binding for
	     * `ngModel` tends to be sufficient as long as you use the exported form's value rather
	     * than the domain model's value on submit.
	     *
	     * Take a look at an example of using `ngModel` within a form:
	     *
	     * {\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}
	     *
	     * To see `ngModel` examples with different form control types, see:
	     *
	     * * Radio buttons: {\@link RadioControlValueAccessor}
	     * * Selects: {\@link SelectControlValueAccessor}
	     *
	     * **npm package**: `\@angular/forms`
	     *
	     * **NgModule**: `FormsModule`
	     *
	     *  \@stable
	     */
	    var NgModel = (function (_super) {
	        __extends$7(NgModel, _super);
	        /**
	         * @param {?} parent
	         * @param {?} validators
	         * @param {?} asyncValidators
	         * @param {?} valueAccessors
	         */
	        function NgModel(parent, validators, asyncValidators, valueAccessors) {
	            _super.call(this);
	            /** @internal */
	            this._control = new FormControl();
	            /** @internal */
	            this._registered = false;
	            this.update = new EventEmitter();
	            this._parent = parent;
	            this._rawValidators = validators || [];
	            this._rawAsyncValidators = asyncValidators || [];
	            this.valueAccessor = selectValueAccessor(this, valueAccessors);
	        }
	        /**
	         * @param {?} changes
	         * @return {?}
	         */
	        NgModel.prototype.ngOnChanges = function (changes) {
	            this._checkForErrors();
	            if (!this._registered)
	                this._setUpControl();
	            if ('isDisabled' in changes) {
	                this._updateDisabled(changes);
	            }
	            if (isPropertyUpdated(changes, this.viewModel)) {
	                this._updateValue(this.model);
	                this.viewModel = this.model;
	            }
	        };
	        /**
	         * @return {?}
	         */
	        NgModel.prototype.ngOnDestroy = function () { this.formDirective && this.formDirective.removeControl(this); };
	        Object.defineProperty(NgModel.prototype, "control", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._control; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgModel.prototype, "path", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                return this._parent ? controlPath(this.name, this._parent) : [this.name];
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgModel.prototype, "formDirective", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._parent ? this._parent.formDirective : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgModel.prototype, "validator", {
	            /**
	             * @return {?}
	             */
	            get: function () { return composeValidators(this._rawValidators); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgModel.prototype, "asyncValidator", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                return composeAsyncValidators(this._rawAsyncValidators);
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} newValue
	         * @return {?}
	         */
	        NgModel.prototype.viewToModelUpdate = function (newValue) {
	            this.viewModel = newValue;
	            this.update.emit(newValue);
	        };
	        /**
	         * @return {?}
	         */
	        NgModel.prototype._setUpControl = function () {
	            this._isStandalone() ? this._setUpStandalone() :
	                this.formDirective.addControl(this);
	            this._registered = true;
	        };
	        /**
	         * @return {?}
	         */
	        NgModel.prototype._isStandalone = function () {
	            return !this._parent || (this.options && this.options.standalone);
	        };
	        /**
	         * @return {?}
	         */
	        NgModel.prototype._setUpStandalone = function () {
	            setUpControl(this._control, this);
	            this._control.updateValueAndValidity({ emitEvent: false });
	        };
	        /**
	         * @return {?}
	         */
	        NgModel.prototype._checkForErrors = function () {
	            if (!this._isStandalone()) {
	                this._checkParentType();
	            }
	            this._checkName();
	        };
	        /**
	         * @return {?}
	         */
	        NgModel.prototype._checkParentType = function () {
	            if (!(this._parent instanceof NgModelGroup) &&
	                this._parent instanceof AbstractFormGroupDirective) {
	                TemplateDrivenErrors.formGroupNameException();
	            }
	            else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {
	                TemplateDrivenErrors.modelParentException();
	            }
	        };
	        /**
	         * @return {?}
	         */
	        NgModel.prototype._checkName = function () {
	            if (this.options && this.options.name)
	                this.name = this.options.name;
	            if (!this._isStandalone() && !this.name) {
	                TemplateDrivenErrors.missingNameException();
	            }
	        };
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        NgModel.prototype._updateValue = function (value) {
	            var _this = this;
	            resolvedPromise$1.then(function () { _this.control.setValue(value, { emitViewToModelChange: false }); });
	        };
	        /**
	         * @param {?} changes
	         * @return {?}
	         */
	        NgModel.prototype._updateDisabled = function (changes) {
	            var _this = this;
	            var /** @type {?} */ disabledValue = changes['isDisabled'].currentValue;
	            var /** @type {?} */ isDisabled = disabledValue === '' || (disabledValue && disabledValue !== 'false');
	            resolvedPromise$1.then(function () {
	                if (isDisabled && !_this.control.disabled) {
	                    _this.control.disable();
	                }
	                else if (!isDisabled && _this.control.disabled) {
	                    _this.control.enable();
	                }
	            });
	        };
	        NgModel.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: '[ngModel]:not([formControlName]):not([formControl])',
	                        providers: [formControlBinding],
	                        exportAs: 'ngModel'
	                    },] },
	        ];
	        /** @nocollapse */
	        NgModel.ctorParameters = function () { return [
	            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },
	        ]; };
	        NgModel.propDecorators = {
	            'name': [{ type: _angular_core.Input },],
	            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],
	            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],
	            'options': [{ type: _angular_core.Input, args: ['ngModelOptions',] },],
	            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],
	        };
	        return NgModel;
	    }(NgControl));
	
	    var ReactiveErrors = (function () {
	        function ReactiveErrors() {
	        }
	        /**
	         * @return {?}
	         */
	        ReactiveErrors.controlParentException = function () {
	            throw new Error("formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      " + Examples.formControlName);
	        };
	        /**
	         * @return {?}
	         */
	        ReactiveErrors.ngModelGroupException = function () {
	            throw new Error("formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\n       that also have a \"form\" prefix: formGroupName, formArrayName, or formGroup.\n\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\n\n        " + Examples.formGroupName + "\n\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\n\n        " + Examples.ngModelGroup);
	        };
	        /**
	         * @return {?}
	         */
	        ReactiveErrors.missingFormException = function () {
	            throw new Error("formGroup expects a FormGroup instance. Please pass one in.\n\n       Example:\n\n       " + Examples.formControlName);
	        };
	        /**
	         * @return {?}
	         */
	        ReactiveErrors.groupParentException = function () {
	            throw new Error("formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\n      directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      " + Examples.formGroupName);
	        };
	        /**
	         * @return {?}
	         */
	        ReactiveErrors.arrayParentException = function () {
	            throw new Error("formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n        Example:\n\n        " + Examples.formArrayName);
	        };
	        /**
	         * @return {?}
	         */
	        ReactiveErrors.disabledAttrWarning = function () {
	            console.warn("\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\n      you. We recommend using this approach to avoid 'changed after checked' errors.\n       \n      Example: \n      form = new FormGroup({\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\n        last: new FormControl('Drew', Validators.required)\n      });\n    ");
	        };
	        return ReactiveErrors;
	    }());
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$9 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ formControlBinding$1 = {
	        provide: NgControl,
	        useExisting: _angular_core.forwardRef(function () { return FormControlDirective; })
	    };
	    /**
	     * \@whatItDoes Syncs a standalone {\@link FormControl} instance to a form control element.
	     *
	     * In other words, this directive ensures that any values written to the {\@link FormControl}
	     * instance programmatically will be written to the DOM element (model -> view). Conversely,
	     * any values written to the DOM element through user input will be reflected in the
	     * {\@link FormControl} instance (view -> model).
	     *
	     * \@howToUse
	     *
	     * Use this directive if you'd like to create and manage a {\@link FormControl} instance directly.
	     * Simply create a {\@link FormControl}, save it to your component class, and pass it into the
	     * {\@link FormControlDirective}.
	     *
	     * This directive is designed to be used as a standalone control.  Unlike {\@link FormControlName},
	     * it does not require that your {\@link FormControl} instance be part of any parent
	     * {\@link FormGroup}, and it won't be registered to any {\@link FormGroupDirective} that
	     * exists above it.
	     *
	     * **Get the value**: the `value` property is always synced and available on the
	     * {\@link FormControl} instance. See a full list of available properties in
	     * {\@link AbstractControl}.
	     *
	     * **Set the value**: You can pass in an initial value when instantiating the {\@link FormControl},
	     * or you can set it programmatically later using {\@link AbstractControl.setValue} or
	     * {\@link AbstractControl.patchValue}.
	     *
	     * **Listen to value**: If you want to listen to changes in the value of the control, you can
	     * subscribe to the {\@link AbstractControl.valueChanges} event.  You can also listen to
	     * {\@link AbstractControl.statusChanges} to be notified when the validation status is
	     * re-calculated.
	     *
	     * ### Example
	     *
	     * {\@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}
	     *
	     * * **npm package**: `\@angular/forms`
	     *
	     * * **NgModule**: `ReactiveFormsModule`
	     *
	     *  \@stable
	     */
	    var FormControlDirective = (function (_super) {
	        __extends$9(FormControlDirective, _super);
	        /**
	         * @param {?} validators
	         * @param {?} asyncValidators
	         * @param {?} valueAccessors
	         */
	        function FormControlDirective(validators, asyncValidators, valueAccessors) {
	            _super.call(this);
	            this.update = new EventEmitter();
	            this._rawValidators = validators || [];
	            this._rawAsyncValidators = asyncValidators || [];
	            this.valueAccessor = selectValueAccessor(this, valueAccessors);
	        }
	        Object.defineProperty(FormControlDirective.prototype, "isDisabled", {
	            /**
	             * @param {?} isDisabled
	             * @return {?}
	             */
	            set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} changes
	         * @return {?}
	         */
	        FormControlDirective.prototype.ngOnChanges = function (changes) {
	            if (this._isControlChanged(changes)) {
	                setUpControl(this.form, this);
	                if (this.control.disabled && this.valueAccessor.setDisabledState) {
	                    this.valueAccessor.setDisabledState(true);
	                }
	                this.form.updateValueAndValidity({ emitEvent: false });
	            }
	            if (isPropertyUpdated(changes, this.viewModel)) {
	                this.form.setValue(this.model);
	                this.viewModel = this.model;
	            }
	        };
	        Object.defineProperty(FormControlDirective.prototype, "path", {
	            /**
	             * @return {?}
	             */
	            get: function () { return []; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(FormControlDirective.prototype, "validator", {
	            /**
	             * @return {?}
	             */
	            get: function () { return composeValidators(this._rawValidators); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(FormControlDirective.prototype, "asyncValidator", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                return composeAsyncValidators(this._rawAsyncValidators);
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(FormControlDirective.prototype, "control", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.form; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} newValue
	         * @return {?}
	         */
	        FormControlDirective.prototype.viewToModelUpdate = function (newValue) {
	            this.viewModel = newValue;
	            this.update.emit(newValue);
	        };
	        /**
	         * @param {?} changes
	         * @return {?}
	         */
	        FormControlDirective.prototype._isControlChanged = function (changes) {
	            return changes.hasOwnProperty('form');
	        };
	        FormControlDirective.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[formControl]', providers: [formControlBinding$1], exportAs: 'ngForm' },] },
	        ];
	        /** @nocollapse */
	        FormControlDirective.ctorParameters = function () { return [
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },
	        ]; };
	        FormControlDirective.propDecorators = {
	            'form': [{ type: _angular_core.Input, args: ['formControl',] },],
	            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],
	            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],
	            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],
	        };
	        return FormControlDirective;
	    }(NgControl));
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$11 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ formDirectiveProvider$1 = {
	        provide: ControlContainer,
	        useExisting: _angular_core.forwardRef(function () { return FormGroupDirective; })
	    };
	    /**
	     * \@whatItDoes Binds an existing {\@link FormGroup} to a DOM element.
	     *
	     * \@howToUse
	     *
	     * This directive accepts an existing {\@link FormGroup} instance. It will then use this
	     * {\@link FormGroup} instance to match any child {\@link FormControl}, {\@link FormGroup},
	     * and {\@link FormArray} instances to child {\@link FormControlName}, {\@link FormGroupName},
	     * and {\@link FormArrayName} directives.
	     *
	     * **Set value**: You can set the form's initial value when instantiating the
	     * {\@link FormGroup}, or you can set it programmatically later using the {\@link FormGroup}'s
	     * {\@link AbstractControl.setValue} or {\@link AbstractControl.patchValue} methods.
	     *
	     * **Listen to value**: If you want to listen to changes in the value of the form, you can subscribe
	     * to the {\@link FormGroup}'s {\@link AbstractControl.valueChanges} event.  You can also listen to
	     * its {\@link AbstractControl.statusChanges} event to be notified when the validation status is
	     * re-calculated.
	     *
	     * Furthermore, you can listen to the directive's `ngSubmit` event to be notified when the user has
	     * triggered a form submission. The `ngSubmit` event will be emitted with the original form
	     * submission event.
	     *
	     * ### Example
	     *
	     * In this example, we create form controls for first name and last name.
	     *
	     * {\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}
	     *
	     * **npm package**: `\@angular/forms`
	     *
	     * **NgModule**: {\@link ReactiveFormsModule}
	     *
	     *  \@stable
	     */
	    var FormGroupDirective = (function (_super) {
	        __extends$11(FormGroupDirective, _super);
	        /**
	         * @param {?} _validators
	         * @param {?} _asyncValidators
	         */
	        function FormGroupDirective(_validators, _asyncValidators) {
	            _super.call(this);
	            this._validators = _validators;
	            this._asyncValidators = _asyncValidators;
	            this._submitted = false;
	            this.directives = [];
	            this.form = null;
	            this.ngSubmit = new EventEmitter();
	        }
	        /**
	         * @param {?} changes
	         * @return {?}
	         */
	        FormGroupDirective.prototype.ngOnChanges = function (changes) {
	            this._checkFormPresent();
	            if (changes.hasOwnProperty('form')) {
	                this._updateValidators();
	                this._updateDomValue();
	                this._updateRegistrations();
	            }
	        };
	        Object.defineProperty(FormGroupDirective.prototype, "submitted", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._submitted; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(FormGroupDirective.prototype, "formDirective", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(FormGroupDirective.prototype, "control", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.form; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(FormGroupDirective.prototype, "path", {
	            /**
	             * @return {?}
	             */
	            get: function () { return []; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} dir
	         * @return {?}
	         */
	        FormGroupDirective.prototype.addControl = function (dir) {
	            var /** @type {?} */ ctrl = this.form.get(dir.path);
	            setUpControl(ctrl, dir);
	            ctrl.updateValueAndValidity({ emitEvent: false });
	            this.directives.push(dir);
	            return ctrl;
	        };
	        /**
	         * @param {?} dir
	         * @return {?}
	         */
	        FormGroupDirective.prototype.getControl = function (dir) { return (this.form.get(dir.path)); };
	        /**
	         * @param {?} dir
	         * @return {?}
	         */
	        FormGroupDirective.prototype.removeControl = function (dir) { ListWrapper.remove(this.directives, dir); };
	        /**
	         * @param {?} dir
	         * @return {?}
	         */
	        FormGroupDirective.prototype.addFormGroup = function (dir) {
	            var /** @type {?} */ ctrl = this.form.get(dir.path);
	            setUpFormContainer(ctrl, dir);
	            ctrl.updateValueAndValidity({ emitEvent: false });
	        };
	        /**
	         * @param {?} dir
	         * @return {?}
	         */
	        FormGroupDirective.prototype.removeFormGroup = function (dir) { };
	        /**
	         * @param {?} dir
	         * @return {?}
	         */
	        FormGroupDirective.prototype.getFormGroup = function (dir) { return (this.form.get(dir.path)); };
	        /**
	         * @param {?} dir
	         * @return {?}
	         */
	        FormGroupDirective.prototype.addFormArray = function (dir) {
	            var /** @type {?} */ ctrl = this.form.get(dir.path);
	            setUpFormContainer(ctrl, dir);
	            ctrl.updateValueAndValidity({ emitEvent: false });
	        };
	        /**
	         * @param {?} dir
	         * @return {?}
	         */
	        FormGroupDirective.prototype.removeFormArray = function (dir) { };
	        /**
	         * @param {?} dir
	         * @return {?}
	         */
	        FormGroupDirective.prototype.getFormArray = function (dir) { return (this.form.get(dir.path)); };
	        /**
	         * @param {?} dir
	         * @param {?} value
	         * @return {?}
	         */
	        FormGroupDirective.prototype.updateModel = function (dir, value) {
	            var /** @type {?} */ ctrl = (this.form.get(dir.path));
	            ctrl.setValue(value);
	        };
	        /**
	         * @param {?} $event
	         * @return {?}
	         */
	        FormGroupDirective.prototype.onSubmit = function ($event) {
	            this._submitted = true;
	            this.ngSubmit.emit($event);
	            return false;
	        };
	        /**
	         * @return {?}
	         */
	        FormGroupDirective.prototype.onReset = function () { this.resetForm(); };
	        /**
	         * @param {?=} value
	         * @return {?}
	         */
	        FormGroupDirective.prototype.resetForm = function (value) {
	            if (value === void 0) { value = undefined; }
	            this.form.reset(value);
	            this._submitted = false;
	        };
	        /**
	         * \@internal
	         * @return {?}
	         */
	        FormGroupDirective.prototype._updateDomValue = function () {
	            var _this = this;
	            this.directives.forEach(function (dir) {
	                var /** @type {?} */ newCtrl = _this.form.get(dir.path);
	                if (dir._control !== newCtrl) {
	                    cleanUpControl(dir._control, dir);
	                    if (newCtrl)
	                        setUpControl(newCtrl, dir);
	                    dir._control = newCtrl;
	                }
	            });
	            this.form._updateTreeValidity({ emitEvent: false });
	        };
	        /**
	         * @return {?}
	         */
	        FormGroupDirective.prototype._updateRegistrations = function () {
	            var _this = this;
	            this.form._registerOnCollectionChange(function () { return _this._updateDomValue(); });
	            if (this._oldForm)
	                this._oldForm._registerOnCollectionChange(function () { });
	            this._oldForm = this.form;
	        };
	        /**
	         * @return {?}
	         */
	        FormGroupDirective.prototype._updateValidators = function () {
	            var /** @type {?} */ sync = composeValidators(this._validators);
	            this.form.validator = Validators.compose([this.form.validator, sync]);
	            var /** @type {?} */ async = composeAsyncValidators(this._asyncValidators);
	            this.form.asyncValidator = Validators.composeAsync([this.form.asyncValidator, async]);
	        };
	        /**
	         * @return {?}
	         */
	        FormGroupDirective.prototype._checkFormPresent = function () {
	            if (!this.form) {
	                ReactiveErrors.missingFormException();
	            }
	        };
	        FormGroupDirective.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: '[formGroup]',
	                        providers: [formDirectiveProvider$1],
	                        host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },
	                        exportAs: 'ngForm'
	                    },] },
	        ];
	        /** @nocollapse */
	        FormGroupDirective.ctorParameters = function () { return [
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },
	        ]; };
	        FormGroupDirective.propDecorators = {
	            'form': [{ type: _angular_core.Input, args: ['formGroup',] },],
	            'ngSubmit': [{ type: _angular_core.Output },],
	        };
	        return FormGroupDirective;
	    }(ControlContainer));
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$12 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ formGroupNameProvider = {
	        provide: ControlContainer,
	        useExisting: _angular_core.forwardRef(function () { return FormGroupName; })
	    };
	    /**
	     * \@whatItDoes Syncs a nested {\@link FormGroup} to a DOM element.
	     *
	     * \@howToUse
	     *
	     * This directive can only be used with a parent {\@link FormGroupDirective} (selector:
	     * `[formGroup]`).
	     *
	     * It accepts the string name of the nested {\@link FormGroup} you want to link, and
	     * will look for a {\@link FormGroup} registered with that name in the parent
	     * {\@link FormGroup} instance you passed into {\@link FormGroupDirective}.
	     *
	     * Nested form groups can come in handy when you want to validate a sub-group of a
	     * form separately from the rest or when you'd like to group the values of certain
	     * controls into their own nested object.
	     *
	     * **Access the group**: You can access the associated {\@link FormGroup} using the
	     * {\@link AbstractControl.get} method. Ex: `this.form.get('name')`.
	     *
	     * You can also access individual controls within the group using dot syntax.
	     * Ex: `this.form.get('name.first')`
	     *
	     * **Get the value**: the `value` property is always synced and available on the
	     * {\@link FormGroup}. See a full list of available properties in {\@link AbstractControl}.
	     *
	     * **Set the value**: You can set an initial value for each child control when instantiating
	     * the {\@link FormGroup}, or you can set it programmatically later using
	     * {\@link AbstractControl.setValue} or {\@link AbstractControl.patchValue}.
	     *
	     * **Listen to value**: If you want to listen to changes in the value of the group, you can
	     * subscribe to the {\@link AbstractControl.valueChanges} event.  You can also listen to
	     * {\@link AbstractControl.statusChanges} to be notified when the validation status is
	     * re-calculated.
	     *
	     * ### Example
	     *
	     * {\@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}
	     *
	     * * **npm package**: `\@angular/forms`
	     *
	     * * **NgModule**: `ReactiveFormsModule`
	     *
	     * \@stable
	     */
	    var FormGroupName = (function (_super) {
	        __extends$12(FormGroupName, _super);
	        /**
	         * @param {?} parent
	         * @param {?} validators
	         * @param {?} asyncValidators
	         */
	        function FormGroupName(parent, validators, asyncValidators) {
	            _super.call(this);
	            this._parent = parent;
	            this._validators = validators;
	            this._asyncValidators = asyncValidators;
	        }
	        /**
	         * \@internal
	         * @return {?}
	         */
	        FormGroupName.prototype._checkParentType = function () {
	            if (_hasInvalidParent(this._parent)) {
	                ReactiveErrors.groupParentException();
	            }
	        };
	        FormGroupName.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[formGroupName]', providers: [formGroupNameProvider] },] },
	        ];
	        /** @nocollapse */
	        FormGroupName.ctorParameters = function () { return [
	            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },
	        ]; };
	        FormGroupName.propDecorators = {
	            'name': [{ type: _angular_core.Input, args: ['formGroupName',] },],
	        };
	        return FormGroupName;
	    }(AbstractFormGroupDirective));
	    var /** @type {?} */ formArrayNameProvider = {
	        provide: ControlContainer,
	        useExisting: _angular_core.forwardRef(function () { return FormArrayName; })
	    };
	    /**
	     * \@whatItDoes Syncs a nested {\@link FormArray} to a DOM element.
	     *
	     * \@howToUse
	     *
	     * This directive is designed to be used with a parent {\@link FormGroupDirective} (selector:
	     * `[formGroup]`).
	     *
	     * It accepts the string name of the nested {\@link FormArray} you want to link, and
	     * will look for a {\@link FormArray} registered with that name in the parent
	     * {\@link FormGroup} instance you passed into {\@link FormGroupDirective}.
	     *
	     * Nested form arrays can come in handy when you have a group of form controls but
	     * you're not sure how many there will be. Form arrays allow you to create new
	     * form controls dynamically.
	     *
	     * **Access the array**: You can access the associated {\@link FormArray} using the
	     * {\@link AbstractControl.get} method on the parent {\@link FormGroup}.
	     * Ex: `this.form.get('cities')`.
	     *
	     * **Get the value**: the `value` property is always synced and available on the
	     * {\@link FormArray}. See a full list of available properties in {\@link AbstractControl}.
	     *
	     * **Set the value**: You can set an initial value for each child control when instantiating
	     * the {\@link FormArray}, or you can set the value programmatically later using the
	     * {\@link FormArray}'s {\@link AbstractControl.setValue} or {\@link AbstractControl.patchValue}
	     * methods.
	     *
	     * **Listen to value**: If you want to listen to changes in the value of the array, you can
	     * subscribe to the {\@link FormArray}'s {\@link AbstractControl.valueChanges} event.  You can also
	     * listen to its {\@link AbstractControl.statusChanges} event to be notified when the validation
	     * status is re-calculated.
	     *
	     * **Add new controls**: You can add new controls to the {\@link FormArray} dynamically by
	     * calling its {\@link FormArray.push} method.
	     *  Ex: `this.form.get('cities').push(new FormControl());`
	     *
	     * ### Example
	     *
	     * {\@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}
	     *
	     * * **npm package**: `\@angular/forms`
	     *
	     * * **NgModule**: `ReactiveFormsModule`
	     *
	     * \@stable
	     */
	    var FormArrayName = (function (_super) {
	        __extends$12(FormArrayName, _super);
	        /**
	         * @param {?} parent
	         * @param {?} validators
	         * @param {?} asyncValidators
	         */
	        function FormArrayName(parent, validators, asyncValidators) {
	            _super.call(this);
	            this._parent = parent;
	            this._validators = validators;
	            this._asyncValidators = asyncValidators;
	        }
	        /**
	         * @return {?}
	         */
	        FormArrayName.prototype.ngOnInit = function () {
	            this._checkParentType();
	            this.formDirective.addFormArray(this);
	        };
	        /**
	         * @return {?}
	         */
	        FormArrayName.prototype.ngOnDestroy = function () {
	            if (this.formDirective) {
	                this.formDirective.removeFormArray(this);
	            }
	        };
	        Object.defineProperty(FormArrayName.prototype, "control", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.formDirective.getFormArray(this); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(FormArrayName.prototype, "formDirective", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                return this._parent ? (this._parent.formDirective) : null;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(FormArrayName.prototype, "path", {
	            /**
	             * @return {?}
	             */
	            get: function () { return controlPath(this.name, this._parent); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(FormArrayName.prototype, "validator", {
	            /**
	             * @return {?}
	             */
	            get: function () { return composeValidators(this._validators); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(FormArrayName.prototype, "asyncValidator", {
	            /**
	             * @return {?}
	             */
	            get: function () { return composeAsyncValidators(this._asyncValidators); },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @return {?}
	         */
	        FormArrayName.prototype._checkParentType = function () {
	            if (_hasInvalidParent(this._parent)) {
	                ReactiveErrors.arrayParentException();
	            }
	        };
	        FormArrayName.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[formArrayName]', providers: [formArrayNameProvider] },] },
	        ];
	        /** @nocollapse */
	        FormArrayName.ctorParameters = function () { return [
	            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },
	        ]; };
	        FormArrayName.propDecorators = {
	            'name': [{ type: _angular_core.Input, args: ['formArrayName',] },],
	        };
	        return FormArrayName;
	    }(ControlContainer));
	    /**
	     * @param {?} parent
	     * @return {?}
	     */
	    function _hasInvalidParent(parent) {
	        return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&
	            !(parent instanceof FormArrayName);
	    }
	
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$10 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ controlNameBinding = {
	        provide: NgControl,
	        useExisting: _angular_core.forwardRef(function () { return FormControlName; })
	    };
	    /**
	     * \@whatItDoes Syncs a {\@link FormControl} in an existing {\@link FormGroup} to a form control
	     * element by name.
	     *
	     * In other words, this directive ensures that any values written to the {\@link FormControl}
	     * instance programmatically will be written to the DOM element (model -> view). Conversely,
	     * any values written to the DOM element through user input will be reflected in the
	     * {\@link FormControl} instance (view -> model).
	     *
	     * \@howToUse
	     *
	     * This directive is designed to be used with a parent {\@link FormGroupDirective} (selector:
	     * `[formGroup]`).
	     *
	     * It accepts the string name of the {\@link FormControl} instance you want to
	     * link, and will look for a {\@link FormControl} registered with that name in the
	     * closest {\@link FormGroup} or {\@link FormArray} above it.
	     *
	     * **Access the control**: You can access the {\@link FormControl} associated with
	     * this directive by using the {\@link AbstractControl.get} method.
	     * Ex: `this.form.get('first');`
	     *
	     * **Get value**: the `value` property is always synced and available on the {\@link FormControl}.
	     * See a full list of available properties in {\@link AbstractControl}.
	     *
	     *  **Set value**: You can set an initial value for the control when instantiating the
	     *  {\@link FormControl}, or you can set it programmatically later using
	     *  {\@link AbstractControl.setValue} or {\@link AbstractControl.patchValue}.
	     *
	     * **Listen to value**: If you want to listen to changes in the value of the control, you can
	     * subscribe to the {\@link AbstractControl.valueChanges} event.  You can also listen to
	     * {\@link AbstractControl.statusChanges} to be notified when the validation status is
	     * re-calculated.
	     *
	     * ### Example
	     *
	     * In this example, we create form controls for first name and last name.
	     *
	     * {\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}
	     *
	     * To see `formControlName` examples with different form control types, see:
	     *
	     * * Radio buttons: {\@link RadioControlValueAccessor}
	     * * Selects: {\@link SelectControlValueAccessor}
	     *
	     * **npm package**: `\@angular/forms`
	     *
	     * **NgModule**: {\@link ReactiveFormsModule}
	     *
	     *  \@stable
	     */
	    var FormControlName = (function (_super) {
	        __extends$10(FormControlName, _super);
	        /**
	         * @param {?} parent
	         * @param {?} validators
	         * @param {?} asyncValidators
	         * @param {?} valueAccessors
	         */
	        function FormControlName(parent, validators, asyncValidators, valueAccessors) {
	            _super.call(this);
	            this._added = false;
	            this.update = new EventEmitter();
	            this._parent = parent;
	            this._rawValidators = validators || [];
	            this._rawAsyncValidators = asyncValidators || [];
	            this.valueAccessor = selectValueAccessor(this, valueAccessors);
	        }
	        Object.defineProperty(FormControlName.prototype, "isDisabled", {
	            /**
	             * @param {?} isDisabled
	             * @return {?}
	             */
	            set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} changes
	         * @return {?}
	         */
	        FormControlName.prototype.ngOnChanges = function (changes) {
	            if (!this._added)
	                this._setUpControl();
	            if (isPropertyUpdated(changes, this.viewModel)) {
	                this.viewModel = this.model;
	                this.formDirective.updateModel(this, this.model);
	            }
	        };
	        /**
	         * @return {?}
	         */
	        FormControlName.prototype.ngOnDestroy = function () {
	            if (this.formDirective) {
	                this.formDirective.removeControl(this);
	            }
	        };
	        /**
	         * @param {?} newValue
	         * @return {?}
	         */
	        FormControlName.prototype.viewToModelUpdate = function (newValue) {
	            this.viewModel = newValue;
	            this.update.emit(newValue);
	        };
	        Object.defineProperty(FormControlName.prototype, "path", {
	            /**
	             * @return {?}
	             */
	            get: function () { return controlPath(this.name, this._parent); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(FormControlName.prototype, "formDirective", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._parent ? this._parent.formDirective : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(FormControlName.prototype, "validator", {
	            /**
	             * @return {?}
	             */
	            get: function () { return composeValidators(this._rawValidators); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(FormControlName.prototype, "asyncValidator", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                return composeAsyncValidators(this._rawAsyncValidators);
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(FormControlName.prototype, "control", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._control; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @return {?}
	         */
	        FormControlName.prototype._checkParentType = function () {
	            if (!(this._parent instanceof FormGroupName) &&
	                this._parent instanceof AbstractFormGroupDirective) {
	                ReactiveErrors.ngModelGroupException();
	            }
	            else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) &&
	                !(this._parent instanceof FormArrayName)) {
	                ReactiveErrors.controlParentException();
	            }
	        };
	        /**
	         * @return {?}
	         */
	        FormControlName.prototype._setUpControl = function () {
	            this._checkParentType();
	            this._control = this.formDirective.addControl(this);
	            if (this.control.disabled && this.valueAccessor.setDisabledState) {
	                this.valueAccessor.setDisabledState(true);
	            }
	            this._added = true;
	        };
	        FormControlName.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[formControlName]', providers: [controlNameBinding] },] },
	        ];
	        /** @nocollapse */
	        FormControlName.ctorParameters = function () { return [
	            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },
	        ]; };
	        FormControlName.propDecorators = {
	            'name': [{ type: _angular_core.Input, args: ['formControlName',] },],
	            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],
	            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],
	            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],
	        };
	        return FormControlName;
	    }(NgControl));
	
	    var __extends$13 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ REQUIRED_VALIDATOR = {
	        provide: NG_VALIDATORS,
	        useExisting: _angular_core.forwardRef(function () { return RequiredValidator; }),
	        multi: true
	    };
	    var /** @type {?} */ CHECKBOX_REQUIRED_VALIDATOR = {
	        provide: NG_VALIDATORS,
	        useExisting: _angular_core.forwardRef(function () { return CheckboxRequiredValidator; }),
	        multi: true
	    };
	    /**
	     * A Directive that adds the `required` validator to any controls marked with the
	     * `required` attribute, via the {\@link NG_VALIDATORS} binding.
	     *
	     * ### Example
	     *
	     * ```
	     * <input name="fullName" ngModel required>
	     * ```
	     *
	     * \@stable
	     */
	    var RequiredValidator = (function () {
	        function RequiredValidator() {
	        }
	        Object.defineProperty(RequiredValidator.prototype, "required", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._required; },
	            /**
	             * @param {?} value
	             * @return {?}
	             */
	            set: function (value) {
	                this._required = value != null && value !== false && "" + value !== 'false';
	                if (this._onChange)
	                    this._onChange();
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} c
	         * @return {?}
	         */
	        RequiredValidator.prototype.validate = function (c) {
	            return this.required ? Validators.required(c) : null;
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        RequiredValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };
	        RequiredValidator.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',
	                        providers: [REQUIRED_VALIDATOR],
	                        host: { '[attr.required]': 'required ? "" : null' }
	                    },] },
	        ];
	        /** @nocollapse */
	        RequiredValidator.ctorParameters = function () { return []; };
	        RequiredValidator.propDecorators = {
	            'required': [{ type: _angular_core.Input },],
	        };
	        return RequiredValidator;
	    }());
	    /**
	     * A Directive that adds the `required` validator to checkbox controls marked with the
	     * `required` attribute, via the {\@link NG_VALIDATORS} binding.
	     *
	     * ### Example
	     *
	     * ```
	     * <input type="checkbox" name="active" ngModel required>
	     * ```
	     *
	     * \@experimental
	     */
	    var CheckboxRequiredValidator = (function (_super) {
	        __extends$13(CheckboxRequiredValidator, _super);
	        function CheckboxRequiredValidator() {
	            _super.apply(this, arguments);
	        }
	        /**
	         * @param {?} c
	         * @return {?}
	         */
	        CheckboxRequiredValidator.prototype.validate = function (c) {
	            return this.required ? Validators.requiredTrue(c) : null;
	        };
	        CheckboxRequiredValidator.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: 'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',
	                        providers: [CHECKBOX_REQUIRED_VALIDATOR],
	                        host: { '[attr.required]': 'required ? "" : null' }
	                    },] },
	        ];
	        /** @nocollapse */
	        CheckboxRequiredValidator.ctorParameters = function () { return []; };
	        return CheckboxRequiredValidator;
	    }(RequiredValidator));
	    /**
	     * Provider which adds {@link MinLengthValidator} to {@link NG_VALIDATORS}.
	     *
	     * ## Example:
	     *
	     * {@example common/forms/ts/validators/validators.ts region='min'}
	     */
	    var /** @type {?} */ MIN_LENGTH_VALIDATOR = {
	        provide: NG_VALIDATORS,
	        useExisting: _angular_core.forwardRef(function () { return MinLengthValidator; }),
	        multi: true
	    };
	    /**
	     * A directive which installs the {\@link MinLengthValidator} for any `formControlName`,
	     * `formControl`, or control with `ngModel` that also has a `minlength` attribute.
	     *
	     * \@stable
	     */
	    var MinLengthValidator = (function () {
	        function MinLengthValidator() {
	        }
	        /**
	         * @param {?} changes
	         * @return {?}
	         */
	        MinLengthValidator.prototype.ngOnChanges = function (changes) {
	            if ('minlength' in changes) {
	                this._createValidator();
	                if (this._onChange)
	                    this._onChange();
	            }
	        };
	        /**
	         * @param {?} c
	         * @return {?}
	         */
	        MinLengthValidator.prototype.validate = function (c) {
	            return this.minlength == null ? null : this._validator(c);
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        MinLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };
	        /**
	         * @return {?}
	         */
	        MinLengthValidator.prototype._createValidator = function () {
	            this._validator = Validators.minLength(parseInt(this.minlength, 10));
	        };
	        MinLengthValidator.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',
	                        providers: [MIN_LENGTH_VALIDATOR],
	                        host: { '[attr.minlength]': 'minlength ? minlength : null' }
	                    },] },
	        ];
	        /** @nocollapse */
	        MinLengthValidator.ctorParameters = function () { return []; };
	        MinLengthValidator.propDecorators = {
	            'minlength': [{ type: _angular_core.Input },],
	        };
	        return MinLengthValidator;
	    }());
	    /**
	     * Provider which adds {@link MaxLengthValidator} to {@link NG_VALIDATORS}.
	     *
	     * ## Example:
	     *
	     * {@example common/forms/ts/validators/validators.ts region='max'}
	     */
	    var /** @type {?} */ MAX_LENGTH_VALIDATOR = {
	        provide: NG_VALIDATORS,
	        useExisting: _angular_core.forwardRef(function () { return MaxLengthValidator; }),
	        multi: true
	    };
	    /**
	     * A directive which installs the {\@link MaxLengthValidator} for any `formControlName,
	     * `formControl`,
	     * or control with `ngModel` that also has a `maxlength` attribute.
	     *
	     * \@stable
	     */
	    var MaxLengthValidator = (function () {
	        function MaxLengthValidator() {
	        }
	        /**
	         * @param {?} changes
	         * @return {?}
	         */
	        MaxLengthValidator.prototype.ngOnChanges = function (changes) {
	            if ('maxlength' in changes) {
	                this._createValidator();
	                if (this._onChange)
	                    this._onChange();
	            }
	        };
	        /**
	         * @param {?} c
	         * @return {?}
	         */
	        MaxLengthValidator.prototype.validate = function (c) {
	            return this.maxlength != null ? this._validator(c) : null;
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        MaxLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };
	        /**
	         * @return {?}
	         */
	        MaxLengthValidator.prototype._createValidator = function () {
	            this._validator = Validators.maxLength(parseInt(this.maxlength, 10));
	        };
	        MaxLengthValidator.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',
	                        providers: [MAX_LENGTH_VALIDATOR],
	                        host: { '[attr.maxlength]': 'maxlength ? maxlength : null' }
	                    },] },
	        ];
	        /** @nocollapse */
	        MaxLengthValidator.ctorParameters = function () { return []; };
	        MaxLengthValidator.propDecorators = {
	            'maxlength': [{ type: _angular_core.Input },],
	        };
	        return MaxLengthValidator;
	    }());
	    var /** @type {?} */ PATTERN_VALIDATOR = {
	        provide: NG_VALIDATORS,
	        useExisting: _angular_core.forwardRef(function () { return PatternValidator; }),
	        multi: true
	    };
	    /**
	     * A Directive that adds the `pattern` validator to any controls marked with the
	     * `pattern` attribute, via the {\@link NG_VALIDATORS} binding. Uses attribute value
	     * as the regex to validate Control value against.  Follows pattern attribute
	     * semantics; i.e. regex must match entire Control value.
	     *
	     * ### Example
	     *
	     * ```
	     * <input [name]="fullName" pattern="[a-zA-Z ]*" ngModel>
	     * ```
	     * \@stable
	     */
	    var PatternValidator = (function () {
	        function PatternValidator() {
	        }
	        /**
	         * @param {?} changes
	         * @return {?}
	         */
	        PatternValidator.prototype.ngOnChanges = function (changes) {
	            if ('pattern' in changes) {
	                this._createValidator();
	                if (this._onChange)
	                    this._onChange();
	            }
	        };
	        /**
	         * @param {?} c
	         * @return {?}
	         */
	        PatternValidator.prototype.validate = function (c) { return this._validator(c); };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        PatternValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };
	        /**
	         * @return {?}
	         */
	        PatternValidator.prototype._createValidator = function () { this._validator = Validators.pattern(this.pattern); };
	        PatternValidator.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',
	                        providers: [PATTERN_VALIDATOR],
	                        host: { '[attr.pattern]': 'pattern ? pattern : null' }
	                    },] },
	        ];
	        /** @nocollapse */
	        PatternValidator.ctorParameters = function () { return []; };
	        PatternValidator.propDecorators = {
	            'pattern': [{ type: _angular_core.Input },],
	        };
	        return PatternValidator;
	    }());
	
	    /**
	     * \@whatItDoes Creates an {\@link AbstractControl} from a user-specified configuration.
	     *
	     * It is essentially syntactic sugar that shortens the `new FormGroup()`,
	     * `new FormControl()`, and `new FormArray()` boilerplate that can build up in larger
	     * forms.
	     *
	     * \@howToUse
	     *
	     * To use, inject `FormBuilder` into your component class. You can then call its methods
	     * directly.
	     *
	     * {\@example forms/ts/formBuilder/form_builder_example.ts region='Component'}
	     *
	     *  * **npm package**: `\@angular/forms`
	     *
	     *  * **NgModule**: {\@link ReactiveFormsModule}
	     *
	     * \@stable
	     */
	    var FormBuilder = (function () {
	        function FormBuilder() {
	        }
	        /**
	         * Construct a new {\@link FormGroup} with the given map of configuration.
	         * Valid keys for the `extra` parameter map are `validator` and `asyncValidator`.
	         *
	         * See the {\@link FormGroup} constructor for more details.
	         * @param {?} controlsConfig
	         * @param {?=} extra
	         * @return {?}
	         */
	        FormBuilder.prototype.group = function (controlsConfig, extra) {
	            if (extra === void 0) { extra = null; }
	            var /** @type {?} */ controls = this._reduceControls(controlsConfig);
	            var /** @type {?} */ validator = isPresent(extra) ? extra['validator'] : null;
	            var /** @type {?} */ asyncValidator = isPresent(extra) ? extra['asyncValidator'] : null;
	            return new FormGroup(controls, validator, asyncValidator);
	        };
	        /**
	         * Construct a new {\@link FormControl} with the given `formState`,`validator`, and
	         * `asyncValidator`.
	         *
	         * `formState` can either be a standalone value for the form control or an object
	         * that contains both a value and a disabled status.
	         *
	         * @param {?} formState
	         * @param {?=} validator
	         * @param {?=} asyncValidator
	         * @return {?}
	         */
	        FormBuilder.prototype.control = function (formState, validator, asyncValidator) {
	            if (validator === void 0) { validator = null; }
	            if (asyncValidator === void 0) { asyncValidator = null; }
	            return new FormControl(formState, validator, asyncValidator);
	        };
	        /**
	         * Construct a {\@link FormArray} from the given `controlsConfig` array of
	         * configuration, with the given optional `validator` and `asyncValidator`.
	         * @param {?} controlsConfig
	         * @param {?=} validator
	         * @param {?=} asyncValidator
	         * @return {?}
	         */
	        FormBuilder.prototype.array = function (controlsConfig, validator, asyncValidator) {
	            var _this = this;
	            if (validator === void 0) { validator = null; }
	            if (asyncValidator === void 0) { asyncValidator = null; }
	            var /** @type {?} */ controls = controlsConfig.map(function (c) { return _this._createControl(c); });
	            return new FormArray(controls, validator, asyncValidator);
	        };
	        /**
	         * \@internal
	         * @param {?} controlsConfig
	         * @return {?}
	         */
	        FormBuilder.prototype._reduceControls = function (controlsConfig) {
	            var _this = this;
	            var /** @type {?} */ controls = {};
	            Object.keys(controlsConfig).forEach(function (controlName) {
	                controls[controlName] = _this._createControl(controlsConfig[controlName]);
	            });
	            return controls;
	        };
	        /**
	         * \@internal
	         * @param {?} controlConfig
	         * @return {?}
	         */
	        FormBuilder.prototype._createControl = function (controlConfig) {
	            if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||
	                controlConfig instanceof FormArray) {
	                return controlConfig;
	            }
	            else if (Array.isArray(controlConfig)) {
	                var /** @type {?} */ value = controlConfig[0];
	                var /** @type {?} */ validator = controlConfig.length > 1 ? controlConfig[1] : null;
	                var /** @type {?} */ asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;
	                return this.control(value, validator, asyncValidator);
	            }
	            else {
	                return this.control(controlConfig);
	            }
	        };
	        FormBuilder.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        FormBuilder.ctorParameters = function () { return []; };
	        return FormBuilder;
	    }());
	
	    /**
	     * @stable
	     */
	    var /** @type {?} */ VERSION = new _angular_core.Version('2.4.7');
	
	    var /** @type {?} */ SHARED_FORM_DIRECTIVES = [
	        NgSelectOption,
	        NgSelectMultipleOption,
	        DefaultValueAccessor,
	        NumberValueAccessor,
	        RangeValueAccessor,
	        CheckboxControlValueAccessor,
	        SelectControlValueAccessor,
	        SelectMultipleControlValueAccessor,
	        RadioControlValueAccessor,
	        NgControlStatus,
	        NgControlStatusGroup,
	        RequiredValidator,
	        MinLengthValidator,
	        MaxLengthValidator,
	        PatternValidator,
	        CheckboxRequiredValidator,
	    ];
	    var /** @type {?} */ TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];
	    var /** @type {?} */ REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];
	    /**
	     * Internal module used for sharing directives between FormsModule and ReactiveFormsModule
	     */
	    var InternalFormsSharedModule = (function () {
	        function InternalFormsSharedModule() {
	        }
	        InternalFormsSharedModule.decorators = [
	            { type: _angular_core.NgModule, args: [{
	                        declarations: SHARED_FORM_DIRECTIVES,
	                        exports: SHARED_FORM_DIRECTIVES,
	                    },] },
	        ];
	        /** @nocollapse */
	        InternalFormsSharedModule.ctorParameters = function () { return []; };
	        return InternalFormsSharedModule;
	    }());
	
	    /**
	     * The ng module for forms.
	     * \@stable
	     */
	    var FormsModule = (function () {
	        function FormsModule() {
	        }
	        FormsModule.decorators = [
	            { type: _angular_core.NgModule, args: [{
	                        declarations: TEMPLATE_DRIVEN_DIRECTIVES,
	                        providers: [RadioControlRegistry],
	                        exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]
	                    },] },
	        ];
	        /** @nocollapse */
	        FormsModule.ctorParameters = function () { return []; };
	        return FormsModule;
	    }());
	    /**
	     * The ng module for reactive forms.
	     * \@stable
	     */
	    var ReactiveFormsModule = (function () {
	        function ReactiveFormsModule() {
	        }
	        ReactiveFormsModule.decorators = [
	            { type: _angular_core.NgModule, args: [{
	                        declarations: [REACTIVE_DRIVEN_DIRECTIVES],
	                        providers: [FormBuilder, RadioControlRegistry],
	                        exports: [InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]
	                    },] },
	        ];
	        /** @nocollapse */
	        ReactiveFormsModule.ctorParameters = function () { return []; };
	        return ReactiveFormsModule;
	    }());
	
	    exports.AbstractControlDirective = AbstractControlDirective;
	    exports.AbstractFormGroupDirective = AbstractFormGroupDirective;
	    exports.CheckboxControlValueAccessor = CheckboxControlValueAccessor;
	    exports.ControlContainer = ControlContainer;
	    exports.NG_VALUE_ACCESSOR = NG_VALUE_ACCESSOR;
	    exports.DefaultValueAccessor = DefaultValueAccessor;
	    exports.NgControl = NgControl;
	    exports.NgControlStatus = NgControlStatus;
	    exports.NgControlStatusGroup = NgControlStatusGroup;
	    exports.NgForm = NgForm;
	    exports.NgModel = NgModel;
	    exports.NgModelGroup = NgModelGroup;
	    exports.RadioControlValueAccessor = RadioControlValueAccessor;
	    exports.FormControlDirective = FormControlDirective;
	    exports.FormControlName = FormControlName;
	    exports.FormGroupDirective = FormGroupDirective;
	    exports.FormArrayName = FormArrayName;
	    exports.FormGroupName = FormGroupName;
	    exports.NgSelectOption = NgSelectOption;
	    exports.SelectControlValueAccessor = SelectControlValueAccessor;
	    exports.SelectMultipleControlValueAccessor = SelectMultipleControlValueAccessor;
	    exports.CheckboxRequiredValidator = CheckboxRequiredValidator;
	    exports.MaxLengthValidator = MaxLengthValidator;
	    exports.MinLengthValidator = MinLengthValidator;
	    exports.PatternValidator = PatternValidator;
	    exports.RequiredValidator = RequiredValidator;
	    exports.FormBuilder = FormBuilder;
	    exports.AbstractControl = AbstractControl;
	    exports.FormArray = FormArray;
	    exports.FormControl = FormControl;
	    exports.FormGroup = FormGroup;
	    exports.NG_ASYNC_VALIDATORS = NG_ASYNC_VALIDATORS;
	    exports.NG_VALIDATORS = NG_VALIDATORS;
	    exports.Validators = Validators;
	    exports.VERSION = VERSION;
	    exports.FormsModule = FormsModule;
	    exports.ReactiveFormsModule = ReactiveFormsModule;
	
	}));

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	const core_1 = __webpack_require__(3);
	// import * as masonry from 'masonry-layout';
	var masonry = __webpack_require__(538);
	const masonry_options_1 = __webpack_require__(246);
	let AngularMasonry = class AngularMasonry {
	    constructor(_element) {
	        this._element = _element;
	        this.useImagesLoaded = false;
	        // Outputs
	        this.layoutComplete = new core_1.EventEmitter();
	        this.removeComplete = new core_1.EventEmitter();
	    }
	    ngOnInit() {
	        ///TODO: How to load imagesloaded only if this.useImagesLoaded===true?
	        // if (this.useImagesLoaded) {
	        //     this._imagesLoaded = require('imagesloaded');
	        // }
	        // Create masonry options object
	        if (!this.options)
	            this.options = {};
	        // Set default itemSelector
	        if (!this.options.itemSelector) {
	            this.options.itemSelector = '[masonry-brick], masonry-brick';
	        }
	        // Set element display to block
	        if (this._element.nativeElement.tagName === 'MASONRY') {
	            this._element.nativeElement.style.display = 'block';
	        }
	        // Initialize Masonry
	        this._msnry = new masonry(this._element.nativeElement, this.options);
	        // console.log('AngularMasonry:', 'Initialized');
	        // Bind to events
	        this._msnry.on('layoutComplete', (items) => {
	            this.layoutComplete.emit(items);
	        });
	        this._msnry.on('removeComplete', (items) => {
	            this.removeComplete.emit(items);
	        });
	    }
	    ngOnDestroy() {
	        if (this._msnry) {
	            this._msnry.destroy();
	        }
	    }
	    layout() {
	        setTimeout(() => {
	            this._msnry.layout();
	        });
	        // console.log('AngularMasonry:', 'Layout');
	    }
	    // public add(element: HTMLElement, prepend: boolean = false) {
	    add(element) {
	        var isFirstItem = false;
	        // Check if first item
	        if (this._msnry.items.length === 0) {
	            isFirstItem = true;
	        }
	        if (this.useImagesLoaded) {
	            imagesLoaded(element, (instance) => {
	                this._element.nativeElement.appendChild(element);
	                // Tell Masonry that a child element has been added
	                this._msnry.appended(element);
	                // layout if first item
	                if (isFirstItem)
	                    this.layout();
	            });
	            this._element.nativeElement.removeChild(element);
	        }
	        else {
	            // Tell Masonry that a child element has been added
	            this._msnry.appended(element);
	            // layout if first item
	            if (isFirstItem)
	                this.layout();
	        }
	        // console.log('AngularMasonry:', 'Brick added');
	    }
	    remove(element) {
	        // Tell Masonry that a child element has been removed
	        this._msnry.remove(element);
	        // Layout items
	        this.layout();
	        // console.log('AngularMasonry:', 'Brick removed');
	    }
	};
	__decorate([
	    core_1.Input(), 
	    __metadata('design:type', (typeof (_a = typeof masonry_options_1.MasonryOptions !== 'undefined' && masonry_options_1.MasonryOptions) === 'function' && _a) || Object)
	], AngularMasonry.prototype, "options", void 0);
	__decorate([
	    core_1.Input(), 
	    __metadata('design:type', Object)
	], AngularMasonry.prototype, "useImagesLoaded", void 0);
	__decorate([
	    core_1.Output(), 
	    __metadata('design:type', (typeof (_b = typeof core_1.EventEmitter !== 'undefined' && core_1.EventEmitter) === 'function' && _b) || Object)
	], AngularMasonry.prototype, "layoutComplete", void 0);
	__decorate([
	    core_1.Output(), 
	    __metadata('design:type', (typeof (_c = typeof core_1.EventEmitter !== 'undefined' && core_1.EventEmitter) === 'function' && _c) || Object)
	], AngularMasonry.prototype, "removeComplete", void 0);
	AngularMasonry = __decorate([
	    core_1.Component({
	        selector: '[masonry], masonry',
	        template: '<ng-content></ng-content>'
	    }), 
	    __metadata('design:paramtypes', [(typeof (_d = typeof core_1.ElementRef !== 'undefined' && core_1.ElementRef) === 'function' && _d) || Object])
	], AngularMasonry);
	exports.AngularMasonry = AngularMasonry;
	var _a, _b, _c, _d;


/***/ },
/* 70 */,
/* 71 */,
/* 72 */,
/* 73 */,
/* 74 */,
/* 75 */,
/* 76 */,
/* 77 */,
/* 78 */,
/* 79 */,
/* 80 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;
	
	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;
	
	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;
	
	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;
	
	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};
	
	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;
	
	  if (!this._events)
	    this._events = {};
	
	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      } else {
	        // At least give some kind of context to the user
	        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
	        err.context = er;
	        throw err;
	      }
	    }
	  }
	
	  handler = this._events[type];
	
	  if (isUndefined(handler))
	    return false;
	
	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        args = Array.prototype.slice.call(arguments, 1);
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    args = Array.prototype.slice.call(arguments, 1);
	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }
	
	  return true;
	};
	
	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;
	
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  if (!this._events)
	    this._events = {};
	
	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);
	
	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];
	
	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }
	
	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }
	
	  return this;
	};
	
	EventEmitter.prototype.on = EventEmitter.prototype.addListener;
	
	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  var fired = false;
	
	  function g() {
	    this.removeListener(type, g);
	
	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }
	
	  g.listener = listener;
	  this.on(type, g);
	
	  return this;
	};
	
	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;
	
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  if (!this._events || !this._events[type])
	    return this;
	
	  list = this._events[type];
	  length = list.length;
	  position = -1;
	
	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	
	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }
	
	    if (position < 0)
	      return this;
	
	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }
	
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }
	
	  return this;
	};
	
	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;
	
	  if (!this._events)
	    return this;
	
	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }
	
	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }
	
	  listeners = this._events[type];
	
	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else if (listeners) {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];
	
	  return this;
	};
	
	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};
	
	EventEmitter.prototype.listenerCount = function(type) {
	  if (this._events) {
	    var evlistener = this._events[type];
	
	    if (isFunction(evlistener))
	      return 1;
	    else if (evlistener)
	      return evlistener.length;
	  }
	  return 0;
	};
	
	EventEmitter.listenerCount = function(emitter, type) {
	  return emitter.listenerCount(type);
	};
	
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	
	function isUndefined(arg) {
	  return arg === void 0;
	}


/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Afrikaans [af]
	//! author : Werner Mollentze : https://github.com/wernerm
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var af = moment.defineLocale('af', {
	    months : 'Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember'.split('_'),
	    monthsShort : 'Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des'.split('_'),
	    weekdays : 'Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag'.split('_'),
	    weekdaysShort : 'Son_Maa_Din_Woe_Don_Vry_Sat'.split('_'),
	    weekdaysMin : 'So_Ma_Di_Wo_Do_Vr_Sa'.split('_'),
	    meridiemParse: /vm|nm/i,
	    isPM : function (input) {
	        return /^nm$/i.test(input);
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours < 12) {
	            return isLower ? 'vm' : 'VM';
	        } else {
	            return isLower ? 'nm' : 'NM';
	        }
	    },
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[Vandag om] LT',
	        nextDay : '[Môre om] LT',
	        nextWeek : 'dddd [om] LT',
	        lastDay : '[Gister om] LT',
	        lastWeek : '[Laas] dddd [om] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'oor %s',
	        past : '%s gelede',
	        s : '\'n paar sekondes',
	        m : '\'n minuut',
	        mm : '%d minute',
	        h : '\'n uur',
	        hh : '%d ure',
	        d : '\'n dag',
	        dd : '%d dae',
	        M : '\'n maand',
	        MM : '%d maande',
	        y : '\'n jaar',
	        yy : '%d jaar'
	    },
	    ordinalParse: /\d{1,2}(ste|de)/,
	    ordinal : function (number) {
	        return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de'); // Thanks to Joris Röling : https://github.com/jjupiter
	    },
	    week : {
	        dow : 1, // Maandag is die eerste dag van die week.
	        doy : 4  // Die week wat die 4de Januarie bevat is die eerste week van die jaar.
	    }
	});
	
	return af;
	
	})));


/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic (Algeria) [ar-dz]
	//! author : Noureddine LOUAHEDJ : https://github.com/noureddineme
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var arDz = moment.defineLocale('ar-dz', {
	    months : 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	    monthsShort : 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	    weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	    weekdaysShort : 'احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
	    weekdaysMin : 'أح_إث_ثلا_أر_خم_جم_سب'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[اليوم على الساعة] LT',
	        nextDay: '[غدا على الساعة] LT',
	        nextWeek: 'dddd [على الساعة] LT',
	        lastDay: '[أمس على الساعة] LT',
	        lastWeek: 'dddd [على الساعة] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'في %s',
	        past : 'منذ %s',
	        s : 'ثوان',
	        m : 'دقيقة',
	        mm : '%d دقائق',
	        h : 'ساعة',
	        hh : '%d ساعات',
	        d : 'يوم',
	        dd : '%d أيام',
	        M : 'شهر',
	        MM : '%d أشهر',
	        y : 'سنة',
	        yy : '%d سنوات'
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 4  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return arDz;
	
	})));


/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic (Lybia) [ar-ly]
	//! author : Ali Hmer: https://github.com/kikoanis
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var symbolMap = {
	    '1': '1',
	    '2': '2',
	    '3': '3',
	    '4': '4',
	    '5': '5',
	    '6': '6',
	    '7': '7',
	    '8': '8',
	    '9': '9',
	    '0': '0'
	};
	var pluralForm = function (n) {
	    return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
	};
	var plurals = {
	    s : ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],
	    m : ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],
	    h : ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],
	    d : ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],
	    M : ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],
	    y : ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']
	};
	var pluralize = function (u) {
	    return function (number, withoutSuffix, string, isFuture) {
	        var f = pluralForm(number),
	            str = plurals[u][pluralForm(number)];
	        if (f === 2) {
	            str = str[withoutSuffix ? 0 : 1];
	        }
	        return str.replace(/%d/i, number);
	    };
	};
	var months = [
	    'يناير',
	    'فبراير',
	    'مارس',
	    'أبريل',
	    'مايو',
	    'يونيو',
	    'يوليو',
	    'أغسطس',
	    'سبتمبر',
	    'أكتوبر',
	    'نوفمبر',
	    'ديسمبر'
	];
	
	var arLy = moment.defineLocale('ar-ly', {
	    months : months,
	    monthsShort : months,
	    weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	    weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	    weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'D/\u200FM/\u200FYYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    meridiemParse: /ص|م/,
	    isPM : function (input) {
	        return 'م' === input;
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 12) {
	            return 'ص';
	        } else {
	            return 'م';
	        }
	    },
	    calendar : {
	        sameDay: '[اليوم عند الساعة] LT',
	        nextDay: '[غدًا عند الساعة] LT',
	        nextWeek: 'dddd [عند الساعة] LT',
	        lastDay: '[أمس عند الساعة] LT',
	        lastWeek: 'dddd [عند الساعة] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'بعد %s',
	        past : 'منذ %s',
	        s : pluralize('s'),
	        m : pluralize('m'),
	        mm : pluralize('m'),
	        h : pluralize('h'),
	        hh : pluralize('h'),
	        d : pluralize('d'),
	        dd : pluralize('d'),
	        M : pluralize('M'),
	        MM : pluralize('M'),
	        y : pluralize('y'),
	        yy : pluralize('y')
	    },
	    preparse: function (string) {
	        return string.replace(/\u200f/g, '').replace(/،/g, ',');
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        }).replace(/,/g, '،');
	    },
	    week : {
	        dow : 6, // Saturday is the first day of the week.
	        doy : 12  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return arLy;
	
	})));


/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic (Morocco) [ar-ma]
	//! author : ElFadili Yassine : https://github.com/ElFadiliY
	//! author : Abdel Said : https://github.com/abdelsaid
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var arMa = moment.defineLocale('ar-ma', {
	    months : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
	    monthsShort : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
	    weekdays : 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	    weekdaysShort : 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
	    weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[اليوم على الساعة] LT',
	        nextDay: '[غدا على الساعة] LT',
	        nextWeek: 'dddd [على الساعة] LT',
	        lastDay: '[أمس على الساعة] LT',
	        lastWeek: 'dddd [على الساعة] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'في %s',
	        past : 'منذ %s',
	        s : 'ثوان',
	        m : 'دقيقة',
	        mm : '%d دقائق',
	        h : 'ساعة',
	        hh : '%d ساعات',
	        d : 'يوم',
	        dd : '%d أيام',
	        M : 'شهر',
	        MM : '%d أشهر',
	        y : 'سنة',
	        yy : '%d سنوات'
	    },
	    week : {
	        dow : 6, // Saturday is the first day of the week.
	        doy : 12  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return arMa;
	
	})));


/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic (Saudi Arabia) [ar-sa]
	//! author : Suhail Alkowaileet : https://github.com/xsoh
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var symbolMap = {
	    '1': '١',
	    '2': '٢',
	    '3': '٣',
	    '4': '٤',
	    '5': '٥',
	    '6': '٦',
	    '7': '٧',
	    '8': '٨',
	    '9': '٩',
	    '0': '٠'
	};
	var numberMap = {
	    '١': '1',
	    '٢': '2',
	    '٣': '3',
	    '٤': '4',
	    '٥': '5',
	    '٦': '6',
	    '٧': '7',
	    '٨': '8',
	    '٩': '9',
	    '٠': '0'
	};
	
	var arSa = moment.defineLocale('ar-sa', {
	    months : 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	    monthsShort : 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	    weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	    weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	    weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    meridiemParse: /ص|م/,
	    isPM : function (input) {
	        return 'م' === input;
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 12) {
	            return 'ص';
	        } else {
	            return 'م';
	        }
	    },
	    calendar : {
	        sameDay: '[اليوم على الساعة] LT',
	        nextDay: '[غدا على الساعة] LT',
	        nextWeek: 'dddd [على الساعة] LT',
	        lastDay: '[أمس على الساعة] LT',
	        lastWeek: 'dddd [على الساعة] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'في %s',
	        past : 'منذ %s',
	        s : 'ثوان',
	        m : 'دقيقة',
	        mm : '%d دقائق',
	        h : 'ساعة',
	        hh : '%d ساعات',
	        d : 'يوم',
	        dd : '%d أيام',
	        M : 'شهر',
	        MM : '%d أشهر',
	        y : 'سنة',
	        yy : '%d سنوات'
	    },
	    preparse: function (string) {
	        return string.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
	            return numberMap[match];
	        }).replace(/،/g, ',');
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        }).replace(/,/g, '،');
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return arSa;
	
	})));


/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale  :  Arabic (Tunisia) [ar-tn]
	//! author : Nader Toukabri : https://github.com/naderio
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var arTn = moment.defineLocale('ar-tn', {
	    months: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	    monthsShort: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	    weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	    weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	    weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat: {
	        LT: 'HH:mm',
	        LTS: 'HH:mm:ss',
	        L: 'DD/MM/YYYY',
	        LL: 'D MMMM YYYY',
	        LLL: 'D MMMM YYYY HH:mm',
	        LLLL: 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar: {
	        sameDay: '[اليوم على الساعة] LT',
	        nextDay: '[غدا على الساعة] LT',
	        nextWeek: 'dddd [على الساعة] LT',
	        lastDay: '[أمس على الساعة] LT',
	        lastWeek: 'dddd [على الساعة] LT',
	        sameElse: 'L'
	    },
	    relativeTime: {
	        future: 'في %s',
	        past: 'منذ %s',
	        s: 'ثوان',
	        m: 'دقيقة',
	        mm: '%d دقائق',
	        h: 'ساعة',
	        hh: '%d ساعات',
	        d: 'يوم',
	        dd: '%d أيام',
	        M: 'شهر',
	        MM: '%d أشهر',
	        y: 'سنة',
	        yy: '%d سنوات'
	    },
	    week: {
	        dow: 1, // Monday is the first day of the week.
	        doy: 4 // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return arTn;
	
	})));


/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic [ar]
	//! author : Abdel Said: https://github.com/abdelsaid
	//! author : Ahmed Elkhatib
	//! author : forabi https://github.com/forabi
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var symbolMap = {
	    '1': '١',
	    '2': '٢',
	    '3': '٣',
	    '4': '٤',
	    '5': '٥',
	    '6': '٦',
	    '7': '٧',
	    '8': '٨',
	    '9': '٩',
	    '0': '٠'
	};
	var numberMap = {
	    '١': '1',
	    '٢': '2',
	    '٣': '3',
	    '٤': '4',
	    '٥': '5',
	    '٦': '6',
	    '٧': '7',
	    '٨': '8',
	    '٩': '9',
	    '٠': '0'
	};
	var pluralForm = function (n) {
	    return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
	};
	var plurals = {
	    s : ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],
	    m : ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],
	    h : ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],
	    d : ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],
	    M : ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],
	    y : ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']
	};
	var pluralize = function (u) {
	    return function (number, withoutSuffix, string, isFuture) {
	        var f = pluralForm(number),
	            str = plurals[u][pluralForm(number)];
	        if (f === 2) {
	            str = str[withoutSuffix ? 0 : 1];
	        }
	        return str.replace(/%d/i, number);
	    };
	};
	var months = [
	    'كانون الثاني يناير',
	    'شباط فبراير',
	    'آذار مارس',
	    'نيسان أبريل',
	    'أيار مايو',
	    'حزيران يونيو',
	    'تموز يوليو',
	    'آب أغسطس',
	    'أيلول سبتمبر',
	    'تشرين الأول أكتوبر',
	    'تشرين الثاني نوفمبر',
	    'كانون الأول ديسمبر'
	];
	
	var ar = moment.defineLocale('ar', {
	    months : months,
	    monthsShort : months,
	    weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	    weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	    weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'D/\u200FM/\u200FYYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    meridiemParse: /ص|م/,
	    isPM : function (input) {
	        return 'م' === input;
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 12) {
	            return 'ص';
	        } else {
	            return 'م';
	        }
	    },
	    calendar : {
	        sameDay: '[اليوم عند الساعة] LT',
	        nextDay: '[غدًا عند الساعة] LT',
	        nextWeek: 'dddd [عند الساعة] LT',
	        lastDay: '[أمس عند الساعة] LT',
	        lastWeek: 'dddd [عند الساعة] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'بعد %s',
	        past : 'منذ %s',
	        s : pluralize('s'),
	        m : pluralize('m'),
	        mm : pluralize('m'),
	        h : pluralize('h'),
	        hh : pluralize('h'),
	        d : pluralize('d'),
	        dd : pluralize('d'),
	        M : pluralize('M'),
	        MM : pluralize('M'),
	        y : pluralize('y'),
	        yy : pluralize('y')
	    },
	    preparse: function (string) {
	        return string.replace(/\u200f/g, '').replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
	            return numberMap[match];
	        }).replace(/،/g, ',');
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        }).replace(/,/g, '،');
	    },
	    week : {
	        dow : 6, // Saturday is the first day of the week.
	        doy : 12  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return ar;
	
	})));


/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Azerbaijani [az]
	//! author : topchiyev : https://github.com/topchiyev
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var suffixes = {
	    1: '-inci',
	    5: '-inci',
	    8: '-inci',
	    70: '-inci',
	    80: '-inci',
	    2: '-nci',
	    7: '-nci',
	    20: '-nci',
	    50: '-nci',
	    3: '-üncü',
	    4: '-üncü',
	    100: '-üncü',
	    6: '-ncı',
	    9: '-uncu',
	    10: '-uncu',
	    30: '-uncu',
	    60: '-ıncı',
	    90: '-ıncı'
	};
	
	var az = moment.defineLocale('az', {
	    months : 'yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr'.split('_'),
	    monthsShort : 'yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek'.split('_'),
	    weekdays : 'Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə'.split('_'),
	    weekdaysShort : 'Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən'.split('_'),
	    weekdaysMin : 'Bz_BE_ÇA_Çə_CA_Cü_Şə'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[bugün saat] LT',
	        nextDay : '[sabah saat] LT',
	        nextWeek : '[gələn həftə] dddd [saat] LT',
	        lastDay : '[dünən] LT',
	        lastWeek : '[keçən həftə] dddd [saat] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s sonra',
	        past : '%s əvvəl',
	        s : 'birneçə saniyyə',
	        m : 'bir dəqiqə',
	        mm : '%d dəqiqə',
	        h : 'bir saat',
	        hh : '%d saat',
	        d : 'bir gün',
	        dd : '%d gün',
	        M : 'bir ay',
	        MM : '%d ay',
	        y : 'bir il',
	        yy : '%d il'
	    },
	    meridiemParse: /gecə|səhər|gündüz|axşam/,
	    isPM : function (input) {
	        return /^(gündüz|axşam)$/.test(input);
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'gecə';
	        } else if (hour < 12) {
	            return 'səhər';
	        } else if (hour < 17) {
	            return 'gündüz';
	        } else {
	            return 'axşam';
	        }
	    },
	    ordinalParse: /\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,
	    ordinal : function (number) {
	        if (number === 0) {  // special case for zero
	            return number + '-ıncı';
	        }
	        var a = number % 10,
	            b = number % 100 - a,
	            c = number >= 100 ? 100 : null;
	        return number + (suffixes[a] || suffixes[b] || suffixes[c]);
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return az;
	
	})));


/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Belarusian [be]
	//! author : Dmitry Demidov : https://github.com/demidov91
	//! author: Praleska: http://praleska.pro/
	//! Author : Menelion Elensúle : https://github.com/Oire
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	function plural(word, num) {
	    var forms = word.split('_');
	    return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
	}
	function relativeTimeWithPlural(number, withoutSuffix, key) {
	    var format = {
	        'mm': withoutSuffix ? 'хвіліна_хвіліны_хвілін' : 'хвіліну_хвіліны_хвілін',
	        'hh': withoutSuffix ? 'гадзіна_гадзіны_гадзін' : 'гадзіну_гадзіны_гадзін',
	        'dd': 'дзень_дні_дзён',
	        'MM': 'месяц_месяцы_месяцаў',
	        'yy': 'год_гады_гадоў'
	    };
	    if (key === 'm') {
	        return withoutSuffix ? 'хвіліна' : 'хвіліну';
	    }
	    else if (key === 'h') {
	        return withoutSuffix ? 'гадзіна' : 'гадзіну';
	    }
	    else {
	        return number + ' ' + plural(format[key], +number);
	    }
	}
	
	var be = moment.defineLocale('be', {
	    months : {
	        format: 'студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня'.split('_'),
	        standalone: 'студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань'.split('_')
	    },
	    monthsShort : 'студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж'.split('_'),
	    weekdays : {
	        format: 'нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу'.split('_'),
	        standalone: 'нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота'.split('_'),
	        isFormat: /\[ ?[Вв] ?(?:мінулую|наступную)? ?\] ?dddd/
	    },
	    weekdaysShort : 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
	    weekdaysMin : 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY г.',
	        LLL : 'D MMMM YYYY г., HH:mm',
	        LLLL : 'dddd, D MMMM YYYY г., HH:mm'
	    },
	    calendar : {
	        sameDay: '[Сёння ў] LT',
	        nextDay: '[Заўтра ў] LT',
	        lastDay: '[Учора ў] LT',
	        nextWeek: function () {
	            return '[У] dddd [ў] LT';
	        },
	        lastWeek: function () {
	            switch (this.day()) {
	                case 0:
	                case 3:
	                case 5:
	                case 6:
	                    return '[У мінулую] dddd [ў] LT';
	                case 1:
	                case 2:
	                case 4:
	                    return '[У мінулы] dddd [ў] LT';
	            }
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'праз %s',
	        past : '%s таму',
	        s : 'некалькі секунд',
	        m : relativeTimeWithPlural,
	        mm : relativeTimeWithPlural,
	        h : relativeTimeWithPlural,
	        hh : relativeTimeWithPlural,
	        d : 'дзень',
	        dd : relativeTimeWithPlural,
	        M : 'месяц',
	        MM : relativeTimeWithPlural,
	        y : 'год',
	        yy : relativeTimeWithPlural
	    },
	    meridiemParse: /ночы|раніцы|дня|вечара/,
	    isPM : function (input) {
	        return /^(дня|вечара)$/.test(input);
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'ночы';
	        } else if (hour < 12) {
	            return 'раніцы';
	        } else if (hour < 17) {
	            return 'дня';
	        } else {
	            return 'вечара';
	        }
	    },
	    ordinalParse: /\d{1,2}-(і|ы|га)/,
	    ordinal: function (number, period) {
	        switch (period) {
	            case 'M':
	            case 'd':
	            case 'DDD':
	            case 'w':
	            case 'W':
	                return (number % 10 === 2 || number % 10 === 3) && (number % 100 !== 12 && number % 100 !== 13) ? number + '-і' : number + '-ы';
	            case 'D':
	                return number + '-га';
	            default:
	                return number;
	        }
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return be;
	
	})));


/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Bulgarian [bg]
	//! author : Krasen Borisov : https://github.com/kraz
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var bg = moment.defineLocale('bg', {
	    months : 'януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември'.split('_'),
	    monthsShort : 'янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек'.split('_'),
	    weekdays : 'неделя_понеделник_вторник_сряда_четвъртък_петък_събота'.split('_'),
	    weekdaysShort : 'нед_пон_вто_сря_чет_пет_съб'.split('_'),
	    weekdaysMin : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'D.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY H:mm',
	        LLLL : 'dddd, D MMMM YYYY H:mm'
	    },
	    calendar : {
	        sameDay : '[Днес в] LT',
	        nextDay : '[Утре в] LT',
	        nextWeek : 'dddd [в] LT',
	        lastDay : '[Вчера в] LT',
	        lastWeek : function () {
	            switch (this.day()) {
	                case 0:
	                case 3:
	                case 6:
	                    return '[В изминалата] dddd [в] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[В изминалия] dddd [в] LT';
	            }
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'след %s',
	        past : 'преди %s',
	        s : 'няколко секунди',
	        m : 'минута',
	        mm : '%d минути',
	        h : 'час',
	        hh : '%d часа',
	        d : 'ден',
	        dd : '%d дни',
	        M : 'месец',
	        MM : '%d месеца',
	        y : 'година',
	        yy : '%d години'
	    },
	    ordinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
	    ordinal : function (number) {
	        var lastDigit = number % 10,
	            last2Digits = number % 100;
	        if (number === 0) {
	            return number + '-ев';
	        } else if (last2Digits === 0) {
	            return number + '-ен';
	        } else if (last2Digits > 10 && last2Digits < 20) {
	            return number + '-ти';
	        } else if (lastDigit === 1) {
	            return number + '-ви';
	        } else if (lastDigit === 2) {
	            return number + '-ри';
	        } else if (lastDigit === 7 || lastDigit === 8) {
	            return number + '-ми';
	        } else {
	            return number + '-ти';
	        }
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return bg;
	
	})));


/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Bengali [bn]
	//! author : Kaushik Gandhi : https://github.com/kaushikgandhi
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var symbolMap = {
	    '1': '১',
	    '2': '২',
	    '3': '৩',
	    '4': '৪',
	    '5': '৫',
	    '6': '৬',
	    '7': '৭',
	    '8': '৮',
	    '9': '৯',
	    '0': '০'
	};
	var numberMap = {
	    '১': '1',
	    '২': '2',
	    '৩': '3',
	    '৪': '4',
	    '৫': '5',
	    '৬': '6',
	    '৭': '7',
	    '৮': '8',
	    '৯': '9',
	    '০': '0'
	};
	
	var bn = moment.defineLocale('bn', {
	    months : 'জানুয়ারী_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split('_'),
	    monthsShort : 'জানু_ফেব_মার্চ_এপ্র_মে_জুন_জুল_আগ_সেপ্ট_অক্টো_নভে_ডিসে'.split('_'),
	    weekdays : 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার'.split('_'),
	    weekdaysShort : 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি'.split('_'),
	    weekdaysMin : 'রবি_সোম_মঙ্গ_বুধ_বৃহঃ_শুক্র_শনি'.split('_'),
	    longDateFormat : {
	        LT : 'A h:mm সময়',
	        LTS : 'A h:mm:ss সময়',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, A h:mm সময়',
	        LLLL : 'dddd, D MMMM YYYY, A h:mm সময়'
	    },
	    calendar : {
	        sameDay : '[আজ] LT',
	        nextDay : '[আগামীকাল] LT',
	        nextWeek : 'dddd, LT',
	        lastDay : '[গতকাল] LT',
	        lastWeek : '[গত] dddd, LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s পরে',
	        past : '%s আগে',
	        s : 'কয়েক সেকেন্ড',
	        m : 'এক মিনিট',
	        mm : '%d মিনিট',
	        h : 'এক ঘন্টা',
	        hh : '%d ঘন্টা',
	        d : 'এক দিন',
	        dd : '%d দিন',
	        M : 'এক মাস',
	        MM : '%d মাস',
	        y : 'এক বছর',
	        yy : '%d বছর'
	    },
	    preparse: function (string) {
	        return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {
	            return numberMap[match];
	        });
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        });
	    },
	    meridiemParse: /রাত|সকাল|দুপুর|বিকাল|রাত/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if ((meridiem === 'রাত' && hour >= 4) ||
	                (meridiem === 'দুপুর' && hour < 5) ||
	                meridiem === 'বিকাল') {
	            return hour + 12;
	        } else {
	            return hour;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'রাত';
	        } else if (hour < 10) {
	            return 'সকাল';
	        } else if (hour < 17) {
	            return 'দুপুর';
	        } else if (hour < 20) {
	            return 'বিকাল';
	        } else {
	            return 'রাত';
	        }
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return bn;
	
	})));


/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Tibetan [bo]
	//! author : Thupten N. Chakrishar : https://github.com/vajradog
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var symbolMap = {
	    '1': '༡',
	    '2': '༢',
	    '3': '༣',
	    '4': '༤',
	    '5': '༥',
	    '6': '༦',
	    '7': '༧',
	    '8': '༨',
	    '9': '༩',
	    '0': '༠'
	};
	var numberMap = {
	    '༡': '1',
	    '༢': '2',
	    '༣': '3',
	    '༤': '4',
	    '༥': '5',
	    '༦': '6',
	    '༧': '7',
	    '༨': '8',
	    '༩': '9',
	    '༠': '0'
	};
	
	var bo = moment.defineLocale('bo', {
	    months : 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
	    monthsShort : 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
	    weekdays : 'གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་'.split('_'),
	    weekdaysShort : 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
	    weekdaysMin : 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
	    longDateFormat : {
	        LT : 'A h:mm',
	        LTS : 'A h:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, A h:mm',
	        LLLL : 'dddd, D MMMM YYYY, A h:mm'
	    },
	    calendar : {
	        sameDay : '[དི་རིང] LT',
	        nextDay : '[སང་ཉིན] LT',
	        nextWeek : '[བདུན་ཕྲག་རྗེས་མ], LT',
	        lastDay : '[ཁ་སང] LT',
	        lastWeek : '[བདུན་ཕྲག་མཐའ་མ] dddd, LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s ལ་',
	        past : '%s སྔན་ལ',
	        s : 'ལམ་སང',
	        m : 'སྐར་མ་གཅིག',
	        mm : '%d སྐར་མ',
	        h : 'ཆུ་ཚོད་གཅིག',
	        hh : '%d ཆུ་ཚོད',
	        d : 'ཉིན་གཅིག',
	        dd : '%d ཉིན་',
	        M : 'ཟླ་བ་གཅིག',
	        MM : '%d ཟླ་བ',
	        y : 'ལོ་གཅིག',
	        yy : '%d ལོ'
	    },
	    preparse: function (string) {
	        return string.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, function (match) {
	            return numberMap[match];
	        });
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        });
	    },
	    meridiemParse: /མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if ((meridiem === 'མཚན་མོ' && hour >= 4) ||
	                (meridiem === 'ཉིན་གུང' && hour < 5) ||
	                meridiem === 'དགོང་དག') {
	            return hour + 12;
	        } else {
	            return hour;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'མཚན་མོ';
	        } else if (hour < 10) {
	            return 'ཞོགས་ཀས';
	        } else if (hour < 17) {
	            return 'ཉིན་གུང';
	        } else if (hour < 20) {
	            return 'དགོང་དག';
	        } else {
	            return 'མཚན་མོ';
	        }
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return bo;
	
	})));


/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Breton [br]
	//! author : Jean-Baptiste Le Duigou : https://github.com/jbleduigou
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	function relativeTimeWithMutation(number, withoutSuffix, key) {
	    var format = {
	        'mm': 'munutenn',
	        'MM': 'miz',
	        'dd': 'devezh'
	    };
	    return number + ' ' + mutation(format[key], number);
	}
	function specialMutationForYears(number) {
	    switch (lastNumber(number)) {
	        case 1:
	        case 3:
	        case 4:
	        case 5:
	        case 9:
	            return number + ' bloaz';
	        default:
	            return number + ' vloaz';
	    }
	}
	function lastNumber(number) {
	    if (number > 9) {
	        return lastNumber(number % 10);
	    }
	    return number;
	}
	function mutation(text, number) {
	    if (number === 2) {
	        return softMutation(text);
	    }
	    return text;
	}
	function softMutation(text) {
	    var mutationTable = {
	        'm': 'v',
	        'b': 'v',
	        'd': 'z'
	    };
	    if (mutationTable[text.charAt(0)] === undefined) {
	        return text;
	    }
	    return mutationTable[text.charAt(0)] + text.substring(1);
	}
	
	var br = moment.defineLocale('br', {
	    months : 'Genver_C\'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu'.split('_'),
	    monthsShort : 'Gen_C\'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker'.split('_'),
	    weekdays : 'Sul_Lun_Meurzh_Merc\'her_Yaou_Gwener_Sadorn'.split('_'),
	    weekdaysShort : 'Sul_Lun_Meu_Mer_Yao_Gwe_Sad'.split('_'),
	    weekdaysMin : 'Su_Lu_Me_Mer_Ya_Gw_Sa'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'h[e]mm A',
	        LTS : 'h[e]mm:ss A',
	        L : 'DD/MM/YYYY',
	        LL : 'D [a viz] MMMM YYYY',
	        LLL : 'D [a viz] MMMM YYYY h[e]mm A',
	        LLLL : 'dddd, D [a viz] MMMM YYYY h[e]mm A'
	    },
	    calendar : {
	        sameDay : '[Hiziv da] LT',
	        nextDay : '[Warc\'hoazh da] LT',
	        nextWeek : 'dddd [da] LT',
	        lastDay : '[Dec\'h da] LT',
	        lastWeek : 'dddd [paset da] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'a-benn %s',
	        past : '%s \'zo',
	        s : 'un nebeud segondennoù',
	        m : 'ur vunutenn',
	        mm : relativeTimeWithMutation,
	        h : 'un eur',
	        hh : '%d eur',
	        d : 'un devezh',
	        dd : relativeTimeWithMutation,
	        M : 'ur miz',
	        MM : relativeTimeWithMutation,
	        y : 'ur bloaz',
	        yy : specialMutationForYears
	    },
	    ordinalParse: /\d{1,2}(añ|vet)/,
	    ordinal : function (number) {
	        var output = (number === 1) ? 'añ' : 'vet';
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return br;
	
	})));


/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Bosnian [bs]
	//! author : Nedim Cholich : https://github.com/frontyard
	//! based on (hr) translation by Bojan Marković
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	function translate(number, withoutSuffix, key) {
	    var result = number + ' ';
	    switch (key) {
	        case 'm':
	            return withoutSuffix ? 'jedna minuta' : 'jedne minute';
	        case 'mm':
	            if (number === 1) {
	                result += 'minuta';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'minute';
	            } else {
	                result += 'minuta';
	            }
	            return result;
	        case 'h':
	            return withoutSuffix ? 'jedan sat' : 'jednog sata';
	        case 'hh':
	            if (number === 1) {
	                result += 'sat';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'sata';
	            } else {
	                result += 'sati';
	            }
	            return result;
	        case 'dd':
	            if (number === 1) {
	                result += 'dan';
	            } else {
	                result += 'dana';
	            }
	            return result;
	        case 'MM':
	            if (number === 1) {
	                result += 'mjesec';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'mjeseca';
	            } else {
	                result += 'mjeseci';
	            }
	            return result;
	        case 'yy':
	            if (number === 1) {
	                result += 'godina';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'godine';
	            } else {
	                result += 'godina';
	            }
	            return result;
	    }
	}
	
	var bs = moment.defineLocale('bs', {
	    months : 'januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar'.split('_'),
	    monthsShort : 'jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.'.split('_'),
	    monthsParseExact: true,
	    weekdays : 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
	    weekdaysShort : 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
	    weekdaysMin : 'ne_po_ut_sr_če_pe_su'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY H:mm',
	        LLLL : 'dddd, D. MMMM YYYY H:mm'
	    },
	    calendar : {
	        sameDay  : '[danas u] LT',
	        nextDay  : '[sutra u] LT',
	        nextWeek : function () {
	            switch (this.day()) {
	                case 0:
	                    return '[u] [nedjelju] [u] LT';
	                case 3:
	                    return '[u] [srijedu] [u] LT';
	                case 6:
	                    return '[u] [subotu] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[u] dddd [u] LT';
	            }
	        },
	        lastDay  : '[jučer u] LT',
	        lastWeek : function () {
	            switch (this.day()) {
	                case 0:
	                case 3:
	                    return '[prošlu] dddd [u] LT';
	                case 6:
	                    return '[prošle] [subote] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[prošli] dddd [u] LT';
	            }
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'za %s',
	        past   : 'prije %s',
	        s      : 'par sekundi',
	        m      : translate,
	        mm     : translate,
	        h      : translate,
	        hh     : translate,
	        d      : 'dan',
	        dd     : translate,
	        M      : 'mjesec',
	        MM     : translate,
	        y      : 'godinu',
	        yy     : translate
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return bs;
	
	})));


/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Catalan [ca]
	//! author : Juan G. Hurtado : https://github.com/juanghurtado
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var ca = moment.defineLocale('ca', {
	    months : 'gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre'.split('_'),
	    monthsShort : 'gen._febr._mar._abr._mai._jun._jul._ag._set._oct._nov._des.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte'.split('_'),
	    weekdaysShort : 'dg._dl._dt._dc._dj._dv._ds.'.split('_'),
	    weekdaysMin : 'Dg_Dl_Dt_Dc_Dj_Dv_Ds'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY H:mm',
	        LLLL : 'dddd D MMMM YYYY H:mm'
	    },
	    calendar : {
	        sameDay : function () {
	            return '[avui a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	        },
	        nextDay : function () {
	            return '[demà a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	        },
	        nextWeek : function () {
	            return 'dddd [a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	        },
	        lastDay : function () {
	            return '[ahir a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	        },
	        lastWeek : function () {
	            return '[el] dddd [passat a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'd\'aquí %s',
	        past : 'fa %s',
	        s : 'uns segons',
	        m : 'un minut',
	        mm : '%d minuts',
	        h : 'una hora',
	        hh : '%d hores',
	        d : 'un dia',
	        dd : '%d dies',
	        M : 'un mes',
	        MM : '%d mesos',
	        y : 'un any',
	        yy : '%d anys'
	    },
	    ordinalParse: /\d{1,2}(r|n|t|è|a)/,
	    ordinal : function (number, period) {
	        var output = (number === 1) ? 'r' :
	            (number === 2) ? 'n' :
	            (number === 3) ? 'r' :
	            (number === 4) ? 't' : 'è';
	        if (period === 'w' || period === 'W') {
	            output = 'a';
	        }
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return ca;
	
	})));


/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Czech [cs]
	//! author : petrbela : https://github.com/petrbela
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var months = 'leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec'.split('_');
	var monthsShort = 'led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro'.split('_');
	function plural(n) {
	    return (n > 1) && (n < 5) && (~~(n / 10) !== 1);
	}
	function translate(number, withoutSuffix, key, isFuture) {
	    var result = number + ' ';
	    switch (key) {
	        case 's':  // a few seconds / in a few seconds / a few seconds ago
	            return (withoutSuffix || isFuture) ? 'pár sekund' : 'pár sekundami';
	        case 'm':  // a minute / in a minute / a minute ago
	            return withoutSuffix ? 'minuta' : (isFuture ? 'minutu' : 'minutou');
	        case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'minuty' : 'minut');
	            } else {
	                return result + 'minutami';
	            }
	            break;
	        case 'h':  // an hour / in an hour / an hour ago
	            return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
	        case 'hh': // 9 hours / in 9 hours / 9 hours ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'hodiny' : 'hodin');
	            } else {
	                return result + 'hodinami';
	            }
	            break;
	        case 'd':  // a day / in a day / a day ago
	            return (withoutSuffix || isFuture) ? 'den' : 'dnem';
	        case 'dd': // 9 days / in 9 days / 9 days ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'dny' : 'dní');
	            } else {
	                return result + 'dny';
	            }
	            break;
	        case 'M':  // a month / in a month / a month ago
	            return (withoutSuffix || isFuture) ? 'měsíc' : 'měsícem';
	        case 'MM': // 9 months / in 9 months / 9 months ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'měsíce' : 'měsíců');
	            } else {
	                return result + 'měsíci';
	            }
	            break;
	        case 'y':  // a year / in a year / a year ago
	            return (withoutSuffix || isFuture) ? 'rok' : 'rokem';
	        case 'yy': // 9 years / in 9 years / 9 years ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'roky' : 'let');
	            } else {
	                return result + 'lety';
	            }
	            break;
	    }
	}
	
	var cs = moment.defineLocale('cs', {
	    months : months,
	    monthsShort : monthsShort,
	    monthsParse : (function (months, monthsShort) {
	        var i, _monthsParse = [];
	        for (i = 0; i < 12; i++) {
	            // use custom parser to solve problem with July (červenec)
	            _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');
	        }
	        return _monthsParse;
	    }(months, monthsShort)),
	    shortMonthsParse : (function (monthsShort) {
	        var i, _shortMonthsParse = [];
	        for (i = 0; i < 12; i++) {
	            _shortMonthsParse[i] = new RegExp('^' + monthsShort[i] + '$', 'i');
	        }
	        return _shortMonthsParse;
	    }(monthsShort)),
	    longMonthsParse : (function (months) {
	        var i, _longMonthsParse = [];
	        for (i = 0; i < 12; i++) {
	            _longMonthsParse[i] = new RegExp('^' + months[i] + '$', 'i');
	        }
	        return _longMonthsParse;
	    }(months)),
	    weekdays : 'neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota'.split('_'),
	    weekdaysShort : 'ne_po_út_st_čt_pá_so'.split('_'),
	    weekdaysMin : 'ne_po_út_st_čt_pá_so'.split('_'),
	    longDateFormat : {
	        LT: 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY H:mm',
	        LLLL : 'dddd D. MMMM YYYY H:mm',
	        l : 'D. M. YYYY'
	    },
	    calendar : {
	        sameDay: '[dnes v] LT',
	        nextDay: '[zítra v] LT',
	        nextWeek: function () {
	            switch (this.day()) {
	                case 0:
	                    return '[v neděli v] LT';
	                case 1:
	                case 2:
	                    return '[v] dddd [v] LT';
	                case 3:
	                    return '[ve středu v] LT';
	                case 4:
	                    return '[ve čtvrtek v] LT';
	                case 5:
	                    return '[v pátek v] LT';
	                case 6:
	                    return '[v sobotu v] LT';
	            }
	        },
	        lastDay: '[včera v] LT',
	        lastWeek: function () {
	            switch (this.day()) {
	                case 0:
	                    return '[minulou neděli v] LT';
	                case 1:
	                case 2:
	                    return '[minulé] dddd [v] LT';
	                case 3:
	                    return '[minulou středu v] LT';
	                case 4:
	                case 5:
	                    return '[minulý] dddd [v] LT';
	                case 6:
	                    return '[minulou sobotu v] LT';
	            }
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'za %s',
	        past : 'před %s',
	        s : translate,
	        m : translate,
	        mm : translate,
	        h : translate,
	        hh : translate,
	        d : translate,
	        dd : translate,
	        M : translate,
	        MM : translate,
	        y : translate,
	        yy : translate
	    },
	    ordinalParse : /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return cs;
	
	})));


/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Chuvash [cv]
	//! author : Anatoly Mironov : https://github.com/mirontoli
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var cv = moment.defineLocale('cv', {
	    months : 'кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав'.split('_'),
	    monthsShort : 'кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш'.split('_'),
	    weekdays : 'вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун'.split('_'),
	    weekdaysShort : 'выр_тун_ытл_юн_кӗҫ_эрн_шӑм'.split('_'),
	    weekdaysMin : 'вр_тн_ыт_юн_кҫ_эр_шм'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD-MM-YYYY',
	        LL : 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]',
	        LLL : 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm',
	        LLLL : 'dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm'
	    },
	    calendar : {
	        sameDay: '[Паян] LT [сехетре]',
	        nextDay: '[Ыран] LT [сехетре]',
	        lastDay: '[Ӗнер] LT [сехетре]',
	        nextWeek: '[Ҫитес] dddd LT [сехетре]',
	        lastWeek: '[Иртнӗ] dddd LT [сехетре]',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : function (output) {
	            var affix = /сехет$/i.exec(output) ? 'рен' : /ҫул$/i.exec(output) ? 'тан' : 'ран';
	            return output + affix;
	        },
	        past : '%s каялла',
	        s : 'пӗр-ик ҫеккунт',
	        m : 'пӗр минут',
	        mm : '%d минут',
	        h : 'пӗр сехет',
	        hh : '%d сехет',
	        d : 'пӗр кун',
	        dd : '%d кун',
	        M : 'пӗр уйӑх',
	        MM : '%d уйӑх',
	        y : 'пӗр ҫул',
	        yy : '%d ҫул'
	    },
	    ordinalParse: /\d{1,2}-мӗш/,
	    ordinal : '%d-мӗш',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return cv;
	
	})));


/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Welsh [cy]
	//! author : Robert Allen : https://github.com/robgallen
	//! author : https://github.com/ryangreaves
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var cy = moment.defineLocale('cy', {
	    months: 'Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr'.split('_'),
	    monthsShort: 'Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag'.split('_'),
	    weekdays: 'Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn'.split('_'),
	    weekdaysShort: 'Sul_Llun_Maw_Mer_Iau_Gwe_Sad'.split('_'),
	    weekdaysMin: 'Su_Ll_Ma_Me_Ia_Gw_Sa'.split('_'),
	    weekdaysParseExact : true,
	    // time formats are the same as en-gb
	    longDateFormat: {
	        LT: 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L: 'DD/MM/YYYY',
	        LL: 'D MMMM YYYY',
	        LLL: 'D MMMM YYYY HH:mm',
	        LLLL: 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar: {
	        sameDay: '[Heddiw am] LT',
	        nextDay: '[Yfory am] LT',
	        nextWeek: 'dddd [am] LT',
	        lastDay: '[Ddoe am] LT',
	        lastWeek: 'dddd [diwethaf am] LT',
	        sameElse: 'L'
	    },
	    relativeTime: {
	        future: 'mewn %s',
	        past: '%s yn ôl',
	        s: 'ychydig eiliadau',
	        m: 'munud',
	        mm: '%d munud',
	        h: 'awr',
	        hh: '%d awr',
	        d: 'diwrnod',
	        dd: '%d diwrnod',
	        M: 'mis',
	        MM: '%d mis',
	        y: 'blwyddyn',
	        yy: '%d flynedd'
	    },
	    ordinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,
	    // traditional ordinal numbers above 31 are not commonly used in colloquial Welsh
	    ordinal: function (number) {
	        var b = number,
	            output = '',
	            lookup = [
	                '', 'af', 'il', 'ydd', 'ydd', 'ed', 'ed', 'ed', 'fed', 'fed', 'fed', // 1af to 10fed
	                'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'fed' // 11eg to 20fed
	            ];
	        if (b > 20) {
	            if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {
	                output = 'fed'; // not 30ain, 70ain or 90ain
	            } else {
	                output = 'ain';
	            }
	        } else if (b > 0) {
	            output = lookup[b];
	        }
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return cy;
	
	})));


/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Danish [da]
	//! author : Ulrik Nielsen : https://github.com/mrbase
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var da = moment.defineLocale('da', {
	    months : 'januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december'.split('_'),
	    monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
	    weekdays : 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
	    weekdaysShort : 'søn_man_tir_ons_tor_fre_lør'.split('_'),
	    weekdaysMin : 'sø_ma_ti_on_to_fr_lø'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY HH:mm',
	        LLLL : 'dddd [d.] D. MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[I dag kl.] LT',
	        nextDay : '[I morgen kl.] LT',
	        nextWeek : 'dddd [kl.] LT',
	        lastDay : '[I går kl.] LT',
	        lastWeek : '[sidste] dddd [kl] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'om %s',
	        past : '%s siden',
	        s : 'få sekunder',
	        m : 'et minut',
	        mm : '%d minutter',
	        h : 'en time',
	        hh : '%d timer',
	        d : 'en dag',
	        dd : '%d dage',
	        M : 'en måned',
	        MM : '%d måneder',
	        y : 'et år',
	        yy : '%d år'
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return da;
	
	})));


/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : German (Austria) [de-at]
	//! author : lluchs : https://github.com/lluchs
	//! author: Menelion Elensúle: https://github.com/Oire
	//! author : Martin Groller : https://github.com/MadMG
	//! author : Mikolaj Dadela : https://github.com/mik01aj
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	function processRelativeTime(number, withoutSuffix, key, isFuture) {
	    var format = {
	        'm': ['eine Minute', 'einer Minute'],
	        'h': ['eine Stunde', 'einer Stunde'],
	        'd': ['ein Tag', 'einem Tag'],
	        'dd': [number + ' Tage', number + ' Tagen'],
	        'M': ['ein Monat', 'einem Monat'],
	        'MM': [number + ' Monate', number + ' Monaten'],
	        'y': ['ein Jahr', 'einem Jahr'],
	        'yy': [number + ' Jahre', number + ' Jahren']
	    };
	    return withoutSuffix ? format[key][0] : format[key][1];
	}
	
	var deAt = moment.defineLocale('de-at', {
	    months : 'Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
	    monthsShort : 'Jän._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
	    weekdaysShort : 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
	    weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT: 'HH:mm',
	        LTS: 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY HH:mm',
	        LLLL : 'dddd, D. MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[heute um] LT [Uhr]',
	        sameElse: 'L',
	        nextDay: '[morgen um] LT [Uhr]',
	        nextWeek: 'dddd [um] LT [Uhr]',
	        lastDay: '[gestern um] LT [Uhr]',
	        lastWeek: '[letzten] dddd [um] LT [Uhr]'
	    },
	    relativeTime : {
	        future : 'in %s',
	        past : 'vor %s',
	        s : 'ein paar Sekunden',
	        m : processRelativeTime,
	        mm : '%d Minuten',
	        h : processRelativeTime,
	        hh : '%d Stunden',
	        d : processRelativeTime,
	        dd : processRelativeTime,
	        M : processRelativeTime,
	        MM : processRelativeTime,
	        y : processRelativeTime,
	        yy : processRelativeTime
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return deAt;
	
	})));


/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : German [de]
	//! author : lluchs : https://github.com/lluchs
	//! author: Menelion Elensúle: https://github.com/Oire
	//! author : Mikolaj Dadela : https://github.com/mik01aj
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	function processRelativeTime(number, withoutSuffix, key, isFuture) {
	    var format = {
	        'm': ['eine Minute', 'einer Minute'],
	        'h': ['eine Stunde', 'einer Stunde'],
	        'd': ['ein Tag', 'einem Tag'],
	        'dd': [number + ' Tage', number + ' Tagen'],
	        'M': ['ein Monat', 'einem Monat'],
	        'MM': [number + ' Monate', number + ' Monaten'],
	        'y': ['ein Jahr', 'einem Jahr'],
	        'yy': [number + ' Jahre', number + ' Jahren']
	    };
	    return withoutSuffix ? format[key][0] : format[key][1];
	}
	
	var de = moment.defineLocale('de', {
	    months : 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
	    monthsShort : 'Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
	    weekdaysShort : 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
	    weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT: 'HH:mm',
	        LTS: 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY HH:mm',
	        LLLL : 'dddd, D. MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[heute um] LT [Uhr]',
	        sameElse: 'L',
	        nextDay: '[morgen um] LT [Uhr]',
	        nextWeek: 'dddd [um] LT [Uhr]',
	        lastDay: '[gestern um] LT [Uhr]',
	        lastWeek: '[letzten] dddd [um] LT [Uhr]'
	    },
	    relativeTime : {
	        future : 'in %s',
	        past : 'vor %s',
	        s : 'ein paar Sekunden',
	        m : processRelativeTime,
	        mm : '%d Minuten',
	        h : processRelativeTime,
	        hh : '%d Stunden',
	        d : processRelativeTime,
	        dd : processRelativeTime,
	        M : processRelativeTime,
	        MM : processRelativeTime,
	        y : processRelativeTime,
	        yy : processRelativeTime
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return de;
	
	})));


/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Maldivian [dv]
	//! author : Jawish Hameed : https://github.com/jawish
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var months = [
	    'ޖެނުއަރީ',
	    'ފެބްރުއަރީ',
	    'މާރިޗު',
	    'އޭޕްރީލު',
	    'މޭ',
	    'ޖޫން',
	    'ޖުލައި',
	    'އޯގަސްޓު',
	    'ސެޕްޓެމްބަރު',
	    'އޮކްޓޯބަރު',
	    'ނޮވެމްބަރު',
	    'ޑިސެމްބަރު'
	];
	var weekdays = [
	    'އާދިއްތަ',
	    'ހޯމަ',
	    'އަންގާރަ',
	    'ބުދަ',
	    'ބުރާސްފަތި',
	    'ހުކުރު',
	    'ހޮނިހިރު'
	];
	
	var dv = moment.defineLocale('dv', {
	    months : months,
	    monthsShort : months,
	    weekdays : weekdays,
	    weekdaysShort : weekdays,
	    weekdaysMin : 'އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި'.split('_'),
	    longDateFormat : {
	
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'D/M/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    meridiemParse: /މކ|މފ/,
	    isPM : function (input) {
	        return 'މފ' === input;
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 12) {
	            return 'މކ';
	        } else {
	            return 'މފ';
	        }
	    },
	    calendar : {
	        sameDay : '[މިއަދު] LT',
	        nextDay : '[މާދަމާ] LT',
	        nextWeek : 'dddd LT',
	        lastDay : '[އިއްޔެ] LT',
	        lastWeek : '[ފާއިތުވި] dddd LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'ތެރޭގައި %s',
	        past : 'ކުރިން %s',
	        s : 'ސިކުންތުކޮޅެއް',
	        m : 'މިނިޓެއް',
	        mm : 'މިނިޓު %d',
	        h : 'ގަޑިއިރެއް',
	        hh : 'ގަޑިއިރު %d',
	        d : 'ދުވަހެއް',
	        dd : 'ދުވަސް %d',
	        M : 'މަހެއް',
	        MM : 'މަސް %d',
	        y : 'އަހަރެއް',
	        yy : 'އަހަރު %d'
	    },
	    preparse: function (string) {
	        return string.replace(/،/g, ',');
	    },
	    postformat: function (string) {
	        return string.replace(/,/g, '،');
	    },
	    week : {
	        dow : 7,  // Sunday is the first day of the week.
	        doy : 12  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return dv;
	
	})));


/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Greek [el]
	//! author : Aggelos Karalias : https://github.com/mehiel
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	function isFunction(input) {
	    return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
	}
	
	
	var el = moment.defineLocale('el', {
	    monthsNominativeEl : 'Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος'.split('_'),
	    monthsGenitiveEl : 'Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου'.split('_'),
	    months : function (momentToFormat, format) {
	        if (/D/.test(format.substring(0, format.indexOf('MMMM')))) { // if there is a day number before 'MMMM'
	            return this._monthsGenitiveEl[momentToFormat.month()];
	        } else {
	            return this._monthsNominativeEl[momentToFormat.month()];
	        }
	    },
	    monthsShort : 'Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ'.split('_'),
	    weekdays : 'Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο'.split('_'),
	    weekdaysShort : 'Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ'.split('_'),
	    weekdaysMin : 'Κυ_Δε_Τρ_Τε_Πε_Πα_Σα'.split('_'),
	    meridiem : function (hours, minutes, isLower) {
	        if (hours > 11) {
	            return isLower ? 'μμ' : 'ΜΜ';
	        } else {
	            return isLower ? 'πμ' : 'ΠΜ';
	        }
	    },
	    isPM : function (input) {
	        return ((input + '').toLowerCase()[0] === 'μ');
	    },
	    meridiemParse : /[ΠΜ]\.?Μ?\.?/i,
	    longDateFormat : {
	        LT : 'h:mm A',
	        LTS : 'h:mm:ss A',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY h:mm A',
	        LLLL : 'dddd, D MMMM YYYY h:mm A'
	    },
	    calendarEl : {
	        sameDay : '[Σήμερα {}] LT',
	        nextDay : '[Αύριο {}] LT',
	        nextWeek : 'dddd [{}] LT',
	        lastDay : '[Χθες {}] LT',
	        lastWeek : function () {
	            switch (this.day()) {
	                case 6:
	                    return '[το προηγούμενο] dddd [{}] LT';
	                default:
	                    return '[την προηγούμενη] dddd [{}] LT';
	            }
	        },
	        sameElse : 'L'
	    },
	    calendar : function (key, mom) {
	        var output = this._calendarEl[key],
	            hours = mom && mom.hours();
	        if (isFunction(output)) {
	            output = output.apply(mom);
	        }
	        return output.replace('{}', (hours % 12 === 1 ? 'στη' : 'στις'));
	    },
	    relativeTime : {
	        future : 'σε %s',
	        past : '%s πριν',
	        s : 'λίγα δευτερόλεπτα',
	        m : 'ένα λεπτό',
	        mm : '%d λεπτά',
	        h : 'μία ώρα',
	        hh : '%d ώρες',
	        d : 'μία μέρα',
	        dd : '%d μέρες',
	        M : 'ένας μήνας',
	        MM : '%d μήνες',
	        y : 'ένας χρόνος',
	        yy : '%d χρόνια'
	    },
	    ordinalParse: /\d{1,2}η/,
	    ordinal: '%dη',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4st is the first week of the year.
	    }
	});
	
	return el;
	
	})));


/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (Australia) [en-au]
	//! author : Jared Morse : https://github.com/jarcoal
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var enAu = moment.defineLocale('en-au', {
	    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	    longDateFormat : {
	        LT : 'h:mm A',
	        LTS : 'h:mm:ss A',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY h:mm A',
	        LLLL : 'dddd, D MMMM YYYY h:mm A'
	    },
	    calendar : {
	        sameDay : '[Today at] LT',
	        nextDay : '[Tomorrow at] LT',
	        nextWeek : 'dddd [at] LT',
	        lastDay : '[Yesterday at] LT',
	        lastWeek : '[Last] dddd [at] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'in %s',
	        past : '%s ago',
	        s : 'a few seconds',
	        m : 'a minute',
	        mm : '%d minutes',
	        h : 'an hour',
	        hh : '%d hours',
	        d : 'a day',
	        dd : '%d days',
	        M : 'a month',
	        MM : '%d months',
	        y : 'a year',
	        yy : '%d years'
	    },
	    ordinalParse: /\d{1,2}(st|nd|rd|th)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (~~(number % 100 / 10) === 1) ? 'th' :
	            (b === 1) ? 'st' :
	            (b === 2) ? 'nd' :
	            (b === 3) ? 'rd' : 'th';
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return enAu;
	
	})));


/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (Canada) [en-ca]
	//! author : Jonathan Abourbih : https://github.com/jonbca
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var enCa = moment.defineLocale('en-ca', {
	    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	    longDateFormat : {
	        LT : 'h:mm A',
	        LTS : 'h:mm:ss A',
	        L : 'YYYY-MM-DD',
	        LL : 'MMMM D, YYYY',
	        LLL : 'MMMM D, YYYY h:mm A',
	        LLLL : 'dddd, MMMM D, YYYY h:mm A'
	    },
	    calendar : {
	        sameDay : '[Today at] LT',
	        nextDay : '[Tomorrow at] LT',
	        nextWeek : 'dddd [at] LT',
	        lastDay : '[Yesterday at] LT',
	        lastWeek : '[Last] dddd [at] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'in %s',
	        past : '%s ago',
	        s : 'a few seconds',
	        m : 'a minute',
	        mm : '%d minutes',
	        h : 'an hour',
	        hh : '%d hours',
	        d : 'a day',
	        dd : '%d days',
	        M : 'a month',
	        MM : '%d months',
	        y : 'a year',
	        yy : '%d years'
	    },
	    ordinalParse: /\d{1,2}(st|nd|rd|th)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (~~(number % 100 / 10) === 1) ? 'th' :
	            (b === 1) ? 'st' :
	            (b === 2) ? 'nd' :
	            (b === 3) ? 'rd' : 'th';
	        return number + output;
	    }
	});
	
	return enCa;
	
	})));


/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (United Kingdom) [en-gb]
	//! author : Chris Gedrim : https://github.com/chrisgedrim
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var enGb = moment.defineLocale('en-gb', {
	    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[Today at] LT',
	        nextDay : '[Tomorrow at] LT',
	        nextWeek : 'dddd [at] LT',
	        lastDay : '[Yesterday at] LT',
	        lastWeek : '[Last] dddd [at] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'in %s',
	        past : '%s ago',
	        s : 'a few seconds',
	        m : 'a minute',
	        mm : '%d minutes',
	        h : 'an hour',
	        hh : '%d hours',
	        d : 'a day',
	        dd : '%d days',
	        M : 'a month',
	        MM : '%d months',
	        y : 'a year',
	        yy : '%d years'
	    },
	    ordinalParse: /\d{1,2}(st|nd|rd|th)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (~~(number % 100 / 10) === 1) ? 'th' :
	            (b === 1) ? 'st' :
	            (b === 2) ? 'nd' :
	            (b === 3) ? 'rd' : 'th';
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return enGb;
	
	})));


/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (Ireland) [en-ie]
	//! author : Chris Cartlidge : https://github.com/chriscartlidge
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var enIe = moment.defineLocale('en-ie', {
	    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD-MM-YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[Today at] LT',
	        nextDay : '[Tomorrow at] LT',
	        nextWeek : 'dddd [at] LT',
	        lastDay : '[Yesterday at] LT',
	        lastWeek : '[Last] dddd [at] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'in %s',
	        past : '%s ago',
	        s : 'a few seconds',
	        m : 'a minute',
	        mm : '%d minutes',
	        h : 'an hour',
	        hh : '%d hours',
	        d : 'a day',
	        dd : '%d days',
	        M : 'a month',
	        MM : '%d months',
	        y : 'a year',
	        yy : '%d years'
	    },
	    ordinalParse: /\d{1,2}(st|nd|rd|th)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (~~(number % 100 / 10) === 1) ? 'th' :
	            (b === 1) ? 'st' :
	            (b === 2) ? 'nd' :
	            (b === 3) ? 'rd' : 'th';
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return enIe;
	
	})));


/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (New Zealand) [en-nz]
	//! author : Luke McGregor : https://github.com/lukemcgregor
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var enNz = moment.defineLocale('en-nz', {
	    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	    longDateFormat : {
	        LT : 'h:mm A',
	        LTS : 'h:mm:ss A',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY h:mm A',
	        LLLL : 'dddd, D MMMM YYYY h:mm A'
	    },
	    calendar : {
	        sameDay : '[Today at] LT',
	        nextDay : '[Tomorrow at] LT',
	        nextWeek : 'dddd [at] LT',
	        lastDay : '[Yesterday at] LT',
	        lastWeek : '[Last] dddd [at] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'in %s',
	        past : '%s ago',
	        s : 'a few seconds',
	        m : 'a minute',
	        mm : '%d minutes',
	        h : 'an hour',
	        hh : '%d hours',
	        d : 'a day',
	        dd : '%d days',
	        M : 'a month',
	        MM : '%d months',
	        y : 'a year',
	        yy : '%d years'
	    },
	    ordinalParse: /\d{1,2}(st|nd|rd|th)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (~~(number % 100 / 10) === 1) ? 'th' :
	            (b === 1) ? 'st' :
	            (b === 2) ? 'nd' :
	            (b === 3) ? 'rd' : 'th';
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return enNz;
	
	})));


/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Esperanto [eo]
	//! author : Colin Dean : https://github.com/colindean
	//! komento: Mi estas malcerta se mi korekte traktis akuzativojn en tiu traduko.
	//!          Se ne, bonvolu korekti kaj avizi min por ke mi povas lerni!
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var eo = moment.defineLocale('eo', {
	    months : 'januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro'.split('_'),
	    monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec'.split('_'),
	    weekdays : 'Dimanĉo_Lundo_Mardo_Merkredo_Ĵaŭdo_Vendredo_Sabato'.split('_'),
	    weekdaysShort : 'Dim_Lun_Mard_Merk_Ĵaŭ_Ven_Sab'.split('_'),
	    weekdaysMin : 'Di_Lu_Ma_Me_Ĵa_Ve_Sa'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'YYYY-MM-DD',
	        LL : 'D[-an de] MMMM, YYYY',
	        LLL : 'D[-an de] MMMM, YYYY HH:mm',
	        LLLL : 'dddd, [la] D[-an de] MMMM, YYYY HH:mm'
	    },
	    meridiemParse: /[ap]\.t\.m/i,
	    isPM: function (input) {
	        return input.charAt(0).toLowerCase() === 'p';
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours > 11) {
	            return isLower ? 'p.t.m.' : 'P.T.M.';
	        } else {
	            return isLower ? 'a.t.m.' : 'A.T.M.';
	        }
	    },
	    calendar : {
	        sameDay : '[Hodiaŭ je] LT',
	        nextDay : '[Morgaŭ je] LT',
	        nextWeek : 'dddd [je] LT',
	        lastDay : '[Hieraŭ je] LT',
	        lastWeek : '[pasinta] dddd [je] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'je %s',
	        past : 'antaŭ %s',
	        s : 'sekundoj',
	        m : 'minuto',
	        mm : '%d minutoj',
	        h : 'horo',
	        hh : '%d horoj',
	        d : 'tago',//ne 'diurno', ĉar estas uzita por proksimumo
	        dd : '%d tagoj',
	        M : 'monato',
	        MM : '%d monatoj',
	        y : 'jaro',
	        yy : '%d jaroj'
	    },
	    ordinalParse: /\d{1,2}a/,
	    ordinal : '%da',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return eo;
	
	})));


/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Spanish (Dominican Republic) [es-do]
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_');
	var monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');
	
	var esDo = moment.defineLocale('es-do', {
	    months : 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
	    monthsShort : function (m, format) {
	        if (/-MMM-/.test(format)) {
	            return monthsShort[m.month()];
	        } else {
	            return monthsShortDot[m.month()];
	        }
	    },
	    monthsParseExact : true,
	    weekdays : 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
	    weekdaysShort : 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
	    weekdaysMin : 'do_lu_ma_mi_ju_vi_sá'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'h:mm A',
	        LTS : 'h:mm:ss A',
	        L : 'DD/MM/YYYY',
	        LL : 'D [de] MMMM [de] YYYY',
	        LLL : 'D [de] MMMM [de] YYYY h:mm A',
	        LLLL : 'dddd, D [de] MMMM [de] YYYY h:mm A'
	    },
	    calendar : {
	        sameDay : function () {
	            return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        nextDay : function () {
	            return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        nextWeek : function () {
	            return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        lastDay : function () {
	            return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        lastWeek : function () {
	            return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'en %s',
	        past : 'hace %s',
	        s : 'unos segundos',
	        m : 'un minuto',
	        mm : '%d minutos',
	        h : 'una hora',
	        hh : '%d horas',
	        d : 'un día',
	        dd : '%d días',
	        M : 'un mes',
	        MM : '%d meses',
	        y : 'un año',
	        yy : '%d años'
	    },
	    ordinalParse : /\d{1,2}º/,
	    ordinal : '%dº',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return esDo;
	
	})));


/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Spanish [es]
	//! author : Julio Napurí : https://github.com/julionc
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_');
	var monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');
	
	var es = moment.defineLocale('es', {
	    months : 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
	    monthsShort : function (m, format) {
	        if (/-MMM-/.test(format)) {
	            return monthsShort[m.month()];
	        } else {
	            return monthsShortDot[m.month()];
	        }
	    },
	    monthsParseExact : true,
	    weekdays : 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
	    weekdaysShort : 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
	    weekdaysMin : 'do_lu_ma_mi_ju_vi_sá'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D [de] MMMM [de] YYYY',
	        LLL : 'D [de] MMMM [de] YYYY H:mm',
	        LLLL : 'dddd, D [de] MMMM [de] YYYY H:mm'
	    },
	    calendar : {
	        sameDay : function () {
	            return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        nextDay : function () {
	            return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        nextWeek : function () {
	            return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        lastDay : function () {
	            return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        lastWeek : function () {
	            return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'en %s',
	        past : 'hace %s',
	        s : 'unos segundos',
	        m : 'un minuto',
	        mm : '%d minutos',
	        h : 'una hora',
	        hh : '%d horas',
	        d : 'un día',
	        dd : '%d días',
	        M : 'un mes',
	        MM : '%d meses',
	        y : 'un año',
	        yy : '%d años'
	    },
	    ordinalParse : /\d{1,2}º/,
	    ordinal : '%dº',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return es;
	
	})));


/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Estonian [et]
	//! author : Henry Kehlmann : https://github.com/madhenry
	//! improvements : Illimar Tambek : https://github.com/ragulka
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	function processRelativeTime(number, withoutSuffix, key, isFuture) {
	    var format = {
	        's' : ['mõne sekundi', 'mõni sekund', 'paar sekundit'],
	        'm' : ['ühe minuti', 'üks minut'],
	        'mm': [number + ' minuti', number + ' minutit'],
	        'h' : ['ühe tunni', 'tund aega', 'üks tund'],
	        'hh': [number + ' tunni', number + ' tundi'],
	        'd' : ['ühe päeva', 'üks päev'],
	        'M' : ['kuu aja', 'kuu aega', 'üks kuu'],
	        'MM': [number + ' kuu', number + ' kuud'],
	        'y' : ['ühe aasta', 'aasta', 'üks aasta'],
	        'yy': [number + ' aasta', number + ' aastat']
	    };
	    if (withoutSuffix) {
	        return format[key][2] ? format[key][2] : format[key][1];
	    }
	    return isFuture ? format[key][0] : format[key][1];
	}
	
	var et = moment.defineLocale('et', {
	    months        : 'jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember'.split('_'),
	    monthsShort   : 'jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets'.split('_'),
	    weekdays      : 'pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev'.split('_'),
	    weekdaysShort : 'P_E_T_K_N_R_L'.split('_'),
	    weekdaysMin   : 'P_E_T_K_N_R_L'.split('_'),
	    longDateFormat : {
	        LT   : 'H:mm',
	        LTS : 'H:mm:ss',
	        L    : 'DD.MM.YYYY',
	        LL   : 'D. MMMM YYYY',
	        LLL  : 'D. MMMM YYYY H:mm',
	        LLLL : 'dddd, D. MMMM YYYY H:mm'
	    },
	    calendar : {
	        sameDay  : '[Täna,] LT',
	        nextDay  : '[Homme,] LT',
	        nextWeek : '[Järgmine] dddd LT',
	        lastDay  : '[Eile,] LT',
	        lastWeek : '[Eelmine] dddd LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s pärast',
	        past   : '%s tagasi',
	        s      : processRelativeTime,
	        m      : processRelativeTime,
	        mm     : processRelativeTime,
	        h      : processRelativeTime,
	        hh     : processRelativeTime,
	        d      : processRelativeTime,
	        dd     : '%d päeva',
	        M      : processRelativeTime,
	        MM     : processRelativeTime,
	        y      : processRelativeTime,
	        yy     : processRelativeTime
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return et;
	
	})));


/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Basque [eu]
	//! author : Eneko Illarramendi : https://github.com/eillarra
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var eu = moment.defineLocale('eu', {
	    months : 'urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua'.split('_'),
	    monthsShort : 'urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata'.split('_'),
	    weekdaysShort : 'ig._al._ar._az._og._ol._lr.'.split('_'),
	    weekdaysMin : 'ig_al_ar_az_og_ol_lr'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'YYYY-MM-DD',
	        LL : 'YYYY[ko] MMMM[ren] D[a]',
	        LLL : 'YYYY[ko] MMMM[ren] D[a] HH:mm',
	        LLLL : 'dddd, YYYY[ko] MMMM[ren] D[a] HH:mm',
	        l : 'YYYY-M-D',
	        ll : 'YYYY[ko] MMM D[a]',
	        lll : 'YYYY[ko] MMM D[a] HH:mm',
	        llll : 'ddd, YYYY[ko] MMM D[a] HH:mm'
	    },
	    calendar : {
	        sameDay : '[gaur] LT[etan]',
	        nextDay : '[bihar] LT[etan]',
	        nextWeek : 'dddd LT[etan]',
	        lastDay : '[atzo] LT[etan]',
	        lastWeek : '[aurreko] dddd LT[etan]',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s barru',
	        past : 'duela %s',
	        s : 'segundo batzuk',
	        m : 'minutu bat',
	        mm : '%d minutu',
	        h : 'ordu bat',
	        hh : '%d ordu',
	        d : 'egun bat',
	        dd : '%d egun',
	        M : 'hilabete bat',
	        MM : '%d hilabete',
	        y : 'urte bat',
	        yy : '%d urte'
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return eu;
	
	})));


/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Persian [fa]
	//! author : Ebrahim Byagowi : https://github.com/ebraminio
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var symbolMap = {
	    '1': '۱',
	    '2': '۲',
	    '3': '۳',
	    '4': '۴',
	    '5': '۵',
	    '6': '۶',
	    '7': '۷',
	    '8': '۸',
	    '9': '۹',
	    '0': '۰'
	};
	var numberMap = {
	    '۱': '1',
	    '۲': '2',
	    '۳': '3',
	    '۴': '4',
	    '۵': '5',
	    '۶': '6',
	    '۷': '7',
	    '۸': '8',
	    '۹': '9',
	    '۰': '0'
	};
	
	var fa = moment.defineLocale('fa', {
	    months : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
	    monthsShort : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
	    weekdays : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
	    weekdaysShort : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
	    weekdaysMin : 'ی_د_س_چ_پ_ج_ش'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    meridiemParse: /قبل از ظهر|بعد از ظهر/,
	    isPM: function (input) {
	        return /بعد از ظهر/.test(input);
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 12) {
	            return 'قبل از ظهر';
	        } else {
	            return 'بعد از ظهر';
	        }
	    },
	    calendar : {
	        sameDay : '[امروز ساعت] LT',
	        nextDay : '[فردا ساعت] LT',
	        nextWeek : 'dddd [ساعت] LT',
	        lastDay : '[دیروز ساعت] LT',
	        lastWeek : 'dddd [پیش] [ساعت] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'در %s',
	        past : '%s پیش',
	        s : 'چندین ثانیه',
	        m : 'یک دقیقه',
	        mm : '%d دقیقه',
	        h : 'یک ساعت',
	        hh : '%d ساعت',
	        d : 'یک روز',
	        dd : '%d روز',
	        M : 'یک ماه',
	        MM : '%d ماه',
	        y : 'یک سال',
	        yy : '%d سال'
	    },
	    preparse: function (string) {
	        return string.replace(/[۰-۹]/g, function (match) {
	            return numberMap[match];
	        }).replace(/،/g, ',');
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        }).replace(/,/g, '،');
	    },
	    ordinalParse: /\d{1,2}م/,
	    ordinal : '%dم',
	    week : {
	        dow : 6, // Saturday is the first day of the week.
	        doy : 12 // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return fa;
	
	})));


/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Finnish [fi]
	//! author : Tarmo Aidantausta : https://github.com/bleadof
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var numbersPast = 'nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän'.split(' ');
	var numbersFuture = [
	        'nolla', 'yhden', 'kahden', 'kolmen', 'neljän', 'viiden', 'kuuden',
	        numbersPast[7], numbersPast[8], numbersPast[9]
	    ];
	function translate(number, withoutSuffix, key, isFuture) {
	    var result = '';
	    switch (key) {
	        case 's':
	            return isFuture ? 'muutaman sekunnin' : 'muutama sekunti';
	        case 'm':
	            return isFuture ? 'minuutin' : 'minuutti';
	        case 'mm':
	            result = isFuture ? 'minuutin' : 'minuuttia';
	            break;
	        case 'h':
	            return isFuture ? 'tunnin' : 'tunti';
	        case 'hh':
	            result = isFuture ? 'tunnin' : 'tuntia';
	            break;
	        case 'd':
	            return isFuture ? 'päivän' : 'päivä';
	        case 'dd':
	            result = isFuture ? 'päivän' : 'päivää';
	            break;
	        case 'M':
	            return isFuture ? 'kuukauden' : 'kuukausi';
	        case 'MM':
	            result = isFuture ? 'kuukauden' : 'kuukautta';
	            break;
	        case 'y':
	            return isFuture ? 'vuoden' : 'vuosi';
	        case 'yy':
	            result = isFuture ? 'vuoden' : 'vuotta';
	            break;
	    }
	    result = verbalNumber(number, isFuture) + ' ' + result;
	    return result;
	}
	function verbalNumber(number, isFuture) {
	    return number < 10 ? (isFuture ? numbersFuture[number] : numbersPast[number]) : number;
	}
	
	var fi = moment.defineLocale('fi', {
	    months : 'tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu'.split('_'),
	    monthsShort : 'tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu'.split('_'),
	    weekdays : 'sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai'.split('_'),
	    weekdaysShort : 'su_ma_ti_ke_to_pe_la'.split('_'),
	    weekdaysMin : 'su_ma_ti_ke_to_pe_la'.split('_'),
	    longDateFormat : {
	        LT : 'HH.mm',
	        LTS : 'HH.mm.ss',
	        L : 'DD.MM.YYYY',
	        LL : 'Do MMMM[ta] YYYY',
	        LLL : 'Do MMMM[ta] YYYY, [klo] HH.mm',
	        LLLL : 'dddd, Do MMMM[ta] YYYY, [klo] HH.mm',
	        l : 'D.M.YYYY',
	        ll : 'Do MMM YYYY',
	        lll : 'Do MMM YYYY, [klo] HH.mm',
	        llll : 'ddd, Do MMM YYYY, [klo] HH.mm'
	    },
	    calendar : {
	        sameDay : '[tänään] [klo] LT',
	        nextDay : '[huomenna] [klo] LT',
	        nextWeek : 'dddd [klo] LT',
	        lastDay : '[eilen] [klo] LT',
	        lastWeek : '[viime] dddd[na] [klo] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s päästä',
	        past : '%s sitten',
	        s : translate,
	        m : translate,
	        mm : translate,
	        h : translate,
	        hh : translate,
	        d : translate,
	        dd : translate,
	        M : translate,
	        MM : translate,
	        y : translate,
	        yy : translate
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return fi;
	
	})));


/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Faroese [fo]
	//! author : Ragnar Johannesen : https://github.com/ragnar123
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var fo = moment.defineLocale('fo', {
	    months : 'januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
	    monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
	    weekdays : 'sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur'.split('_'),
	    weekdaysShort : 'sun_mán_týs_mik_hós_frí_ley'.split('_'),
	    weekdaysMin : 'su_má_tý_mi_hó_fr_le'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D. MMMM, YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[Í dag kl.] LT',
	        nextDay : '[Í morgin kl.] LT',
	        nextWeek : 'dddd [kl.] LT',
	        lastDay : '[Í gjár kl.] LT',
	        lastWeek : '[síðstu] dddd [kl] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'um %s',
	        past : '%s síðani',
	        s : 'fá sekund',
	        m : 'ein minutt',
	        mm : '%d minuttir',
	        h : 'ein tími',
	        hh : '%d tímar',
	        d : 'ein dagur',
	        dd : '%d dagar',
	        M : 'ein mánaði',
	        MM : '%d mánaðir',
	        y : 'eitt ár',
	        yy : '%d ár'
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return fo;
	
	})));


/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : French (Canada) [fr-ca]
	//! author : Jonathan Abourbih : https://github.com/jonbca
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var frCa = moment.defineLocale('fr-ca', {
	    months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
	    monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
	    weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
	    weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'YYYY-MM-DD',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[Aujourd\'hui à] LT',
	        nextDay: '[Demain à] LT',
	        nextWeek: 'dddd [à] LT',
	        lastDay: '[Hier à] LT',
	        lastWeek: 'dddd [dernier à] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'dans %s',
	        past : 'il y a %s',
	        s : 'quelques secondes',
	        m : 'une minute',
	        mm : '%d minutes',
	        h : 'une heure',
	        hh : '%d heures',
	        d : 'un jour',
	        dd : '%d jours',
	        M : 'un mois',
	        MM : '%d mois',
	        y : 'un an',
	        yy : '%d ans'
	    },
	    ordinalParse: /\d{1,2}(er|e)/,
	    ordinal : function (number) {
	        return number + (number === 1 ? 'er' : 'e');
	    }
	});
	
	return frCa;
	
	})));


/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : French (Switzerland) [fr-ch]
	//! author : Gaspard Bucher : https://github.com/gaspard
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var frCh = moment.defineLocale('fr-ch', {
	    months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
	    monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
	    weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
	    weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[Aujourd\'hui à] LT',
	        nextDay: '[Demain à] LT',
	        nextWeek: 'dddd [à] LT',
	        lastDay: '[Hier à] LT',
	        lastWeek: 'dddd [dernier à] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'dans %s',
	        past : 'il y a %s',
	        s : 'quelques secondes',
	        m : 'une minute',
	        mm : '%d minutes',
	        h : 'une heure',
	        hh : '%d heures',
	        d : 'un jour',
	        dd : '%d jours',
	        M : 'un mois',
	        MM : '%d mois',
	        y : 'un an',
	        yy : '%d ans'
	    },
	    ordinalParse: /\d{1,2}(er|e)/,
	    ordinal : function (number) {
	        return number + (number === 1 ? 'er' : 'e');
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return frCh;
	
	})));


/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : French [fr]
	//! author : John Fischer : https://github.com/jfroffice
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var fr = moment.defineLocale('fr', {
	    months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
	    monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
	    weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
	    weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[Aujourd\'hui à] LT',
	        nextDay: '[Demain à] LT',
	        nextWeek: 'dddd [à] LT',
	        lastDay: '[Hier à] LT',
	        lastWeek: 'dddd [dernier à] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'dans %s',
	        past : 'il y a %s',
	        s : 'quelques secondes',
	        m : 'une minute',
	        mm : '%d minutes',
	        h : 'une heure',
	        hh : '%d heures',
	        d : 'un jour',
	        dd : '%d jours',
	        M : 'un mois',
	        MM : '%d mois',
	        y : 'un an',
	        yy : '%d ans'
	    },
	    ordinalParse: /\d{1,2}(er|)/,
	    ordinal : function (number) {
	        return number + (number === 1 ? 'er' : '');
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return fr;
	
	})));


/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Frisian [fy]
	//! author : Robin van der Vliet : https://github.com/robin0van0der0v
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var monthsShortWithDots = 'jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.'.split('_');
	var monthsShortWithoutDots = 'jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_');
	
	var fy = moment.defineLocale('fy', {
	    months : 'jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber'.split('_'),
	    monthsShort : function (m, format) {
	        if (/-MMM-/.test(format)) {
	            return monthsShortWithoutDots[m.month()];
	        } else {
	            return monthsShortWithDots[m.month()];
	        }
	    },
	    monthsParseExact : true,
	    weekdays : 'snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon'.split('_'),
	    weekdaysShort : 'si._mo._ti._wo._to._fr._so.'.split('_'),
	    weekdaysMin : 'Si_Mo_Ti_Wo_To_Fr_So'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD-MM-YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[hjoed om] LT',
	        nextDay: '[moarn om] LT',
	        nextWeek: 'dddd [om] LT',
	        lastDay: '[juster om] LT',
	        lastWeek: '[ôfrûne] dddd [om] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'oer %s',
	        past : '%s lyn',
	        s : 'in pear sekonden',
	        m : 'ien minút',
	        mm : '%d minuten',
	        h : 'ien oere',
	        hh : '%d oeren',
	        d : 'ien dei',
	        dd : '%d dagen',
	        M : 'ien moanne',
	        MM : '%d moannen',
	        y : 'ien jier',
	        yy : '%d jierren'
	    },
	    ordinalParse: /\d{1,2}(ste|de)/,
	    ordinal : function (number) {
	        return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return fy;
	
	})));


/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Scottish Gaelic [gd]
	//! author : Jon Ashdown : https://github.com/jonashdown
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var months = [
	    'Am Faoilleach', 'An Gearran', 'Am Màrt', 'An Giblean', 'An Cèitean', 'An t-Ògmhios', 'An t-Iuchar', 'An Lùnastal', 'An t-Sultain', 'An Dàmhair', 'An t-Samhain', 'An Dùbhlachd'
	];
	
	var monthsShort = ['Faoi', 'Gear', 'Màrt', 'Gibl', 'Cèit', 'Ògmh', 'Iuch', 'Lùn', 'Sult', 'Dàmh', 'Samh', 'Dùbh'];
	
	var weekdays = ['Didòmhnaich', 'Diluain', 'Dimàirt', 'Diciadain', 'Diardaoin', 'Dihaoine', 'Disathairne'];
	
	var weekdaysShort = ['Did', 'Dil', 'Dim', 'Dic', 'Dia', 'Dih', 'Dis'];
	
	var weekdaysMin = ['Dò', 'Lu', 'Mà', 'Ci', 'Ar', 'Ha', 'Sa'];
	
	var gd = moment.defineLocale('gd', {
	    months : months,
	    monthsShort : monthsShort,
	    monthsParseExact : true,
	    weekdays : weekdays,
	    weekdaysShort : weekdaysShort,
	    weekdaysMin : weekdaysMin,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[An-diugh aig] LT',
	        nextDay : '[A-màireach aig] LT',
	        nextWeek : 'dddd [aig] LT',
	        lastDay : '[An-dè aig] LT',
	        lastWeek : 'dddd [seo chaidh] [aig] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'ann an %s',
	        past : 'bho chionn %s',
	        s : 'beagan diogan',
	        m : 'mionaid',
	        mm : '%d mionaidean',
	        h : 'uair',
	        hh : '%d uairean',
	        d : 'latha',
	        dd : '%d latha',
	        M : 'mìos',
	        MM : '%d mìosan',
	        y : 'bliadhna',
	        yy : '%d bliadhna'
	    },
	    ordinalParse : /\d{1,2}(d|na|mh)/,
	    ordinal : function (number) {
	        var output = number === 1 ? 'd' : number % 10 === 2 ? 'na' : 'mh';
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return gd;
	
	})));


/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Galician [gl]
	//! author : Juan G. Hurtado : https://github.com/juanghurtado
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var gl = moment.defineLocale('gl', {
	    months : 'xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro'.split('_'),
	    monthsShort : 'xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.'.split('_'),
	    monthsParseExact: true,
	    weekdays : 'domingo_luns_martes_mércores_xoves_venres_sábado'.split('_'),
	    weekdaysShort : 'dom._lun._mar._mér._xov._ven._sáb.'.split('_'),
	    weekdaysMin : 'do_lu_ma_mé_xo_ve_sá'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D [de] MMMM [de] YYYY',
	        LLL : 'D [de] MMMM [de] YYYY H:mm',
	        LLLL : 'dddd, D [de] MMMM [de] YYYY H:mm'
	    },
	    calendar : {
	        sameDay : function () {
	            return '[hoxe ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
	        },
	        nextDay : function () {
	            return '[mañá ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
	        },
	        nextWeek : function () {
	            return 'dddd [' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
	        },
	        lastDay : function () {
	            return '[onte ' + ((this.hours() !== 1) ? 'á' : 'a') + '] LT';
	        },
	        lastWeek : function () {
	            return '[o] dddd [pasado ' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : function (str) {
	            if (str.indexOf('un') === 0) {
	                return 'n' + str;
	            }
	            return 'en ' + str;
	        },
	        past : 'hai %s',
	        s : 'uns segundos',
	        m : 'un minuto',
	        mm : '%d minutos',
	        h : 'unha hora',
	        hh : '%d horas',
	        d : 'un día',
	        dd : '%d días',
	        M : 'un mes',
	        MM : '%d meses',
	        y : 'un ano',
	        yy : '%d anos'
	    },
	    ordinalParse : /\d{1,2}º/,
	    ordinal : '%dº',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return gl;
	
	})));


/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Hebrew [he]
	//! author : Tomer Cohen : https://github.com/tomer
	//! author : Moshe Simantov : https://github.com/DevelopmentIL
	//! author : Tal Ater : https://github.com/TalAter
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var he = moment.defineLocale('he', {
	    months : 'ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר'.split('_'),
	    monthsShort : 'ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳'.split('_'),
	    weekdays : 'ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת'.split('_'),
	    weekdaysShort : 'א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳'.split('_'),
	    weekdaysMin : 'א_ב_ג_ד_ה_ו_ש'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D [ב]MMMM YYYY',
	        LLL : 'D [ב]MMMM YYYY HH:mm',
	        LLLL : 'dddd, D [ב]MMMM YYYY HH:mm',
	        l : 'D/M/YYYY',
	        ll : 'D MMM YYYY',
	        lll : 'D MMM YYYY HH:mm',
	        llll : 'ddd, D MMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[היום ב־]LT',
	        nextDay : '[מחר ב־]LT',
	        nextWeek : 'dddd [בשעה] LT',
	        lastDay : '[אתמול ב־]LT',
	        lastWeek : '[ביום] dddd [האחרון בשעה] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'בעוד %s',
	        past : 'לפני %s',
	        s : 'מספר שניות',
	        m : 'דקה',
	        mm : '%d דקות',
	        h : 'שעה',
	        hh : function (number) {
	            if (number === 2) {
	                return 'שעתיים';
	            }
	            return number + ' שעות';
	        },
	        d : 'יום',
	        dd : function (number) {
	            if (number === 2) {
	                return 'יומיים';
	            }
	            return number + ' ימים';
	        },
	        M : 'חודש',
	        MM : function (number) {
	            if (number === 2) {
	                return 'חודשיים';
	            }
	            return number + ' חודשים';
	        },
	        y : 'שנה',
	        yy : function (number) {
	            if (number === 2) {
	                return 'שנתיים';
	            } else if (number % 10 === 0 && number !== 10) {
	                return number + ' שנה';
	            }
	            return number + ' שנים';
	        }
	    },
	    meridiemParse: /אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,
	    isPM : function (input) {
	        return /^(אחה"צ|אחרי הצהריים|בערב)$/.test(input);
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 5) {
	            return 'לפנות בוקר';
	        } else if (hour < 10) {
	            return 'בבוקר';
	        } else if (hour < 12) {
	            return isLower ? 'לפנה"צ' : 'לפני הצהריים';
	        } else if (hour < 18) {
	            return isLower ? 'אחה"צ' : 'אחרי הצהריים';
	        } else {
	            return 'בערב';
	        }
	    }
	});
	
	return he;
	
	})));


/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Hindi [hi]
	//! author : Mayank Singhal : https://github.com/mayanksinghal
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var symbolMap = {
	    '1': '१',
	    '2': '२',
	    '3': '३',
	    '4': '४',
	    '5': '५',
	    '6': '६',
	    '7': '७',
	    '8': '८',
	    '9': '९',
	    '0': '०'
	};
	var numberMap = {
	    '१': '1',
	    '२': '2',
	    '३': '3',
	    '४': '4',
	    '५': '5',
	    '६': '6',
	    '७': '7',
	    '८': '8',
	    '९': '9',
	    '०': '0'
	};
	
	var hi = moment.defineLocale('hi', {
	    months : 'जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर'.split('_'),
	    monthsShort : 'जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.'.split('_'),
	    monthsParseExact: true,
	    weekdays : 'रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
	    weekdaysShort : 'रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि'.split('_'),
	    weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split('_'),
	    longDateFormat : {
	        LT : 'A h:mm बजे',
	        LTS : 'A h:mm:ss बजे',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, A h:mm बजे',
	        LLLL : 'dddd, D MMMM YYYY, A h:mm बजे'
	    },
	    calendar : {
	        sameDay : '[आज] LT',
	        nextDay : '[कल] LT',
	        nextWeek : 'dddd, LT',
	        lastDay : '[कल] LT',
	        lastWeek : '[पिछले] dddd, LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s में',
	        past : '%s पहले',
	        s : 'कुछ ही क्षण',
	        m : 'एक मिनट',
	        mm : '%d मिनट',
	        h : 'एक घंटा',
	        hh : '%d घंटे',
	        d : 'एक दिन',
	        dd : '%d दिन',
	        M : 'एक महीने',
	        MM : '%d महीने',
	        y : 'एक वर्ष',
	        yy : '%d वर्ष'
	    },
	    preparse: function (string) {
	        return string.replace(/[१२३४५६७८९०]/g, function (match) {
	            return numberMap[match];
	        });
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        });
	    },
	    // Hindi notation for meridiems are quite fuzzy in practice. While there exists
	    // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
	    meridiemParse: /रात|सुबह|दोपहर|शाम/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'रात') {
	            return hour < 4 ? hour : hour + 12;
	        } else if (meridiem === 'सुबह') {
	            return hour;
	        } else if (meridiem === 'दोपहर') {
	            return hour >= 10 ? hour : hour + 12;
	        } else if (meridiem === 'शाम') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'रात';
	        } else if (hour < 10) {
	            return 'सुबह';
	        } else if (hour < 17) {
	            return 'दोपहर';
	        } else if (hour < 20) {
	            return 'शाम';
	        } else {
	            return 'रात';
	        }
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return hi;
	
	})));


/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Croatian [hr]
	//! author : Bojan Marković : https://github.com/bmarkovic
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	function translate(number, withoutSuffix, key) {
	    var result = number + ' ';
	    switch (key) {
	        case 'm':
	            return withoutSuffix ? 'jedna minuta' : 'jedne minute';
	        case 'mm':
	            if (number === 1) {
	                result += 'minuta';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'minute';
	            } else {
	                result += 'minuta';
	            }
	            return result;
	        case 'h':
	            return withoutSuffix ? 'jedan sat' : 'jednog sata';
	        case 'hh':
	            if (number === 1) {
	                result += 'sat';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'sata';
	            } else {
	                result += 'sati';
	            }
	            return result;
	        case 'dd':
	            if (number === 1) {
	                result += 'dan';
	            } else {
	                result += 'dana';
	            }
	            return result;
	        case 'MM':
	            if (number === 1) {
	                result += 'mjesec';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'mjeseca';
	            } else {
	                result += 'mjeseci';
	            }
	            return result;
	        case 'yy':
	            if (number === 1) {
	                result += 'godina';
	            } else if (number === 2 || number === 3 || number === 4) {
	                result += 'godine';
	            } else {
	                result += 'godina';
	            }
	            return result;
	    }
	}
	
	var hr = moment.defineLocale('hr', {
	    months : {
	        format: 'siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca'.split('_'),
	        standalone: 'siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac'.split('_')
	    },
	    monthsShort : 'sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.'.split('_'),
	    monthsParseExact: true,
	    weekdays : 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
	    weekdaysShort : 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
	    weekdaysMin : 'ne_po_ut_sr_če_pe_su'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY H:mm',
	        LLLL : 'dddd, D. MMMM YYYY H:mm'
	    },
	    calendar : {
	        sameDay  : '[danas u] LT',
	        nextDay  : '[sutra u] LT',
	        nextWeek : function () {
	            switch (this.day()) {
	                case 0:
	                    return '[u] [nedjelju] [u] LT';
	                case 3:
	                    return '[u] [srijedu] [u] LT';
	                case 6:
	                    return '[u] [subotu] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[u] dddd [u] LT';
	            }
	        },
	        lastDay  : '[jučer u] LT',
	        lastWeek : function () {
	            switch (this.day()) {
	                case 0:
	                case 3:
	                    return '[prošlu] dddd [u] LT';
	                case 6:
	                    return '[prošle] [subote] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[prošli] dddd [u] LT';
	            }
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'za %s',
	        past   : 'prije %s',
	        s      : 'par sekundi',
	        m      : translate,
	        mm     : translate,
	        h      : translate,
	        hh     : translate,
	        d      : 'dan',
	        dd     : translate,
	        M      : 'mjesec',
	        MM     : translate,
	        y      : 'godinu',
	        yy     : translate
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return hr;
	
	})));


/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Hungarian [hu]
	//! author : Adam Brunner : https://github.com/adambrunner
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var weekEndings = 'vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton'.split(' ');
	function translate(number, withoutSuffix, key, isFuture) {
	    var num = number,
	        suffix;
	    switch (key) {
	        case 's':
	            return (isFuture || withoutSuffix) ? 'néhány másodperc' : 'néhány másodperce';
	        case 'm':
	            return 'egy' + (isFuture || withoutSuffix ? ' perc' : ' perce');
	        case 'mm':
	            return num + (isFuture || withoutSuffix ? ' perc' : ' perce');
	        case 'h':
	            return 'egy' + (isFuture || withoutSuffix ? ' óra' : ' órája');
	        case 'hh':
	            return num + (isFuture || withoutSuffix ? ' óra' : ' órája');
	        case 'd':
	            return 'egy' + (isFuture || withoutSuffix ? ' nap' : ' napja');
	        case 'dd':
	            return num + (isFuture || withoutSuffix ? ' nap' : ' napja');
	        case 'M':
	            return 'egy' + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
	        case 'MM':
	            return num + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
	        case 'y':
	            return 'egy' + (isFuture || withoutSuffix ? ' év' : ' éve');
	        case 'yy':
	            return num + (isFuture || withoutSuffix ? ' év' : ' éve');
	    }
	    return '';
	}
	function week(isFuture) {
	    return (isFuture ? '' : '[múlt] ') + '[' + weekEndings[this.day()] + '] LT[-kor]';
	}
	
	var hu = moment.defineLocale('hu', {
	    months : 'január_február_március_április_május_június_július_augusztus_szeptember_október_november_december'.split('_'),
	    monthsShort : 'jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec'.split('_'),
	    weekdays : 'vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat'.split('_'),
	    weekdaysShort : 'vas_hét_kedd_sze_csüt_pén_szo'.split('_'),
	    weekdaysMin : 'v_h_k_sze_cs_p_szo'.split('_'),
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'YYYY.MM.DD.',
	        LL : 'YYYY. MMMM D.',
	        LLL : 'YYYY. MMMM D. H:mm',
	        LLLL : 'YYYY. MMMM D., dddd H:mm'
	    },
	    meridiemParse: /de|du/i,
	    isPM: function (input) {
	        return input.charAt(1).toLowerCase() === 'u';
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours < 12) {
	            return isLower === true ? 'de' : 'DE';
	        } else {
	            return isLower === true ? 'du' : 'DU';
	        }
	    },
	    calendar : {
	        sameDay : '[ma] LT[-kor]',
	        nextDay : '[holnap] LT[-kor]',
	        nextWeek : function () {
	            return week.call(this, true);
	        },
	        lastDay : '[tegnap] LT[-kor]',
	        lastWeek : function () {
	            return week.call(this, false);
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s múlva',
	        past : '%s',
	        s : translate,
	        m : translate,
	        mm : translate,
	        h : translate,
	        hh : translate,
	        d : translate,
	        dd : translate,
	        M : translate,
	        MM : translate,
	        y : translate,
	        yy : translate
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return hu;
	
	})));


/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Armenian [hy-am]
	//! author : Armendarabyan : https://github.com/armendarabyan
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var hyAm = moment.defineLocale('hy-am', {
	    months : {
	        format: 'հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի'.split('_'),
	        standalone: 'հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր'.split('_')
	    },
	    monthsShort : 'հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ'.split('_'),
	    weekdays : 'կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ'.split('_'),
	    weekdaysShort : 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
	    weekdaysMin : 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY թ.',
	        LLL : 'D MMMM YYYY թ., HH:mm',
	        LLLL : 'dddd, D MMMM YYYY թ., HH:mm'
	    },
	    calendar : {
	        sameDay: '[այսօր] LT',
	        nextDay: '[վաղը] LT',
	        lastDay: '[երեկ] LT',
	        nextWeek: function () {
	            return 'dddd [օրը ժամը] LT';
	        },
	        lastWeek: function () {
	            return '[անցած] dddd [օրը ժամը] LT';
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : '%s հետո',
	        past : '%s առաջ',
	        s : 'մի քանի վայրկյան',
	        m : 'րոպե',
	        mm : '%d րոպե',
	        h : 'ժամ',
	        hh : '%d ժամ',
	        d : 'օր',
	        dd : '%d օր',
	        M : 'ամիս',
	        MM : '%d ամիս',
	        y : 'տարի',
	        yy : '%d տարի'
	    },
	    meridiemParse: /գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,
	    isPM: function (input) {
	        return /^(ցերեկվա|երեկոյան)$/.test(input);
	    },
	    meridiem : function (hour) {
	        if (hour < 4) {
	            return 'գիշերվա';
	        } else if (hour < 12) {
	            return 'առավոտվա';
	        } else if (hour < 17) {
	            return 'ցերեկվա';
	        } else {
	            return 'երեկոյան';
	        }
	    },
	    ordinalParse: /\d{1,2}|\d{1,2}-(ին|րդ)/,
	    ordinal: function (number, period) {
	        switch (period) {
	            case 'DDD':
	            case 'w':
	            case 'W':
	            case 'DDDo':
	                if (number === 1) {
	                    return number + '-ին';
	                }
	                return number + '-րդ';
	            default:
	                return number;
	        }
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return hyAm;
	
	})));


/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Indonesian [id]
	//! author : Mohammad Satrio Utomo : https://github.com/tyok
	//! reference: http://id.wikisource.org/wiki/Pedoman_Umum_Ejaan_Bahasa_Indonesia_yang_Disempurnakan
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var id = moment.defineLocale('id', {
	    months : 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember'.split('_'),
	    monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des'.split('_'),
	    weekdays : 'Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu'.split('_'),
	    weekdaysShort : 'Min_Sen_Sel_Rab_Kam_Jum_Sab'.split('_'),
	    weekdaysMin : 'Mg_Sn_Sl_Rb_Km_Jm_Sb'.split('_'),
	    longDateFormat : {
	        LT : 'HH.mm',
	        LTS : 'HH.mm.ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY [pukul] HH.mm',
	        LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
	    },
	    meridiemParse: /pagi|siang|sore|malam/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'pagi') {
	            return hour;
	        } else if (meridiem === 'siang') {
	            return hour >= 11 ? hour : hour + 12;
	        } else if (meridiem === 'sore' || meridiem === 'malam') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours < 11) {
	            return 'pagi';
	        } else if (hours < 15) {
	            return 'siang';
	        } else if (hours < 19) {
	            return 'sore';
	        } else {
	            return 'malam';
	        }
	    },
	    calendar : {
	        sameDay : '[Hari ini pukul] LT',
	        nextDay : '[Besok pukul] LT',
	        nextWeek : 'dddd [pukul] LT',
	        lastDay : '[Kemarin pukul] LT',
	        lastWeek : 'dddd [lalu pukul] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'dalam %s',
	        past : '%s yang lalu',
	        s : 'beberapa detik',
	        m : 'semenit',
	        mm : '%d menit',
	        h : 'sejam',
	        hh : '%d jam',
	        d : 'sehari',
	        dd : '%d hari',
	        M : 'sebulan',
	        MM : '%d bulan',
	        y : 'setahun',
	        yy : '%d tahun'
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return id;
	
	})));


/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Icelandic [is]
	//! author : Hinrik Örn Sigurðsson : https://github.com/hinrik
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	function plural(n) {
	    if (n % 100 === 11) {
	        return true;
	    } else if (n % 10 === 1) {
	        return false;
	    }
	    return true;
	}
	function translate(number, withoutSuffix, key, isFuture) {
	    var result = number + ' ';
	    switch (key) {
	        case 's':
	            return withoutSuffix || isFuture ? 'nokkrar sekúndur' : 'nokkrum sekúndum';
	        case 'm':
	            return withoutSuffix ? 'mínúta' : 'mínútu';
	        case 'mm':
	            if (plural(number)) {
	                return result + (withoutSuffix || isFuture ? 'mínútur' : 'mínútum');
	            } else if (withoutSuffix) {
	                return result + 'mínúta';
	            }
	            return result + 'mínútu';
	        case 'hh':
	            if (plural(number)) {
	                return result + (withoutSuffix || isFuture ? 'klukkustundir' : 'klukkustundum');
	            }
	            return result + 'klukkustund';
	        case 'd':
	            if (withoutSuffix) {
	                return 'dagur';
	            }
	            return isFuture ? 'dag' : 'degi';
	        case 'dd':
	            if (plural(number)) {
	                if (withoutSuffix) {
	                    return result + 'dagar';
	                }
	                return result + (isFuture ? 'daga' : 'dögum');
	            } else if (withoutSuffix) {
	                return result + 'dagur';
	            }
	            return result + (isFuture ? 'dag' : 'degi');
	        case 'M':
	            if (withoutSuffix) {
	                return 'mánuður';
	            }
	            return isFuture ? 'mánuð' : 'mánuði';
	        case 'MM':
	            if (plural(number)) {
	                if (withoutSuffix) {
	                    return result + 'mánuðir';
	                }
	                return result + (isFuture ? 'mánuði' : 'mánuðum');
	            } else if (withoutSuffix) {
	                return result + 'mánuður';
	            }
	            return result + (isFuture ? 'mánuð' : 'mánuði');
	        case 'y':
	            return withoutSuffix || isFuture ? 'ár' : 'ári';
	        case 'yy':
	            if (plural(number)) {
	                return result + (withoutSuffix || isFuture ? 'ár' : 'árum');
	            }
	            return result + (withoutSuffix || isFuture ? 'ár' : 'ári');
	    }
	}
	
	var is = moment.defineLocale('is', {
	    months : 'janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember'.split('_'),
	    monthsShort : 'jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des'.split('_'),
	    weekdays : 'sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur'.split('_'),
	    weekdaysShort : 'sun_mán_þri_mið_fim_fös_lau'.split('_'),
	    weekdaysMin : 'Su_Má_Þr_Mi_Fi_Fö_La'.split('_'),
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY [kl.] H:mm',
	        LLLL : 'dddd, D. MMMM YYYY [kl.] H:mm'
	    },
	    calendar : {
	        sameDay : '[í dag kl.] LT',
	        nextDay : '[á morgun kl.] LT',
	        nextWeek : 'dddd [kl.] LT',
	        lastDay : '[í gær kl.] LT',
	        lastWeek : '[síðasta] dddd [kl.] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'eftir %s',
	        past : 'fyrir %s síðan',
	        s : translate,
	        m : translate,
	        mm : translate,
	        h : 'klukkustund',
	        hh : translate,
	        d : translate,
	        dd : translate,
	        M : translate,
	        MM : translate,
	        y : translate,
	        yy : translate
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return is;
	
	})));


/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Italian [it]
	//! author : Lorenzo : https://github.com/aliem
	//! author: Mattia Larentis: https://github.com/nostalgiaz
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var it = moment.defineLocale('it', {
	    months : 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split('_'),
	    monthsShort : 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
	    weekdays : 'Domenica_Lunedì_Martedì_Mercoledì_Giovedì_Venerdì_Sabato'.split('_'),
	    weekdaysShort : 'Dom_Lun_Mar_Mer_Gio_Ven_Sab'.split('_'),
	    weekdaysMin : 'Do_Lu_Ma_Me_Gi_Ve_Sa'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[Oggi alle] LT',
	        nextDay: '[Domani alle] LT',
	        nextWeek: 'dddd [alle] LT',
	        lastDay: '[Ieri alle] LT',
	        lastWeek: function () {
	            switch (this.day()) {
	                case 0:
	                    return '[la scorsa] dddd [alle] LT';
	                default:
	                    return '[lo scorso] dddd [alle] LT';
	            }
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : function (s) {
	            return ((/^[0-9].+$/).test(s) ? 'tra' : 'in') + ' ' + s;
	        },
	        past : '%s fa',
	        s : 'alcuni secondi',
	        m : 'un minuto',
	        mm : '%d minuti',
	        h : 'un\'ora',
	        hh : '%d ore',
	        d : 'un giorno',
	        dd : '%d giorni',
	        M : 'un mese',
	        MM : '%d mesi',
	        y : 'un anno',
	        yy : '%d anni'
	    },
	    ordinalParse : /\d{1,2}º/,
	    ordinal: '%dº',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return it;
	
	})));


/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Japanese [ja]
	//! author : LI Long : https://github.com/baryon
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var ja = moment.defineLocale('ja', {
	    months : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	    monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	    weekdays : '日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日'.split('_'),
	    weekdaysShort : '日_月_火_水_木_金_土'.split('_'),
	    weekdaysMin : '日_月_火_水_木_金_土'.split('_'),
	    longDateFormat : {
	        LT : 'Ah時m分',
	        LTS : 'Ah時m分s秒',
	        L : 'YYYY/MM/DD',
	        LL : 'YYYY年M月D日',
	        LLL : 'YYYY年M月D日Ah時m分',
	        LLLL : 'YYYY年M月D日Ah時m分 dddd'
	    },
	    meridiemParse: /午前|午後/i,
	    isPM : function (input) {
	        return input === '午後';
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 12) {
	            return '午前';
	        } else {
	            return '午後';
	        }
	    },
	    calendar : {
	        sameDay : '[今日] LT',
	        nextDay : '[明日] LT',
	        nextWeek : '[来週]dddd LT',
	        lastDay : '[昨日] LT',
	        lastWeek : '[前週]dddd LT',
	        sameElse : 'L'
	    },
	    ordinalParse : /\d{1,2}日/,
	    ordinal : function (number, period) {
	        switch (period) {
	            case 'd':
	            case 'D':
	            case 'DDD':
	                return number + '日';
	            default:
	                return number;
	        }
	    },
	    relativeTime : {
	        future : '%s後',
	        past : '%s前',
	        s : '数秒',
	        m : '1分',
	        mm : '%d分',
	        h : '1時間',
	        hh : '%d時間',
	        d : '1日',
	        dd : '%d日',
	        M : '1ヶ月',
	        MM : '%dヶ月',
	        y : '1年',
	        yy : '%d年'
	    }
	});
	
	return ja;
	
	})));


/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Javanese [jv]
	//! author : Rony Lantip : https://github.com/lantip
	//! reference: http://jv.wikipedia.org/wiki/Basa_Jawa
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var jv = moment.defineLocale('jv', {
	    months : 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember'.split('_'),
	    monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des'.split('_'),
	    weekdays : 'Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu'.split('_'),
	    weekdaysShort : 'Min_Sen_Sel_Reb_Kem_Jem_Sep'.split('_'),
	    weekdaysMin : 'Mg_Sn_Sl_Rb_Km_Jm_Sp'.split('_'),
	    longDateFormat : {
	        LT : 'HH.mm',
	        LTS : 'HH.mm.ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY [pukul] HH.mm',
	        LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
	    },
	    meridiemParse: /enjing|siyang|sonten|ndalu/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'enjing') {
	            return hour;
	        } else if (meridiem === 'siyang') {
	            return hour >= 11 ? hour : hour + 12;
	        } else if (meridiem === 'sonten' || meridiem === 'ndalu') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours < 11) {
	            return 'enjing';
	        } else if (hours < 15) {
	            return 'siyang';
	        } else if (hours < 19) {
	            return 'sonten';
	        } else {
	            return 'ndalu';
	        }
	    },
	    calendar : {
	        sameDay : '[Dinten puniko pukul] LT',
	        nextDay : '[Mbenjang pukul] LT',
	        nextWeek : 'dddd [pukul] LT',
	        lastDay : '[Kala wingi pukul] LT',
	        lastWeek : 'dddd [kepengker pukul] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'wonten ing %s',
	        past : '%s ingkang kepengker',
	        s : 'sawetawis detik',
	        m : 'setunggal menit',
	        mm : '%d menit',
	        h : 'setunggal jam',
	        hh : '%d jam',
	        d : 'sedinten',
	        dd : '%d dinten',
	        M : 'sewulan',
	        MM : '%d wulan',
	        y : 'setaun',
	        yy : '%d taun'
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return jv;
	
	})));


/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Georgian [ka]
	//! author : Irakli Janiashvili : https://github.com/irakli-janiashvili
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var ka = moment.defineLocale('ka', {
	    months : {
	        standalone: 'იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი'.split('_'),
	        format: 'იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს'.split('_')
	    },
	    monthsShort : 'იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ'.split('_'),
	    weekdays : {
	        standalone: 'კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი'.split('_'),
	        format: 'კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს'.split('_'),
	        isFormat: /(წინა|შემდეგ)/
	    },
	    weekdaysShort : 'კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ'.split('_'),
	    weekdaysMin : 'კვ_ორ_სა_ოთ_ხუ_პა_შა'.split('_'),
	    longDateFormat : {
	        LT : 'h:mm A',
	        LTS : 'h:mm:ss A',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY h:mm A',
	        LLLL : 'dddd, D MMMM YYYY h:mm A'
	    },
	    calendar : {
	        sameDay : '[დღეს] LT[-ზე]',
	        nextDay : '[ხვალ] LT[-ზე]',
	        lastDay : '[გუშინ] LT[-ზე]',
	        nextWeek : '[შემდეგ] dddd LT[-ზე]',
	        lastWeek : '[წინა] dddd LT-ზე',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : function (s) {
	            return (/(წამი|წუთი|საათი|წელი)/).test(s) ?
	                s.replace(/ი$/, 'ში') :
	                s + 'ში';
	        },
	        past : function (s) {
	            if ((/(წამი|წუთი|საათი|დღე|თვე)/).test(s)) {
	                return s.replace(/(ი|ე)$/, 'ის წინ');
	            }
	            if ((/წელი/).test(s)) {
	                return s.replace(/წელი$/, 'წლის წინ');
	            }
	        },
	        s : 'რამდენიმე წამი',
	        m : 'წუთი',
	        mm : '%d წუთი',
	        h : 'საათი',
	        hh : '%d საათი',
	        d : 'დღე',
	        dd : '%d დღე',
	        M : 'თვე',
	        MM : '%d თვე',
	        y : 'წელი',
	        yy : '%d წელი'
	    },
	    ordinalParse: /0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,
	    ordinal : function (number) {
	        if (number === 0) {
	            return number;
	        }
	        if (number === 1) {
	            return number + '-ლი';
	        }
	        if ((number < 20) || (number <= 100 && (number % 20 === 0)) || (number % 100 === 0)) {
	            return 'მე-' + number;
	        }
	        return number + '-ე';
	    },
	    week : {
	        dow : 1,
	        doy : 7
	    }
	});
	
	return ka;
	
	})));


/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Kazakh [kk]
	//! authors : Nurlan Rakhimzhanov : https://github.com/nurlan
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var suffixes = {
	    0: '-ші',
	    1: '-ші',
	    2: '-ші',
	    3: '-ші',
	    4: '-ші',
	    5: '-ші',
	    6: '-шы',
	    7: '-ші',
	    8: '-ші',
	    9: '-шы',
	    10: '-шы',
	    20: '-шы',
	    30: '-шы',
	    40: '-шы',
	    50: '-ші',
	    60: '-шы',
	    70: '-ші',
	    80: '-ші',
	    90: '-шы',
	    100: '-ші'
	};
	
	var kk = moment.defineLocale('kk', {
	    months : 'қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан'.split('_'),
	    monthsShort : 'қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел'.split('_'),
	    weekdays : 'жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі'.split('_'),
	    weekdaysShort : 'жек_дүй_сей_сәр_бей_жұм_сен'.split('_'),
	    weekdaysMin : 'жк_дй_сй_ср_бй_жм_сн'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[Бүгін сағат] LT',
	        nextDay : '[Ертең сағат] LT',
	        nextWeek : 'dddd [сағат] LT',
	        lastDay : '[Кеше сағат] LT',
	        lastWeek : '[Өткен аптаның] dddd [сағат] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s ішінде',
	        past : '%s бұрын',
	        s : 'бірнеше секунд',
	        m : 'бір минут',
	        mm : '%d минут',
	        h : 'бір сағат',
	        hh : '%d сағат',
	        d : 'бір күн',
	        dd : '%d күн',
	        M : 'бір ай',
	        MM : '%d ай',
	        y : 'бір жыл',
	        yy : '%d жыл'
	    },
	    ordinalParse: /\d{1,2}-(ші|шы)/,
	    ordinal : function (number) {
	        var a = number % 10,
	            b = number >= 100 ? 100 : null;
	        return number + (suffixes[number] || suffixes[a] || suffixes[b]);
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return kk;
	
	})));


/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Cambodian [km]
	//! author : Kruy Vanna : https://github.com/kruyvanna
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var km = moment.defineLocale('km', {
	    months: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),
	    monthsShort: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),
	    weekdays: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
	    weekdaysShort: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
	    weekdaysMin: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
	    longDateFormat: {
	        LT: 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L: 'DD/MM/YYYY',
	        LL: 'D MMMM YYYY',
	        LLL: 'D MMMM YYYY HH:mm',
	        LLLL: 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar: {
	        sameDay: '[ថ្ងៃនេះ ម៉ោង] LT',
	        nextDay: '[ស្អែក ម៉ោង] LT',
	        nextWeek: 'dddd [ម៉ោង] LT',
	        lastDay: '[ម្សិលមិញ ម៉ោង] LT',
	        lastWeek: 'dddd [សប្តាហ៍មុន] [ម៉ោង] LT',
	        sameElse: 'L'
	    },
	    relativeTime: {
	        future: '%sទៀត',
	        past: '%sមុន',
	        s: 'ប៉ុន្មានវិនាទី',
	        m: 'មួយនាទី',
	        mm: '%d នាទី',
	        h: 'មួយម៉ោង',
	        hh: '%d ម៉ោង',
	        d: 'មួយថ្ងៃ',
	        dd: '%d ថ្ងៃ',
	        M: 'មួយខែ',
	        MM: '%d ខែ',
	        y: 'មួយឆ្នាំ',
	        yy: '%d ឆ្នាំ'
	    },
	    week: {
	        dow: 1, // Monday is the first day of the week.
	        doy: 4 // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return km;
	
	})));


/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Korean [ko]
	//! author : Kyungwook, Park : https://github.com/kyungw00k
	//! author : Jeeeyul Lee <jeeeyul@gmail.com>
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var ko = moment.defineLocale('ko', {
	    months : '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
	    monthsShort : '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
	    weekdays : '일요일_월요일_화요일_수요일_목요일_금요일_토요일'.split('_'),
	    weekdaysShort : '일_월_화_수_목_금_토'.split('_'),
	    weekdaysMin : '일_월_화_수_목_금_토'.split('_'),
	    longDateFormat : {
	        LT : 'A h시 m분',
	        LTS : 'A h시 m분 s초',
	        L : 'YYYY.MM.DD',
	        LL : 'YYYY년 MMMM D일',
	        LLL : 'YYYY년 MMMM D일 A h시 m분',
	        LLLL : 'YYYY년 MMMM D일 dddd A h시 m분'
	    },
	    calendar : {
	        sameDay : '오늘 LT',
	        nextDay : '내일 LT',
	        nextWeek : 'dddd LT',
	        lastDay : '어제 LT',
	        lastWeek : '지난주 dddd LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s 후',
	        past : '%s 전',
	        s : '몇 초',
	        ss : '%d초',
	        m : '일분',
	        mm : '%d분',
	        h : '한 시간',
	        hh : '%d시간',
	        d : '하루',
	        dd : '%d일',
	        M : '한 달',
	        MM : '%d달',
	        y : '일 년',
	        yy : '%d년'
	    },
	    ordinalParse : /\d{1,2}일/,
	    ordinal : '%d일',
	    meridiemParse : /오전|오후/,
	    isPM : function (token) {
	        return token === '오후';
	    },
	    meridiem : function (hour, minute, isUpper) {
	        return hour < 12 ? '오전' : '오후';
	    }
	});
	
	return ko;
	
	})));


/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Kyrgyz [ky]
	//! author : Chyngyz Arystan uulu : https://github.com/chyngyz
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	
	var suffixes = {
	    0: '-чү',
	    1: '-чи',
	    2: '-чи',
	    3: '-чү',
	    4: '-чү',
	    5: '-чи',
	    6: '-чы',
	    7: '-чи',
	    8: '-чи',
	    9: '-чу',
	    10: '-чу',
	    20: '-чы',
	    30: '-чу',
	    40: '-чы',
	    50: '-чү',
	    60: '-чы',
	    70: '-чи',
	    80: '-чи',
	    90: '-чу',
	    100: '-чү'
	};
	
	var ky = moment.defineLocale('ky', {
	    months : 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_'),
	    monthsShort : 'янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек'.split('_'),
	    weekdays : 'Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби'.split('_'),
	    weekdaysShort : 'Жек_Дүй_Шей_Шар_Бей_Жум_Ише'.split('_'),
	    weekdaysMin : 'Жк_Дй_Шй_Шр_Бй_Жм_Иш'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[Бүгүн саат] LT',
	        nextDay : '[Эртең саат] LT',
	        nextWeek : 'dddd [саат] LT',
	        lastDay : '[Кече саат] LT',
	        lastWeek : '[Өткен аптанын] dddd [күнү] [саат] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s ичинде',
	        past : '%s мурун',
	        s : 'бирнече секунд',
	        m : 'бир мүнөт',
	        mm : '%d мүнөт',
	        h : 'бир саат',
	        hh : '%d саат',
	        d : 'бир күн',
	        dd : '%d күн',
	        M : 'бир ай',
	        MM : '%d ай',
	        y : 'бир жыл',
	        yy : '%d жыл'
	    },
	    ordinalParse: /\d{1,2}-(чи|чы|чү|чу)/,
	    ordinal : function (number) {
	        var a = number % 10,
	            b = number >= 100 ? 100 : null;
	        return number + (suffixes[number] || suffixes[a] || suffixes[b]);
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return ky;
	
	})));


/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Luxembourgish [lb]
	//! author : mweimerskirch : https://github.com/mweimerskirch
	//! author : David Raison : https://github.com/kwisatz
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	function processRelativeTime(number, withoutSuffix, key, isFuture) {
	    var format = {
	        'm': ['eng Minutt', 'enger Minutt'],
	        'h': ['eng Stonn', 'enger Stonn'],
	        'd': ['een Dag', 'engem Dag'],
	        'M': ['ee Mount', 'engem Mount'],
	        'y': ['ee Joer', 'engem Joer']
	    };
	    return withoutSuffix ? format[key][0] : format[key][1];
	}
	function processFutureTime(string) {
	    var number = string.substr(0, string.indexOf(' '));
	    if (eifelerRegelAppliesToNumber(number)) {
	        return 'a ' + string;
	    }
	    return 'an ' + string;
	}
	function processPastTime(string) {
	    var number = string.substr(0, string.indexOf(' '));
	    if (eifelerRegelAppliesToNumber(number)) {
	        return 'viru ' + string;
	    }
	    return 'virun ' + string;
	}
	/**
	 * Returns true if the word before the given number loses the '-n' ending.
	 * e.g. 'an 10 Deeg' but 'a 5 Deeg'
	 *
	 * @param number {integer}
	 * @returns {boolean}
	 */
	function eifelerRegelAppliesToNumber(number) {
	    number = parseInt(number, 10);
	    if (isNaN(number)) {
	        return false;
	    }
	    if (number < 0) {
	        // Negative Number --> always true
	        return true;
	    } else if (number < 10) {
	        // Only 1 digit
	        if (4 <= number && number <= 7) {
	            return true;
	        }
	        return false;
	    } else if (number < 100) {
	        // 2 digits
	        var lastDigit = number % 10, firstDigit = number / 10;
	        if (lastDigit === 0) {
	            return eifelerRegelAppliesToNumber(firstDigit);
	        }
	        return eifelerRegelAppliesToNumber(lastDigit);
	    } else if (number < 10000) {
	        // 3 or 4 digits --> recursively check first digit
	        while (number >= 10) {
	            number = number / 10;
	        }
	        return eifelerRegelAppliesToNumber(number);
	    } else {
	        // Anything larger than 4 digits: recursively check first n-3 digits
	        number = number / 1000;
	        return eifelerRegelAppliesToNumber(number);
	    }
	}
	
	var lb = moment.defineLocale('lb', {
	    months: 'Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
	    monthsShort: 'Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
	    monthsParseExact : true,
	    weekdays: 'Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg'.split('_'),
	    weekdaysShort: 'So._Mé._Dë._Më._Do._Fr._Sa.'.split('_'),
	    weekdaysMin: 'So_Mé_Dë_Më_Do_Fr_Sa'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat: {
	        LT: 'H:mm [Auer]',
	        LTS: 'H:mm:ss [Auer]',
	        L: 'DD.MM.YYYY',
	        LL: 'D. MMMM YYYY',
	        LLL: 'D. MMMM YYYY H:mm [Auer]',
	        LLLL: 'dddd, D. MMMM YYYY H:mm [Auer]'
	    },
	    calendar: {
	        sameDay: '[Haut um] LT',
	        sameElse: 'L',
	        nextDay: '[Muer um] LT',
	        nextWeek: 'dddd [um] LT',
	        lastDay: '[Gëschter um] LT',
	        lastWeek: function () {
	            // Different date string for 'Dënschdeg' (Tuesday) and 'Donneschdeg' (Thursday) due to phonological rule
	            switch (this.day()) {
	                case 2:
	                case 4:
	                    return '[Leschten] dddd [um] LT';
	                default:
	                    return '[Leschte] dddd [um] LT';
	            }
	        }
	    },
	    relativeTime : {
	        future : processFutureTime,
	        past : processPastTime,
	        s : 'e puer Sekonnen',
	        m : processRelativeTime,
	        mm : '%d Minutten',
	        h : processRelativeTime,
	        hh : '%d Stonnen',
	        d : processRelativeTime,
	        dd : '%d Deeg',
	        M : processRelativeTime,
	        MM : '%d Méint',
	        y : processRelativeTime,
	        yy : '%d Joer'
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal: '%d.',
	    week: {
	        dow: 1, // Monday is the first day of the week.
	        doy: 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return lb;
	
	})));


/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Lao [lo]
	//! author : Ryan Hart : https://github.com/ryanhart2
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var lo = moment.defineLocale('lo', {
	    months : 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),
	    monthsShort : 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),
	    weekdays : 'ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
	    weekdaysShort : 'ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
	    weekdaysMin : 'ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'ວັນdddd D MMMM YYYY HH:mm'
	    },
	    meridiemParse: /ຕອນເຊົ້າ|ຕອນແລງ/,
	    isPM: function (input) {
	        return input === 'ຕອນແລງ';
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 12) {
	            return 'ຕອນເຊົ້າ';
	        } else {
	            return 'ຕອນແລງ';
	        }
	    },
	    calendar : {
	        sameDay : '[ມື້ນີ້ເວລາ] LT',
	        nextDay : '[ມື້ອື່ນເວລາ] LT',
	        nextWeek : '[ວັນ]dddd[ໜ້າເວລາ] LT',
	        lastDay : '[ມື້ວານນີ້ເວລາ] LT',
	        lastWeek : '[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'ອີກ %s',
	        past : '%sຜ່ານມາ',
	        s : 'ບໍ່ເທົ່າໃດວິນາທີ',
	        m : '1 ນາທີ',
	        mm : '%d ນາທີ',
	        h : '1 ຊົ່ວໂມງ',
	        hh : '%d ຊົ່ວໂມງ',
	        d : '1 ມື້',
	        dd : '%d ມື້',
	        M : '1 ເດືອນ',
	        MM : '%d ເດືອນ',
	        y : '1 ປີ',
	        yy : '%d ປີ'
	    },
	    ordinalParse: /(ທີ່)\d{1,2}/,
	    ordinal : function (number) {
	        return 'ທີ່' + number;
	    }
	});
	
	return lo;
	
	})));


/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Lithuanian [lt]
	//! author : Mindaugas Mozūras : https://github.com/mmozuras
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var units = {
	    'm' : 'minutė_minutės_minutę',
	    'mm': 'minutės_minučių_minutes',
	    'h' : 'valanda_valandos_valandą',
	    'hh': 'valandos_valandų_valandas',
	    'd' : 'diena_dienos_dieną',
	    'dd': 'dienos_dienų_dienas',
	    'M' : 'mėnuo_mėnesio_mėnesį',
	    'MM': 'mėnesiai_mėnesių_mėnesius',
	    'y' : 'metai_metų_metus',
	    'yy': 'metai_metų_metus'
	};
	function translateSeconds(number, withoutSuffix, key, isFuture) {
	    if (withoutSuffix) {
	        return 'kelios sekundės';
	    } else {
	        return isFuture ? 'kelių sekundžių' : 'kelias sekundes';
	    }
	}
	function translateSingular(number, withoutSuffix, key, isFuture) {
	    return withoutSuffix ? forms(key)[0] : (isFuture ? forms(key)[1] : forms(key)[2]);
	}
	function special(number) {
	    return number % 10 === 0 || (number > 10 && number < 20);
	}
	function forms(key) {
	    return units[key].split('_');
	}
	function translate(number, withoutSuffix, key, isFuture) {
	    var result = number + ' ';
	    if (number === 1) {
	        return result + translateSingular(number, withoutSuffix, key[0], isFuture);
	    } else if (withoutSuffix) {
	        return result + (special(number) ? forms(key)[1] : forms(key)[0]);
	    } else {
	        if (isFuture) {
	            return result + forms(key)[1];
	        } else {
	            return result + (special(number) ? forms(key)[1] : forms(key)[2]);
	        }
	    }
	}
	var lt = moment.defineLocale('lt', {
	    months : {
	        format: 'sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio'.split('_'),
	        standalone: 'sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis'.split('_'),
	        isFormat: /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/
	    },
	    monthsShort : 'sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd'.split('_'),
	    weekdays : {
	        format: 'sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį'.split('_'),
	        standalone: 'sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis'.split('_'),
	        isFormat: /dddd HH:mm/
	    },
	    weekdaysShort : 'Sek_Pir_Ant_Tre_Ket_Pen_Šeš'.split('_'),
	    weekdaysMin : 'S_P_A_T_K_Pn_Š'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'YYYY-MM-DD',
	        LL : 'YYYY [m.] MMMM D [d.]',
	        LLL : 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
	        LLLL : 'YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]',
	        l : 'YYYY-MM-DD',
	        ll : 'YYYY [m.] MMMM D [d.]',
	        lll : 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
	        llll : 'YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]'
	    },
	    calendar : {
	        sameDay : '[Šiandien] LT',
	        nextDay : '[Rytoj] LT',
	        nextWeek : 'dddd LT',
	        lastDay : '[Vakar] LT',
	        lastWeek : '[Praėjusį] dddd LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'po %s',
	        past : 'prieš %s',
	        s : translateSeconds,
	        m : translateSingular,
	        mm : translate,
	        h : translateSingular,
	        hh : translate,
	        d : translateSingular,
	        dd : translate,
	        M : translateSingular,
	        MM : translate,
	        y : translateSingular,
	        yy : translate
	    },
	    ordinalParse: /\d{1,2}-oji/,
	    ordinal : function (number) {
	        return number + '-oji';
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return lt;
	
	})));


/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Latvian [lv]
	//! author : Kristaps Karlsons : https://github.com/skakri
	//! author : Jānis Elmeris : https://github.com/JanisE
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var units = {
	    'm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
	    'mm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
	    'h': 'stundas_stundām_stunda_stundas'.split('_'),
	    'hh': 'stundas_stundām_stunda_stundas'.split('_'),
	    'd': 'dienas_dienām_diena_dienas'.split('_'),
	    'dd': 'dienas_dienām_diena_dienas'.split('_'),
	    'M': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
	    'MM': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
	    'y': 'gada_gadiem_gads_gadi'.split('_'),
	    'yy': 'gada_gadiem_gads_gadi'.split('_')
	};
	/**
	 * @param withoutSuffix boolean true = a length of time; false = before/after a period of time.
	 */
	function format(forms, number, withoutSuffix) {
	    if (withoutSuffix) {
	        // E.g. "21 minūte", "3 minūtes".
	        return number % 10 === 1 && number % 100 !== 11 ? forms[2] : forms[3];
	    } else {
	        // E.g. "21 minūtes" as in "pēc 21 minūtes".
	        // E.g. "3 minūtēm" as in "pēc 3 minūtēm".
	        return number % 10 === 1 && number % 100 !== 11 ? forms[0] : forms[1];
	    }
	}
	function relativeTimeWithPlural(number, withoutSuffix, key) {
	    return number + ' ' + format(units[key], number, withoutSuffix);
	}
	function relativeTimeWithSingular(number, withoutSuffix, key) {
	    return format(units[key], number, withoutSuffix);
	}
	function relativeSeconds(number, withoutSuffix) {
	    return withoutSuffix ? 'dažas sekundes' : 'dažām sekundēm';
	}
	
	var lv = moment.defineLocale('lv', {
	    months : 'janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris'.split('_'),
	    monthsShort : 'jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec'.split('_'),
	    weekdays : 'svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena'.split('_'),
	    weekdaysShort : 'Sv_P_O_T_C_Pk_S'.split('_'),
	    weekdaysMin : 'Sv_P_O_T_C_Pk_S'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY.',
	        LL : 'YYYY. [gada] D. MMMM',
	        LLL : 'YYYY. [gada] D. MMMM, HH:mm',
	        LLLL : 'YYYY. [gada] D. MMMM, dddd, HH:mm'
	    },
	    calendar : {
	        sameDay : '[Šodien pulksten] LT',
	        nextDay : '[Rīt pulksten] LT',
	        nextWeek : 'dddd [pulksten] LT',
	        lastDay : '[Vakar pulksten] LT',
	        lastWeek : '[Pagājušā] dddd [pulksten] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'pēc %s',
	        past : 'pirms %s',
	        s : relativeSeconds,
	        m : relativeTimeWithSingular,
	        mm : relativeTimeWithPlural,
	        h : relativeTimeWithSingular,
	        hh : relativeTimeWithPlural,
	        d : relativeTimeWithSingular,
	        dd : relativeTimeWithPlural,
	        M : relativeTimeWithSingular,
	        MM : relativeTimeWithPlural,
	        y : relativeTimeWithSingular,
	        yy : relativeTimeWithPlural
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return lv;
	
	})));


/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Montenegrin [me]
	//! author : Miodrag Nikač <miodrag@restartit.me> : https://github.com/miodragnikac
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var translator = {
	    words: { //Different grammatical cases
	        m: ['jedan minut', 'jednog minuta'],
	        mm: ['minut', 'minuta', 'minuta'],
	        h: ['jedan sat', 'jednog sata'],
	        hh: ['sat', 'sata', 'sati'],
	        dd: ['dan', 'dana', 'dana'],
	        MM: ['mjesec', 'mjeseca', 'mjeseci'],
	        yy: ['godina', 'godine', 'godina']
	    },
	    correctGrammaticalCase: function (number, wordKey) {
	        return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
	    },
	    translate: function (number, withoutSuffix, key) {
	        var wordKey = translator.words[key];
	        if (key.length === 1) {
	            return withoutSuffix ? wordKey[0] : wordKey[1];
	        } else {
	            return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
	        }
	    }
	};
	
	var me = moment.defineLocale('me', {
	    months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),
	    monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
	    monthsParseExact : true,
	    weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
	    weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
	    weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat: {
	        LT: 'H:mm',
	        LTS : 'H:mm:ss',
	        L: 'DD.MM.YYYY',
	        LL: 'D. MMMM YYYY',
	        LLL: 'D. MMMM YYYY H:mm',
	        LLLL: 'dddd, D. MMMM YYYY H:mm'
	    },
	    calendar: {
	        sameDay: '[danas u] LT',
	        nextDay: '[sjutra u] LT',
	
	        nextWeek: function () {
	            switch (this.day()) {
	                case 0:
	                    return '[u] [nedjelju] [u] LT';
	                case 3:
	                    return '[u] [srijedu] [u] LT';
	                case 6:
	                    return '[u] [subotu] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[u] dddd [u] LT';
	            }
	        },
	        lastDay  : '[juče u] LT',
	        lastWeek : function () {
	            var lastWeekDays = [
	                '[prošle] [nedjelje] [u] LT',
	                '[prošlog] [ponedjeljka] [u] LT',
	                '[prošlog] [utorka] [u] LT',
	                '[prošle] [srijede] [u] LT',
	                '[prošlog] [četvrtka] [u] LT',
	                '[prošlog] [petka] [u] LT',
	                '[prošle] [subote] [u] LT'
	            ];
	            return lastWeekDays[this.day()];
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'za %s',
	        past   : 'prije %s',
	        s      : 'nekoliko sekundi',
	        m      : translator.translate,
	        mm     : translator.translate,
	        h      : translator.translate,
	        hh     : translator.translate,
	        d      : 'dan',
	        dd     : translator.translate,
	        M      : 'mjesec',
	        MM     : translator.translate,
	        y      : 'godinu',
	        yy     : translator.translate
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return me;
	
	})));


/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Maori [mi]
	//! author : John Corrigan <robbiecloset@gmail.com> : https://github.com/johnideal
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var mi = moment.defineLocale('mi', {
	    months: 'Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea'.split('_'),
	    monthsShort: 'Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki'.split('_'),
	    monthsRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
	    monthsStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
	    monthsShortRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
	    monthsShortStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,
	    weekdays: 'Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei'.split('_'),
	    weekdaysShort: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
	    weekdaysMin: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
	    longDateFormat: {
	        LT: 'HH:mm',
	        LTS: 'HH:mm:ss',
	        L: 'DD/MM/YYYY',
	        LL: 'D MMMM YYYY',
	        LLL: 'D MMMM YYYY [i] HH:mm',
	        LLLL: 'dddd, D MMMM YYYY [i] HH:mm'
	    },
	    calendar: {
	        sameDay: '[i teie mahana, i] LT',
	        nextDay: '[apopo i] LT',
	        nextWeek: 'dddd [i] LT',
	        lastDay: '[inanahi i] LT',
	        lastWeek: 'dddd [whakamutunga i] LT',
	        sameElse: 'L'
	    },
	    relativeTime: {
	        future: 'i roto i %s',
	        past: '%s i mua',
	        s: 'te hēkona ruarua',
	        m: 'he meneti',
	        mm: '%d meneti',
	        h: 'te haora',
	        hh: '%d haora',
	        d: 'he ra',
	        dd: '%d ra',
	        M: 'he marama',
	        MM: '%d marama',
	        y: 'he tau',
	        yy: '%d tau'
	    },
	    ordinalParse: /\d{1,2}º/,
	    ordinal: '%dº',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return mi;
	
	})));


/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Macedonian [mk]
	//! author : Borislav Mickov : https://github.com/B0k0
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var mk = moment.defineLocale('mk', {
	    months : 'јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември'.split('_'),
	    monthsShort : 'јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек'.split('_'),
	    weekdays : 'недела_понеделник_вторник_среда_четврток_петок_сабота'.split('_'),
	    weekdaysShort : 'нед_пон_вто_сре_чет_пет_саб'.split('_'),
	    weekdaysMin : 'нe_пo_вт_ср_че_пе_сa'.split('_'),
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'D.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY H:mm',
	        LLLL : 'dddd, D MMMM YYYY H:mm'
	    },
	    calendar : {
	        sameDay : '[Денес во] LT',
	        nextDay : '[Утре во] LT',
	        nextWeek : '[Во] dddd [во] LT',
	        lastDay : '[Вчера во] LT',
	        lastWeek : function () {
	            switch (this.day()) {
	                case 0:
	                case 3:
	                case 6:
	                    return '[Изминатата] dddd [во] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[Изминатиот] dddd [во] LT';
	            }
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'после %s',
	        past : 'пред %s',
	        s : 'неколку секунди',
	        m : 'минута',
	        mm : '%d минути',
	        h : 'час',
	        hh : '%d часа',
	        d : 'ден',
	        dd : '%d дена',
	        M : 'месец',
	        MM : '%d месеци',
	        y : 'година',
	        yy : '%d години'
	    },
	    ordinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
	    ordinal : function (number) {
	        var lastDigit = number % 10,
	            last2Digits = number % 100;
	        if (number === 0) {
	            return number + '-ев';
	        } else if (last2Digits === 0) {
	            return number + '-ен';
	        } else if (last2Digits > 10 && last2Digits < 20) {
	            return number + '-ти';
	        } else if (lastDigit === 1) {
	            return number + '-ви';
	        } else if (lastDigit === 2) {
	            return number + '-ри';
	        } else if (lastDigit === 7 || lastDigit === 8) {
	            return number + '-ми';
	        } else {
	            return number + '-ти';
	        }
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return mk;
	
	})));


/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Malayalam [ml]
	//! author : Floyd Pink : https://github.com/floydpink
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var ml = moment.defineLocale('ml', {
	    months : 'ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ'.split('_'),
	    monthsShort : 'ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച'.split('_'),
	    weekdaysShort : 'ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി'.split('_'),
	    weekdaysMin : 'ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ'.split('_'),
	    longDateFormat : {
	        LT : 'A h:mm -നു',
	        LTS : 'A h:mm:ss -നു',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, A h:mm -നു',
	        LLLL : 'dddd, D MMMM YYYY, A h:mm -നു'
	    },
	    calendar : {
	        sameDay : '[ഇന്ന്] LT',
	        nextDay : '[നാളെ] LT',
	        nextWeek : 'dddd, LT',
	        lastDay : '[ഇന്നലെ] LT',
	        lastWeek : '[കഴിഞ്ഞ] dddd, LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s കഴിഞ്ഞ്',
	        past : '%s മുൻപ്',
	        s : 'അൽപ നിമിഷങ്ങൾ',
	        m : 'ഒരു മിനിറ്റ്',
	        mm : '%d മിനിറ്റ്',
	        h : 'ഒരു മണിക്കൂർ',
	        hh : '%d മണിക്കൂർ',
	        d : 'ഒരു ദിവസം',
	        dd : '%d ദിവസം',
	        M : 'ഒരു മാസം',
	        MM : '%d മാസം',
	        y : 'ഒരു വർഷം',
	        yy : '%d വർഷം'
	    },
	    meridiemParse: /രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if ((meridiem === 'രാത്രി' && hour >= 4) ||
	                meridiem === 'ഉച്ച കഴിഞ്ഞ്' ||
	                meridiem === 'വൈകുന്നേരം') {
	            return hour + 12;
	        } else {
	            return hour;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'രാത്രി';
	        } else if (hour < 12) {
	            return 'രാവിലെ';
	        } else if (hour < 17) {
	            return 'ഉച്ച കഴിഞ്ഞ്';
	        } else if (hour < 20) {
	            return 'വൈകുന്നേരം';
	        } else {
	            return 'രാത്രി';
	        }
	    }
	});
	
	return ml;
	
	})));


/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Marathi [mr]
	//! author : Harshad Kale : https://github.com/kalehv
	//! author : Vivek Athalye : https://github.com/vnathalye
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var symbolMap = {
	    '1': '१',
	    '2': '२',
	    '3': '३',
	    '4': '४',
	    '5': '५',
	    '6': '६',
	    '7': '७',
	    '8': '८',
	    '9': '९',
	    '0': '०'
	};
	var numberMap = {
	    '१': '1',
	    '२': '2',
	    '३': '3',
	    '४': '4',
	    '५': '5',
	    '६': '6',
	    '७': '7',
	    '८': '8',
	    '९': '9',
	    '०': '0'
	};
	
	function relativeTimeMr(number, withoutSuffix, string, isFuture)
	{
	    var output = '';
	    if (withoutSuffix) {
	        switch (string) {
	            case 's': output = 'काही सेकंद'; break;
	            case 'm': output = 'एक मिनिट'; break;
	            case 'mm': output = '%d मिनिटे'; break;
	            case 'h': output = 'एक तास'; break;
	            case 'hh': output = '%d तास'; break;
	            case 'd': output = 'एक दिवस'; break;
	            case 'dd': output = '%d दिवस'; break;
	            case 'M': output = 'एक महिना'; break;
	            case 'MM': output = '%d महिने'; break;
	            case 'y': output = 'एक वर्ष'; break;
	            case 'yy': output = '%d वर्षे'; break;
	        }
	    }
	    else {
	        switch (string) {
	            case 's': output = 'काही सेकंदां'; break;
	            case 'm': output = 'एका मिनिटा'; break;
	            case 'mm': output = '%d मिनिटां'; break;
	            case 'h': output = 'एका तासा'; break;
	            case 'hh': output = '%d तासां'; break;
	            case 'd': output = 'एका दिवसा'; break;
	            case 'dd': output = '%d दिवसां'; break;
	            case 'M': output = 'एका महिन्या'; break;
	            case 'MM': output = '%d महिन्यां'; break;
	            case 'y': output = 'एका वर्षा'; break;
	            case 'yy': output = '%d वर्षां'; break;
	        }
	    }
	    return output.replace(/%d/i, number);
	}
	
	var mr = moment.defineLocale('mr', {
	    months : 'जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split('_'),
	    monthsShort: 'जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
	    weekdaysShort : 'रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि'.split('_'),
	    weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split('_'),
	    longDateFormat : {
	        LT : 'A h:mm वाजता',
	        LTS : 'A h:mm:ss वाजता',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, A h:mm वाजता',
	        LLLL : 'dddd, D MMMM YYYY, A h:mm वाजता'
	    },
	    calendar : {
	        sameDay : '[आज] LT',
	        nextDay : '[उद्या] LT',
	        nextWeek : 'dddd, LT',
	        lastDay : '[काल] LT',
	        lastWeek: '[मागील] dddd, LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future: '%sमध्ये',
	        past: '%sपूर्वी',
	        s: relativeTimeMr,
	        m: relativeTimeMr,
	        mm: relativeTimeMr,
	        h: relativeTimeMr,
	        hh: relativeTimeMr,
	        d: relativeTimeMr,
	        dd: relativeTimeMr,
	        M: relativeTimeMr,
	        MM: relativeTimeMr,
	        y: relativeTimeMr,
	        yy: relativeTimeMr
	    },
	    preparse: function (string) {
	        return string.replace(/[१२३४५६७८९०]/g, function (match) {
	            return numberMap[match];
	        });
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        });
	    },
	    meridiemParse: /रात्री|सकाळी|दुपारी|सायंकाळी/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'रात्री') {
	            return hour < 4 ? hour : hour + 12;
	        } else if (meridiem === 'सकाळी') {
	            return hour;
	        } else if (meridiem === 'दुपारी') {
	            return hour >= 10 ? hour : hour + 12;
	        } else if (meridiem === 'सायंकाळी') {
	            return hour + 12;
	        }
	    },
	    meridiem: function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'रात्री';
	        } else if (hour < 10) {
	            return 'सकाळी';
	        } else if (hour < 17) {
	            return 'दुपारी';
	        } else if (hour < 20) {
	            return 'सायंकाळी';
	        } else {
	            return 'रात्री';
	        }
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return mr;
	
	})));


/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Malay [ms-my]
	//! note : DEPRECATED, the correct one is [ms]
	//! author : Weldan Jamili : https://github.com/weldan
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var msMy = moment.defineLocale('ms-my', {
	    months : 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
	    monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
	    weekdays : 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
	    weekdaysShort : 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
	    weekdaysMin : 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
	    longDateFormat : {
	        LT : 'HH.mm',
	        LTS : 'HH.mm.ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY [pukul] HH.mm',
	        LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
	    },
	    meridiemParse: /pagi|tengahari|petang|malam/,
	    meridiemHour: function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'pagi') {
	            return hour;
	        } else if (meridiem === 'tengahari') {
	            return hour >= 11 ? hour : hour + 12;
	        } else if (meridiem === 'petang' || meridiem === 'malam') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours < 11) {
	            return 'pagi';
	        } else if (hours < 15) {
	            return 'tengahari';
	        } else if (hours < 19) {
	            return 'petang';
	        } else {
	            return 'malam';
	        }
	    },
	    calendar : {
	        sameDay : '[Hari ini pukul] LT',
	        nextDay : '[Esok pukul] LT',
	        nextWeek : 'dddd [pukul] LT',
	        lastDay : '[Kelmarin pukul] LT',
	        lastWeek : 'dddd [lepas pukul] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'dalam %s',
	        past : '%s yang lepas',
	        s : 'beberapa saat',
	        m : 'seminit',
	        mm : '%d minit',
	        h : 'sejam',
	        hh : '%d jam',
	        d : 'sehari',
	        dd : '%d hari',
	        M : 'sebulan',
	        MM : '%d bulan',
	        y : 'setahun',
	        yy : '%d tahun'
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return msMy;
	
	})));


/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Malay [ms]
	//! author : Weldan Jamili : https://github.com/weldan
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var ms = moment.defineLocale('ms', {
	    months : 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
	    monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
	    weekdays : 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
	    weekdaysShort : 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
	    weekdaysMin : 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
	    longDateFormat : {
	        LT : 'HH.mm',
	        LTS : 'HH.mm.ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY [pukul] HH.mm',
	        LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
	    },
	    meridiemParse: /pagi|tengahari|petang|malam/,
	    meridiemHour: function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'pagi') {
	            return hour;
	        } else if (meridiem === 'tengahari') {
	            return hour >= 11 ? hour : hour + 12;
	        } else if (meridiem === 'petang' || meridiem === 'malam') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours < 11) {
	            return 'pagi';
	        } else if (hours < 15) {
	            return 'tengahari';
	        } else if (hours < 19) {
	            return 'petang';
	        } else {
	            return 'malam';
	        }
	    },
	    calendar : {
	        sameDay : '[Hari ini pukul] LT',
	        nextDay : '[Esok pukul] LT',
	        nextWeek : 'dddd [pukul] LT',
	        lastDay : '[Kelmarin pukul] LT',
	        lastWeek : 'dddd [lepas pukul] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'dalam %s',
	        past : '%s yang lepas',
	        s : 'beberapa saat',
	        m : 'seminit',
	        mm : '%d minit',
	        h : 'sejam',
	        hh : '%d jam',
	        d : 'sehari',
	        dd : '%d hari',
	        M : 'sebulan',
	        MM : '%d bulan',
	        y : 'setahun',
	        yy : '%d tahun'
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return ms;
	
	})));


/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Burmese [my]
	//! author : Squar team, mysquar.com
	//! author : David Rossellat : https://github.com/gholadr
	//! author : Tin Aung Lin : https://github.com/thanyawzinmin
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var symbolMap = {
	    '1': '၁',
	    '2': '၂',
	    '3': '၃',
	    '4': '၄',
	    '5': '၅',
	    '6': '၆',
	    '7': '၇',
	    '8': '၈',
	    '9': '၉',
	    '0': '၀'
	};
	var numberMap = {
	    '၁': '1',
	    '၂': '2',
	    '၃': '3',
	    '၄': '4',
	    '၅': '5',
	    '၆': '6',
	    '၇': '7',
	    '၈': '8',
	    '၉': '9',
	    '၀': '0'
	};
	
	var my = moment.defineLocale('my', {
	    months: 'ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ'.split('_'),
	    monthsShort: 'ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ'.split('_'),
	    weekdays: 'တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ'.split('_'),
	    weekdaysShort: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),
	    weekdaysMin: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),
	
	    longDateFormat: {
	        LT: 'HH:mm',
	        LTS: 'HH:mm:ss',
	        L: 'DD/MM/YYYY',
	        LL: 'D MMMM YYYY',
	        LLL: 'D MMMM YYYY HH:mm',
	        LLLL: 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar: {
	        sameDay: '[ယနေ.] LT [မှာ]',
	        nextDay: '[မနက်ဖြန်] LT [မှာ]',
	        nextWeek: 'dddd LT [မှာ]',
	        lastDay: '[မနေ.က] LT [မှာ]',
	        lastWeek: '[ပြီးခဲ့သော] dddd LT [မှာ]',
	        sameElse: 'L'
	    },
	    relativeTime: {
	        future: 'လာမည့် %s မှာ',
	        past: 'လွန်ခဲ့သော %s က',
	        s: 'စက္ကန်.အနည်းငယ်',
	        m: 'တစ်မိနစ်',
	        mm: '%d မိနစ်',
	        h: 'တစ်နာရီ',
	        hh: '%d နာရီ',
	        d: 'တစ်ရက်',
	        dd: '%d ရက်',
	        M: 'တစ်လ',
	        MM: '%d လ',
	        y: 'တစ်နှစ်',
	        yy: '%d နှစ်'
	    },
	    preparse: function (string) {
	        return string.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, function (match) {
	            return numberMap[match];
	        });
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        });
	    },
	    week: {
	        dow: 1, // Monday is the first day of the week.
	        doy: 4 // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return my;
	
	})));


/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Norwegian Bokmål [nb]
	//! authors : Espen Hovlandsdal : https://github.com/rexxars
	//!           Sigurd Gartmann : https://github.com/sigurdga
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var nb = moment.defineLocale('nb', {
	    months : 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
	    monthsShort : 'jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
	    weekdaysShort : 'sø._ma._ti._on._to._fr._lø.'.split('_'),
	    weekdaysMin : 'sø_ma_ti_on_to_fr_lø'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY [kl.] HH:mm',
	        LLLL : 'dddd D. MMMM YYYY [kl.] HH:mm'
	    },
	    calendar : {
	        sameDay: '[i dag kl.] LT',
	        nextDay: '[i morgen kl.] LT',
	        nextWeek: 'dddd [kl.] LT',
	        lastDay: '[i går kl.] LT',
	        lastWeek: '[forrige] dddd [kl.] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'om %s',
	        past : '%s siden',
	        s : 'noen sekunder',
	        m : 'ett minutt',
	        mm : '%d minutter',
	        h : 'en time',
	        hh : '%d timer',
	        d : 'en dag',
	        dd : '%d dager',
	        M : 'en måned',
	        MM : '%d måneder',
	        y : 'ett år',
	        yy : '%d år'
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return nb;
	
	})));


/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Nepalese [ne]
	//! author : suvash : https://github.com/suvash
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var symbolMap = {
	    '1': '१',
	    '2': '२',
	    '3': '३',
	    '4': '४',
	    '5': '५',
	    '6': '६',
	    '7': '७',
	    '8': '८',
	    '9': '९',
	    '0': '०'
	};
	var numberMap = {
	    '१': '1',
	    '२': '2',
	    '३': '3',
	    '४': '4',
	    '५': '5',
	    '६': '6',
	    '७': '7',
	    '८': '8',
	    '९': '9',
	    '०': '0'
	};
	
	var ne = moment.defineLocale('ne', {
	    months : 'जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर'.split('_'),
	    monthsShort : 'जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार'.split('_'),
	    weekdaysShort : 'आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.'.split('_'),
	    weekdaysMin : 'आ._सो._मं._बु._बि._शु._श.'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'Aको h:mm बजे',
	        LTS : 'Aको h:mm:ss बजे',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, Aको h:mm बजे',
	        LLLL : 'dddd, D MMMM YYYY, Aको h:mm बजे'
	    },
	    preparse: function (string) {
	        return string.replace(/[१२३४५६७८९०]/g, function (match) {
	            return numberMap[match];
	        });
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        });
	    },
	    meridiemParse: /राति|बिहान|दिउँसो|साँझ/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'राति') {
	            return hour < 4 ? hour : hour + 12;
	        } else if (meridiem === 'बिहान') {
	            return hour;
	        } else if (meridiem === 'दिउँसो') {
	            return hour >= 10 ? hour : hour + 12;
	        } else if (meridiem === 'साँझ') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 3) {
	            return 'राति';
	        } else if (hour < 12) {
	            return 'बिहान';
	        } else if (hour < 16) {
	            return 'दिउँसो';
	        } else if (hour < 20) {
	            return 'साँझ';
	        } else {
	            return 'राति';
	        }
	    },
	    calendar : {
	        sameDay : '[आज] LT',
	        nextDay : '[भोलि] LT',
	        nextWeek : '[आउँदो] dddd[,] LT',
	        lastDay : '[हिजो] LT',
	        lastWeek : '[गएको] dddd[,] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%sमा',
	        past : '%s अगाडि',
	        s : 'केही क्षण',
	        m : 'एक मिनेट',
	        mm : '%d मिनेट',
	        h : 'एक घण्टा',
	        hh : '%d घण्टा',
	        d : 'एक दिन',
	        dd : '%d दिन',
	        M : 'एक महिना',
	        MM : '%d महिना',
	        y : 'एक बर्ष',
	        yy : '%d बर्ष'
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return ne;
	
	})));


/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Dutch (Belgium) [nl-be]
	//! author : Joris Röling : https://github.com/jorisroling
	//! author : Jacob Middag : https://github.com/middagj
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_');
	var monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');
	
	var monthsParse = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i];
	var monthsRegex = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;
	
	var nlBe = moment.defineLocale('nl-be', {
	    months : 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
	    monthsShort : function (m, format) {
	        if (/-MMM-/.test(format)) {
	            return monthsShortWithoutDots[m.month()];
	        } else {
	            return monthsShortWithDots[m.month()];
	        }
	    },
	
	    monthsRegex: monthsRegex,
	    monthsShortRegex: monthsRegex,
	    monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,
	    monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,
	
	    monthsParse : monthsParse,
	    longMonthsParse : monthsParse,
	    shortMonthsParse : monthsParse,
	
	    weekdays : 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
	    weekdaysShort : 'zo._ma._di._wo._do._vr._za.'.split('_'),
	    weekdaysMin : 'Zo_Ma_Di_Wo_Do_Vr_Za'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[vandaag om] LT',
	        nextDay: '[morgen om] LT',
	        nextWeek: 'dddd [om] LT',
	        lastDay: '[gisteren om] LT',
	        lastWeek: '[afgelopen] dddd [om] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'over %s',
	        past : '%s geleden',
	        s : 'een paar seconden',
	        m : 'één minuut',
	        mm : '%d minuten',
	        h : 'één uur',
	        hh : '%d uur',
	        d : 'één dag',
	        dd : '%d dagen',
	        M : 'één maand',
	        MM : '%d maanden',
	        y : 'één jaar',
	        yy : '%d jaar'
	    },
	    ordinalParse: /\d{1,2}(ste|de)/,
	    ordinal : function (number) {
	        return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return nlBe;
	
	})));


/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Dutch [nl]
	//! author : Joris Röling : https://github.com/jorisroling
	//! author : Jacob Middag : https://github.com/middagj
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_');
	var monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');
	
	var monthsParse = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i];
	var monthsRegex = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;
	
	var nl = moment.defineLocale('nl', {
	    months : 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
	    monthsShort : function (m, format) {
	        if (/-MMM-/.test(format)) {
	            return monthsShortWithoutDots[m.month()];
	        } else {
	            return monthsShortWithDots[m.month()];
	        }
	    },
	
	    monthsRegex: monthsRegex,
	    monthsShortRegex: monthsRegex,
	    monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,
	    monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,
	
	    monthsParse : monthsParse,
	    longMonthsParse : monthsParse,
	    shortMonthsParse : monthsParse,
	
	    weekdays : 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
	    weekdaysShort : 'zo._ma._di._wo._do._vr._za.'.split('_'),
	    weekdaysMin : 'Zo_Ma_Di_Wo_Do_Vr_Za'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD-MM-YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[vandaag om] LT',
	        nextDay: '[morgen om] LT',
	        nextWeek: 'dddd [om] LT',
	        lastDay: '[gisteren om] LT',
	        lastWeek: '[afgelopen] dddd [om] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'over %s',
	        past : '%s geleden',
	        s : 'een paar seconden',
	        m : 'één minuut',
	        mm : '%d minuten',
	        h : 'één uur',
	        hh : '%d uur',
	        d : 'één dag',
	        dd : '%d dagen',
	        M : 'één maand',
	        MM : '%d maanden',
	        y : 'één jaar',
	        yy : '%d jaar'
	    },
	    ordinalParse: /\d{1,2}(ste|de)/,
	    ordinal : function (number) {
	        return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return nl;
	
	})));


/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Nynorsk [nn]
	//! author : https://github.com/mechuwind
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var nn = moment.defineLocale('nn', {
	    months : 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
	    monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
	    weekdays : 'sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag'.split('_'),
	    weekdaysShort : 'sun_mån_tys_ons_tor_fre_lau'.split('_'),
	    weekdaysMin : 'su_må_ty_on_to_fr_lø'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY [kl.] H:mm',
	        LLLL : 'dddd D. MMMM YYYY [kl.] HH:mm'
	    },
	    calendar : {
	        sameDay: '[I dag klokka] LT',
	        nextDay: '[I morgon klokka] LT',
	        nextWeek: 'dddd [klokka] LT',
	        lastDay: '[I går klokka] LT',
	        lastWeek: '[Føregåande] dddd [klokka] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'om %s',
	        past : '%s sidan',
	        s : 'nokre sekund',
	        m : 'eit minutt',
	        mm : '%d minutt',
	        h : 'ein time',
	        hh : '%d timar',
	        d : 'ein dag',
	        dd : '%d dagar',
	        M : 'ein månad',
	        MM : '%d månader',
	        y : 'eit år',
	        yy : '%d år'
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return nn;
	
	})));


/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Punjabi (India) [pa-in]
	//! author : Harpreet Singh : https://github.com/harpreetkhalsagtbit
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var symbolMap = {
	    '1': '੧',
	    '2': '੨',
	    '3': '੩',
	    '4': '੪',
	    '5': '੫',
	    '6': '੬',
	    '7': '੭',
	    '8': '੮',
	    '9': '੯',
	    '0': '੦'
	};
	var numberMap = {
	    '੧': '1',
	    '੨': '2',
	    '੩': '3',
	    '੪': '4',
	    '੫': '5',
	    '੬': '6',
	    '੭': '7',
	    '੮': '8',
	    '੯': '9',
	    '੦': '0'
	};
	
	var paIn = moment.defineLocale('pa-in', {
	    // There are months name as per Nanakshahi Calender but they are not used as rigidly in modern Punjabi.
	    months : 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),
	    monthsShort : 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),
	    weekdays : 'ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ'.split('_'),
	    weekdaysShort : 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
	    weekdaysMin : 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
	    longDateFormat : {
	        LT : 'A h:mm ਵਜੇ',
	        LTS : 'A h:mm:ss ਵਜੇ',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, A h:mm ਵਜੇ',
	        LLLL : 'dddd, D MMMM YYYY, A h:mm ਵਜੇ'
	    },
	    calendar : {
	        sameDay : '[ਅਜ] LT',
	        nextDay : '[ਕਲ] LT',
	        nextWeek : 'dddd, LT',
	        lastDay : '[ਕਲ] LT',
	        lastWeek : '[ਪਿਛਲੇ] dddd, LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s ਵਿੱਚ',
	        past : '%s ਪਿਛਲੇ',
	        s : 'ਕੁਝ ਸਕਿੰਟ',
	        m : 'ਇਕ ਮਿੰਟ',
	        mm : '%d ਮਿੰਟ',
	        h : 'ਇੱਕ ਘੰਟਾ',
	        hh : '%d ਘੰਟੇ',
	        d : 'ਇੱਕ ਦਿਨ',
	        dd : '%d ਦਿਨ',
	        M : 'ਇੱਕ ਮਹੀਨਾ',
	        MM : '%d ਮਹੀਨੇ',
	        y : 'ਇੱਕ ਸਾਲ',
	        yy : '%d ਸਾਲ'
	    },
	    preparse: function (string) {
	        return string.replace(/[੧੨੩੪੫੬੭੮੯੦]/g, function (match) {
	            return numberMap[match];
	        });
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        });
	    },
	    // Punjabi notation for meridiems are quite fuzzy in practice. While there exists
	    // a rigid notion of a 'Pahar' it is not used as rigidly in modern Punjabi.
	    meridiemParse: /ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'ਰਾਤ') {
	            return hour < 4 ? hour : hour + 12;
	        } else if (meridiem === 'ਸਵੇਰ') {
	            return hour;
	        } else if (meridiem === 'ਦੁਪਹਿਰ') {
	            return hour >= 10 ? hour : hour + 12;
	        } else if (meridiem === 'ਸ਼ਾਮ') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'ਰਾਤ';
	        } else if (hour < 10) {
	            return 'ਸਵੇਰ';
	        } else if (hour < 17) {
	            return 'ਦੁਪਹਿਰ';
	        } else if (hour < 20) {
	            return 'ਸ਼ਾਮ';
	        } else {
	            return 'ਰਾਤ';
	        }
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return paIn;
	
	})));


/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Polish [pl]
	//! author : Rafal Hirsz : https://github.com/evoL
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var monthsNominative = 'styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień'.split('_');
	var monthsSubjective = 'stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia'.split('_');
	function plural(n) {
	    return (n % 10 < 5) && (n % 10 > 1) && ((~~(n / 10) % 10) !== 1);
	}
	function translate(number, withoutSuffix, key) {
	    var result = number + ' ';
	    switch (key) {
	        case 'm':
	            return withoutSuffix ? 'minuta' : 'minutę';
	        case 'mm':
	            return result + (plural(number) ? 'minuty' : 'minut');
	        case 'h':
	            return withoutSuffix  ? 'godzina'  : 'godzinę';
	        case 'hh':
	            return result + (plural(number) ? 'godziny' : 'godzin');
	        case 'MM':
	            return result + (plural(number) ? 'miesiące' : 'miesięcy');
	        case 'yy':
	            return result + (plural(number) ? 'lata' : 'lat');
	    }
	}
	
	var pl = moment.defineLocale('pl', {
	    months : function (momentToFormat, format) {
	        if (format === '') {
	            // Hack: if format empty we know this is used to generate
	            // RegExp by moment. Give then back both valid forms of months
	            // in RegExp ready format.
	            return '(' + monthsSubjective[momentToFormat.month()] + '|' + monthsNominative[momentToFormat.month()] + ')';
	        } else if (/D MMMM/.test(format)) {
	            return monthsSubjective[momentToFormat.month()];
	        } else {
	            return monthsNominative[momentToFormat.month()];
	        }
	    },
	    monthsShort : 'sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru'.split('_'),
	    weekdays : 'niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota'.split('_'),
	    weekdaysShort : 'ndz_pon_wt_śr_czw_pt_sob'.split('_'),
	    weekdaysMin : 'Nd_Pn_Wt_Śr_Cz_Pt_So'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[Dziś o] LT',
	        nextDay: '[Jutro o] LT',
	        nextWeek: '[W] dddd [o] LT',
	        lastDay: '[Wczoraj o] LT',
	        lastWeek: function () {
	            switch (this.day()) {
	                case 0:
	                    return '[W zeszłą niedzielę o] LT';
	                case 3:
	                    return '[W zeszłą środę o] LT';
	                case 6:
	                    return '[W zeszłą sobotę o] LT';
	                default:
	                    return '[W zeszły] dddd [o] LT';
	            }
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'za %s',
	        past : '%s temu',
	        s : 'kilka sekund',
	        m : translate,
	        mm : translate,
	        h : translate,
	        hh : translate,
	        d : '1 dzień',
	        dd : '%d dni',
	        M : 'miesiąc',
	        MM : translate,
	        y : 'rok',
	        yy : translate
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return pl;
	
	})));


/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Portuguese (Brazil) [pt-br]
	//! author : Caio Ribeiro Pereira : https://github.com/caio-ribeiro-pereira
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var ptBr = moment.defineLocale('pt-br', {
	    months : 'Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_'),
	    monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
	    weekdays : 'Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado'.split('_'),
	    weekdaysShort : 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
	    weekdaysMin : 'Dom_2ª_3ª_4ª_5ª_6ª_Sáb'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D [de] MMMM [de] YYYY',
	        LLL : 'D [de] MMMM [de] YYYY [às] HH:mm',
	        LLLL : 'dddd, D [de] MMMM [de] YYYY [às] HH:mm'
	    },
	    calendar : {
	        sameDay: '[Hoje às] LT',
	        nextDay: '[Amanhã às] LT',
	        nextWeek: 'dddd [às] LT',
	        lastDay: '[Ontem às] LT',
	        lastWeek: function () {
	            return (this.day() === 0 || this.day() === 6) ?
	                '[Último] dddd [às] LT' : // Saturday + Sunday
	                '[Última] dddd [às] LT'; // Monday - Friday
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'em %s',
	        past : '%s atrás',
	        s : 'poucos segundos',
	        m : 'um minuto',
	        mm : '%d minutos',
	        h : 'uma hora',
	        hh : '%d horas',
	        d : 'um dia',
	        dd : '%d dias',
	        M : 'um mês',
	        MM : '%d meses',
	        y : 'um ano',
	        yy : '%d anos'
	    },
	    ordinalParse: /\d{1,2}º/,
	    ordinal : '%dº'
	});
	
	return ptBr;
	
	})));


/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Portuguese [pt]
	//! author : Jefferson : https://github.com/jalex79
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var pt = moment.defineLocale('pt', {
	    months : 'Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_'),
	    monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
	    weekdays : 'Domingo_Segunda-Feira_Terça-Feira_Quarta-Feira_Quinta-Feira_Sexta-Feira_Sábado'.split('_'),
	    weekdaysShort : 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
	    weekdaysMin : 'Dom_2ª_3ª_4ª_5ª_6ª_Sáb'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D [de] MMMM [de] YYYY',
	        LLL : 'D [de] MMMM [de] YYYY HH:mm',
	        LLLL : 'dddd, D [de] MMMM [de] YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[Hoje às] LT',
	        nextDay: '[Amanhã às] LT',
	        nextWeek: 'dddd [às] LT',
	        lastDay: '[Ontem às] LT',
	        lastWeek: function () {
	            return (this.day() === 0 || this.day() === 6) ?
	                '[Último] dddd [às] LT' : // Saturday + Sunday
	                '[Última] dddd [às] LT'; // Monday - Friday
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'em %s',
	        past : 'há %s',
	        s : 'segundos',
	        m : 'um minuto',
	        mm : '%d minutos',
	        h : 'uma hora',
	        hh : '%d horas',
	        d : 'um dia',
	        dd : '%d dias',
	        M : 'um mês',
	        MM : '%d meses',
	        y : 'um ano',
	        yy : '%d anos'
	    },
	    ordinalParse: /\d{1,2}º/,
	    ordinal : '%dº',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return pt;
	
	})));


/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Romanian [ro]
	//! author : Vlad Gurdiga : https://github.com/gurdiga
	//! author : Valentin Agachi : https://github.com/avaly
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	function relativeTimeWithPlural(number, withoutSuffix, key) {
	    var format = {
	            'mm': 'minute',
	            'hh': 'ore',
	            'dd': 'zile',
	            'MM': 'luni',
	            'yy': 'ani'
	        },
	        separator = ' ';
	    if (number % 100 >= 20 || (number >= 100 && number % 100 === 0)) {
	        separator = ' de ';
	    }
	    return number + separator + format[key];
	}
	
	var ro = moment.defineLocale('ro', {
	    months : 'ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie'.split('_'),
	    monthsShort : 'ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.'.split('_'),
	    monthsParseExact: true,
	    weekdays : 'duminică_luni_marți_miercuri_joi_vineri_sâmbătă'.split('_'),
	    weekdaysShort : 'Dum_Lun_Mar_Mie_Joi_Vin_Sâm'.split('_'),
	    weekdaysMin : 'Du_Lu_Ma_Mi_Jo_Vi_Sâ'.split('_'),
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY H:mm',
	        LLLL : 'dddd, D MMMM YYYY H:mm'
	    },
	    calendar : {
	        sameDay: '[azi la] LT',
	        nextDay: '[mâine la] LT',
	        nextWeek: 'dddd [la] LT',
	        lastDay: '[ieri la] LT',
	        lastWeek: '[fosta] dddd [la] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'peste %s',
	        past : '%s în urmă',
	        s : 'câteva secunde',
	        m : 'un minut',
	        mm : relativeTimeWithPlural,
	        h : 'o oră',
	        hh : relativeTimeWithPlural,
	        d : 'o zi',
	        dd : relativeTimeWithPlural,
	        M : 'o lună',
	        MM : relativeTimeWithPlural,
	        y : 'un an',
	        yy : relativeTimeWithPlural
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return ro;
	
	})));


/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Russian [ru]
	//! author : Viktorminator : https://github.com/Viktorminator
	//! Author : Menelion Elensúle : https://github.com/Oire
	//! author : Коренберг Марк : https://github.com/socketpair
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	function plural(word, num) {
	    var forms = word.split('_');
	    return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
	}
	function relativeTimeWithPlural(number, withoutSuffix, key) {
	    var format = {
	        'mm': withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',
	        'hh': 'час_часа_часов',
	        'dd': 'день_дня_дней',
	        'MM': 'месяц_месяца_месяцев',
	        'yy': 'год_года_лет'
	    };
	    if (key === 'm') {
	        return withoutSuffix ? 'минута' : 'минуту';
	    }
	    else {
	        return number + ' ' + plural(format[key], +number);
	    }
	}
	var monthsParse = [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[йя]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i];
	
	// http://new.gramota.ru/spravka/rules/139-prop : § 103
	// Сокращения месяцев: http://new.gramota.ru/spravka/buro/search-answer?s=242637
	// CLDR data:          http://www.unicode.org/cldr/charts/28/summary/ru.html#1753
	var ru = moment.defineLocale('ru', {
	    months : {
	        format: 'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split('_'),
	        standalone: 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_')
	    },
	    monthsShort : {
	        // по CLDR именно "июл." и "июн.", но какой смысл менять букву на точку ?
	        format: 'янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.'.split('_'),
	        standalone: 'янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.'.split('_')
	    },
	    weekdays : {
	        standalone: 'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split('_'),
	        format: 'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split('_'),
	        isFormat: /\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/
	    },
	    weekdaysShort : 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
	    weekdaysMin : 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
	    monthsParse : monthsParse,
	    longMonthsParse : monthsParse,
	    shortMonthsParse : monthsParse,
	
	    // полные названия с падежами, по три буквы, для некоторых, по 4 буквы, сокращения с точкой и без точки
	    monthsRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,
	
	    // копия предыдущего
	    monthsShortRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,
	
	    // полные названия с падежами
	    monthsStrictRegex: /^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,
	
	    // Выражение, которое соотвествует только сокращённым формам
	    monthsShortStrictRegex: /^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY г.',
	        LLL : 'D MMMM YYYY г., HH:mm',
	        LLLL : 'dddd, D MMMM YYYY г., HH:mm'
	    },
	    calendar : {
	        sameDay: '[Сегодня в] LT',
	        nextDay: '[Завтра в] LT',
	        lastDay: '[Вчера в] LT',
	        nextWeek: function (now) {
	            if (now.week() !== this.week()) {
	                switch (this.day()) {
	                    case 0:
	                        return '[В следующее] dddd [в] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                        return '[В следующий] dddd [в] LT';
	                    case 3:
	                    case 5:
	                    case 6:
	                        return '[В следующую] dddd [в] LT';
	                }
	            } else {
	                if (this.day() === 2) {
	                    return '[Во] dddd [в] LT';
	                } else {
	                    return '[В] dddd [в] LT';
	                }
	            }
	        },
	        lastWeek: function (now) {
	            if (now.week() !== this.week()) {
	                switch (this.day()) {
	                    case 0:
	                        return '[В прошлое] dddd [в] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                        return '[В прошлый] dddd [в] LT';
	                    case 3:
	                    case 5:
	                    case 6:
	                        return '[В прошлую] dddd [в] LT';
	                }
	            } else {
	                if (this.day() === 2) {
	                    return '[Во] dddd [в] LT';
	                } else {
	                    return '[В] dddd [в] LT';
	                }
	            }
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'через %s',
	        past : '%s назад',
	        s : 'несколько секунд',
	        m : relativeTimeWithPlural,
	        mm : relativeTimeWithPlural,
	        h : 'час',
	        hh : relativeTimeWithPlural,
	        d : 'день',
	        dd : relativeTimeWithPlural,
	        M : 'месяц',
	        MM : relativeTimeWithPlural,
	        y : 'год',
	        yy : relativeTimeWithPlural
	    },
	    meridiemParse: /ночи|утра|дня|вечера/i,
	    isPM : function (input) {
	        return /^(дня|вечера)$/.test(input);
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'ночи';
	        } else if (hour < 12) {
	            return 'утра';
	        } else if (hour < 17) {
	            return 'дня';
	        } else {
	            return 'вечера';
	        }
	    },
	    ordinalParse: /\d{1,2}-(й|го|я)/,
	    ordinal: function (number, period) {
	        switch (period) {
	            case 'M':
	            case 'd':
	            case 'DDD':
	                return number + '-й';
	            case 'D':
	                return number + '-го';
	            case 'w':
	            case 'W':
	                return number + '-я';
	            default:
	                return number;
	        }
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return ru;
	
	})));


/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Northern Sami [se]
	//! authors : Bård Rolstad Henriksen : https://github.com/karamell
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	
	var se = moment.defineLocale('se', {
	    months : 'ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu'.split('_'),
	    monthsShort : 'ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov'.split('_'),
	    weekdays : 'sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat'.split('_'),
	    weekdaysShort : 'sotn_vuos_maŋ_gask_duor_bear_láv'.split('_'),
	    weekdaysMin : 's_v_m_g_d_b_L'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'MMMM D. [b.] YYYY',
	        LLL : 'MMMM D. [b.] YYYY [ti.] HH:mm',
	        LLLL : 'dddd, MMMM D. [b.] YYYY [ti.] HH:mm'
	    },
	    calendar : {
	        sameDay: '[otne ti] LT',
	        nextDay: '[ihttin ti] LT',
	        nextWeek: 'dddd [ti] LT',
	        lastDay: '[ikte ti] LT',
	        lastWeek: '[ovddit] dddd [ti] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : '%s geažes',
	        past : 'maŋit %s',
	        s : 'moadde sekunddat',
	        m : 'okta minuhta',
	        mm : '%d minuhtat',
	        h : 'okta diimmu',
	        hh : '%d diimmut',
	        d : 'okta beaivi',
	        dd : '%d beaivvit',
	        M : 'okta mánnu',
	        MM : '%d mánut',
	        y : 'okta jahki',
	        yy : '%d jagit'
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return se;
	
	})));


/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Sinhalese [si]
	//! author : Sampath Sitinamaluwa : https://github.com/sampathsris
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	/*jshint -W100*/
	var si = moment.defineLocale('si', {
	    months : 'ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්'.split('_'),
	    monthsShort : 'ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ'.split('_'),
	    weekdays : 'ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා'.split('_'),
	    weekdaysShort : 'ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන'.split('_'),
	    weekdaysMin : 'ඉ_ස_අ_බ_බ්‍ර_සි_සෙ'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'a h:mm',
	        LTS : 'a h:mm:ss',
	        L : 'YYYY/MM/DD',
	        LL : 'YYYY MMMM D',
	        LLL : 'YYYY MMMM D, a h:mm',
	        LLLL : 'YYYY MMMM D [වැනි] dddd, a h:mm:ss'
	    },
	    calendar : {
	        sameDay : '[අද] LT[ට]',
	        nextDay : '[හෙට] LT[ට]',
	        nextWeek : 'dddd LT[ට]',
	        lastDay : '[ඊයේ] LT[ට]',
	        lastWeek : '[පසුගිය] dddd LT[ට]',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%sකින්',
	        past : '%sකට පෙර',
	        s : 'තත්පර කිහිපය',
	        m : 'මිනිත්තුව',
	        mm : 'මිනිත්තු %d',
	        h : 'පැය',
	        hh : 'පැය %d',
	        d : 'දිනය',
	        dd : 'දින %d',
	        M : 'මාසය',
	        MM : 'මාස %d',
	        y : 'වසර',
	        yy : 'වසර %d'
	    },
	    ordinalParse: /\d{1,2} වැනි/,
	    ordinal : function (number) {
	        return number + ' වැනි';
	    },
	    meridiemParse : /පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,
	    isPM : function (input) {
	        return input === 'ප.ව.' || input === 'පස් වරු';
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours > 11) {
	            return isLower ? 'ප.ව.' : 'පස් වරු';
	        } else {
	            return isLower ? 'පෙ.ව.' : 'පෙර වරු';
	        }
	    }
	});
	
	return si;
	
	})));


/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Slovak [sk]
	//! author : Martin Minka : https://github.com/k2s
	//! based on work of petrbela : https://github.com/petrbela
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var months = 'január_február_marec_apríl_máj_jún_júl_august_september_október_november_december'.split('_');
	var monthsShort = 'jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec'.split('_');
	function plural(n) {
	    return (n > 1) && (n < 5);
	}
	function translate(number, withoutSuffix, key, isFuture) {
	    var result = number + ' ';
	    switch (key) {
	        case 's':  // a few seconds / in a few seconds / a few seconds ago
	            return (withoutSuffix || isFuture) ? 'pár sekúnd' : 'pár sekundami';
	        case 'm':  // a minute / in a minute / a minute ago
	            return withoutSuffix ? 'minúta' : (isFuture ? 'minútu' : 'minútou');
	        case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'minúty' : 'minút');
	            } else {
	                return result + 'minútami';
	            }
	            break;
	        case 'h':  // an hour / in an hour / an hour ago
	            return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
	        case 'hh': // 9 hours / in 9 hours / 9 hours ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'hodiny' : 'hodín');
	            } else {
	                return result + 'hodinami';
	            }
	            break;
	        case 'd':  // a day / in a day / a day ago
	            return (withoutSuffix || isFuture) ? 'deň' : 'dňom';
	        case 'dd': // 9 days / in 9 days / 9 days ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'dni' : 'dní');
	            } else {
	                return result + 'dňami';
	            }
	            break;
	        case 'M':  // a month / in a month / a month ago
	            return (withoutSuffix || isFuture) ? 'mesiac' : 'mesiacom';
	        case 'MM': // 9 months / in 9 months / 9 months ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'mesiace' : 'mesiacov');
	            } else {
	                return result + 'mesiacmi';
	            }
	            break;
	        case 'y':  // a year / in a year / a year ago
	            return (withoutSuffix || isFuture) ? 'rok' : 'rokom';
	        case 'yy': // 9 years / in 9 years / 9 years ago
	            if (withoutSuffix || isFuture) {
	                return result + (plural(number) ? 'roky' : 'rokov');
	            } else {
	                return result + 'rokmi';
	            }
	            break;
	    }
	}
	
	var sk = moment.defineLocale('sk', {
	    months : months,
	    monthsShort : monthsShort,
	    weekdays : 'nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota'.split('_'),
	    weekdaysShort : 'ne_po_ut_st_št_pi_so'.split('_'),
	    weekdaysMin : 'ne_po_ut_st_št_pi_so'.split('_'),
	    longDateFormat : {
	        LT: 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY H:mm',
	        LLLL : 'dddd D. MMMM YYYY H:mm'
	    },
	    calendar : {
	        sameDay: '[dnes o] LT',
	        nextDay: '[zajtra o] LT',
	        nextWeek: function () {
	            switch (this.day()) {
	                case 0:
	                    return '[v nedeľu o] LT';
	                case 1:
	                case 2:
	                    return '[v] dddd [o] LT';
	                case 3:
	                    return '[v stredu o] LT';
	                case 4:
	                    return '[vo štvrtok o] LT';
	                case 5:
	                    return '[v piatok o] LT';
	                case 6:
	                    return '[v sobotu o] LT';
	            }
	        },
	        lastDay: '[včera o] LT',
	        lastWeek: function () {
	            switch (this.day()) {
	                case 0:
	                    return '[minulú nedeľu o] LT';
	                case 1:
	                case 2:
	                    return '[minulý] dddd [o] LT';
	                case 3:
	                    return '[minulú stredu o] LT';
	                case 4:
	                case 5:
	                    return '[minulý] dddd [o] LT';
	                case 6:
	                    return '[minulú sobotu o] LT';
	            }
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'za %s',
	        past : 'pred %s',
	        s : translate,
	        m : translate,
	        mm : translate,
	        h : translate,
	        hh : translate,
	        d : translate,
	        dd : translate,
	        M : translate,
	        MM : translate,
	        y : translate,
	        yy : translate
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return sk;
	
	})));


/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Slovenian [sl]
	//! author : Robert Sedovšek : https://github.com/sedovsek
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	function processRelativeTime(number, withoutSuffix, key, isFuture) {
	    var result = number + ' ';
	    switch (key) {
	        case 's':
	            return withoutSuffix || isFuture ? 'nekaj sekund' : 'nekaj sekundami';
	        case 'm':
	            return withoutSuffix ? 'ena minuta' : 'eno minuto';
	        case 'mm':
	            if (number === 1) {
	                result += withoutSuffix ? 'minuta' : 'minuto';
	            } else if (number === 2) {
	                result += withoutSuffix || isFuture ? 'minuti' : 'minutama';
	            } else if (number < 5) {
	                result += withoutSuffix || isFuture ? 'minute' : 'minutami';
	            } else {
	                result += withoutSuffix || isFuture ? 'minut' : 'minutami';
	            }
	            return result;
	        case 'h':
	            return withoutSuffix ? 'ena ura' : 'eno uro';
	        case 'hh':
	            if (number === 1) {
	                result += withoutSuffix ? 'ura' : 'uro';
	            } else if (number === 2) {
	                result += withoutSuffix || isFuture ? 'uri' : 'urama';
	            } else if (number < 5) {
	                result += withoutSuffix || isFuture ? 'ure' : 'urami';
	            } else {
	                result += withoutSuffix || isFuture ? 'ur' : 'urami';
	            }
	            return result;
	        case 'd':
	            return withoutSuffix || isFuture ? 'en dan' : 'enim dnem';
	        case 'dd':
	            if (number === 1) {
	                result += withoutSuffix || isFuture ? 'dan' : 'dnem';
	            } else if (number === 2) {
	                result += withoutSuffix || isFuture ? 'dni' : 'dnevoma';
	            } else {
	                result += withoutSuffix || isFuture ? 'dni' : 'dnevi';
	            }
	            return result;
	        case 'M':
	            return withoutSuffix || isFuture ? 'en mesec' : 'enim mesecem';
	        case 'MM':
	            if (number === 1) {
	                result += withoutSuffix || isFuture ? 'mesec' : 'mesecem';
	            } else if (number === 2) {
	                result += withoutSuffix || isFuture ? 'meseca' : 'mesecema';
	            } else if (number < 5) {
	                result += withoutSuffix || isFuture ? 'mesece' : 'meseci';
	            } else {
	                result += withoutSuffix || isFuture ? 'mesecev' : 'meseci';
	            }
	            return result;
	        case 'y':
	            return withoutSuffix || isFuture ? 'eno leto' : 'enim letom';
	        case 'yy':
	            if (number === 1) {
	                result += withoutSuffix || isFuture ? 'leto' : 'letom';
	            } else if (number === 2) {
	                result += withoutSuffix || isFuture ? 'leti' : 'letoma';
	            } else if (number < 5) {
	                result += withoutSuffix || isFuture ? 'leta' : 'leti';
	            } else {
	                result += withoutSuffix || isFuture ? 'let' : 'leti';
	            }
	            return result;
	    }
	}
	
	var sl = moment.defineLocale('sl', {
	    months : 'januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december'.split('_'),
	    monthsShort : 'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split('_'),
	    monthsParseExact: true,
	    weekdays : 'nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota'.split('_'),
	    weekdaysShort : 'ned._pon._tor._sre._čet._pet._sob.'.split('_'),
	    weekdaysMin : 'ne_po_to_sr_če_pe_so'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM YYYY',
	        LLL : 'D. MMMM YYYY H:mm',
	        LLLL : 'dddd, D. MMMM YYYY H:mm'
	    },
	    calendar : {
	        sameDay  : '[danes ob] LT',
	        nextDay  : '[jutri ob] LT',
	
	        nextWeek : function () {
	            switch (this.day()) {
	                case 0:
	                    return '[v] [nedeljo] [ob] LT';
	                case 3:
	                    return '[v] [sredo] [ob] LT';
	                case 6:
	                    return '[v] [soboto] [ob] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[v] dddd [ob] LT';
	            }
	        },
	        lastDay  : '[včeraj ob] LT',
	        lastWeek : function () {
	            switch (this.day()) {
	                case 0:
	                    return '[prejšnjo] [nedeljo] [ob] LT';
	                case 3:
	                    return '[prejšnjo] [sredo] [ob] LT';
	                case 6:
	                    return '[prejšnjo] [soboto] [ob] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[prejšnji] dddd [ob] LT';
	            }
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'čez %s',
	        past   : 'pred %s',
	        s      : processRelativeTime,
	        m      : processRelativeTime,
	        mm     : processRelativeTime,
	        h      : processRelativeTime,
	        hh     : processRelativeTime,
	        d      : processRelativeTime,
	        dd     : processRelativeTime,
	        M      : processRelativeTime,
	        MM     : processRelativeTime,
	        y      : processRelativeTime,
	        yy     : processRelativeTime
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return sl;
	
	})));


/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Albanian [sq]
	//! author : Flakërim Ismani : https://github.com/flakerimi
	//! author : Menelion Elensúle : https://github.com/Oire
	//! author : Oerd Cukalla : https://github.com/oerd
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var sq = moment.defineLocale('sq', {
	    months : 'Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor'.split('_'),
	    monthsShort : 'Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj'.split('_'),
	    weekdays : 'E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë'.split('_'),
	    weekdaysShort : 'Die_Hën_Mar_Mër_Enj_Pre_Sht'.split('_'),
	    weekdaysMin : 'D_H_Ma_Më_E_P_Sh'.split('_'),
	    weekdaysParseExact : true,
	    meridiemParse: /PD|MD/,
	    isPM: function (input) {
	        return input.charAt(0) === 'M';
	    },
	    meridiem : function (hours, minutes, isLower) {
	        return hours < 12 ? 'PD' : 'MD';
	    },
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[Sot në] LT',
	        nextDay : '[Nesër në] LT',
	        nextWeek : 'dddd [në] LT',
	        lastDay : '[Dje në] LT',
	        lastWeek : 'dddd [e kaluar në] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'në %s',
	        past : '%s më parë',
	        s : 'disa sekonda',
	        m : 'një minutë',
	        mm : '%d minuta',
	        h : 'një orë',
	        hh : '%d orë',
	        d : 'një ditë',
	        dd : '%d ditë',
	        M : 'një muaj',
	        MM : '%d muaj',
	        y : 'një vit',
	        yy : '%d vite'
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return sq;
	
	})));


/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Serbian Cyrillic [sr-cyrl]
	//! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var translator = {
	    words: { //Different grammatical cases
	        m: ['један минут', 'једне минуте'],
	        mm: ['минут', 'минуте', 'минута'],
	        h: ['један сат', 'једног сата'],
	        hh: ['сат', 'сата', 'сати'],
	        dd: ['дан', 'дана', 'дана'],
	        MM: ['месец', 'месеца', 'месеци'],
	        yy: ['година', 'године', 'година']
	    },
	    correctGrammaticalCase: function (number, wordKey) {
	        return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
	    },
	    translate: function (number, withoutSuffix, key) {
	        var wordKey = translator.words[key];
	        if (key.length === 1) {
	            return withoutSuffix ? wordKey[0] : wordKey[1];
	        } else {
	            return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
	        }
	    }
	};
	
	var srCyrl = moment.defineLocale('sr-cyrl', {
	    months: 'јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар'.split('_'),
	    monthsShort: 'јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.'.split('_'),
	    monthsParseExact: true,
	    weekdays: 'недеља_понедељак_уторак_среда_четвртак_петак_субота'.split('_'),
	    weekdaysShort: 'нед._пон._уто._сре._чет._пет._суб.'.split('_'),
	    weekdaysMin: 'не_по_ут_ср_че_пе_су'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat: {
	        LT: 'H:mm',
	        LTS : 'H:mm:ss',
	        L: 'DD.MM.YYYY',
	        LL: 'D. MMMM YYYY',
	        LLL: 'D. MMMM YYYY H:mm',
	        LLLL: 'dddd, D. MMMM YYYY H:mm'
	    },
	    calendar: {
	        sameDay: '[данас у] LT',
	        nextDay: '[сутра у] LT',
	        nextWeek: function () {
	            switch (this.day()) {
	                case 0:
	                    return '[у] [недељу] [у] LT';
	                case 3:
	                    return '[у] [среду] [у] LT';
	                case 6:
	                    return '[у] [суботу] [у] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[у] dddd [у] LT';
	            }
	        },
	        lastDay  : '[јуче у] LT',
	        lastWeek : function () {
	            var lastWeekDays = [
	                '[прошле] [недеље] [у] LT',
	                '[прошлог] [понедељка] [у] LT',
	                '[прошлог] [уторка] [у] LT',
	                '[прошле] [среде] [у] LT',
	                '[прошлог] [четвртка] [у] LT',
	                '[прошлог] [петка] [у] LT',
	                '[прошле] [суботе] [у] LT'
	            ];
	            return lastWeekDays[this.day()];
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'за %s',
	        past   : 'пре %s',
	        s      : 'неколико секунди',
	        m      : translator.translate,
	        mm     : translator.translate,
	        h      : translator.translate,
	        hh     : translator.translate,
	        d      : 'дан',
	        dd     : translator.translate,
	        M      : 'месец',
	        MM     : translator.translate,
	        y      : 'годину',
	        yy     : translator.translate
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return srCyrl;
	
	})));


/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Serbian [sr]
	//! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var translator = {
	    words: { //Different grammatical cases
	        m: ['jedan minut', 'jedne minute'],
	        mm: ['minut', 'minute', 'minuta'],
	        h: ['jedan sat', 'jednog sata'],
	        hh: ['sat', 'sata', 'sati'],
	        dd: ['dan', 'dana', 'dana'],
	        MM: ['mesec', 'meseca', 'meseci'],
	        yy: ['godina', 'godine', 'godina']
	    },
	    correctGrammaticalCase: function (number, wordKey) {
	        return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
	    },
	    translate: function (number, withoutSuffix, key) {
	        var wordKey = translator.words[key];
	        if (key.length === 1) {
	            return withoutSuffix ? wordKey[0] : wordKey[1];
	        } else {
	            return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
	        }
	    }
	};
	
	var sr = moment.defineLocale('sr', {
	    months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),
	    monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
	    monthsParseExact: true,
	    weekdays: 'nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota'.split('_'),
	    weekdaysShort: 'ned._pon._uto._sre._čet._pet._sub.'.split('_'),
	    weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat: {
	        LT: 'H:mm',
	        LTS : 'H:mm:ss',
	        L: 'DD.MM.YYYY',
	        LL: 'D. MMMM YYYY',
	        LLL: 'D. MMMM YYYY H:mm',
	        LLLL: 'dddd, D. MMMM YYYY H:mm'
	    },
	    calendar: {
	        sameDay: '[danas u] LT',
	        nextDay: '[sutra u] LT',
	        nextWeek: function () {
	            switch (this.day()) {
	                case 0:
	                    return '[u] [nedelju] [u] LT';
	                case 3:
	                    return '[u] [sredu] [u] LT';
	                case 6:
	                    return '[u] [subotu] [u] LT';
	                case 1:
	                case 2:
	                case 4:
	                case 5:
	                    return '[u] dddd [u] LT';
	            }
	        },
	        lastDay  : '[juče u] LT',
	        lastWeek : function () {
	            var lastWeekDays = [
	                '[prošle] [nedelje] [u] LT',
	                '[prošlog] [ponedeljka] [u] LT',
	                '[prošlog] [utorka] [u] LT',
	                '[prošle] [srede] [u] LT',
	                '[prošlog] [četvrtka] [u] LT',
	                '[prošlog] [petka] [u] LT',
	                '[prošle] [subote] [u] LT'
	            ];
	            return lastWeekDays[this.day()];
	        },
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'za %s',
	        past   : 'pre %s',
	        s      : 'nekoliko sekundi',
	        m      : translator.translate,
	        mm     : translator.translate,
	        h      : translator.translate,
	        hh     : translator.translate,
	        d      : 'dan',
	        dd     : translator.translate,
	        M      : 'mesec',
	        MM     : translator.translate,
	        y      : 'godinu',
	        yy     : translator.translate
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return sr;
	
	})));


/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : siSwati [ss]
	//! author : Nicolai Davies<mail@nicolai.io> : https://github.com/nicolaidavies
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	
	var ss = moment.defineLocale('ss', {
	    months : "Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split('_'),
	    monthsShort : 'Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo'.split('_'),
	    weekdays : 'Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo'.split('_'),
	    weekdaysShort : 'Lis_Umb_Lsb_Les_Lsi_Lsh_Umg'.split('_'),
	    weekdaysMin : 'Li_Us_Lb_Lt_Ls_Lh_Ug'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'h:mm A',
	        LTS : 'h:mm:ss A',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY h:mm A',
	        LLLL : 'dddd, D MMMM YYYY h:mm A'
	    },
	    calendar : {
	        sameDay : '[Namuhla nga] LT',
	        nextDay : '[Kusasa nga] LT',
	        nextWeek : 'dddd [nga] LT',
	        lastDay : '[Itolo nga] LT',
	        lastWeek : 'dddd [leliphelile] [nga] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'nga %s',
	        past : 'wenteka nga %s',
	        s : 'emizuzwana lomcane',
	        m : 'umzuzu',
	        mm : '%d emizuzu',
	        h : 'lihora',
	        hh : '%d emahora',
	        d : 'lilanga',
	        dd : '%d emalanga',
	        M : 'inyanga',
	        MM : '%d tinyanga',
	        y : 'umnyaka',
	        yy : '%d iminyaka'
	    },
	    meridiemParse: /ekuseni|emini|entsambama|ebusuku/,
	    meridiem : function (hours, minutes, isLower) {
	        if (hours < 11) {
	            return 'ekuseni';
	        } else if (hours < 15) {
	            return 'emini';
	        } else if (hours < 19) {
	            return 'entsambama';
	        } else {
	            return 'ebusuku';
	        }
	    },
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'ekuseni') {
	            return hour;
	        } else if (meridiem === 'emini') {
	            return hour >= 11 ? hour : hour + 12;
	        } else if (meridiem === 'entsambama' || meridiem === 'ebusuku') {
	            if (hour === 0) {
	                return 0;
	            }
	            return hour + 12;
	        }
	    },
	    ordinalParse: /\d{1,2}/,
	    ordinal : '%d',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return ss;
	
	})));


/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Swedish [sv]
	//! author : Jens Alm : https://github.com/ulmus
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var sv = moment.defineLocale('sv', {
	    months : 'januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december'.split('_'),
	    monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
	    weekdays : 'söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag'.split('_'),
	    weekdaysShort : 'sön_mån_tis_ons_tor_fre_lör'.split('_'),
	    weekdaysMin : 'sö_må_ti_on_to_fr_lö'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'YYYY-MM-DD',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY [kl.] HH:mm',
	        LLLL : 'dddd D MMMM YYYY [kl.] HH:mm',
	        lll : 'D MMM YYYY HH:mm',
	        llll : 'ddd D MMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[Idag] LT',
	        nextDay: '[Imorgon] LT',
	        lastDay: '[Igår] LT',
	        nextWeek: '[På] dddd LT',
	        lastWeek: '[I] dddd[s] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'om %s',
	        past : 'för %s sedan',
	        s : 'några sekunder',
	        m : 'en minut',
	        mm : '%d minuter',
	        h : 'en timme',
	        hh : '%d timmar',
	        d : 'en dag',
	        dd : '%d dagar',
	        M : 'en månad',
	        MM : '%d månader',
	        y : 'ett år',
	        yy : '%d år'
	    },
	    ordinalParse: /\d{1,2}(e|a)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (~~(number % 100 / 10) === 1) ? 'e' :
	            (b === 1) ? 'a' :
	            (b === 2) ? 'a' :
	            (b === 3) ? 'e' : 'e';
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return sv;
	
	})));


/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Swahili [sw]
	//! author : Fahad Kassim : https://github.com/fadsel
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var sw = moment.defineLocale('sw', {
	    months : 'Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba'.split('_'),
	    monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des'.split('_'),
	    weekdays : 'Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi'.split('_'),
	    weekdaysShort : 'Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos'.split('_'),
	    weekdaysMin : 'J2_J3_J4_J5_Al_Ij_J1'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[leo saa] LT',
	        nextDay : '[kesho saa] LT',
	        nextWeek : '[wiki ijayo] dddd [saat] LT',
	        lastDay : '[jana] LT',
	        lastWeek : '[wiki iliyopita] dddd [saat] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s baadaye',
	        past : 'tokea %s',
	        s : 'hivi punde',
	        m : 'dakika moja',
	        mm : 'dakika %d',
	        h : 'saa limoja',
	        hh : 'masaa %d',
	        d : 'siku moja',
	        dd : 'masiku %d',
	        M : 'mwezi mmoja',
	        MM : 'miezi %d',
	        y : 'mwaka mmoja',
	        yy : 'miaka %d'
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return sw;
	
	})));


/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Tamil [ta]
	//! author : Arjunkumar Krishnamoorthy : https://github.com/tk120404
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var symbolMap = {
	    '1': '௧',
	    '2': '௨',
	    '3': '௩',
	    '4': '௪',
	    '5': '௫',
	    '6': '௬',
	    '7': '௭',
	    '8': '௮',
	    '9': '௯',
	    '0': '௦'
	};
	var numberMap = {
	    '௧': '1',
	    '௨': '2',
	    '௩': '3',
	    '௪': '4',
	    '௫': '5',
	    '௬': '6',
	    '௭': '7',
	    '௮': '8',
	    '௯': '9',
	    '௦': '0'
	};
	
	var ta = moment.defineLocale('ta', {
	    months : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
	    monthsShort : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
	    weekdays : 'ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை'.split('_'),
	    weekdaysShort : 'ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி'.split('_'),
	    weekdaysMin : 'ஞா_தி_செ_பு_வி_வெ_ச'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, HH:mm',
	        LLLL : 'dddd, D MMMM YYYY, HH:mm'
	    },
	    calendar : {
	        sameDay : '[இன்று] LT',
	        nextDay : '[நாளை] LT',
	        nextWeek : 'dddd, LT',
	        lastDay : '[நேற்று] LT',
	        lastWeek : '[கடந்த வாரம்] dddd, LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s இல்',
	        past : '%s முன்',
	        s : 'ஒரு சில விநாடிகள்',
	        m : 'ஒரு நிமிடம்',
	        mm : '%d நிமிடங்கள்',
	        h : 'ஒரு மணி நேரம்',
	        hh : '%d மணி நேரம்',
	        d : 'ஒரு நாள்',
	        dd : '%d நாட்கள்',
	        M : 'ஒரு மாதம்',
	        MM : '%d மாதங்கள்',
	        y : 'ஒரு வருடம்',
	        yy : '%d ஆண்டுகள்'
	    },
	    ordinalParse: /\d{1,2}வது/,
	    ordinal : function (number) {
	        return number + 'வது';
	    },
	    preparse: function (string) {
	        return string.replace(/[௧௨௩௪௫௬௭௮௯௦]/g, function (match) {
	            return numberMap[match];
	        });
	    },
	    postformat: function (string) {
	        return string.replace(/\d/g, function (match) {
	            return symbolMap[match];
	        });
	    },
	    // refer http://ta.wikipedia.org/s/1er1
	    meridiemParse: /யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 2) {
	            return ' யாமம்';
	        } else if (hour < 6) {
	            return ' வைகறை';  // வைகறை
	        } else if (hour < 10) {
	            return ' காலை'; // காலை
	        } else if (hour < 14) {
	            return ' நண்பகல்'; // நண்பகல்
	        } else if (hour < 18) {
	            return ' எற்பாடு'; // எற்பாடு
	        } else if (hour < 22) {
	            return ' மாலை'; // மாலை
	        } else {
	            return ' யாமம்';
	        }
	    },
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'யாமம்') {
	            return hour < 2 ? hour : hour + 12;
	        } else if (meridiem === 'வைகறை' || meridiem === 'காலை') {
	            return hour;
	        } else if (meridiem === 'நண்பகல்') {
	            return hour >= 10 ? hour : hour + 12;
	        } else {
	            return hour + 12;
	        }
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return ta;
	
	})));


/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Telugu [te]
	//! author : Krishna Chaitanya Thota : https://github.com/kcthota
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var te = moment.defineLocale('te', {
	    months : 'జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జూలై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్'.split('_'),
	    monthsShort : 'జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జూలై_ఆగ._సెప్._అక్టో._నవ._డిసె.'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం'.split('_'),
	    weekdaysShort : 'ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని'.split('_'),
	    weekdaysMin : 'ఆ_సో_మం_బు_గు_శు_శ'.split('_'),
	    longDateFormat : {
	        LT : 'A h:mm',
	        LTS : 'A h:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY, A h:mm',
	        LLLL : 'dddd, D MMMM YYYY, A h:mm'
	    },
	    calendar : {
	        sameDay : '[నేడు] LT',
	        nextDay : '[రేపు] LT',
	        nextWeek : 'dddd, LT',
	        lastDay : '[నిన్న] LT',
	        lastWeek : '[గత] dddd, LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s లో',
	        past : '%s క్రితం',
	        s : 'కొన్ని క్షణాలు',
	        m : 'ఒక నిమిషం',
	        mm : '%d నిమిషాలు',
	        h : 'ఒక గంట',
	        hh : '%d గంటలు',
	        d : 'ఒక రోజు',
	        dd : '%d రోజులు',
	        M : 'ఒక నెల',
	        MM : '%d నెలలు',
	        y : 'ఒక సంవత్సరం',
	        yy : '%d సంవత్సరాలు'
	    },
	    ordinalParse : /\d{1,2}వ/,
	    ordinal : '%dవ',
	    meridiemParse: /రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === 'రాత్రి') {
	            return hour < 4 ? hour : hour + 12;
	        } else if (meridiem === 'ఉదయం') {
	            return hour;
	        } else if (meridiem === 'మధ్యాహ్నం') {
	            return hour >= 10 ? hour : hour + 12;
	        } else if (meridiem === 'సాయంత్రం') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'రాత్రి';
	        } else if (hour < 10) {
	            return 'ఉదయం';
	        } else if (hour < 17) {
	            return 'మధ్యాహ్నం';
	        } else if (hour < 20) {
	            return 'సాయంత్రం';
	        } else {
	            return 'రాత్రి';
	        }
	    },
	    week : {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return te;
	
	})));


/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Tetun Dili (East Timor) [tet]
	//! author : Joshua Brooks : https://github.com/joshbrooks
	//! author : Onorio De J. Afonso : https://github.com/marobo
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var tet = moment.defineLocale('tet', {
	    months : 'Janeiru_Fevereiru_Marsu_Abril_Maiu_Juniu_Juliu_Augustu_Setembru_Outubru_Novembru_Dezembru'.split('_'),
	    monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Aug_Set_Out_Nov_Dez'.split('_'),
	    weekdays : 'Domingu_Segunda_Tersa_Kuarta_Kinta_Sexta_Sabadu'.split('_'),
	    weekdaysShort : 'Dom_Seg_Ters_Kua_Kint_Sext_Sab'.split('_'),
	    weekdaysMin : 'Do_Seg_Te_Ku_Ki_Sex_Sa'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[Ohin iha] LT',
	        nextDay: '[Aban iha] LT',
	        nextWeek: 'dddd [iha] LT',
	        lastDay: '[Horiseik iha] LT',
	        lastWeek: 'dddd [semana kotuk] [iha] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'iha %s',
	        past : '%s liuba',
	        s : 'minutu balun',
	        m : 'minutu ida',
	        mm : 'minutus %d',
	        h : 'horas ida',
	        hh : 'horas %d',
	        d : 'loron ida',
	        dd : 'loron %d',
	        M : 'fulan ida',
	        MM : 'fulan %d',
	        y : 'tinan ida',
	        yy : 'tinan %d'
	    },
	    ordinalParse: /\d{1,2}(st|nd|rd|th)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (~~(number % 100 / 10) === 1) ? 'th' :
	            (b === 1) ? 'st' :
	            (b === 2) ? 'nd' :
	            (b === 3) ? 'rd' : 'th';
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return tet;
	
	})));


/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Thai [th]
	//! author : Kridsada Thanabulpong : https://github.com/sirn
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var th = moment.defineLocale('th', {
	    months : 'มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม'.split('_'),
	    monthsShort : 'ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.'.split('_'),
	    monthsParseExact: true,
	    weekdays : 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์'.split('_'),
	    weekdaysShort : 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์'.split('_'), // yes, three characters difference
	    weekdaysMin : 'อา._จ._อ._พ._พฤ._ศ._ส.'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'H:mm',
	        LTS : 'H:mm:ss',
	        L : 'YYYY/MM/DD',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY เวลา H:mm',
	        LLLL : 'วันddddที่ D MMMM YYYY เวลา H:mm'
	    },
	    meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/,
	    isPM: function (input) {
	        return input === 'หลังเที่ยง';
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 12) {
	            return 'ก่อนเที่ยง';
	        } else {
	            return 'หลังเที่ยง';
	        }
	    },
	    calendar : {
	        sameDay : '[วันนี้ เวลา] LT',
	        nextDay : '[พรุ่งนี้ เวลา] LT',
	        nextWeek : 'dddd[หน้า เวลา] LT',
	        lastDay : '[เมื่อวานนี้ เวลา] LT',
	        lastWeek : '[วัน]dddd[ที่แล้ว เวลา] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'อีก %s',
	        past : '%sที่แล้ว',
	        s : 'ไม่กี่วินาที',
	        m : '1 นาที',
	        mm : '%d นาที',
	        h : '1 ชั่วโมง',
	        hh : '%d ชั่วโมง',
	        d : '1 วัน',
	        dd : '%d วัน',
	        M : '1 เดือน',
	        MM : '%d เดือน',
	        y : '1 ปี',
	        yy : '%d ปี'
	    }
	});
	
	return th;
	
	})));


/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Tagalog (Philippines) [tl-ph]
	//! author : Dan Hagman : https://github.com/hagmandan
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var tlPh = moment.defineLocale('tl-ph', {
	    months : 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split('_'),
	    monthsShort : 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
	    weekdays : 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split('_'),
	    weekdaysShort : 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
	    weekdaysMin : 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'MM/D/YYYY',
	        LL : 'MMMM D, YYYY',
	        LLL : 'MMMM D, YYYY HH:mm',
	        LLLL : 'dddd, MMMM DD, YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: 'LT [ngayong araw]',
	        nextDay: '[Bukas ng] LT',
	        nextWeek: 'LT [sa susunod na] dddd',
	        lastDay: 'LT [kahapon]',
	        lastWeek: 'LT [noong nakaraang] dddd',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'sa loob ng %s',
	        past : '%s ang nakalipas',
	        s : 'ilang segundo',
	        m : 'isang minuto',
	        mm : '%d minuto',
	        h : 'isang oras',
	        hh : '%d oras',
	        d : 'isang araw',
	        dd : '%d araw',
	        M : 'isang buwan',
	        MM : '%d buwan',
	        y : 'isang taon',
	        yy : '%d taon'
	    },
	    ordinalParse: /\d{1,2}/,
	    ordinal : function (number) {
	        return number;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return tlPh;
	
	})));


/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Klingon [tlh]
	//! author : Dominika Kruk : https://github.com/amaranthrose
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var numbersNouns = 'pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut'.split('_');
	
	function translateFuture(output) {
	    var time = output;
	    time = (output.indexOf('jaj') !== -1) ?
	    time.slice(0, -3) + 'leS' :
	    (output.indexOf('jar') !== -1) ?
	    time.slice(0, -3) + 'waQ' :
	    (output.indexOf('DIS') !== -1) ?
	    time.slice(0, -3) + 'nem' :
	    time + ' pIq';
	    return time;
	}
	
	function translatePast(output) {
	    var time = output;
	    time = (output.indexOf('jaj') !== -1) ?
	    time.slice(0, -3) + 'Hu’' :
	    (output.indexOf('jar') !== -1) ?
	    time.slice(0, -3) + 'wen' :
	    (output.indexOf('DIS') !== -1) ?
	    time.slice(0, -3) + 'ben' :
	    time + ' ret';
	    return time;
	}
	
	function translate(number, withoutSuffix, string, isFuture) {
	    var numberNoun = numberAsNoun(number);
	    switch (string) {
	        case 'mm':
	            return numberNoun + ' tup';
	        case 'hh':
	            return numberNoun + ' rep';
	        case 'dd':
	            return numberNoun + ' jaj';
	        case 'MM':
	            return numberNoun + ' jar';
	        case 'yy':
	            return numberNoun + ' DIS';
	    }
	}
	
	function numberAsNoun(number) {
	    var hundred = Math.floor((number % 1000) / 100),
	    ten = Math.floor((number % 100) / 10),
	    one = number % 10,
	    word = '';
	    if (hundred > 0) {
	        word += numbersNouns[hundred] + 'vatlh';
	    }
	    if (ten > 0) {
	        word += ((word !== '') ? ' ' : '') + numbersNouns[ten] + 'maH';
	    }
	    if (one > 0) {
	        word += ((word !== '') ? ' ' : '') + numbersNouns[one];
	    }
	    return (word === '') ? 'pagh' : word;
	}
	
	var tlh = moment.defineLocale('tlh', {
	    months : 'tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’'.split('_'),
	    monthsShort : 'jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
	    weekdaysShort : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
	    weekdaysMin : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[DaHjaj] LT',
	        nextDay: '[wa’leS] LT',
	        nextWeek: 'LLL',
	        lastDay: '[wa’Hu’] LT',
	        lastWeek: 'LLL',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : translateFuture,
	        past : translatePast,
	        s : 'puS lup',
	        m : 'wa’ tup',
	        mm : translate,
	        h : 'wa’ rep',
	        hh : translate,
	        d : 'wa’ jaj',
	        dd : translate,
	        M : 'wa’ jar',
	        MM : translate,
	        y : 'wa’ DIS',
	        yy : translate
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return tlh;
	
	})));


/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Turkish [tr]
	//! authors : Erhan Gundogan : https://github.com/erhangundogan,
	//!           Burak Yiğit Kaya: https://github.com/BYK
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var suffixes = {
	    1: '\'inci',
	    5: '\'inci',
	    8: '\'inci',
	    70: '\'inci',
	    80: '\'inci',
	    2: '\'nci',
	    7: '\'nci',
	    20: '\'nci',
	    50: '\'nci',
	    3: '\'üncü',
	    4: '\'üncü',
	    100: '\'üncü',
	    6: '\'ncı',
	    9: '\'uncu',
	    10: '\'uncu',
	    30: '\'uncu',
	    60: '\'ıncı',
	    90: '\'ıncı'
	};
	
	var tr = moment.defineLocale('tr', {
	    months : 'Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık'.split('_'),
	    monthsShort : 'Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara'.split('_'),
	    weekdays : 'Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi'.split('_'),
	    weekdaysShort : 'Paz_Pts_Sal_Çar_Per_Cum_Cts'.split('_'),
	    weekdaysMin : 'Pz_Pt_Sa_Ça_Pe_Cu_Ct'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[bugün saat] LT',
	        nextDay : '[yarın saat] LT',
	        nextWeek : '[haftaya] dddd [saat] LT',
	        lastDay : '[dün] LT',
	        lastWeek : '[geçen hafta] dddd [saat] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : '%s sonra',
	        past : '%s önce',
	        s : 'birkaç saniye',
	        m : 'bir dakika',
	        mm : '%d dakika',
	        h : 'bir saat',
	        hh : '%d saat',
	        d : 'bir gün',
	        dd : '%d gün',
	        M : 'bir ay',
	        MM : '%d ay',
	        y : 'bir yıl',
	        yy : '%d yıl'
	    },
	    ordinalParse: /\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/,
	    ordinal : function (number) {
	        if (number === 0) {  // special case for zero
	            return number + '\'ıncı';
	        }
	        var a = number % 10,
	            b = number % 100 - a,
	            c = number >= 100 ? 100 : null;
	        return number + (suffixes[a] || suffixes[b] || suffixes[c]);
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return tr;
	
	})));


/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Talossan [tzl]
	//! author : Robin van der Vliet : https://github.com/robin0van0der0v
	//! author : Iustì Canun
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	// After the year there should be a slash and the amount of years since December 26, 1979 in Roman numerals.
	// This is currently too difficult (maybe even impossible) to add.
	var tzl = moment.defineLocale('tzl', {
	    months : 'Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar'.split('_'),
	    monthsShort : 'Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec'.split('_'),
	    weekdays : 'Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi'.split('_'),
	    weekdaysShort : 'Súl_Lún_Mai_Már_Xhú_Vié_Sát'.split('_'),
	    weekdaysMin : 'Sú_Lú_Ma_Má_Xh_Vi_Sá'.split('_'),
	    longDateFormat : {
	        LT : 'HH.mm',
	        LTS : 'HH.mm.ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D. MMMM [dallas] YYYY',
	        LLL : 'D. MMMM [dallas] YYYY HH.mm',
	        LLLL : 'dddd, [li] D. MMMM [dallas] YYYY HH.mm'
	    },
	    meridiemParse: /d\'o|d\'a/i,
	    isPM : function (input) {
	        return 'd\'o' === input.toLowerCase();
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours > 11) {
	            return isLower ? 'd\'o' : 'D\'O';
	        } else {
	            return isLower ? 'd\'a' : 'D\'A';
	        }
	    },
	    calendar : {
	        sameDay : '[oxhi à] LT',
	        nextDay : '[demà à] LT',
	        nextWeek : 'dddd [à] LT',
	        lastDay : '[ieiri à] LT',
	        lastWeek : '[sür el] dddd [lasteu à] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'osprei %s',
	        past : 'ja%s',
	        s : processRelativeTime,
	        m : processRelativeTime,
	        mm : processRelativeTime,
	        h : processRelativeTime,
	        hh : processRelativeTime,
	        d : processRelativeTime,
	        dd : processRelativeTime,
	        M : processRelativeTime,
	        MM : processRelativeTime,
	        y : processRelativeTime,
	        yy : processRelativeTime
	    },
	    ordinalParse: /\d{1,2}\./,
	    ordinal : '%d.',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	function processRelativeTime(number, withoutSuffix, key, isFuture) {
	    var format = {
	        's': ['viensas secunds', '\'iensas secunds'],
	        'm': ['\'n míut', '\'iens míut'],
	        'mm': [number + ' míuts', '' + number + ' míuts'],
	        'h': ['\'n þora', '\'iensa þora'],
	        'hh': [number + ' þoras', '' + number + ' þoras'],
	        'd': ['\'n ziua', '\'iensa ziua'],
	        'dd': [number + ' ziuas', '' + number + ' ziuas'],
	        'M': ['\'n mes', '\'iens mes'],
	        'MM': [number + ' mesen', '' + number + ' mesen'],
	        'y': ['\'n ar', '\'iens ar'],
	        'yy': [number + ' ars', '' + number + ' ars']
	    };
	    return isFuture ? format[key][0] : (withoutSuffix ? format[key][0] : format[key][1]);
	}
	
	return tzl;
	
	})));


/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Central Atlas Tamazight Latin [tzm-latn]
	//! author : Abdel Said : https://github.com/abdelsaid
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var tzmLatn = moment.defineLocale('tzm-latn', {
	    months : 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
	    monthsShort : 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
	    weekdays : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
	    weekdaysShort : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
	    weekdaysMin : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[asdkh g] LT',
	        nextDay: '[aska g] LT',
	        nextWeek: 'dddd [g] LT',
	        lastDay: '[assant g] LT',
	        lastWeek: 'dddd [g] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'dadkh s yan %s',
	        past : 'yan %s',
	        s : 'imik',
	        m : 'minuḍ',
	        mm : '%d minuḍ',
	        h : 'saɛa',
	        hh : '%d tassaɛin',
	        d : 'ass',
	        dd : '%d ossan',
	        M : 'ayowr',
	        MM : '%d iyyirn',
	        y : 'asgas',
	        yy : '%d isgasn'
	    },
	    week : {
	        dow : 6, // Saturday is the first day of the week.
	        doy : 12  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return tzmLatn;
	
	})));


/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Central Atlas Tamazight [tzm]
	//! author : Abdel Said : https://github.com/abdelsaid
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var tzm = moment.defineLocale('tzm', {
	    months : 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
	    monthsShort : 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
	    weekdays : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
	    weekdaysShort : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
	    weekdaysMin : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS: 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[ⴰⵙⴷⵅ ⴴ] LT',
	        nextDay: '[ⴰⵙⴽⴰ ⴴ] LT',
	        nextWeek: 'dddd [ⴴ] LT',
	        lastDay: '[ⴰⵚⴰⵏⵜ ⴴ] LT',
	        lastWeek: 'dddd [ⴴ] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s',
	        past : 'ⵢⴰⵏ %s',
	        s : 'ⵉⵎⵉⴽ',
	        m : 'ⵎⵉⵏⵓⴺ',
	        mm : '%d ⵎⵉⵏⵓⴺ',
	        h : 'ⵙⴰⵄⴰ',
	        hh : '%d ⵜⴰⵙⵙⴰⵄⵉⵏ',
	        d : 'ⴰⵙⵙ',
	        dd : '%d oⵙⵙⴰⵏ',
	        M : 'ⴰⵢoⵓⵔ',
	        MM : '%d ⵉⵢⵢⵉⵔⵏ',
	        y : 'ⴰⵙⴳⴰⵙ',
	        yy : '%d ⵉⵙⴳⴰⵙⵏ'
	    },
	    week : {
	        dow : 6, // Saturday is the first day of the week.
	        doy : 12  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return tzm;
	
	})));


/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Ukrainian [uk]
	//! author : zemlanin : https://github.com/zemlanin
	//! Author : Menelion Elensúle : https://github.com/Oire
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	function plural(word, num) {
	    var forms = word.split('_');
	    return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
	}
	function relativeTimeWithPlural(number, withoutSuffix, key) {
	    var format = {
	        'mm': withoutSuffix ? 'хвилина_хвилини_хвилин' : 'хвилину_хвилини_хвилин',
	        'hh': withoutSuffix ? 'година_години_годин' : 'годину_години_годин',
	        'dd': 'день_дні_днів',
	        'MM': 'місяць_місяці_місяців',
	        'yy': 'рік_роки_років'
	    };
	    if (key === 'm') {
	        return withoutSuffix ? 'хвилина' : 'хвилину';
	    }
	    else if (key === 'h') {
	        return withoutSuffix ? 'година' : 'годину';
	    }
	    else {
	        return number + ' ' + plural(format[key], +number);
	    }
	}
	function weekdaysCaseReplace(m, format) {
	    var weekdays = {
	        'nominative': 'неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота'.split('_'),
	        'accusative': 'неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу'.split('_'),
	        'genitive': 'неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи'.split('_')
	    },
	    nounCase = (/(\[[ВвУу]\]) ?dddd/).test(format) ?
	        'accusative' :
	        ((/\[?(?:минулої|наступної)? ?\] ?dddd/).test(format) ?
	            'genitive' :
	            'nominative');
	    return weekdays[nounCase][m.day()];
	}
	function processHoursFunction(str) {
	    return function () {
	        return str + 'о' + (this.hours() === 11 ? 'б' : '') + '] LT';
	    };
	}
	
	var uk = moment.defineLocale('uk', {
	    months : {
	        'format': 'січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня'.split('_'),
	        'standalone': 'січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень'.split('_')
	    },
	    monthsShort : 'січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд'.split('_'),
	    weekdays : weekdaysCaseReplace,
	    weekdaysShort : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
	    weekdaysMin : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD.MM.YYYY',
	        LL : 'D MMMM YYYY р.',
	        LLL : 'D MMMM YYYY р., HH:mm',
	        LLLL : 'dddd, D MMMM YYYY р., HH:mm'
	    },
	    calendar : {
	        sameDay: processHoursFunction('[Сьогодні '),
	        nextDay: processHoursFunction('[Завтра '),
	        lastDay: processHoursFunction('[Вчора '),
	        nextWeek: processHoursFunction('[У] dddd ['),
	        lastWeek: function () {
	            switch (this.day()) {
	                case 0:
	                case 3:
	                case 5:
	                case 6:
	                    return processHoursFunction('[Минулої] dddd [').call(this);
	                case 1:
	                case 2:
	                case 4:
	                    return processHoursFunction('[Минулого] dddd [').call(this);
	            }
	        },
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : 'за %s',
	        past : '%s тому',
	        s : 'декілька секунд',
	        m : relativeTimeWithPlural,
	        mm : relativeTimeWithPlural,
	        h : 'годину',
	        hh : relativeTimeWithPlural,
	        d : 'день',
	        dd : relativeTimeWithPlural,
	        M : 'місяць',
	        MM : relativeTimeWithPlural,
	        y : 'рік',
	        yy : relativeTimeWithPlural
	    },
	    // M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason
	    meridiemParse: /ночі|ранку|дня|вечора/,
	    isPM: function (input) {
	        return /^(дня|вечора)$/.test(input);
	    },
	    meridiem : function (hour, minute, isLower) {
	        if (hour < 4) {
	            return 'ночі';
	        } else if (hour < 12) {
	            return 'ранку';
	        } else if (hour < 17) {
	            return 'дня';
	        } else {
	            return 'вечора';
	        }
	    },
	    ordinalParse: /\d{1,2}-(й|го)/,
	    ordinal: function (number, period) {
	        switch (period) {
	            case 'M':
	            case 'd':
	            case 'DDD':
	            case 'w':
	            case 'W':
	                return number + '-й';
	            case 'D':
	                return number + '-го';
	            default:
	                return number;
	        }
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 1st is the first week of the year.
	    }
	});
	
	return uk;
	
	})));


/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Uzbek [uz]
	//! author : Sardor Muminov : https://github.com/muminoff
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var uz = moment.defineLocale('uz', {
	    months : 'январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр'.split('_'),
	    monthsShort : 'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),
	    weekdays : 'Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба'.split('_'),
	    weekdaysShort : 'Якш_Душ_Сеш_Чор_Пай_Жум_Шан'.split('_'),
	    weekdaysMin : 'Як_Ду_Се_Чо_Па_Жу_Ша'.split('_'),
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'D MMMM YYYY, dddd HH:mm'
	    },
	    calendar : {
	        sameDay : '[Бугун соат] LT [да]',
	        nextDay : '[Эртага] LT [да]',
	        nextWeek : 'dddd [куни соат] LT [да]',
	        lastDay : '[Кеча соат] LT [да]',
	        lastWeek : '[Утган] dddd [куни соат] LT [да]',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'Якин %s ичида',
	        past : 'Бир неча %s олдин',
	        s : 'фурсат',
	        m : 'бир дакика',
	        mm : '%d дакика',
	        h : 'бир соат',
	        hh : '%d соат',
	        d : 'бир кун',
	        dd : '%d кун',
	        M : 'бир ой',
	        MM : '%d ой',
	        y : 'бир йил',
	        yy : '%d йил'
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 7  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return uz;
	
	})));


/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Vietnamese [vi]
	//! author : Bang Nguyen : https://github.com/bangnk
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var vi = moment.defineLocale('vi', {
	    months : 'tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12'.split('_'),
	    monthsShort : 'Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy'.split('_'),
	    weekdaysShort : 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
	    weekdaysMin : 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
	    weekdaysParseExact : true,
	    meridiemParse: /sa|ch/i,
	    isPM : function (input) {
	        return /^ch$/i.test(input);
	    },
	    meridiem : function (hours, minutes, isLower) {
	        if (hours < 12) {
	            return isLower ? 'sa' : 'SA';
	        } else {
	            return isLower ? 'ch' : 'CH';
	        }
	    },
	    longDateFormat : {
	        LT : 'HH:mm',
	        LTS : 'HH:mm:ss',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM [năm] YYYY',
	        LLL : 'D MMMM [năm] YYYY HH:mm',
	        LLLL : 'dddd, D MMMM [năm] YYYY HH:mm',
	        l : 'DD/M/YYYY',
	        ll : 'D MMM YYYY',
	        lll : 'D MMM YYYY HH:mm',
	        llll : 'ddd, D MMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay: '[Hôm nay lúc] LT',
	        nextDay: '[Ngày mai lúc] LT',
	        nextWeek: 'dddd [tuần tới lúc] LT',
	        lastDay: '[Hôm qua lúc] LT',
	        lastWeek: 'dddd [tuần rồi lúc] LT',
	        sameElse: 'L'
	    },
	    relativeTime : {
	        future : '%s tới',
	        past : '%s trước',
	        s : 'vài giây',
	        m : 'một phút',
	        mm : '%d phút',
	        h : 'một giờ',
	        hh : '%d giờ',
	        d : 'một ngày',
	        dd : '%d ngày',
	        M : 'một tháng',
	        MM : '%d tháng',
	        y : 'một năm',
	        yy : '%d năm'
	    },
	    ordinalParse: /\d{1,2}/,
	    ordinal : function (number) {
	        return number;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return vi;
	
	})));


/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Pseudo [x-pseudo]
	//! author : Andrew Hood : https://github.com/andrewhood125
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var xPseudo = moment.defineLocale('x-pseudo', {
	    months : 'J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér'.split('_'),
	    monthsShort : 'J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc'.split('_'),
	    monthsParseExact : true,
	    weekdays : 'S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý'.split('_'),
	    weekdaysShort : 'S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát'.split('_'),
	    weekdaysMin : 'S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá'.split('_'),
	    weekdaysParseExact : true,
	    longDateFormat : {
	        LT : 'HH:mm',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY HH:mm',
	        LLLL : 'dddd, D MMMM YYYY HH:mm'
	    },
	    calendar : {
	        sameDay : '[T~ódá~ý át] LT',
	        nextDay : '[T~ómó~rró~w át] LT',
	        nextWeek : 'dddd [át] LT',
	        lastDay : '[Ý~ést~érdá~ý át] LT',
	        lastWeek : '[L~ást] dddd [át] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'í~ñ %s',
	        past : '%s á~gó',
	        s : 'á ~féw ~sécó~ñds',
	        m : 'á ~míñ~úté',
	        mm : '%d m~íñú~tés',
	        h : 'á~ñ hó~úr',
	        hh : '%d h~óúrs',
	        d : 'á ~dáý',
	        dd : '%d d~áýs',
	        M : 'á ~móñ~th',
	        MM : '%d m~óñt~hs',
	        y : 'á ~ýéár',
	        yy : '%d ý~éárs'
	    },
	    ordinalParse: /\d{1,2}(th|st|nd|rd)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (~~(number % 100 / 10) === 1) ? 'th' :
	            (b === 1) ? 'st' :
	            (b === 2) ? 'nd' :
	            (b === 3) ? 'rd' : 'th';
	        return number + output;
	    },
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return xPseudo;
	
	})));


/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Yoruba Nigeria [yo]
	//! author : Atolagbe Abisoye : https://github.com/andela-batolagbe
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var yo = moment.defineLocale('yo', {
	    months : 'Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀'.split('_'),
	    monthsShort : 'Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀'.split('_'),
	    weekdays : 'Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta'.split('_'),
	    weekdaysShort : 'Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá'.split('_'),
	    weekdaysMin : 'Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb'.split('_'),
	    longDateFormat : {
	        LT : 'h:mm A',
	        LTS : 'h:mm:ss A',
	        L : 'DD/MM/YYYY',
	        LL : 'D MMMM YYYY',
	        LLL : 'D MMMM YYYY h:mm A',
	        LLLL : 'dddd, D MMMM YYYY h:mm A'
	    },
	    calendar : {
	        sameDay : '[Ònì ni] LT',
	        nextDay : '[Ọ̀la ni] LT',
	        nextWeek : 'dddd [Ọsẹ̀ tón\'bọ] [ni] LT',
	        lastDay : '[Àna ni] LT',
	        lastWeek : 'dddd [Ọsẹ̀ tólọ́] [ni] LT',
	        sameElse : 'L'
	    },
	    relativeTime : {
	        future : 'ní %s',
	        past : '%s kọjá',
	        s : 'ìsẹjú aayá die',
	        m : 'ìsẹjú kan',
	        mm : 'ìsẹjú %d',
	        h : 'wákati kan',
	        hh : 'wákati %d',
	        d : 'ọjọ́ kan',
	        dd : 'ọjọ́ %d',
	        M : 'osù kan',
	        MM : 'osù %d',
	        y : 'ọdún kan',
	        yy : 'ọdún %d'
	    },
	    ordinalParse : /ọjọ́\s\d{1,2}/,
	    ordinal : 'ọjọ́ %d',
	    week : {
	        dow : 1, // Monday is the first day of the week.
	        doy : 4 // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return yo;
	
	})));


/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Chinese (China) [zh-cn]
	//! author : suupic : https://github.com/suupic
	//! author : Zeno Zeng : https://github.com/zenozeng
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var zhCn = moment.defineLocale('zh-cn', {
	    months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
	    monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	    weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
	    weekdaysShort : '周日_周一_周二_周三_周四_周五_周六'.split('_'),
	    weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
	    longDateFormat : {
	        LT : 'Ah点mm分',
	        LTS : 'Ah点m分s秒',
	        L : 'YYYY-MM-DD',
	        LL : 'YYYY年MMMD日',
	        LLL : 'YYYY年MMMD日Ah点mm分',
	        LLLL : 'YYYY年MMMD日ddddAh点mm分',
	        l : 'YYYY-MM-DD',
	        ll : 'YYYY年MMMD日',
	        lll : 'YYYY年MMMD日Ah点mm分',
	        llll : 'YYYY年MMMD日ddddAh点mm分'
	    },
	    meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
	    meridiemHour: function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === '凌晨' || meridiem === '早上' ||
	                meridiem === '上午') {
	            return hour;
	        } else if (meridiem === '下午' || meridiem === '晚上') {
	            return hour + 12;
	        } else {
	            // '中午'
	            return hour >= 11 ? hour : hour + 12;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        var hm = hour * 100 + minute;
	        if (hm < 600) {
	            return '凌晨';
	        } else if (hm < 900) {
	            return '早上';
	        } else if (hm < 1130) {
	            return '上午';
	        } else if (hm < 1230) {
	            return '中午';
	        } else if (hm < 1800) {
	            return '下午';
	        } else {
	            return '晚上';
	        }
	    },
	    calendar : {
	        sameDay : function () {
	            return this.minutes() === 0 ? '[今天]Ah[点整]' : '[今天]LT';
	        },
	        nextDay : function () {
	            return this.minutes() === 0 ? '[明天]Ah[点整]' : '[明天]LT';
	        },
	        lastDay : function () {
	            return this.minutes() === 0 ? '[昨天]Ah[点整]' : '[昨天]LT';
	        },
	        nextWeek : function () {
	            var startOfWeek, prefix;
	            startOfWeek = moment().startOf('week');
	            prefix = this.diff(startOfWeek, 'days') >= 7 ? '[下]' : '[本]';
	            return this.minutes() === 0 ? prefix + 'dddAh点整' : prefix + 'dddAh点mm';
	        },
	        lastWeek : function () {
	            var startOfWeek, prefix;
	            startOfWeek = moment().startOf('week');
	            prefix = this.unix() < startOfWeek.unix()  ? '[上]' : '[本]';
	            return this.minutes() === 0 ? prefix + 'dddAh点整' : prefix + 'dddAh点mm';
	        },
	        sameElse : 'LL'
	    },
	    ordinalParse: /\d{1,2}(日|月|周)/,
	    ordinal : function (number, period) {
	        switch (period) {
	            case 'd':
	            case 'D':
	            case 'DDD':
	                return number + '日';
	            case 'M':
	                return number + '月';
	            case 'w':
	            case 'W':
	                return number + '周';
	            default:
	                return number;
	        }
	    },
	    relativeTime : {
	        future : '%s内',
	        past : '%s前',
	        s : '几秒',
	        m : '1 分钟',
	        mm : '%d 分钟',
	        h : '1 小时',
	        hh : '%d 小时',
	        d : '1 天',
	        dd : '%d 天',
	        M : '1 个月',
	        MM : '%d 个月',
	        y : '1 年',
	        yy : '%d 年'
	    },
	    week : {
	        // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
	        dow : 1, // Monday is the first day of the week.
	        doy : 4  // The week that contains Jan 4th is the first week of the year.
	    }
	});
	
	return zhCn;
	
	})));


/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Chinese (Hong Kong) [zh-hk]
	//! author : Ben : https://github.com/ben-lin
	//! author : Chris Lam : https://github.com/hehachris
	//! author : Konstantin : https://github.com/skfd
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var zhHk = moment.defineLocale('zh-hk', {
	    months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
	    monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	    weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
	    weekdaysShort : '週日_週一_週二_週三_週四_週五_週六'.split('_'),
	    weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
	    longDateFormat : {
	        LT : 'Ah點mm分',
	        LTS : 'Ah點m分s秒',
	        L : 'YYYY年MMMD日',
	        LL : 'YYYY年MMMD日',
	        LLL : 'YYYY年MMMD日Ah點mm分',
	        LLLL : 'YYYY年MMMD日ddddAh點mm分',
	        l : 'YYYY年MMMD日',
	        ll : 'YYYY年MMMD日',
	        lll : 'YYYY年MMMD日Ah點mm分',
	        llll : 'YYYY年MMMD日ddddAh點mm分'
	    },
	    meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
	            return hour;
	        } else if (meridiem === '中午') {
	            return hour >= 11 ? hour : hour + 12;
	        } else if (meridiem === '下午' || meridiem === '晚上') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        var hm = hour * 100 + minute;
	        if (hm < 600) {
	            return '凌晨';
	        } else if (hm < 900) {
	            return '早上';
	        } else if (hm < 1130) {
	            return '上午';
	        } else if (hm < 1230) {
	            return '中午';
	        } else if (hm < 1800) {
	            return '下午';
	        } else {
	            return '晚上';
	        }
	    },
	    calendar : {
	        sameDay : '[今天]LT',
	        nextDay : '[明天]LT',
	        nextWeek : '[下]ddddLT',
	        lastDay : '[昨天]LT',
	        lastWeek : '[上]ddddLT',
	        sameElse : 'L'
	    },
	    ordinalParse: /\d{1,2}(日|月|週)/,
	    ordinal : function (number, period) {
	        switch (period) {
	            case 'd' :
	            case 'D' :
	            case 'DDD' :
	                return number + '日';
	            case 'M' :
	                return number + '月';
	            case 'w' :
	            case 'W' :
	                return number + '週';
	            default :
	                return number;
	        }
	    },
	    relativeTime : {
	        future : '%s內',
	        past : '%s前',
	        s : '幾秒',
	        m : '1 分鐘',
	        mm : '%d 分鐘',
	        h : '1 小時',
	        hh : '%d 小時',
	        d : '1 天',
	        dd : '%d 天',
	        M : '1 個月',
	        MM : '%d 個月',
	        y : '1 年',
	        yy : '%d 年'
	    }
	});
	
	return zhHk;
	
	})));


/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Chinese (Taiwan) [zh-tw]
	//! author : Ben : https://github.com/ben-lin
	//! author : Chris Lam : https://github.com/hehachris
	
	;(function (global, factory) {
	    true ? factory(__webpack_require__(1)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, (function (moment) { 'use strict';
	
	
	var zhTw = moment.defineLocale('zh-tw', {
	    months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
	    monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	    weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
	    weekdaysShort : '週日_週一_週二_週三_週四_週五_週六'.split('_'),
	    weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
	    longDateFormat : {
	        LT : 'Ah點mm分',
	        LTS : 'Ah點m分s秒',
	        L : 'YYYY年MMMD日',
	        LL : 'YYYY年MMMD日',
	        LLL : 'YYYY年MMMD日Ah點mm分',
	        LLLL : 'YYYY年MMMD日ddddAh點mm分',
	        l : 'YYYY年MMMD日',
	        ll : 'YYYY年MMMD日',
	        lll : 'YYYY年MMMD日Ah點mm分',
	        llll : 'YYYY年MMMD日ddddAh點mm分'
	    },
	    meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
	    meridiemHour : function (hour, meridiem) {
	        if (hour === 12) {
	            hour = 0;
	        }
	        if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
	            return hour;
	        } else if (meridiem === '中午') {
	            return hour >= 11 ? hour : hour + 12;
	        } else if (meridiem === '下午' || meridiem === '晚上') {
	            return hour + 12;
	        }
	    },
	    meridiem : function (hour, minute, isLower) {
	        var hm = hour * 100 + minute;
	        if (hm < 600) {
	            return '凌晨';
	        } else if (hm < 900) {
	            return '早上';
	        } else if (hm < 1130) {
	            return '上午';
	        } else if (hm < 1230) {
	            return '中午';
	        } else if (hm < 1800) {
	            return '下午';
	        } else {
	            return '晚上';
	        }
	    },
	    calendar : {
	        sameDay : '[今天]LT',
	        nextDay : '[明天]LT',
	        nextWeek : '[下]ddddLT',
	        lastDay : '[昨天]LT',
	        lastWeek : '[上]ddddLT',
	        sameElse : 'L'
	    },
	    ordinalParse: /\d{1,2}(日|月|週)/,
	    ordinal : function (number, period) {
	        switch (period) {
	            case 'd' :
	            case 'D' :
	            case 'DDD' :
	                return number + '日';
	            case 'M' :
	                return number + '月';
	            case 'w' :
	            case 'W' :
	                return number + '週';
	            default :
	                return number;
	        }
	    },
	    relativeTime : {
	        future : '%s內',
	        past : '%s前',
	        s : '幾秒',
	        m : '1 分鐘',
	        mm : '%d 分鐘',
	        h : '1 小時',
	        hh : '%d 小時',
	        d : '1 天',
	        dd : '%d 天',
	        M : '1 個月',
	        MM : '%d 個月',
	        y : '1 年',
	        yy : '%d 年'
	    }
	});
	
	return zhTw;
	
	})));


/***/ },
/* 189 */,
/* 190 */,
/* 191 */,
/* 192 */,
/* 193 */,
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	const core_1 = __webpack_require__(3);
	const masonry_1 = __webpack_require__(69);
	let AngularMasonryBrick = class AngularMasonryBrick {
	    constructor(_element, _parent) {
	        this._element = _element;
	        this._parent = _parent;
	    }
	    ngAfterViewInit() {
	        this._parent.add(this._element.nativeElement);
	        this.watchForHtmlChanges();
	    }
	    ngOnDestroy() {
	        this._parent.remove(this._element.nativeElement);
	    }
	    /** When HTML in brick changes dinamically, observe that and change layout */
	    watchForHtmlChanges() {
	        MutationObserver = window.MutationObserver || window.WebKitMutationObserver;
	        if (MutationObserver) {
	            /** Watch for any changes to subtree */
	            let self = this;
	            let observer = new MutationObserver(function (mutations, observerFromElement) {
	                self._parent.layout();
	            });
	            // define what element should be observed by the observer
	            // and what types of mutations trigger the callback
	            observer.observe(this._element.nativeElement, {
	                subtree: true,
	                childList: true
	            });
	        }
	    }
	};
	AngularMasonryBrick = __decorate([
	    core_1.Directive({
	        selector: '[masonry-brick], masonry-brick'
	    }),
	    __param(1, core_1.Inject(core_1.forwardRef(() => masonry_1.AngularMasonry))), 
	    __metadata('design:paramtypes', [(typeof (_a = typeof core_1.ElementRef !== 'undefined' && core_1.ElementRef) === 'function' && _a) || Object, (typeof (_b = typeof masonry_1.AngularMasonry !== 'undefined' && masonry_1.AngularMasonry) === 'function' && _b) || Object])
	], AngularMasonryBrick);
	exports.AngularMasonryBrick = AngularMasonryBrick;
	var _a, _b;


/***/ },
/* 195 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	var ShareButton = exports.ShareButton = function () {
	    function ShareButton(provider, template, classes) {
	        this.provider = provider;
	        this.template = template;
	        this.classes = classes;
	    }
	    return ShareButton;
	}();
	var ShareArgs = exports.ShareArgs = function () {
	    function ShareArgs(url, title, description, image, tags) {
	        this.url = url;
	        this.title = title;
	        this.description = description;
	        this.image = image;
	        this.tags = tags;
	    }
	    return ShareArgs;
	}();
	//# sourceMappingURL=share-buttons.class.js.map

/***/ },
/* 196 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	var ShareProvider = exports.ShareProvider = undefined;
	(function (ShareProvider) {
	    ShareProvider[ShareProvider["FACEBOOK"] = 0] = "FACEBOOK";
	    ShareProvider[ShareProvider["TWITTER"] = 1] = "TWITTER";
	    ShareProvider[ShareProvider["REDDIT"] = 2] = "REDDIT";
	    ShareProvider[ShareProvider["STUMBLEUPON"] = 3] = "STUMBLEUPON";
	    ShareProvider[ShareProvider["LINKEDIN"] = 4] = "LINKEDIN";
	    ShareProvider[ShareProvider["GOOGLEPLUS"] = 5] = "GOOGLEPLUS";
	    ShareProvider[ShareProvider["TUMBLR"] = 6] = "TUMBLR";
	    ShareProvider[ShareProvider["PINTEREST"] = 7] = "PINTEREST";
	    ShareProvider[ShareProvider["EMAIL"] = 8] = "EMAIL";
	})(ShareProvider || (exports.ShareProvider = ShareProvider = {}));
	//# sourceMappingURL=share-provider.enum.js.map

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	var buffer = __webpack_require__(53);
	var Buffer = buffer.Buffer;
	var SlowBuffer = buffer.SlowBuffer;
	var MAX_LEN = buffer.kMaxLength || 2147483647;
	exports.alloc = function alloc(size, fill, encoding) {
	  if (typeof Buffer.alloc === 'function') {
	    return Buffer.alloc(size, fill, encoding);
	  }
	  if (typeof encoding === 'number') {
	    throw new TypeError('encoding must not be number');
	  }
	  if (typeof size !== 'number') {
	    throw new TypeError('size must be a number');
	  }
	  if (size > MAX_LEN) {
	    throw new RangeError('size is too large');
	  }
	  var enc = encoding;
	  var _fill = fill;
	  if (_fill === undefined) {
	    enc = undefined;
	    _fill = 0;
	  }
	  var buf = new Buffer(size);
	  if (typeof _fill === 'string') {
	    var fillBuf = new Buffer(_fill, enc);
	    var flen = fillBuf.length;
	    var i = -1;
	    while (++i < size) {
	      buf[i] = fillBuf[i % flen];
	    }
	  } else {
	    buf.fill(_fill);
	  }
	  return buf;
	}
	exports.allocUnsafe = function allocUnsafe(size) {
	  if (typeof Buffer.allocUnsafe === 'function') {
	    return Buffer.allocUnsafe(size);
	  }
	  if (typeof size !== 'number') {
	    throw new TypeError('size must be a number');
	  }
	  if (size > MAX_LEN) {
	    throw new RangeError('size is too large');
	  }
	  return new Buffer(size);
	}
	exports.from = function from(value, encodingOrOffset, length) {
	  if (typeof Buffer.from === 'function' && (!global.Uint8Array || Uint8Array.from !== Buffer.from)) {
	    return Buffer.from(value, encodingOrOffset, length);
	  }
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number');
	  }
	  if (typeof value === 'string') {
	    return new Buffer(value, encodingOrOffset);
	  }
	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    var offset = encodingOrOffset;
	    if (arguments.length === 1) {
	      return new Buffer(value);
	    }
	    if (typeof offset === 'undefined') {
	      offset = 0;
	    }
	    var len = length;
	    if (typeof len === 'undefined') {
	      len = value.byteLength - offset;
	    }
	    if (offset >= value.byteLength) {
	      throw new RangeError('\'offset\' is out of bounds');
	    }
	    if (len > value.byteLength - offset) {
	      throw new RangeError('\'length\' is out of bounds');
	    }
	    return new Buffer(value.slice(offset, offset + len));
	  }
	  if (Buffer.isBuffer(value)) {
	    var out = new Buffer(value.length);
	    value.copy(out, 0, 0, value.length);
	    return out;
	  }
	  if (value) {
	    if (Array.isArray(value) || (typeof ArrayBuffer !== 'undefined' && value.buffer instanceof ArrayBuffer) || 'length' in value) {
	      return new Buffer(value);
	    }
	    if (value.type === 'Buffer' && Array.isArray(value.data)) {
	      return new Buffer(value.data);
	    }
	  }
	
	  throw new TypeError('First argument must be a string, Buffer, ' + 'ArrayBuffer, Array, or array-like object.');
	}
	exports.allocUnsafeSlow = function allocUnsafeSlow(size) {
	  if (typeof Buffer.allocUnsafeSlow === 'function') {
	    return Buffer.allocUnsafeSlow(size);
	  }
	  if (typeof size !== 'number') {
	    throw new TypeError('size must be a number');
	  }
	  if (size >= MAX_LEN) {
	    throw new RangeError('size is too large');
	  }
	  return new SlowBuffer(size);
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 198 */,
/* 199 */,
/* 200 */,
/* 201 */,
/* 202 */,
/* 203 */,
/* 204 */,
/* 205 */,
/* 206 */,
/* 207 */,
/* 208 */,
/* 209 */,
/* 210 */,
/* 211 */,
/* 212 */,
/* 213 */,
/* 214 */,
/* 215 */,
/* 216 */,
/* 217 */,
/* 218 */,
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * EvEmitter v1.0.3
	 * Lil' event emitter
	 * MIT License
	 */
	
	/* jshint unused: true, undef: true, strict: true */
	
	( function( global, factory ) {
	  // universal module definition
	  /* jshint strict: false */ /* globals define, module, window */
	  if ( true ) {
	    // AMD - RequireJS
	    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if ( typeof module == 'object' && module.exports ) {
	    // CommonJS - Browserify, Webpack
	    module.exports = factory();
	  } else {
	    // Browser globals
	    global.EvEmitter = factory();
	  }
	
	}( typeof window != 'undefined' ? window : this, function() {
	
	"use strict";
	
	function EvEmitter() {}
	
	var proto = EvEmitter.prototype;
	
	proto.on = function( eventName, listener ) {
	  if ( !eventName || !listener ) {
	    return;
	  }
	  // set events hash
	  var events = this._events = this._events || {};
	  // set listeners array
	  var listeners = events[ eventName ] = events[ eventName ] || [];
	  // only add once
	  if ( listeners.indexOf( listener ) == -1 ) {
	    listeners.push( listener );
	  }
	
	  return this;
	};
	
	proto.once = function( eventName, listener ) {
	  if ( !eventName || !listener ) {
	    return;
	  }
	  // add event
	  this.on( eventName, listener );
	  // set once flag
	  // set onceEvents hash
	  var onceEvents = this._onceEvents = this._onceEvents || {};
	  // set onceListeners object
	  var onceListeners = onceEvents[ eventName ] = onceEvents[ eventName ] || {};
	  // set flag
	  onceListeners[ listener ] = true;
	
	  return this;
	};
	
	proto.off = function( eventName, listener ) {
	  var listeners = this._events && this._events[ eventName ];
	  if ( !listeners || !listeners.length ) {
	    return;
	  }
	  var index = listeners.indexOf( listener );
	  if ( index != -1 ) {
	    listeners.splice( index, 1 );
	  }
	
	  return this;
	};
	
	proto.emitEvent = function( eventName, args ) {
	  var listeners = this._events && this._events[ eventName ];
	  if ( !listeners || !listeners.length ) {
	    return;
	  }
	  var i = 0;
	  var listener = listeners[i];
	  args = args || [];
	  // once stuff
	  var onceListeners = this._onceEvents && this._onceEvents[ eventName ];
	
	  while ( listener ) {
	    var isOnce = onceListeners && onceListeners[ listener ];
	    if ( isOnce ) {
	      // remove listener
	      // remove before trigger to prevent recursion
	      this.off( eventName, listener );
	      // unset once flag
	      delete onceListeners[ listener ];
	    }
	    // trigger listener
	    listener.apply( this, args );
	    // get next listener
	    i += isOnce ? 0 : 1;
	    listener = listeners[i];
	  }
	
	  return this;
	};
	
	return EvEmitter;
	
	}));


/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * getSize v2.0.2
	 * measure size of elements
	 * MIT license
	 */
	
	/*jshint browser: true, strict: true, undef: true, unused: true */
	/*global define: false, module: false, console: false */
	
	( function( window, factory ) {
	  'use strict';
	
	  if ( true ) {
	    // AMD
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return factory();
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if ( typeof module == 'object' && module.exports ) {
	    // CommonJS
	    module.exports = factory();
	  } else {
	    // browser global
	    window.getSize = factory();
	  }
	
	})( window, function factory() {
	'use strict';
	
	// -------------------------- helpers -------------------------- //
	
	// get a number from a string, not a percentage
	function getStyleSize( value ) {
	  var num = parseFloat( value );
	  // not a percent like '100%', and a number
	  var isValid = value.indexOf('%') == -1 && !isNaN( num );
	  return isValid && num;
	}
	
	function noop() {}
	
	var logError = typeof console == 'undefined' ? noop :
	  function( message ) {
	    console.error( message );
	  };
	
	// -------------------------- measurements -------------------------- //
	
	var measurements = [
	  'paddingLeft',
	  'paddingRight',
	  'paddingTop',
	  'paddingBottom',
	  'marginLeft',
	  'marginRight',
	  'marginTop',
	  'marginBottom',
	  'borderLeftWidth',
	  'borderRightWidth',
	  'borderTopWidth',
	  'borderBottomWidth'
	];
	
	var measurementsLength = measurements.length;
	
	function getZeroSize() {
	  var size = {
	    width: 0,
	    height: 0,
	    innerWidth: 0,
	    innerHeight: 0,
	    outerWidth: 0,
	    outerHeight: 0
	  };
	  for ( var i=0; i < measurementsLength; i++ ) {
	    var measurement = measurements[i];
	    size[ measurement ] = 0;
	  }
	  return size;
	}
	
	// -------------------------- getStyle -------------------------- //
	
	/**
	 * getStyle, get style of element, check for Firefox bug
	 * https://bugzilla.mozilla.org/show_bug.cgi?id=548397
	 */
	function getStyle( elem ) {
	  var style = getComputedStyle( elem );
	  if ( !style ) {
	    logError( 'Style returned ' + style +
	      '. Are you running this code in a hidden iframe on Firefox? ' +
	      'See http://bit.ly/getsizebug1' );
	  }
	  return style;
	}
	
	// -------------------------- setup -------------------------- //
	
	var isSetup = false;
	
	var isBoxSizeOuter;
	
	/**
	 * setup
	 * check isBoxSizerOuter
	 * do on first getSize() rather than on page load for Firefox bug
	 */
	function setup() {
	  // setup once
	  if ( isSetup ) {
	    return;
	  }
	  isSetup = true;
	
	  // -------------------------- box sizing -------------------------- //
	
	  /**
	   * WebKit measures the outer-width on style.width on border-box elems
	   * IE & Firefox<29 measures the inner-width
	   */
	  var div = document.createElement('div');
	  div.style.width = '200px';
	  div.style.padding = '1px 2px 3px 4px';
	  div.style.borderStyle = 'solid';
	  div.style.borderWidth = '1px 2px 3px 4px';
	  div.style.boxSizing = 'border-box';
	
	  var body = document.body || document.documentElement;
	  body.appendChild( div );
	  var style = getStyle( div );
	
	  getSize.isBoxSizeOuter = isBoxSizeOuter = getStyleSize( style.width ) == 200;
	  body.removeChild( div );
	
	}
	
	// -------------------------- getSize -------------------------- //
	
	function getSize( elem ) {
	  setup();
	
	  // use querySeletor if elem is string
	  if ( typeof elem == 'string' ) {
	    elem = document.querySelector( elem );
	  }
	
	  // do not proceed on non-objects
	  if ( !elem || typeof elem != 'object' || !elem.nodeType ) {
	    return;
	  }
	
	  var style = getStyle( elem );
	
	  // if hidden, everything is 0
	  if ( style.display == 'none' ) {
	    return getZeroSize();
	  }
	
	  var size = {};
	  size.width = elem.offsetWidth;
	  size.height = elem.offsetHeight;
	
	  var isBorderBox = size.isBorderBox = style.boxSizing == 'border-box';
	
	  // get all measurements
	  for ( var i=0; i < measurementsLength; i++ ) {
	    var measurement = measurements[i];
	    var value = style[ measurement ];
	    var num = parseFloat( value );
	    // any 'auto', 'medium' value will be 0
	    size[ measurement ] = !isNaN( num ) ? num : 0;
	  }
	
	  var paddingWidth = size.paddingLeft + size.paddingRight;
	  var paddingHeight = size.paddingTop + size.paddingBottom;
	  var marginWidth = size.marginLeft + size.marginRight;
	  var marginHeight = size.marginTop + size.marginBottom;
	  var borderWidth = size.borderLeftWidth + size.borderRightWidth;
	  var borderHeight = size.borderTopWidth + size.borderBottomWidth;
	
	  var isBorderBoxSizeOuter = isBorderBox && isBoxSizeOuter;
	
	  // overwrite width and height if we can get it from style
	  var styleWidth = getStyleSize( style.width );
	  if ( styleWidth !== false ) {
	    size.width = styleWidth +
	      // add padding and border unless it's already including it
	      ( isBorderBoxSizeOuter ? 0 : paddingWidth + borderWidth );
	  }
	
	  var styleHeight = getStyleSize( style.height );
	  if ( styleHeight !== false ) {
	    size.height = styleHeight +
	      // add padding and border unless it's already including it
	      ( isBorderBoxSizeOuter ? 0 : paddingHeight + borderHeight );
	  }
	
	  size.innerWidth = size.width - ( paddingWidth + borderWidth );
	  size.innerHeight = size.height - ( paddingHeight + borderHeight );
	
	  size.outerWidth = size.width + marginWidth;
	  size.outerHeight = size.height + marginHeight;
	
	  return size;
	}
	
	return getSize;
	
	});


/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	/**
	 * Functions to access fragments: superclass for Document and Doc (from Group), not supposed to be created directly
	 * @constructor
	 */
	function WithFragments() {}
	
	WithFragments.prototype = {
	  /**
	   * Gets the fragment in the current Document object. Since you most likely know the type
	   * of this fragment, it is advised that you use a dedicated method, like get StructuredText() or getDate(),
	   * for instance.
	   *
	   * @param {string} name - The name of the fragment to get, with its type; for instance, "blog-post.author"
	   * @returns {object} - The JavaScript Fragment object to manipulate
	   */
	  get: function(name) {
	    var frags = this._getFragments(name);
	    return frags.length ? frags[0] : null;
	  },
	
	  /**
	   * Builds an array of all the fragments in case they are multiple.
	   *
	   * @param {string} name - The name of the multiple fragment to get, with its type; for instance, "blog-post.author"
	   * @returns {array} - An array of each JavaScript fragment object to manipulate.
	   */
	  getAll: function(name) {
	    return this._getFragments(name);
	  },
	
	  /**
	   * Gets the image fragment in the current Document object, for further manipulation.
	   *
	   * @example document.getImage('blog-post.photo').asHtml(linkResolver)
	   *
	   * @param {string} fragment - The name of the fragment to get, with its type; for instance, "blog-post.photo"
	   * @returns {ImageEl} - The Image object to manipulate
	   */
	  getImage: function(fragment) {
	    var Fragments = __webpack_require__(12);
	    var img = this.get(fragment);
	    if (img instanceof Fragments.Image) {
	      return img;
	    }
	    if (img instanceof Fragments.StructuredText) {
	      // find first image in st.
	      return img;
	    }
	    return null;
	  },
	
	  // Useful for obsolete multiples
	  getAllImages: function(fragment) {
	    var Fragments = __webpack_require__(12);
	    var images = this.getAll(fragment);
	
	    return images.map(function (image) {
	      if (image instanceof Fragments.Image) {
	        return image;
	      }
	      if (image instanceof Fragments.StructuredText) {
	        throw new Error("Not done.");
	      }
	      return null;
	    });
	  },
	
	
	  getFirstImage: function() {
	    var Fragments = __webpack_require__(12);
	    var fragments = this.fragments;
	
	    var firstImage = Object.keys(fragments).reduce(function(image, key) {
	      if (image) {
	        return image;
	      } else {
	        var element = fragments[key];
	        if(typeof element.getFirstImage === "function") {
	          return element.getFirstImage();
	        } else if (element instanceof Fragments.Image) {
	          return element;
	
	        } else return null;
	      }
	    }, null);
	    return firstImage;
	  },
	
	  getFirstTitle: function() {
	    var Fragments = __webpack_require__(12);
	    var fragments = this.fragments;
	
	    var firstTitle = Object.keys(fragments).reduce(function(st, key) {
	      if (st) {
	        return st;
	      } else {
	        var element = fragments[key];
	        if(typeof element.getFirstTitle === "function") {
	          return element.getFirstTitle();
	        } else if (element instanceof Fragments.StructuredText) {
	          return element.getTitle();
	        } else return null;
	      }
	    }, null);
	    return firstTitle;
	  },
	
	  getFirstParagraph: function() {
	    var fragments = this.fragments;
	
	    var firstParagraph = Object.keys(fragments).reduce(function(st, key) {
	      if (st) {
	        return st;
	      } else {
	        var element = fragments[key];
	        if(typeof element.getFirstParagraph === "function") {
	          return element.getFirstParagraph();
	        } else return null;
	      }
	    }, null);
	    return firstParagraph;
	  },
	
	  /**
	   * Gets the view within the image fragment in the current Document object, for further manipulation.
	   *
	   * @example document.getImageView('blog-post.photo', 'large').asHtml(linkResolver)
	   *
	   * @param {string} name- The name of the fragment to get, with its type; for instance, "blog-post.photo"
	   * @returns {ImageView} view - The View object to manipulate
	   */
	  getImageView: function(name, view) {
	    var Fragments = __webpack_require__(12);
	    var fragment = this.get(name);
	    if (fragment instanceof Fragments.Image) {
	      return fragment.getView(view);
	    }
	    if (fragment instanceof Fragments.StructuredText) {
	      for(var i=0; i<fragment.blocks.length; i++) {
	        if(fragment.blocks[i].type == 'image') {
	          return fragment.blocks[i];
	        }
	      }
	    }
	    return null;
	  },
	
	  // Useful for obsolete multiples
	  getAllImageViews: function(name, view) {
	    return this.getAllImages(name).map(function (image) {
	      return image.getView(view);
	    });
	  },
	
	  /**
	   * Gets the timestamp fragment in the current Document object, for further manipulation.
	   *
	   * @example document.getDate('blog-post.publicationdate').asHtml(linkResolver)
	   *
	   * @param {string} name - The name of the fragment to get, with its type; for instance, "blog-post.publicationdate"
	   * @returns {Date} - The Date object to manipulate
	   */
	  getTimestamp: function(name) {
	    var Fragments = __webpack_require__(12);
	    var fragment = this.get(name);
	
	    if (fragment instanceof Fragments.Timestamp) {
	      return fragment.value;
	    }
	    return null;
	  },
	
	  /**
	   * Gets the date fragment in the current Document object, for further manipulation.
	   *
	   * @example document.getDate('blog-post.publicationdate').asHtml(linkResolver)
	   *
	   * @param {string} name - The name of the fragment to get, with its type; for instance, "blog-post.publicationdate"
	   * @returns {Date} - The Date object to manipulate
	   */
	  getDate: function(name) {
	    var Fragments = __webpack_require__(12);
	    var fragment = this.get(name);
	
	    if (fragment instanceof Fragments.Date) {
	      return fragment.value;
	    }
	    return null;
	  },
	
	  /**
	   * Gets a boolean value of the fragment in the current Document object, for further manipulation.
	   * This works great with a Select fragment. The Select values that are considered true are (lowercased before matching): 'yes', 'on', and 'true'.
	   *
	   * @example if(document.getBoolean('blog-post.enableComments')) { ... }
	   *
	   * @param {string} name - The name of the fragment to get, with its type; for instance, "blog-post.enableComments"
	   * @returns {boolean} - The boolean value of the fragment
	   */
	  getBoolean: function(name) {
	    var fragment = this.get(name);
	    return fragment.value && (fragment.value.toLowerCase() == 'yes' || fragment.value.toLowerCase() == 'on' || fragment.value.toLowerCase() == 'true');
	  },
	
	  /**
	   * Gets the text fragment in the current Document object, for further manipulation.
	   * The method works with StructuredText fragments, Text fragments, Number fragments, Select fragments and Color fragments.
	   *
	   * @example document.getText('blog-post.label').asHtml(linkResolver).
	   *
	   * @param {string} name - The name of the fragment to get, with its type; for instance, "blog-post.label"
	   * @param {string} after - a suffix that will be appended to the value
	   * @returns {object} - either StructuredText, or Text, or Number, or Select, or Color.
	   */
	  getText: function(name, after) {
	    var Fragments = __webpack_require__(12);
	    var fragment = this.get(name);
	
	    if (fragment instanceof Fragments.StructuredText) {
	      return fragment.blocks.map(function(block) {
	        if (block.text) {
	          return block.text + (after ? after : '');
	        }
	        return '';
	      }).join('\n');
	    }
	
	    if (fragment instanceof Fragments.Text) {
	      if(fragment.value) {
	        return fragment.value + (after ? after : '');
	      }
	    }
	
	    if (fragment instanceof Fragments.Number) {
	      if(fragment.value) {
	        return fragment.value + (after ? after : '');
	      }
	    }
	
	    if (fragment instanceof Fragments.Select) {
	      if(fragment.value) {
	        return fragment.value + (after ? after : '');
	      }
	    }
	
	    if (fragment instanceof Fragments.Color) {
	      if(fragment.value) {
	        return fragment.value + (after ? after : '');
	      }
	    }
	
	    return null;
	  },
	
	  /**
	   * Gets the StructuredText fragment in the current Document object, for further manipulation.
	   * @example document.getStructuredText('blog-post.body').asHtml(linkResolver)
	   *
	   * @param {string} name - The name of the fragment to get, with its type; for instance, "blog-post.body"
	   * @returns {StructuredText} - The StructuredText fragment to manipulate.
	   */
	  getStructuredText: function(name) {
	    var fragment = this.get(name);
	
	    if (fragment instanceof __webpack_require__(12).StructuredText) {
	      return fragment;
	    }
	    return null;
	  },
	
	  /**
	   * Gets the Link fragment in the current Document object, for further manipulation.
	   * @example document.getLink('blog-post.link').url(resolver)
	   *
	   * @param {string} name - The name of the fragment to get, with its type; for instance, "blog-post.link"
	   * @returns {WebLink|DocumentLink|ImageLink} - The Link fragment to manipulate.
	   */
	  getLink: function(name) {
	    var Fragments = __webpack_require__(12);
	    var fragment = this.get(name);
	
	    if (fragment instanceof Fragments.WebLink ||
	        fragment instanceof Fragments.DocumentLink ||
	        fragment instanceof Fragments.FileLink ||
	        fragment instanceof Fragments.ImageLink) {
	      return fragment;
	    }
	    return null;
	  },
	
	  /**
	   * Gets the Number fragment in the current Document object, for further manipulation.
	   * @example document.getNumber('product.price')
	   *
	   * @param {string} name - The name of the fragment to get, with its type; for instance, "product.price"
	   * @returns {number} - The number value of the fragment.
	   */
	  getNumber: function(name) {
	    var Fragments = __webpack_require__(12);
	    var fragment = this.get(name);
	
	    if (fragment instanceof Fragments.Number) {
	      return fragment.value;
	    }
	    return null;
	  },
	
	  /**
	   * Gets the Color fragment in the current Document object, for further manipulation.
	   * @example document.getColor('product.color')
	   *
	   * @param {string} name - The name of the fragment to get, with its type; for instance, "product.color"
	   * @returns {string} - The string value of the Color fragment.
	   */
	  getColor: function(name) {
	    var Fragments = __webpack_require__(12);
	    var fragment = this.get(name);
	
	    if (fragment instanceof Fragments.Color) {
	      return fragment.value;
	    }
	    return null;
	  },
	
	  /** Gets the GeoPoint fragment in the current Document object, for further manipulation.
	   *
	   * @example document.getGeoPoint('blog-post.location').asHtml(linkResolver)
	   *
	   * @param {string} name - The name of the fragment to get, with its type; for instance, "blog-post.location"
	   * @returns {GeoPoint} - The GeoPoint object to manipulate
	   */
	  getGeoPoint: function(name) {
	    var Fragments = __webpack_require__(12);
	    var fragment = this.get(name);
	
	    if(fragment instanceof Fragments.GeoPoint) {
	      return fragment;
	    }
	    return null;
	  },
	
	  /**
	   * Gets the Group fragment in the current Document object, for further manipulation.
	   *
	   * @example document.getGroup('product.gallery').asHtml(linkResolver).
	   *
	   * @param {string} name - The name of the fragment to get, with its type; for instance, "product.gallery"
	   * @returns {Group} - The Group fragment to manipulate.
	   */
	  getGroup: function(name) {
	    var fragment = this.get(name);
	
	    if (fragment instanceof __webpack_require__(12).Group) {
	      return fragment;
	    }
	    return null;
	  },
	
	  /**
	   * Shortcut to get the HTML output of the fragment in the current document.
	   * This is the same as writing document.get(fragment).asHtml(linkResolver);
	   *
	   * @param {string} name - The name of the fragment to get, with its type; for instance, "blog-post.body"
	   * @param {function} linkResolver
	   * @returns {string} - The HTML output
	   */
	  getHtml: function(name, linkResolver) {
	    if (!isFunction(linkResolver)) {
	      // Backward compatibility with the old ctx argument
	      var ctx = linkResolver;
	      linkResolver = function(doc, isBroken) {
	        return ctx.linkResolver(ctx, doc, isBroken);
	      };
	    }
	    var fragment = this.get(name);
	
	    if(fragment && fragment.asHtml) {
	      return fragment.asHtml(linkResolver);
	    }
	    return null;
	  },
	
	  /**
	   * Transforms the whole document as an HTML output. Each fragment is separated by a &lt;section&gt; tag,
	   * with the attribute data-field="nameoffragment"
	   * Note that most of the time you will not use this method, but read fragment independently and generate
	   * HTML output for {@link StructuredText} fragment with that class' asHtml method.
	   *
	   * @param {function} linkResolver
	   * @returns {string} - The HTML output
	   */
	  asHtml: function(linkResolver) {
	    if (!isFunction(linkResolver)) {
	      // Backward compatibility with the old ctx argument
	      var ctx = linkResolver;
	      linkResolver = function(doc, isBroken) {
	        return ctx.linkResolver(ctx, doc, isBroken);
	      };
	    }
	    var htmls = [];
	    for(var field in this.fragments) {
	      var fragment = this.get(field);
	      htmls.push(fragment && fragment.asHtml ? '<section data-field="' + field + '">' + fragment.asHtml(linkResolver) + '</section>' : '');
	    }
	    return htmls.join('');
	  },
	
	  /**
	   * Turns the document into a useable text version of it.
	   *
	   * @returns {string} - basic text version of the fragment
	   */
	  asText: function(linkResolver) {
	    if (!isFunction(linkResolver)) {
	      // Backward compatibility with the old ctx argument
	      var ctx = linkResolver;
	      linkResolver = function(doc, isBroken) {
	        return ctx.linkResolver(ctx, doc, isBroken);
	      };
	    }
	    var texts = [];
	    for(var field in this.fragments) {
	      var fragment = this.get(field);
	      texts.push(fragment && fragment.asText ? fragment.asText(linkResolver) : '');
	    }
	    return texts.join('');
	  },
	
	  /**
	   * Linked documents, as an array of {@link DocumentLink}
	   * @returns {Array}
	   */
	  linkedDocuments: function() {
	    var i, j, link;
	    var result = [];
	    var Fragments = __webpack_require__(12);
	    for (var field in this.data) {
	      var fragment = this.get(field);
	      if (fragment instanceof Fragments.DocumentLink) {
	        result.push(fragment);
	      }
	      if (fragment instanceof Fragments.StructuredText) {
	        for (i = 0; i < fragment.blocks.length; i++) {
	          var block = fragment.blocks[i];
	          if (block.type == "image" && block.linkTo) {
	            link = Fragments.initField(block.linkTo);
	            if (link instanceof Fragments.DocumentLink) {
	              result.push(link);
	            }
	          }
	          var spans = block.spans || [];
	          for (j = 0; j < spans.length; j++) {
	            var span = spans[j];
	            if (span.type == "hyperlink") {
	              link = Fragments.initField(span.data);
	              if (link instanceof Fragments.DocumentLink) {
	                result.push(link);
	              }
	            }
	          }
	        }
	      }
	      if (fragment instanceof Fragments.Group) {
	        for (i = 0; i < fragment.value.length; i++) {
	          result = result.concat(fragment.value[i].linkedDocuments());
	        }
	      }
	      if (fragment instanceof Fragments.SliceZone) {
	        for (i = 0; i < fragment.value.length; i++) {
	          var slice = fragment.value[i];
	          if (slice.value instanceof Fragments.DocumentLink) {
	            result.push(slice.value);
	          }
	        }
	      }
	    }
	    return result;
	  },
	
	  /**
	   * An array of the fragments with the given fragment name.
	   * The array is often a single-element array, expect when the fragment is a multiple fragment.
	   * @private
	   */
	  _getFragments: function(name) {
	    if (!this.fragments || !this.fragments[name]) {
	      return [];
	    }
	
	    if (Array.isArray(this.fragments[name])) {
	      return this.fragments[name];
	    } else {
	      return [this.fragments[name]];
	    }
	
	  }
	
	};
	
	/**
	 * Embodies a document as returned by the API.
	 * Most useful fields: id, type, tags, slug, slugs
	 * @constructor
	 * @global
	 * @alias Doc
	 */
	function Document(id, uid, type, href, tags, slugs, firstPublicationDate, lastPublicationDate, data) {
	  /**
	   * The ID of the document
	   * @type {string}
	   */
	  this.id = id;
	  /**
	   * The User ID of the document, a human readable id
	   * @type {string|null}
	   */
	  this.uid = uid;
	  /**
	   * The type of the document, corresponds to a document mask defined in the repository
	   * @type {string}
	   */
	  this.type = type;
	  /**
	   * The URL of the document in the API
	   * @type {string}
	   */
	  this.href = href;
	  /**
	   * The tags of the document
	   * @type {array}
	   */
	  this.tags = tags;
	  /**
	   * The current slug of the document, "-" if none was provided
	   * @type {string}
	   */
	  this.slug = slugs ? slugs[0] : "-";
	  /**
	   * All the slugs that were ever used by this document (including the current one, at the head)
	   * @type {array}
	   */
	  this.slugs = slugs;
	  /**
	   * The original JSON data from the API
	   */
	  this.data = data;
	  /**
	   * The first publication date of the document
	   */
	  this.firstPublicationDate = firstPublicationDate ? new Date(firstPublicationDate) : null;
	  /**
	   * The last publication date of the document
	   */
	  this.lastPublicationDate = lastPublicationDate ? new Date(lastPublicationDate) : null;
	  /**
	   * Fragments, converted to business objects
	   */
	  this.fragments = __webpack_require__(12).parseFragments(data);
	}
	
	Document.prototype = Object.create(WithFragments.prototype);
	
	/**
	 * Gets the SliceZone fragment in the current Document object, for further manipulation.
	 *
	 * @example document.getSliceZone('product.gallery').asHtml(linkResolver).
	 *
	 * @param {string} name - The name of the fragment to get, with its type; for instance, "product.gallery"
	 * @returns {Group} - The SliceZone fragment to manipulate.
	 */
	Document.prototype.getSliceZone = function(name) {
	  var fragment = this.get(name);
	
	  if (fragment instanceof __webpack_require__(12).SliceZone) {
	    return fragment;
	  }
	  return null;
	};
	
	function GroupDoc(data) {
	  /**
	   * The original JSON data from the API
	   */
	  this.data = data;
	  /**
	   * Fragments, converted to business objects
	   */
	  this.fragments = __webpack_require__(12).parseFragments(data);
	}
	
	GroupDoc.prototype = Object.create(WithFragments.prototype);
	
	// -- Private helpers
	
	function isFunction(f) {
	  var getType = {};
	  return f && getType.toString.call(f) === '[object Function]';
	}
	
	module.exports = {
	  WithFragments: WithFragments,
	  Document: Document,
	  GroupDoc: GroupDoc
	};


/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	if (!process.version ||
	    process.version.indexOf('v0.') === 0 ||
	    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
	  module.exports = nextTick;
	} else {
	  module.exports = process.nextTick;
	}
	
	function nextTick(fn, arg1, arg2, arg3) {
	  if (typeof fn !== 'function') {
	    throw new TypeError('"callback" argument must be a function');
	  }
	  var len = arguments.length;
	  var args, i;
	  switch (len) {
	  case 0:
	  case 1:
	    return process.nextTick(fn);
	  case 2:
	    return process.nextTick(function afterTickOne() {
	      fn.call(null, arg1);
	    });
	  case 3:
	    return process.nextTick(function afterTickTwo() {
	      fn.call(null, arg1, arg2);
	    });
	  case 4:
	    return process.nextTick(function afterTickThree() {
	      fn.call(null, arg1, arg2, arg3);
	    });
	  default:
	    args = new Array(len - 1);
	    i = 0;
	    while (i < args.length) {
	      args[i++] = arguments[i];
	    }
	    return process.nextTick(function afterTick() {
	      fn.apply(null, args);
	    });
	  }
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(39)))

/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	// a transform stream is a readable/writable stream where you do
	// something with the data.  Sometimes it's called a "filter",
	// but that's not a great name for it, since that implies a thing where
	// some bits pass through, and others are simply ignored.  (That would
	// be a valid example of a transform, of course.)
	//
	// While the output is causally related to the input, it's not a
	// necessarily symmetric or synchronous transformation.  For example,
	// a zlib stream might take multiple plain-text writes(), and then
	// emit a single compressed chunk some time in the future.
	//
	// Here's how this works:
	//
	// The Transform stream has all the aspects of the readable and writable
	// stream classes.  When you write(chunk), that calls _write(chunk,cb)
	// internally, and returns false if there's a lot of pending writes
	// buffered up.  When you call read(), that calls _read(n) until
	// there's enough pending readable data buffered up.
	//
	// In a transform stream, the written data is placed in a buffer.  When
	// _read(n) is called, it transforms the queued up data, calling the
	// buffered _write cb's as it consumes chunks.  If consuming a single
	// written chunk would result in multiple output chunks, then the first
	// outputted bit calls the readcb, and subsequent chunks just go into
	// the read buffer, and will cause it to emit 'readable' if necessary.
	//
	// This way, back-pressure is actually determined by the reading side,
	// since _read has to be called to start processing a new chunk.  However,
	// a pathological inflate type of transform can cause excessive buffering
	// here.  For example, imagine a stream where every byte of input is
	// interpreted as an integer from 0-255, and then results in that many
	// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	// 1kb of data being output.  In this case, you could write a very small
	// amount of input, and end up with a very large amount of output.  In
	// such a pathological inflating mechanism, there'd be no way to tell
	// the system to stop doing the transform.  A single 4MB write could
	// cause the system to run out of memory.
	//
	// However, even in such a pathological case, only a single written chunk
	// would be consumed, and then the rest would wait (un-transformed) until
	// the results of the previous transformed chunk were consumed.
	
	'use strict';
	
	module.exports = Transform;
	
	var Duplex = __webpack_require__(48);
	
	/*<replacement>*/
	var util = __webpack_require__(65);
	util.inherits = __webpack_require__(38);
	/*</replacement>*/
	
	util.inherits(Transform, Duplex);
	
	function TransformState(stream) {
	  this.afterTransform = function (er, data) {
	    return afterTransform(stream, er, data);
	  };
	
	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	  this.writeencoding = null;
	}
	
	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;
	
	  var cb = ts.writecb;
	
	  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));
	
	  ts.writechunk = null;
	  ts.writecb = null;
	
	  if (data !== null && data !== undefined) stream.push(data);
	
	  cb(er);
	
	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}
	
	function Transform(options) {
	  if (!(this instanceof Transform)) return new Transform(options);
	
	  Duplex.call(this, options);
	
	  this._transformState = new TransformState(this);
	
	  var stream = this;
	
	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;
	
	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;
	
	  if (options) {
	    if (typeof options.transform === 'function') this._transform = options.transform;
	
	    if (typeof options.flush === 'function') this._flush = options.flush;
	  }
	
	  // When the writable side finishes, then flush out anything remaining.
	  this.once('prefinish', function () {
	    if (typeof this._flush === 'function') this._flush(function (er, data) {
	      done(stream, er, data);
	    });else done(stream);
	  });
	}
	
	Transform.prototype.push = function (chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};
	
	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform.prototype._transform = function (chunk, encoding, cb) {
	  throw new Error('_transform() is not implemented');
	};
	
	Transform.prototype._write = function (chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
	  }
	};
	
	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform.prototype._read = function (n) {
	  var ts = this._transformState;
	
	  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};
	
	function done(stream, er, data) {
	  if (er) return stream.emit('error', er);
	
	  if (data !== null && data !== undefined) stream.push(data);
	
	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  var ws = stream._writableState;
	  var ts = stream._transformState;
	
	  if (ws.length) throw new Error('Calling transform done when ws.length != 0');
	
	  if (ts.transforming) throw new Error('Calling transform done when still transforming');
	
	  return stream.push(null);
	}

/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// A bit simpler than readable streams.
	// Implement an async ._write(chunk, encoding, cb), and it'll handle all
	// the drain event emission and buffering.
	
	'use strict';
	
	module.exports = Writable;
	
	/*<replacement>*/
	var processNextTick = __webpack_require__(222);
	/*</replacement>*/
	
	/*<replacement>*/
	var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
	/*</replacement>*/
	
	/*<replacement>*/
	var Duplex;
	/*</replacement>*/
	
	Writable.WritableState = WritableState;
	
	/*<replacement>*/
	var util = __webpack_require__(65);
	util.inherits = __webpack_require__(38);
	/*</replacement>*/
	
	/*<replacement>*/
	var internalUtil = {
	  deprecate: __webpack_require__(644)
	};
	/*</replacement>*/
	
	/*<replacement>*/
	var Stream;
	(function () {
	  try {
	    Stream = __webpack_require__(236);
	  } catch (_) {} finally {
	    if (!Stream) Stream = __webpack_require__(80).EventEmitter;
	  }
	})();
	/*</replacement>*/
	
	var Buffer = __webpack_require__(53).Buffer;
	/*<replacement>*/
	var bufferShim = __webpack_require__(197);
	/*</replacement>*/
	
	util.inherits(Writable, Stream);
	
	function nop() {}
	
	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	  this.next = null;
	}
	
	function WritableState(options, stream) {
	  Duplex = Duplex || __webpack_require__(48);
	
	  options = options || {};
	
	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;
	
	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
	
	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;
	
	  // cast to ints.
	  this.highWaterMark = ~ ~this.highWaterMark;
	
	  // drain event flag.
	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;
	
	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;
	
	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';
	
	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;
	
	  // a flag to see when we're in the middle of a write.
	  this.writing = false;
	
	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;
	
	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;
	
	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;
	
	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function (er) {
	    onwrite(stream, er);
	  };
	
	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;
	
	  // the amount that is being written when _write is called.
	  this.writelen = 0;
	
	  this.bufferedRequest = null;
	  this.lastBufferedRequest = null;
	
	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;
	
	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;
	
	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;
	
	  // count buffered requests
	  this.bufferedRequestCount = 0;
	
	  // allocate the first CorkedRequest, there is always
	  // one allocated and free to use, and we maintain at most two
	  this.corkedRequestsFree = new CorkedRequest(this);
	}
	
	WritableState.prototype.getBuffer = function getBuffer() {
	  var current = this.bufferedRequest;
	  var out = [];
	  while (current) {
	    out.push(current);
	    current = current.next;
	  }
	  return out;
	};
	
	(function () {
	  try {
	    Object.defineProperty(WritableState.prototype, 'buffer', {
	      get: internalUtil.deprecate(function () {
	        return this.getBuffer();
	      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
	    });
	  } catch (_) {}
	})();
	
	// Test _writableState for inheritance to account for Duplex streams,
	// whose prototype chain only points to Readable.
	var realHasInstance;
	if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
	  realHasInstance = Function.prototype[Symbol.hasInstance];
	  Object.defineProperty(Writable, Symbol.hasInstance, {
	    value: function (object) {
	      if (realHasInstance.call(this, object)) return true;
	
	      return object && object._writableState instanceof WritableState;
	    }
	  });
	} else {
	  realHasInstance = function (object) {
	    return object instanceof this;
	  };
	}
	
	function Writable(options) {
	  Duplex = Duplex || __webpack_require__(48);
	
	  // Writable ctor is applied to Duplexes, too.
	  // `realHasInstance` is necessary because using plain `instanceof`
	  // would return false, as no `_writableState` property is attached.
	
	  // Trying to use the custom `instanceof` for Writable here will also break the
	  // Node.js LazyTransform implementation, which has a non-trivial getter for
	  // `_writableState` that would lead to infinite recursion.
	  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
	    return new Writable(options);
	  }
	
	  this._writableState = new WritableState(options, this);
	
	  // legacy.
	  this.writable = true;
	
	  if (options) {
	    if (typeof options.write === 'function') this._write = options.write;
	
	    if (typeof options.writev === 'function') this._writev = options.writev;
	  }
	
	  Stream.call(this);
	}
	
	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function () {
	  this.emit('error', new Error('Cannot pipe, not readable'));
	};
	
	function writeAfterEnd(stream, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  processNextTick(cb, er);
	}
	
	// If we get something that is not a buffer, string, null, or undefined,
	// and we're not in objectMode, then that's an error.
	// Otherwise stream chunks are all considered to be of length=1, and the
	// watermarks determine how many objects to keep in the buffer, rather than
	// how many bytes or characters.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  var er = false;
	  // Always throw error if a null is written
	  // if we are not in object mode then throw
	  // if it is not a buffer, string, or undefined.
	  if (chunk === null) {
	    er = new TypeError('May not write null values to stream');
	  } else if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  if (er) {
	    stream.emit('error', er);
	    processNextTick(cb, er);
	    valid = false;
	  }
	  return valid;
	}
	
	Writable.prototype.write = function (chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;
	
	  if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }
	
	  if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
	
	  if (typeof cb !== 'function') cb = nop;
	
	  if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, chunk, encoding, cb);
	  }
	
	  return ret;
	};
	
	Writable.prototype.cork = function () {
	  var state = this._writableState;
	
	  state.corked++;
	};
	
	Writable.prototype.uncork = function () {
	  var state = this._writableState;
	
	  if (state.corked) {
	    state.corked--;
	
	    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
	  }
	};
	
	Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
	  // node::ParseEncoding() requires lower case.
	  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
	  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
	  this._writableState.defaultEncoding = encoding;
	  return this;
	};
	
	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
	    chunk = bufferShim.from(chunk, encoding);
	  }
	  return chunk;
	}
	
	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, chunk, encoding, cb) {
	  chunk = decodeChunk(state, chunk, encoding);
	
	  if (Buffer.isBuffer(chunk)) encoding = 'buffer';
	  var len = state.objectMode ? 1 : chunk.length;
	
	  state.length += len;
	
	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret) state.needDrain = true;
	
	  if (state.writing || state.corked) {
	    var last = state.lastBufferedRequest;
	    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
	    if (last) {
	      last.next = state.lastBufferedRequest;
	    } else {
	      state.bufferedRequest = state.lastBufferedRequest;
	    }
	    state.bufferedRequestCount += 1;
	  } else {
	    doWrite(stream, state, false, len, chunk, encoding, cb);
	  }
	
	  return ret;
	}
	
	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}
	
	function onwriteError(stream, state, sync, er, cb) {
	  --state.pendingcb;
	  if (sync) processNextTick(cb, er);else cb(er);
	
	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}
	
	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}
	
	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;
	
	  onwriteStateUpdate(state);
	
	  if (er) onwriteError(stream, state, sync, er, cb);else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(state);
	
	    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
	      clearBuffer(stream, state);
	    }
	
	    if (sync) {
	      /*<replacement>*/
	      asyncWrite(afterWrite, stream, state, finished, cb);
	      /*</replacement>*/
	    } else {
	        afterWrite(stream, state, finished, cb);
	      }
	  }
	}
	
	function afterWrite(stream, state, finished, cb) {
	  if (!finished) onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}
	
	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}
	
	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;
	  var entry = state.bufferedRequest;
	
	  if (stream._writev && entry && entry.next) {
	    // Fast case, write everything using _writev()
	    var l = state.bufferedRequestCount;
	    var buffer = new Array(l);
	    var holder = state.corkedRequestsFree;
	    holder.entry = entry;
	
	    var count = 0;
	    while (entry) {
	      buffer[count] = entry;
	      entry = entry.next;
	      count += 1;
	    }
	
	    doWrite(stream, state, true, state.length, buffer, '', holder.finish);
	
	    // doWrite is almost always async, defer these to save a bit of time
	    // as the hot path ends with doWrite
	    state.pendingcb++;
	    state.lastBufferedRequest = null;
	    if (holder.next) {
	      state.corkedRequestsFree = holder.next;
	      holder.next = null;
	    } else {
	      state.corkedRequestsFree = new CorkedRequest(state);
	    }
	  } else {
	    // Slow case, write chunks one-by-one
	    while (entry) {
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;
	
	      doWrite(stream, state, false, len, chunk, encoding, cb);
	      entry = entry.next;
	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        break;
	      }
	    }
	
	    if (entry === null) state.lastBufferedRequest = null;
	  }
	
	  state.bufferedRequestCount = 0;
	  state.bufferedRequest = entry;
	  state.bufferProcessing = false;
	}
	
	Writable.prototype._write = function (chunk, encoding, cb) {
	  cb(new Error('_write() is not implemented'));
	};
	
	Writable.prototype._writev = null;
	
	Writable.prototype.end = function (chunk, encoding, cb) {
	  var state = this._writableState;
	
	  if (typeof chunk === 'function') {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }
	
	  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);
	
	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }
	
	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished) endWritable(this, state, cb);
	};
	
	function needFinish(state) {
	  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
	}
	
	function prefinish(stream, state) {
	  if (!state.prefinished) {
	    state.prefinished = true;
	    stream.emit('prefinish');
	  }
	}
	
	function finishMaybe(stream, state) {
	  var need = needFinish(state);
	  if (need) {
	    if (state.pendingcb === 0) {
	      prefinish(stream, state);
	      state.finished = true;
	      stream.emit('finish');
	    } else {
	      prefinish(stream, state);
	    }
	  }
	  return need;
	}
	
	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
	  }
	  state.ended = true;
	  stream.writable = false;
	}
	
	// It seems a linked list but it is not
	// there will be only 2 of these for each stream
	function CorkedRequest(state) {
	  var _this = this;
	
	  this.next = null;
	  this.entry = null;
	
	  this.finish = function (err) {
	    var entry = _this.entry;
	    _this.entry = null;
	    while (entry) {
	      var cb = entry.callback;
	      state.pendingcb--;
	      cb(err);
	      entry = entry.next;
	    }
	    if (state.corkedRequestsFree) {
	      state.corkedRequestsFree.next = _this;
	    } else {
	      state.corkedRequestsFree = _this;
	    }
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(39)))

/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var Stream = (function (){
	  try {
	    return __webpack_require__(236); // hack to fix a circular dependency issue when used with browserify
	  } catch(_){}
	}());
	exports = module.exports = __webpack_require__(306);
	exports.Stream = Stream || exports;
	exports.Readable = exports;
	exports.Writable = __webpack_require__(224);
	exports.Duplex = __webpack_require__(48);
	exports.Transform = __webpack_require__(223);
	exports.PassThrough = __webpack_require__(305);
	
	if (!process.browser && process.env.READABLE_STREAM === 'disable' && Stream) {
	  module.exports = Stream;
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(39)))

/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(4);
	var catch_1 = __webpack_require__(318);
	Observable_1.Observable.prototype.catch = catch_1._catch;
	Observable_1.Observable.prototype._catch = catch_1._catch;
	//# sourceMappingURL=catch.js.map

/***/ },
/* 227 */,
/* 228 */,
/* 229 */,
/* 230 */,
/* 231 */,
/* 232 */,
/* 233 */,
/* 234 */,
/* 235 */,
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	module.exports = Stream;
	
	var EE = __webpack_require__(80).EventEmitter;
	var inherits = __webpack_require__(38);
	
	inherits(Stream, EE);
	Stream.Readable = __webpack_require__(225);
	Stream.Writable = __webpack_require__(586);
	Stream.Duplex = __webpack_require__(582);
	Stream.Transform = __webpack_require__(585);
	Stream.PassThrough = __webpack_require__(584);
	
	// Backwards-compat with node 0.4.x
	Stream.Stream = Stream;
	
	
	
	// old-style streams.  Note that the pipe method (the only relevant
	// part of this class) is overridden in the Readable class.
	
	function Stream() {
	  EE.call(this);
	}
	
	Stream.prototype.pipe = function(dest, options) {
	  var source = this;
	
	  function ondata(chunk) {
	    if (dest.writable) {
	      if (false === dest.write(chunk) && source.pause) {
	        source.pause();
	      }
	    }
	  }
	
	  source.on('data', ondata);
	
	  function ondrain() {
	    if (source.readable && source.resume) {
	      source.resume();
	    }
	  }
	
	  dest.on('drain', ondrain);
	
	  // If the 'end' option is not supplied, dest.end() will be called when
	  // source gets the 'end' or 'close' events.  Only dest.end() once.
	  if (!dest._isStdio && (!options || options.end !== false)) {
	    source.on('end', onend);
	    source.on('close', onclose);
	  }
	
	  var didOnEnd = false;
	  function onend() {
	    if (didOnEnd) return;
	    didOnEnd = true;
	
	    dest.end();
	  }
	
	
	  function onclose() {
	    if (didOnEnd) return;
	    didOnEnd = true;
	
	    if (typeof dest.destroy === 'function') dest.destroy();
	  }
	
	  // don't leave dangling pipes when there are errors.
	  function onerror(er) {
	    cleanup();
	    if (EE.listenerCount(this, 'error') === 0) {
	      throw er; // Unhandled stream error in pipe.
	    }
	  }
	
	  source.on('error', onerror);
	  dest.on('error', onerror);
	
	  // remove all the event listeners that were added.
	  function cleanup() {
	    source.removeListener('data', ondata);
	    dest.removeListener('drain', ondrain);
	
	    source.removeListener('end', onend);
	    source.removeListener('close', onclose);
	
	    source.removeListener('error', onerror);
	    dest.removeListener('error', onerror);
	
	    source.removeListener('end', cleanup);
	    source.removeListener('close', cleanup);
	
	    dest.removeListener('close', cleanup);
	  }
	
	  source.on('end', cleanup);
	  source.on('close', cleanup);
	
	  dest.on('close', cleanup);
	
	  dest.emit('pipe', source);
	
	  // Allow for unix-like usage: A.pipe(B).pipe(C)
	  return dest;
	};


/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var ClientRequest = __webpack_require__(631)
	var extend = __webpack_require__(645)
	var statusCodes = __webpack_require__(360)
	var url = __webpack_require__(330)
	
	var http = exports
	
	http.request = function (opts, cb) {
		if (typeof opts === 'string')
			opts = url.parse(opts)
		else
			opts = extend(opts)
	
		// Normally, the page is loaded from http or https, so not specifying a protocol
		// will result in a (valid) protocol-relative url. However, this won't work if
		// the protocol is something else, like 'file:'
		var defaultProtocol = global.location.protocol.search(/^https?:$/) === -1 ? 'http:' : ''
	
		var protocol = opts.protocol || defaultProtocol
		var host = opts.hostname || opts.host
		var port = opts.port
		var path = opts.path || '/'
	
		// Necessary for IPv6 addresses
		if (host && host.indexOf(':') !== -1)
			host = '[' + host + ']'
	
		// This may be a relative url. The browser should always be able to interpret it correctly.
		opts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path
		opts.method = (opts.method || 'GET').toUpperCase()
		opts.headers = opts.headers || {}
	
		// Also valid opts.auth, opts.mode
	
		var req = new ClientRequest(opts)
		if (cb)
			req.on('response', cb)
		return req
	}
	
	http.get = function get (opts, cb) {
		var req = http.request(opts, cb)
		req.end()
		return req
	}
	
	http.Agent = function () {}
	http.Agent.defaultMaxSockets = 4
	
	http.STATUS_CODES = statusCodes
	
	http.METHODS = [
		'CHECKOUT',
		'CONNECT',
		'COPY',
		'DELETE',
		'GET',
		'HEAD',
		'LOCK',
		'M-SEARCH',
		'MERGE',
		'MKACTIVITY',
		'MKCOL',
		'MOVE',
		'NOTIFY',
		'OPTIONS',
		'PATCH',
		'POST',
		'PROPFIND',
		'PROPPATCH',
		'PURGE',
		'PUT',
		'REPORT',
		'SEARCH',
		'SUBSCRIBE',
		'TRACE',
		'UNLOCK',
		'UNSUBSCRIBE'
	]
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 238 */,
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	/* angular2-moment (c) 2015, 2016 Uri Shaked / MIT Licence */
	"use strict";
	var core_1 = __webpack_require__(3);
	var moment = __webpack_require__(1);
	// under systemjs, moment is actually exported as the default export, so we account for that
	var momentConstructor = moment.default || moment;
	var CalendarPipe = (function () {
	    function CalendarPipe(cdRef, ngZone) {
	        var _this = this;
	        this.cdRef = cdRef;
	        this.ngZone = ngZone;
	        // using a single static timer for all instances of this pipe for performance reasons
	        CalendarPipe.initTimer();
	        CalendarPipe.refs++;
	        // values such as Today will need to be replaced with Yesterday after midnight,
	        // so make sure we subscribe to an EventEmitter that we set up to emit at midnight
	        this.ngZone.runOutsideAngular(function () {
	            return _this.midnightSub = CalendarPipe.midnight.subscribe(function () {
	                _this.ngZone.run(function () { return _this.cdRef.markForCheck(); });
	            });
	        });
	    }
	    CalendarPipe.prototype.transform = function (value) {
	        var args = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            args[_i - 1] = arguments[_i];
	        }
	        var formats = null;
	        var referenceTime = null;
	        for (var i = 0, len = args.length; i < len; i++) {
	            if (args[i] !== null) {
	                if (typeof args[i] === 'object' && !moment.isMoment(args[i])) {
	                    formats = args[i];
	                }
	                else {
	                    referenceTime = momentConstructor(args[i]);
	                }
	            }
	        }
	        return momentConstructor(value).calendar(referenceTime, formats);
	    };
	    CalendarPipe.prototype.ngOnDestroy = function () {
	        if (CalendarPipe.refs > 0) {
	            CalendarPipe.refs--;
	        }
	        if (CalendarPipe.refs === 0) {
	            CalendarPipe.removeTimer();
	        }
	        this.midnightSub.unsubscribe();
	    };
	    CalendarPipe.initTimer = function () {
	        // initialize the timer
	        if (!CalendarPipe.midnight) {
	            CalendarPipe.midnight = new core_1.EventEmitter();
	            if (typeof window !== 'undefined') {
	                var timeToUpdate = CalendarPipe._getMillisecondsUntilUpdate();
	                CalendarPipe.timer = window.setTimeout(function () {
	                    // emit the current date
	                    CalendarPipe.midnight.emit(new Date());
	                    // refresh the timer
	                    CalendarPipe.removeTimer();
	                    CalendarPipe.initTimer();
	                }, timeToUpdate);
	            }
	        }
	    };
	    CalendarPipe.removeTimer = function () {
	        if (CalendarPipe.timer) {
	            window.clearTimeout(CalendarPipe.timer);
	            CalendarPipe.timer = null;
	            CalendarPipe.midnight = null;
	        }
	    };
	    CalendarPipe._getMillisecondsUntilUpdate = function () {
	        var now = momentConstructor();
	        var tomorrow = momentConstructor().startOf('day').add(1, 'days');
	        var timeToMidnight = tomorrow.valueOf() - now.valueOf();
	        return timeToMidnight + 1000; // 1 second after midnight
	    };
	    /**
	     * @private Internal reference counter, so we can clean up when no instances are in use
	     * @type {number}
	     */
	    CalendarPipe.refs = 0;
	    CalendarPipe.decorators = [
	        { type: core_1.Pipe, args: [{ name: 'amCalendar', pure: false },] },
	    ];
	    /** @nocollapse */
	    CalendarPipe.ctorParameters = [
	        { type: core_1.ChangeDetectorRef, },
	        { type: core_1.NgZone, },
	    ];
	    return CalendarPipe;
	}());
	exports.CalendarPipe = CalendarPipe;
	//# sourceMappingURL=calendar.pipe.js.map

/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	/* angular2-moment (c) 2015, 2016 Uri Shaked / MIT Licence */
	"use strict";
	var core_1 = __webpack_require__(3);
	var moment = __webpack_require__(1);
	// under systemjs, moment is actually exported as the default export, so we account for that
	var momentConstructor = moment.default || moment;
	var DateFormatPipe = (function () {
	    function DateFormatPipe() {
	    }
	    DateFormatPipe.prototype.transform = function (value) {
	        var args = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            args[_i - 1] = arguments[_i];
	        }
	        if (!value)
	            return '';
	        return momentConstructor(value).format(args[0]);
	    };
	    DateFormatPipe.decorators = [
	        { type: core_1.Pipe, args: [{ name: 'amDateFormat' },] },
	    ];
	    /** @nocollapse */
	    DateFormatPipe.ctorParameters = [];
	    return DateFormatPipe;
	}());
	exports.DateFormatPipe = DateFormatPipe;
	//# sourceMappingURL=date-format.pipe.js.map

/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	/* angular2-moment (c) 2015, 2016 Uri Shaked / MIT Licence */
	"use strict";
	var core_1 = __webpack_require__(3);
	var moment = __webpack_require__(1);
	// under systemjs, moment is actually exported as the default export, so we account for that
	var momentConstructor = moment.default || moment;
	var DifferencePipe = (function () {
	    function DifferencePipe() {
	    }
	    DifferencePipe.prototype.transform = function (value, otherValue, unit, precision) {
	        var date = momentConstructor(value);
	        var date2 = (otherValue !== null) ? momentConstructor(otherValue) : momentConstructor();
	        return date.diff(date2, unit, precision);
	    };
	    DifferencePipe.decorators = [
	        { type: core_1.Pipe, args: [{ name: 'amDifference' },] },
	    ];
	    /** @nocollapse */
	    DifferencePipe.ctorParameters = [];
	    return DifferencePipe;
	}());
	exports.DifferencePipe = DifferencePipe;
	//# sourceMappingURL=difference.pipe.js.map

/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var core_1 = __webpack_require__(3);
	var moment = __webpack_require__(1);
	var DurationPipe = (function () {
	    function DurationPipe() {
	    }
	    DurationPipe.prototype.transform = function (value) {
	        var args = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            args[_i - 1] = arguments[_i];
	        }
	        if (typeof args === 'undefined' || args.length !== 1) {
	            throw new Error('DurationPipe: missing required time unit argument');
	        }
	        return moment.duration(value, args[0]).humanize();
	    };
	    DurationPipe.decorators = [
	        { type: core_1.Pipe, args: [{ name: 'amDuration' },] },
	    ];
	    /** @nocollapse */
	    DurationPipe.ctorParameters = [];
	    return DurationPipe;
	}());
	exports.DurationPipe = DurationPipe;
	//# sourceMappingURL=duration.pipe.js.map

/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	/* angular2-moment (c) 2015, 2016 Uri Shaked / MIT Licence */
	"use strict";
	var core_1 = __webpack_require__(3);
	var moment = __webpack_require__(1);
	var FromUnixPipe = (function () {
	    function FromUnixPipe() {
	    }
	    FromUnixPipe.prototype.transform = function (value) {
	        var args = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            args[_i - 1] = arguments[_i];
	        }
	        if (typeof value === 'string') {
	            value = +value;
	        }
	        return moment.unix(value);
	    };
	    FromUnixPipe.decorators = [
	        { type: core_1.Pipe, args: [{ name: 'amFromUnix' },] },
	    ];
	    /** @nocollapse */
	    FromUnixPipe.ctorParameters = [];
	    return FromUnixPipe;
	}());
	exports.FromUnixPipe = FromUnixPipe;
	//# sourceMappingURL=from-unix.pipe.js.map

/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	/* angular2-moment (c) 2015, 2016 Uri Shaked / MIT Licence */
	"use strict";
	var core_1 = __webpack_require__(3);
	var moment = __webpack_require__(1);
	// under systemjs, moment is actually exported as the default export, so we account for that
	var momentConstructor = moment.default || moment;
	var TimeAgoPipe = (function () {
	    function TimeAgoPipe(cdRef, ngZone) {
	        this.cdRef = cdRef;
	        this.ngZone = ngZone;
	    }
	    TimeAgoPipe.prototype.transform = function (value, omitSuffix) {
	        if (this.hasChanged(value, omitSuffix)) {
	            this.lastTime = this.getTime(value);
	            this.lastValue = value;
	            this.lastOmitSuffix = omitSuffix;
	            this.removeTimer();
	            this.createTimer();
	            this.lastText = momentConstructor(value).from(momentConstructor(), omitSuffix);
	        }
	        else {
	            this.createTimer();
	        }
	        return this.lastText;
	    };
	    TimeAgoPipe.prototype.ngOnDestroy = function () {
	        this.removeTimer();
	    };
	    TimeAgoPipe.prototype.createTimer = function () {
	        var _this = this;
	        if (this.currentTimer) {
	            return;
	        }
	        var momentInstance = momentConstructor(this.lastValue);
	        var timeToUpdate = this.getSecondsUntilUpdate(momentInstance) * 1000;
	        this.currentTimer = this.ngZone.runOutsideAngular(function () {
	            if (typeof window !== 'undefined') {
	                return window.setTimeout(function () {
	                    _this.lastText = momentConstructor(_this.lastValue).from(momentConstructor(), _this.lastOmitSuffix);
	                    _this.currentTimer = null;
	                    _this.ngZone.run(function () { return _this.cdRef.markForCheck(); });
	                }, timeToUpdate);
	            }
	        });
	    };
	    TimeAgoPipe.prototype.removeTimer = function () {
	        if (this.currentTimer) {
	            window.clearTimeout(this.currentTimer);
	            this.currentTimer = null;
	        }
	    };
	    TimeAgoPipe.prototype.getSecondsUntilUpdate = function (momentInstance) {
	        var howOld = Math.abs(momentConstructor().diff(momentInstance, 'minute'));
	        if (howOld < 1) {
	            return 1;
	        }
	        else if (howOld < 60) {
	            return 30;
	        }
	        else if (howOld < 180) {
	            return 300;
	        }
	        else {
	            return 3600;
	        }
	    };
	    TimeAgoPipe.prototype.hasChanged = function (value, omitSuffix) {
	        return this.getTime(value) !== this.lastTime || omitSuffix !== this.lastOmitSuffix;
	    };
	    TimeAgoPipe.prototype.getTime = function (value) {
	        if (moment.isDate(value)) {
	            return value.getTime();
	        }
	        else if (moment.isMoment(value)) {
	            return value.valueOf();
	        }
	        else {
	            return momentConstructor(value).valueOf();
	        }
	    };
	    TimeAgoPipe.decorators = [
	        { type: core_1.Pipe, args: [{ name: 'amTimeAgo', pure: false },] },
	    ];
	    /** @nocollapse */
	    TimeAgoPipe.ctorParameters = [
	        { type: core_1.ChangeDetectorRef, },
	        { type: core_1.NgZone, },
	    ];
	    return TimeAgoPipe;
	}());
	exports.TimeAgoPipe = TimeAgoPipe;
	//# sourceMappingURL=time-ago.pipe.js.map

/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var core_1 = __webpack_require__(3);
	var moment = __webpack_require__(1);
	// under systemjs, moment is actually exported as the default export, so we account for that
	var momentConstructor = moment.default || moment;
	var UtcPipe = (function () {
	    function UtcPipe() {
	    }
	    UtcPipe.prototype.transform = function (value) {
	        return moment(value).utc();
	    };
	    UtcPipe.decorators = [
	        { type: core_1.Pipe, args: [{ name: 'amUtc' },] },
	    ];
	    /** @nocollapse */
	    UtcPipe.ctorParameters = [];
	    return UtcPipe;
	}());
	exports.UtcPipe = UtcPipe;
	//# sourceMappingURL=utc.pipe.js.map

/***/ },
/* 246 */
/***/ function(module, exports) {

	"use strict";


/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	const core_1 = __webpack_require__(3);
	const router_1 = __webpack_require__(22);
	const prismic_1 = __webpack_require__(19);
	const prismic_io_1 = __webpack_require__(56);
	let CardBoardComponent = class CardBoardComponent {
	    constructor(route, router, prismicService, linkResolver) {
	        this.route = route;
	        this.router = router;
	        this.prismicService = prismicService;
	        this.linkResolver = linkResolver;
	        this.queryTitle = '';
	        this.category = '';
	        this.imageUrl = '';
	        this.imageHeight = 0;
	        this.current_size = 0;
	        this.card_per_row = 3; //1,2,3,4,6,12
	        this.card_per_page = 9;
	        this.tags = ['menswear', 'mensfashion', 'menstyle', 'mensstyle', 'menfashion', 'trend', 'trendy', 'trends', 'trending', 'style', 'pink', 'outfit', 'fashionweek'];
	        //masonry moodboard *width 1162
	        this.fashion_moods = [{
	                img: './../../../resources/img/recommend-tags/ok-fashion.jpg',
	                maxWidth: 300,
	                maxHeight: 250,
	                caption: 'shoestastic!'
	            }, {
	                img: './../../../resources/img/recommend-tags/fashion2.jpg',
	                maxWidth: 300,
	                maxHeight: 290,
	                caption: 'the jewels season'
	            }, {
	                img: './../../../resources/img/recommend-tags/fashion3-1.jpg',
	                maxWidth: 420,
	                maxHeight: 350,
	                caption: 'denim days'
	            }, {
	                img: './../../../resources/img/recommend-tags/fashion4-1.jpg',
	                maxWidth: 340,
	                maxHeight: 250,
	                caption: 'for bagaholics only'
	            }, {
	                img: './../../../resources/img/recommend-tags/fashion5-1.jpg',
	                maxWidth: 300,
	                maxHeight: 250,
	                caption: 'make it casual chic'
	            }];
	        this.loaded = false;
	        this.sub = this.route.params.subscribe(params => {
	            this.loaded = false;
	            this.image = null;
	            document.body.scrollTop = 0;
	            console.log(router.url);
	            if (params['category'] !== undefined) {
	                this.category = params['category'];
	                if (this.router.url === '/fashion/all') {
	                    prismicService.api().then((api) => api.query([prismic_io_1.Prismic.Predicates.at('document.type', 'article'), prismic_io_1.Prismic.Predicates.any('my.article.link', ['WHIp5ikAALg6MBFc', 'WKMVdiUAAFBBgJLB', 'WHI-uykAAJJWMG0F', 'WKMa4SUAADBCgKrr'])], {
	                        orderings: '[my.article.date desc]',
	                        'fetchLinks': 'category.name'
	                    })).then((response) => {
	                        this.getDataResponse(response);
	                    });
	                }
	                else if (this.router.url === '/beauty/all') {
	                    prismicService.api().then((api) => api.query([prismic_io_1.Prismic.Predicates.at('document.type', 'article'), prismic_io_1.Prismic.Predicates.any('my.article.link', ['WKqliyYAAKRkYjfX', 'WKqmfSYAAHdmYjwG'])], {
	                        orderings: '[my.article.date desc]',
	                        'fetchLinks': 'category.name'
	                    })).then((response) => {
	                        this.getDataResponse(response);
	                    });
	                }
	                else if (this.router.url === '/birls/all') {
	                    prismicService.api().then((api) => api.query([prismic_io_1.Prismic.Predicates.at('document.type', 'article'), prismic_io_1.Prismic.Predicates.any('my.article.link', ['WK9M_yYAAKYAkhqU', 'WK9PqyYAANwAkiZN'])], {
	                        orderings: '[my.article.date desc]',
	                        'fetchLinks': 'category.name'
	                    })).then((response) => {
	                        this.getDataResponse(response);
	                    });
	                }
	                else if (this.router.url === '/life-style/all') {
	                    prismicService.api().then((api) => api.query([prismic_io_1.Prismic.Predicates.at('document.type', 'article'), prismic_io_1.Prismic.Predicates.any('my.article.link', ['WV0FKiUAAFUG3buM', 'WV0FXyUAAFYG3bx_', 'WV0FfiUAAJ4H3b0P', 'WV0I1SUAAFIG3cvo'])], {
	                        orderings: '[my.article.date desc]',
	                        'fetchLinks': 'category.name'
	                    })).then((response) => {
	                        this.getDataResponse(response);
	                    });
	                }
	                else {
	                    prismicService.api().then((api) => api.getByUID('category', this.category)).then((document) => {
	                        this.loadingImg = false;
	                        const categoryID = document.id;
	                        this.image = document.getImageView('category.cover', 'cover');
	                        this.description = document.getText('category.description');
	                        prismicService.api().then((api) => api.query([prismic_io_1.Prismic.Predicates.at('document.type', 'article'),
	                            prismic_io_1.Prismic.Predicates.at('my.article.link', categoryID)
	                        ], {
	                            orderings: '[my.article.date desc]',
	                            'fetchLinks': 'category.name'
	                        })).then((response) => {
	                            this.getDataResponse(response);
	                        });
	                    });
	                }
	            }
	            else if (params['tagname'] !== undefined) {
	                this.tag = params['tagname'];
	                prismicService.api().then((api) => api.query([prismic_io_1.Prismic.Predicates.at('document.type', 'article'),
	                    prismic_io_1.Prismic.Predicates.at('document.tags', [this.tag])
	                ], {
	                    orderings: '[my.article.date desc]',
	                    'fetchLinks': 'category.name'
	                })).then((response) => {
	                    this.getDataResponse(response);
	                });
	            }
	        });
	    }
	    capitalizeFirstLetter(string) {
	        return string.charAt(0).toUpperCase() + string.slice(1);
	    }
	    more() {
	        this.card_per_page += 3;
	    }
	    getDataResponse(response) {
	        this.documents = response.results;
	        this.queryTitle = this.category;
	        this.loaded = true;
	    }
	    ngAfterViewInit() {
	    }
	    ngOnInit() {
	    }
	    ngOnDestroy() {
	        this.sub.unsubscribe();
	    }
	};
	CardBoardComponent = __decorate([
	    core_1.Component({
	        template: __webpack_require__(573),
	        styles: [__webpack_require__(563)]
	    }),
	    __param(3, core_1.Inject('LinkResolver')), 
	    __metadata('design:paramtypes', [(typeof (_a = typeof router_1.ActivatedRoute !== 'undefined' && router_1.ActivatedRoute) === 'function' && _a) || Object, (typeof (_b = typeof router_1.Router !== 'undefined' && router_1.Router) === 'function' && _b) || Object, (typeof (_c = typeof prismic_1.PrismicService !== 'undefined' && prismic_1.PrismicService) === 'function' && _c) || Object, Object])
	], CardBoardComponent);
	exports.CardBoardComponent = CardBoardComponent;
	var _a, _b, _c;


/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	const core_1 = __webpack_require__(3);
	const router_1 = __webpack_require__(22);
	const prismic_1 = __webpack_require__(19);
	const prismic_io_1 = __webpack_require__(56);
	let RunwayBoardComponent = class RunwayBoardComponent {
	    constructor(route, router, prismicService, linkResolver) {
	        this.route = route;
	        this.router = router;
	        this.prismicService = prismicService;
	        this.linkResolver = linkResolver;
	        this.loadedSelect = false;
	        this.selected = {
	            season: 'all',
	            brand: 'all'
	        };
	        this.queryTitle = '';
	        this.category = '';
	        this.imageUrl = './../../resources/img/runway.jpg';
	        this.imageHeight = 0;
	        this.current_size = 0;
	        this.card_per_page = 12;
	        this.loaded = false;
	        //social share
	        this.fbUrl = 'https://www.facebook.com/birlsmagazine';
	        this.twUrl = 'https://www.facebook.com/birlsmagazine';
	        this.sub = this.route.params.subscribe(params => {
	            this.loaded = false;
	            document.body.scrollTop = 0;
	            //query season,brand name
	            prismicService.api().then((api) => api.query([
	                prismic_io_1.Prismic.Predicates.at('document.type', 'season')
	            ], {
	                orderings: '[my.season.name desc]'
	            })).then((response) => {
	                this.seasons = response.results;
	                prismicService.api().then((api) => api.query([
	                    prismic_io_1.Prismic.Predicates.at('document.type', 'brand')
	                ], {
	                    orderings: '[my.brand.name desc]'
	                })).then((response) => {
	                    this.brands = response.results;
	                    this.loadedSelect = true;
	                    prismicService.api().then((api) => api.query([
	                        prismic_io_1.Prismic.Predicates.at('document.type', 'collection')
	                    ], {
	                        orderings: '[my.collection.date desc]',
	                        'fetchLinks': ['brand.name', 'season.name']
	                    })).then((response) => {
	                        this.documents = response.results;
	                        console.log(this.documents);
	                        this.loaded = true;
	                    });
	                });
	            });
	        });
	    }
	    capitalizeFirstLetter(string) {
	        return string.charAt(0).toUpperCase() + string.slice(1);
	    }
	    more() {
	        this.card_per_page += 3;
	    }
	    callSeason(seasonID) {
	        console.log(seasonID);
	        this.loadedSelect = false;
	        if (seasonID === 'all') {
	            this.prismicService.api().then((api) => api.query([
	                prismic_io_1.Prismic.Predicates.at('document.type', 'brand')
	            ], {
	                orderings: '[my.brand.name desc]'
	            }))
	                .then((response) => {
	                this.brands = response.results;
	                this.loadedSelect = true;
	                // console.log(this.brands);
	            });
	            this.selected.season = 'all';
	        }
	        else {
	            for (let i = this.brands.length - 1; i >= 0; i--) {
	                if (this.brands[i].id !== this.selected.brand) {
	                    console.log('splice: ' + this.brands[i].getText('brand.name'));
	                    this.brands.splice(i, 1);
	                }
	            }
	            this.prismicService.api().then((api) => api.query([
	                prismic_io_1.Prismic.Predicates.at('document.type', 'collection'),
	                prismic_io_1.Prismic.Predicates.at('my.collection.season', seasonID)
	            ], {
	                orderings: '[my.collection.brand desc]',
	                'fetchLinks': 'brand.name'
	            })).then((response) => {
	                let temp = [];
	                for (let doc of response.results) {
	                    let brand = doc.getLink('collection.brand');
	                    let brandName = brand.getText('brand.name');
	                    console.log(brandName);
	                    //dont push duplicating value
	                    if (temp.indexOf(brandName) < 0 && brand.id !== this.selected.brand) {
	                        temp.push(brandName);
	                        this.brands.push(brand);
	                    }
	                }
	                this.selected.season = seasonID;
	                this.loadedSelect = true;
	            });
	        }
	    }
	    callBrand(brandID) {
	        console.log(brandID);
	        this.loadedSelect = false;
	        if (brandID === 'all') {
	            //save query time
	            this.prismicService.api().then((api) => api.query([
	                prismic_io_1.Prismic.Predicates.at('document.type', 'season')
	            ], {
	                orderings: '[my.season.name desc]'
	            })).then((response) => {
	                this.seasons = response.results;
	                this.loadedSelect = true;
	            });
	            this.selected.brand = 'all';
	        }
	        else {
	            for (let i = this.seasons.length - 1; i >= 0; i--) {
	                if (this.seasons[i].id !== this.selected.season) {
	                    console.log('splice: ' + this.seasons[i].getText('season.name'));
	                    this.seasons.splice(i, 1);
	                }
	            }
	            this.prismicService.api().then((api) => api.query([
	                prismic_io_1.Prismic.Predicates.at('document.type', 'collection'),
	                prismic_io_1.Prismic.Predicates.at('my.collection.brand', brandID)
	            ], {
	                orderings: '[my.collection.season desc]',
	                'fetchLinks': 'season.name'
	            })).then((response) => {
	                let temp = [];
	                for (let doc of response.results) {
	                    let season = doc.getLink('collection.season');
	                    let seasonName = season.getText('season.name');
	                    if (temp.indexOf(seasonName) < 0 && season.id !== this.selected.season) {
	                        temp.push(seasonName);
	                        this.seasons.push(season);
	                        console.log('push: ' + seasonName);
	                    }
	                }
	                this.selected.brand = brandID;
	                this.loadedSelect = true;
	            });
	        }
	    }
	    ngAfterViewInit() { }
	    ngOnInit() {
	        document.body.scrollTop = 0;
	        this.loaded = false;
	    }
	};
	RunwayBoardComponent = __decorate([
	    core_1.Component({
	        template: __webpack_require__(574),
	        styles: [__webpack_require__(564)]
	    }),
	    __param(3, core_1.Inject('LinkResolver')), 
	    __metadata('design:paramtypes', [(typeof (_a = typeof router_1.ActivatedRoute !== 'undefined' && router_1.ActivatedRoute) === 'function' && _a) || Object, (typeof (_b = typeof router_1.Router !== 'undefined' && router_1.Router) === 'function' && _b) || Object, (typeof (_c = typeof prismic_1.PrismicService !== 'undefined' && prismic_1.PrismicService) === 'function' && _c) || Object, Object])
	], RunwayBoardComponent);
	exports.RunwayBoardComponent = RunwayBoardComponent;
	var _a, _b, _c;


/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	const core_1 = __webpack_require__(3);
	const router_1 = __webpack_require__(22);
	const prismic_1 = __webpack_require__(19);
	const prismic_io_1 = __webpack_require__(56);
	let OtherSeasonComponent = class OtherSeasonComponent {
	    constructor(route, router, prismicService, linkResolver) {
	        this.route = route;
	        this.router = router;
	        this.prismicService = prismicService;
	        this.linkResolver = linkResolver;
	        this.showDate = false;
	        this.card_per_page = 12;
	        this.loaded = false;
	        this.sub = this.route.parent.params.subscribe(params => {
	            const uid = params['uid'];
	            this.uid = uid;
	            // console.log(uid);
	            this.prismicService.api().then((api) => api.getByUID('collection', uid, { 'fetchLinks': 'brand.name' })).then((res) => {
	                this.document = res;
	                this.brand = res.getLink('collection.brand');
	                this.prismicService.api().then((api) => api.query([prismic_io_1.Prismic.Predicates.at('document.type', 'collection'),
	                    prismic_io_1.Prismic.Predicates.at('my.collection.brand', this.brand.id)], { orderings: '[my.collection.brand desc]', 'fetchLinks': ['brand.name', 'season.name'] })).then((response) => {
	                    this.documents = response.results;
	                    console.log(this.documents);
	                    this.loaded = true;
	                });
	            });
	        });
	    }
	    capitalizeFirstLetter(string) {
	        if (string !== undefined) {
	            return string.charAt(0).toUpperCase() + string.slice(1);
	        }
	        return 'error';
	    }
	    more() {
	        this.card_per_page += 3;
	    }
	    ngAfterViewInit() {
	    }
	    ngOnInit() {
	        document.body.scrollTop = 0;
	        this.loaded = false;
	    }
	};
	OtherSeasonComponent = __decorate([
	    core_1.Component({
	        template: __webpack_require__(575),
	        styles: [__webpack_require__(565)]
	    }),
	    __param(3, core_1.Inject('LinkResolver')), 
	    __metadata('design:paramtypes', [(typeof (_a = typeof router_1.ActivatedRoute !== 'undefined' && router_1.ActivatedRoute) === 'function' && _a) || Object, (typeof (_b = typeof router_1.Router !== 'undefined' && router_1.Router) === 'function' && _b) || Object, (typeof (_c = typeof prismic_1.PrismicService !== 'undefined' && prismic_1.PrismicService) === 'function' && _c) || Object, Object])
	], OtherSeasonComponent);
	exports.OtherSeasonComponent = OtherSeasonComponent;
	var _a, _b, _c;


/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	const core_1 = __webpack_require__(3);
	const prismic_1 = __webpack_require__(19);
	const prismic_io_1 = __webpack_require__(56);
	const instagram_service_1 = __webpack_require__(251);
	let Home = class Home {
	    constructor(prismicService, instagramService, linkResolver) {
	        this.prismicService = prismicService;
	        this.instagramService = instagramService;
	        this.linkResolver = linkResolver;
	        this.card_per_page = 4;
	        this.loaded = 0;
	        this.current_slide = 0;
	        this.video = {
	            ss: './../../resources/img/vid/vid1.jpg',
	            url: 'https://www.youtube.com/watch?v=kmDMqzhvNLk'
	        };
	        this.populars = [
	            'Tacchi + calzini: come abbinarli in modo cool in inverno',
	            '7 mostre di moda da non perdere assolutamente nel 2017!',
	            'Tendenza Wrap dress: l’abito a vestaglia è il più cool del momento',
	            'Come vestirsi per uscire la sera, dormire fuori ma evitare la walk of shame',
	            'Sono le celebrity le nuove stiliste cool del momento?',
	            'How to get the Calvin Klein x Raf Simons look',
	            'Beauty Brand 2 Know: Wander Beauty'
	        ];
	    }
	    goUrl(url) {
	        window.open(url, "_blank");
	    }
	    next() {
	        this.current_slide++;
	        this.current_slide %= this.images.length;
	        console.log(this.current_slide);
	    }
	    prev() {
	        this.current_slide--;
	        this.current_slide %= this.images.length;
	        console.log(this.current_slide);
	    }
	    ngOnInit() {
	        // ig images
	        this
	            .instagramService
	            .getPictures()
	            .subscribe((IGimages) => {
	            this.IGimages = IGimages.slice(0, 14);
	            // console.log(this.IGimages);
	        });
	        //slider
	        this
	            .prismicService
	            .api()
	            .then((api) => api.query([
	            prismic_io_1.Prismic
	                .Predicates
	                .at('document.type', 'slider')
	        ]))
	            .then((response) => {
	            this.slider_docs = response.results;
	            this.images = this
	                .slider_docs[0]
	                .getGroup('slider.images')
	                .toArray();
	            this.loaded++;
	        });
	        //fashion
	        this
	            .prismicService
	            .api()
	            .then((api) => api.query([
	            prismic_io_1.Prismic
	                .Predicates
	                .at('document.type', 'article'),
	            prismic_io_1.Prismic
	                .Predicates
	                .any('my.article.link', ['WHIp5ikAALg6MBFc', 'WKMVdiUAAFBBgJLB', 'WHI-uykAAJJWMG0F', 'WKMa4SUAADBCgKrr'])
	        ], {
	            orderings: '[my.article.date desc]',
	            'fetchLinks': 'category.name',
	            pageSize: 4
	        }))
	            .then((response) => {
	            this.fashion_docs = response.results;
	            // console.log(this.fashion_docs);
	            this.loaded++;
	        });
	        //beauty and sub categories
	        this
	            .prismicService
	            .api()
	            .then((api) => {
	            api.query([
	                prismic_io_1.Prismic
	                    .Predicates
	                    .at('document.type', 'article'),
	                prismic_io_1.Prismic
	                    .Predicates
	                    .any('my.article.link', ['WKqliyYAAKRkYjfX', 'WKqmfSYAAHdmYjwG', 'WV0QLyUAAJ4H3eyj', 'WV0QEyUAAFYG3ewg'])
	            ], {
	                orderings: '[my.article.date desc]',
	                'fetchLinks': 'category.name',
	                pageSize: 5
	            }).then((response) => {
	                this.beauty_docs = response.results;
	                // console.log(this.beauty_docs);
	            });
	            // make-up
	            api.query([
	                prismic_io_1.Prismic
	                    .Predicates
	                    .at('document.type', 'article'),
	                prismic_io_1.Prismic
	                    .Predicates
	                    .any('my.article.link', ['WKqliyYAAKRkYjfX'])
	            ], {
	                orderings: '[my.article.date desc]',
	                'fetchLinks': 'category.name',
	                pageSize: 5
	            }).then((response) => {
	                this.makeUpDocs = response.results;
	                // console.log(this.beauty_docs);
	            });
	            // skincare
	            api.query([
	                prismic_io_1.Prismic
	                    .Predicates
	                    .at('document.type', 'article'),
	                prismic_io_1.Prismic
	                    .Predicates
	                    .any('my.article.link', ['WKqmfSYAAHdmYjwG'])
	            ], {
	                orderings: '[my.article.date desc]',
	                'fetchLinks': 'category.name',
	                pageSize: 5
	            }).then((response) => {
	                this.skinCareDocs = response.results;
	                // console.log(this.beauty_docs);
	            });
	            // beauty-tips
	            api.query([
	                prismic_io_1.Prismic
	                    .Predicates
	                    .at('document.type', 'article'),
	                prismic_io_1.Prismic
	                    .Predicates
	                    .any('my.article.link', ['WV0QLyUAAJ4H3eyj'])
	            ], {
	                orderings: '[my.article.date desc]',
	                'fetchLinks': 'category.name',
	                pageSize: 5
	            }).then((response) => {
	                this.beautyTipsDocs = response.results;
	                // console.log(this.beauty_docs);
	            });
	            // hair-and-nail
	            api.query([
	                prismic_io_1.Prismic
	                    .Predicates
	                    .at('document.type', 'article'),
	                prismic_io_1.Prismic
	                    .Predicates
	                    .any('my.article.link', ['WV0QEyUAAFYG3ewg'])
	            ], {
	                orderings: '[my.article.date desc]',
	                'fetchLinks': 'category.name',
	                pageSize: 5
	            }).then((response) => {
	                this.hairAndNailDocs = response.results;
	                // console.log(this.beauty_docs);
	            });
	            this.loaded++;
	        });
	        //birls
	        this
	            .prismicService
	            .api()
	            .then((api) => api.query([
	            prismic_io_1.Prismic
	                .Predicates
	                .at('document.type', 'article'),
	            prismic_io_1.Prismic
	                .Predicates
	                .any('my.article.link', ['WK9M_yYAAKYAkhqU', 'WK9PqyYAANwAkiZN'])
	        ], {
	            orderings: '[my.article.date desc]',
	            'fetchLinks': 'category.name',
	            pageSize: 4
	        }))
	            .then((response) => {
	            this.birls_docs = response.results;
	            console.log(this.birls_docs);
	            this.loaded++;
	        });
	        //collection
	        this
	            .prismicService
	            .api()
	            .then((api) => api.query([
	            prismic_io_1.Prismic
	                .Predicates
	                .at('document.type', 'collection'),
	            prismic_io_1.Prismic
	                .Predicates
	                .at('my.collection.enable-review', 'yes')
	        ], {
	            orderings: '[my.collection.date desc]',
	            'fetchLinks': [
	                'brand.name', 'season.name'
	            ],
	            pageSize: 4
	        }))
	            .then((response) => {
	            this.collection_docs = response.results;
	            // console.log(this.collection_docs);
	            this.loaded++;
	        });
	    }
	};
	Home = __decorate([
	    core_1.Component({ selector: 'home', styles: [__webpack_require__(566)], template: __webpack_require__(576) }),
	    __param(2, core_1.Inject('LinkResolver')), 
	    __metadata('design:paramtypes', [(typeof (_a = typeof prismic_1.PrismicService !== 'undefined' && prismic_1.PrismicService) === 'function' && _a) || Object, (typeof (_b = typeof instagram_service_1.InstagramService !== 'undefined' && instagram_service_1.InstagramService) === 'function' && _b) || Object, Object])
	], Home);
	exports.Home = Home;
	var _a, _b;


/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	const core_1 = __webpack_require__(3);
	const http_1 = __webpack_require__(40);
	const router_1 = __webpack_require__(22);
	let InstagramService = class InstagramService {
	    constructor(http, router) {
	        this.http = http;
	        this.router = router;
	        console.log('instagram services init');
	    }
	    getPictures() {
	        let headers = new http_1.Headers({
	            'Accept': '*/*'
	        });
	        try {
	            return this
	                .http
	                .request('http://127.0.0.1:8081/https://www.instagram.com/kristabirlslikesagirls/media/', {
	                method: 'GET',
	                headers
	            })
	                .map((res) => res.json().items);
	        }
	        catch (err) {
	            console.log(err);
	            return null;
	        }
	    }
	};
	InstagramService = __decorate([
	    core_1.Injectable(), 
	    __metadata('design:paramtypes', [(typeof (_a = typeof http_1.Http !== 'undefined' && http_1.Http) === 'function' && _a) || Object, (typeof (_b = typeof router_1.Router !== 'undefined' && router_1.Router) === 'function' && _b) || Object])
	], InstagramService);
	exports.InstagramService = InstagramService;
	var _a, _b;


/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	const core_1 = __webpack_require__(3);
	const router_1 = __webpack_require__(22);
	const prismic_1 = __webpack_require__(19);
	const prismic_io_1 = __webpack_require__(56);
	let Article = class Article {
	    constructor(route, router, prismicService, linkResolver) {
	        this.route = route;
	        this.router = router;
	        this.prismicService = prismicService;
	        this.linkResolver = linkResolver;
	        this.loaded = false;
	        this.maxRelatedDocs = 3;
	        this.disqusShortname = 'birlmag';
	        this.fbInner = `<div class=\"circle facebook\">
	                <i class=\"fa fa-facebook\" aria-hidden=\"true\"></i>
	              </div>`;
	        this.twitterInner = `<div class="circle twitter">
	                      <i class="fa fa-twitter" aria-hidden="true"></i>
	                   </div>`;
	        this.googleInner = `<div class="circle googlePlus">
	                    <i class="fa fa-google-plus" aria-hidden="true"></i>
	                </div>`;
	        this.pintInner = `<div class="circle pinterest">
	                    <i class="fa fa-pinterest" aria-hidden="true"></i>
	                </div>`;
	        this.inInner = `<div class="circle linkin">
	                    <i class="fa fa-linkedin" aria-hidden="true"></i>
	                </div>`;
	        this.tumblrInner = `<div class="circle tumblr">
	                    <i class="fa fa-tumblr" aria-hidden="true"></i>
	                </div>`;
	    }
	    calculateAspectRatioFit(srcWidth, srcHeight, maxWidth, maxHeight) {
	        var ratio = Math.min(maxWidth / srcWidth, maxHeight / srcHeight);
	        return { width: srcWidth * ratio, height: srcHeight * ratio };
	    }
	    capitalizeFirstLetter(string) {
	        if (string !== undefined) {
	            return string.charAt(0).toUpperCase() + string.slice(1);
	        }
	        return '';
	    }
	    ngOnInit() {
	        this.sub = this.route.params.subscribe(params => {
	            const uid = params['uid'];
	            document.body.scrollTop = 0;
	            this.page_url = window.location.href;
	            this.category = params['category'];
	            this.prismicService.api().then((api) => api.getByUID('article', uid)).then((res) => {
	                this.document = res;
	                this.title = res.getStructuredText('article.title');
	                this.author = res.getText('article.author');
	                this.date = res.getDate('article.date');
	                this.image = res.getImage('article.post-image');
	                this.slices = res.getSliceZone('article.body').slices;
	                this.tags = res.tags;
	                this.prismicService.api().then((api) => api.query([prismic_io_1.Prismic.Predicates.similar(this.document.id, 3),
	                    prismic_io_1.Prismic.Predicates.at('document.type', 'article')], { orderings: '[my.article.date desc]', 'fetchLinks': 'category.name' })).then((response) => {
	                    this._documents = response.results;
	                    console.log(this._documents);
	                    this.loaded = true;
	                });
	            });
	        });
	    }
	    ngAfterViewInit() {
	    }
	    ngOnDestroy() {
	        this.sub.unsubscribe();
	    }
	};
	Article = __decorate([
	    core_1.Component({
	        selector: 'myarticle',
	        styles: [__webpack_require__(303)],
	        template: __webpack_require__(304)
	    }),
	    __param(3, core_1.Inject('LinkResolver')), 
	    __metadata('design:paramtypes', [(typeof (_a = typeof router_1.ActivatedRoute !== 'undefined' && router_1.ActivatedRoute) === 'function' && _a) || Object, (typeof (_b = typeof router_1.Router !== 'undefined' && router_1.Router) === 'function' && _b) || Object, (typeof (_c = typeof prismic_1.PrismicService !== 'undefined' && prismic_1.PrismicService) === 'function' && _c) || Object, Object])
	], Article);
	exports.Article = Article;
	var _a, _b, _c;


/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	const core_1 = __webpack_require__(3);
	const router_1 = __webpack_require__(22);
	const prismic_1 = __webpack_require__(19);
	let Collection = class Collection {
	    constructor(route, router, prismicService, linkResolver) {
	        this.route = route;
	        this.router = router;
	        this.prismicService = prismicService;
	        this.linkResolver = linkResolver;
	        this.loaded = false;
	        this.sub = this.route.params.subscribe(params => {
	            const uid = params['uid'];
	            prismicService.api().then((api) => api.getByUID('collection', uid, { 'fetchLinks': ['brand.name', 'season.name'] })).then((res) => {
	                this.document = res;
	                this.enable = res.getText('collection.enable-review') === 'yes' ? true : false;
	                this.date = this.document.getDate('collection.date');
	                this.season = this.document.getLink('collection.season');
	                this.brand = this.document.getLink('collection.brand');
	                this.loaded = true;
	            });
	        });
	    }
	    calculateAspectRatioFit(srcWidth, srcHeight, maxWidth, maxHeight) {
	        var ratio = Math.min(maxWidth / srcWidth, maxHeight / srcHeight);
	        return { width: srcWidth * ratio, height: srcHeight * ratio };
	    }
	    capitalizeFirstLetter(string) {
	        return string.charAt(0).toUpperCase() + string.slice(1);
	    }
	    ngOnInit() {
	        //get last word in route path
	        document.body.scrollTop = 0;
	    }
	    ngAfterViewInit() {
	    }
	    ngOnDestroy() {
	        this.sub.unsubscribe();
	    }
	};
	__decorate([
	    core_1.Input(), 
	    __metadata('design:type', String)
	], Collection.prototype, "uid", void 0);
	Collection = __decorate([
	    core_1.Component({
	        selector: 'collection',
	        styles: [__webpack_require__(569)],
	        template: __webpack_require__(579)
	    }),
	    __param(3, core_1.Inject('LinkResolver')), 
	    __metadata('design:paramtypes', [(typeof (_a = typeof router_1.ActivatedRoute !== 'undefined' && router_1.ActivatedRoute) === 'function' && _a) || Object, (typeof (_b = typeof router_1.Router !== 'undefined' && router_1.Router) === 'function' && _b) || Object, (typeof (_c = typeof prismic_1.PrismicService !== 'undefined' && prismic_1.PrismicService) === 'function' && _c) || Object, Object])
	], Collection);
	exports.Collection = Collection;
	var _a, _b, _c;


/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	const core_1 = __webpack_require__(3);
	const router_1 = __webpack_require__(22);
	const prismic_1 = __webpack_require__(19);
	let Gallery = class Gallery {
	    constructor(router, prismicService, route, linkResolver) {
	        this.router = router;
	        this.prismicService = prismicService;
	        this.route = route;
	        this.linkResolver = linkResolver;
	        this.openModalWindow = false;
	        this.images = [];
	        this.sub = this.route.parent.params.subscribe(params => {
	            const uid = params['uid'];
	            // console.log(params);
	            prismicService.api().then((api) => api.getByUID('collection', uid, {
	                'fetchLinks': ['brand.name', 'season.name']
	            })).then((res) => {
	                this.document = res;
	                // console.log(res);
	                this.groupImages = this.document.getGroup('collection.gallery').toArray();
	                for (let i = 0; i < this.groupImages.length; i++) {
	                    let temp = this.groupImages[i].getFirstImage();
	                    if (temp !== null && temp !== undefined) {
	                        this.images.push({
	                            thumb: temp.getView('thumb') !== undefined ? temp.getView('thumb').url : 'http://www.yochuwa.com/wp-content/plugins/penci-portfolio//images/no-thumbnail.jpg',
	                            img: temp.url,
	                            description: this.groupImages[i].get('caption') !== null ? this.groupImages[i].get('caption').asText() : ''
	                        });
	                    }
	                }
	                this.loaded = true;
	            });
	        });
	    }
	    OpenImageModel(imageSrc, images) {
	        var imageModalPointer;
	        for (var i = 0; i < images.length; i++) {
	            if (imageSrc === images[i].img) {
	                imageModalPointer = i;
	                console.log('jhhl', i);
	                break;
	            }
	        }
	        this.openModalWindow = true;
	        this.images = images;
	        this.imagePointer = imageModalPointer;
	    }
	    cancelImageModel() {
	        this.openModalWindow = false;
	    }
	    ngOnInit() {
	        document.body.scrollTop = 0;
	    }
	    ngAfterViewInit() {
	    }
	    ngOnDestroy() {
	        this.sub.unsubscribe();
	    }
	};
	__decorate([
	    core_1.Input(), 
	    __metadata('design:type', Array)
	], Gallery.prototype, "images", void 0);
	Gallery = __decorate([
	    core_1.Component({
	        selector: 'gallery',
	        styles: [__webpack_require__(570)],
	        template: __webpack_require__(580)
	    }),
	    __param(3, core_1.Inject('LinkResolver')), 
	    __metadata('design:paramtypes', [(typeof (_a = typeof router_1.Router !== 'undefined' && router_1.Router) === 'function' && _a) || Object, (typeof (_b = typeof prismic_1.PrismicService !== 'undefined' && prismic_1.PrismicService) === 'function' && _b) || Object, (typeof (_c = typeof router_1.ActivatedRoute !== 'undefined' && router_1.ActivatedRoute) === 'function' && _c) || Object, Object])
	], Gallery);
	exports.Gallery = Gallery;
	var _a, _b, _c;


/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	const core_1 = __webpack_require__(3);
	const router_1 = __webpack_require__(22);
	const prismic_1 = __webpack_require__(19);
	let Review = class Review {
	    constructor(route, router, prismic, linkResolver) {
	        this.route = route;
	        this.router = router;
	        this.prismic = prismic;
	        this.linkResolver = linkResolver;
	        this.loaded = false;
	        this.disqusShortname = 'birlmag';
	        this.fbInner = `<div class=\"circle facebook\">
	                <i class=\"fa fa-facebook\" aria-hidden=\"true\"></i>
	              </div>`;
	        this.twitterInner = `<div class="circle twitter">
	                      <i class="fa fa-twitter" aria-hidden="true"></i>
	                   </div>`;
	        this.googleInner = `<div class="circle googlePlus">
	                    <i class="fa fa-google-plus" aria-hidden="true"></i>
	                </div>`;
	        this.pintInner = `<div class="circle pinterest">
	                    <i class="fa fa-pinterest" aria-hidden="true"></i>
	                </div>`;
	        this.inInner = `<div class="circle linkin">
	                    <i class="fa fa-linkedin" aria-hidden="true"></i>
	                </div>`;
	        this.tumblrInner = `<div class="circle tumblr">
	                    <i class="fa fa-tumblr" aria-hidden="true"></i>
	                </div>`;
	        this.sub = this.route.parent.params.subscribe(params => {
	            const uid = params['uid'];
	            this.page_url = window.location.href;
	            this.prismic.api().then((api) => api.getByUID('collection', uid)).then((res) => {
	                this.document = res;
	                this.title = res.getStructuredText('collection.title');
	                this.author = res.getText('collection.author');
	                this.date = res.getDate('collection.date');
	                this.slices = res.getSliceZone('collection.body').slices;
	                this.tags = res.tags;
	                this.loaded = true;
	            });
	        });
	    }
	    calculateAspectRatioFit(srcWidth, srcHeight, maxWidth, maxHeight) {
	        var ratio = Math.min(maxWidth / srcWidth, maxHeight / srcHeight);
	        return { width: srcWidth * ratio, height: srcHeight * ratio };
	    }
	    capitalizeFirstLetter(string) {
	        if (string !== undefined) {
	            return string.charAt(0).toUpperCase() + string.slice(1);
	        }
	        return 'error';
	    }
	    ngOnInit() {
	        document.body.scrollTop = 0;
	    }
	    ngAfterViewInit() {
	    }
	    ngOnDestroy() {
	    }
	};
	Review = __decorate([
	    core_1.Component({
	        selector: 'review',
	        styles: [__webpack_require__(303)],
	        template: __webpack_require__(304)
	    }),
	    __param(3, core_1.Inject('LinkResolver')), 
	    __metadata('design:paramtypes', [(typeof (_a = typeof router_1.ActivatedRoute !== 'undefined' && router_1.ActivatedRoute) === 'function' && _a) || Object, (typeof (_b = typeof router_1.Router !== 'undefined' && router_1.Router) === 'function' && _b) || Object, (typeof (_c = typeof prismic_1.PrismicService !== 'undefined' && prismic_1.PrismicService) === 'function' && _c) || Object, Object])
	], Review);
	exports.Review = Review;
	var _a, _b, _c;


/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	const core_1 = __webpack_require__(3);
	let ImageModal = class ImageModal {
	    constructor(element) {
	        this.element = element;
	        this.opened = false;
	        this.loading = false;
	        this.showRepeat = false;
	        this.isNav = false;
	        this.cancelEvent = new core_1.EventEmitter();
	        this._element = this.element.nativeElement;
	    }
	    ngOnInit() {
	        this.loading = true;
	        if (this.imagePointer >= 0) {
	            this.showRepeat = false;
	            this.openGallery(this.imagePointer);
	        }
	        else {
	            this.showRepeat = true;
	        }
	    }
	    closeGallery() {
	        this.opened = false;
	        this.cancelEvent.emit(null);
	    }
	    tryClose() {
	        if (!this.isNav) {
	            this.closeGallery();
	        }
	    }
	    prevImage() {
	        this.loading = true;
	        this.currentImageIndex--;
	        if (this.currentImageIndex < 0) {
	            this.currentImageIndex = this.modalImages.length - 1;
	        }
	        this.openGallery(this.currentImageIndex);
	    }
	    nextImage() {
	        this.loading = true;
	        this.currentImageIndex++;
	        if (this.modalImages.length === this.currentImageIndex) {
	            this.currentImageIndex = 0;
	        }
	        this.openGallery(this.currentImageIndex);
	    }
	    openGallery(index) {
	        if (!index) {
	            this.currentImageIndex = 1;
	        }
	        this.currentImageIndex = index;
	        this.opened = true;
	        for (var i = 0; i < this.modalImages.length; i++) {
	            if (i === this.currentImageIndex) {
	                this.imgSrc = this.modalImages[i].img;
	                this.loading = false;
	                break;
	            }
	        }
	    }
	};
	__decorate([
	    core_1.Input('modalImages'), 
	    __metadata('design:type', Object)
	], ImageModal.prototype, "modalImages", void 0);
	__decorate([
	    core_1.Input('imagePointer'), 
	    __metadata('design:type', Number)
	], ImageModal.prototype, "imagePointer", void 0);
	__decorate([
	    core_1.Output('cancelEvent'), 
	    __metadata('design:type', Object)
	], ImageModal.prototype, "cancelEvent", void 0);
	ImageModal = __decorate([
	    core_1.Component({
	        selector: 'ImageModal',
	        template: `
	   <div class="ng-gallery" *ngIf="showRepeat"> 
	     <div *ngFor ="let i of modalImages; let index = index">
	       <img src="{{ i.thumb }}" class="ng-thumb" (click)="openGallery(index)" alt="Image {{ index + 1 }}" />
	      </div>
	   </div>
	   
	    <div class="ng-gallery-content" (click)="tryClose()">
	    <div class="uil-ring-css" *ngIf="loading"><div></div></div>         
	    <a class="close-popup" (click)="closeGallery()"><i class="fa fa-close"></i></a>
	     <a class="nav-left" *ngIf="modalImages.length >1" (mouseenter)="isNav = true" (mouseleave)="isNav = false" (click)="prevImage()"><i class="fa fa-angle-left"></i></a>
	     <img *ngIf="!loading" src="{{imgSrc}}" (click)="nextImage()" class="effect" />
	     <a class="nav-right" *ngIf="modalImages.length >1" (mouseenter)="isNav = true" (mouseleave)="isNav = false" (click)="nextImage()"><i class="fa fa-angle-right"></i></a>
	     <span class="info-text">{{ currentImageIndex + 1 }}/{{ modalImages.length }}{{modalImages[currentImageIndex].description!==''?" - ":""}}{{modalImages[currentImageIndex].description}}</span>
	   </div>
	   <div class="ng-overlay" *ngIf="opened" >
	   </div>
	       `
	    }), 
	    __metadata('design:paramtypes', [(typeof (_a = typeof core_1.ElementRef !== 'undefined' && core_1.ElementRef) === 'function' && _a) || Object])
	], ImageModal);
	exports.ImageModal = ImageModal;
	var _a;


/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.DisqusService = undefined;
	
	var _core = __webpack_require__(3);
	
	// import { Jsonp } from '@angular/http';
	// import { Observable } from 'rxjs/Observable';
	// import 'rxjs/add/operator/map';
	// import 'rxjs/add/observable/empty';
	// import 'rxjs/add/operator/catch';
	var nativeWindow = function nativeWindow() {
	    // return the global native browser window object
	    return typeof window !== 'undefined' ? window : undefined;
	};
	var DisqusService = exports.DisqusService = function () {
	    // constructor(private jsonp: Jsonp) {
	    function DisqusService() {
	        this.window = nativeWindow();
	    }
	    Object.defineProperty(DisqusService.prototype, "url", {
	        get: function get() {
	            return this.window ? this.window.location.href : global.url || '';
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisqusService.prototype, "disqus", {
	        get: function get() {
	            return this.window ? this.window.DISQUS : global.DISQUS;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisqusService.prototype, "disqusConfig", {
	        get: function get() {
	            return this.window ? this.window.disqus_config : global.disqus_config;
	        },
	        set: function set(config) {
	            if (this.window) {
	                this.window.disqus_config = config;
	            } else {
	                global.disqus_config = config;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisqusService.prototype, "disqusWidget", {
	        get: function get() {
	            return this.window ? this.window.DISQUSWIDGETS : global.DISQUSWIDGETS;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    // getCount() {
	    //   //TODO: http://ng2.disqus.com/count-data.js?2=https://murhafsousli.github.io/ng2-disqus/
	    //   let proto = 'https:';
	    //   let forum = 'ng2';
	    //   let url = 'https://murhafsousli.github.io/ng2-disqus/';
	    //   let finalUrl = `${proto}//${forum}.disqus.com/count-data.js?callback=JSONP_CALLBACK&2=${url}`;
	    //   console.log(finalUrl);
	    //   return this.jsonp.request(finalUrl)
	    //     .map((data: any) => {
	    //       console.log(data);
	    //       data = data.text();
	    //       let result = JSON.parse(data.replace(/^displayCount\((.*)\)/, '$1'));
	    //       return result.count || 0;
	    //     })
	    //     .catch((err) => {
	    //       console.log(err);
	    //       return Observable.empty()
	    //     });
	    // }
	    DisqusService.decorators = [{ type: _core.Injectable }];
	    /** @nocollapse */
	    DisqusService.ctorParameters = [];
	    return DisqusService;
	}();
	//# sourceMappingURL=disqus.service.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.gplusCountBody = exports.ShareButtonsService = undefined;
	
	var _core = __webpack_require__(3);
	
	var _http = __webpack_require__(40);
	
	var _Observable = __webpack_require__(4);
	
	__webpack_require__(312);
	
	__webpack_require__(308);
	
	__webpack_require__(226);
	
	var _shareProvider = __webpack_require__(196);
	
	var _shareLinks = __webpack_require__(356);
	
	var ShareButtonsService = exports.ShareButtonsService = function () {
	    function ShareButtonsService(http, jsonp) {
	        this.http = http;
	        this.jsonp = jsonp;
	        /** Optional parameters */
	        this.windowWidth = 500;
	        this.windowHeight = 400;
	    }
	    ShareButtonsService.prototype.share = function (type, args) {
	        switch (type) {
	            case _shareProvider.ShareProvider.FACEBOOK:
	                return _shareLinks.ShareLinks.fbShare(args);
	            case _shareProvider.ShareProvider.TWITTER:
	                return _shareLinks.ShareLinks.twitterShare(args);
	            case _shareProvider.ShareProvider.LINKEDIN:
	                return _shareLinks.ShareLinks.linkedInShare(args);
	            case _shareProvider.ShareProvider.REDDIT:
	                return _shareLinks.ShareLinks.redditShare(args);
	            case _shareProvider.ShareProvider.TUMBLR:
	                return _shareLinks.ShareLinks.tumblrShare(args);
	            case _shareProvider.ShareProvider.STUMBLEUPON:
	                return _shareLinks.ShareLinks.stumbleShare(args);
	            case _shareProvider.ShareProvider.GOOGLEPLUS:
	                return _shareLinks.ShareLinks.gPlusShare(args);
	            case _shareProvider.ShareProvider.PINTEREST:
	                return _shareLinks.ShareLinks.pinShare(args);
	            default:
	                return '';
	        }
	    };
	    /** Share Counts */
	    ShareButtonsService.prototype.count = function (type, url) {
	        switch (type) {
	            case _shareProvider.ShareProvider.FACEBOOK:
	                return this.fbCount(url);
	            case _shareProvider.ShareProvider.LINKEDIN:
	                return this.linkedInCount(url);
	            case _shareProvider.ShareProvider.REDDIT:
	                return this.redditCount(url);
	            case _shareProvider.ShareProvider.TUMBLR:
	                return this.tumblrCount(url);
	            case _shareProvider.ShareProvider.GOOGLEPLUS:
	                return this.gPlusCount(url);
	            case _shareProvider.ShareProvider.PINTEREST:
	                return this.pinCount(url);
	            default:
	                return _Observable.Observable.empty();
	        }
	    };
	    ShareButtonsService.prototype.fbCount = function (url) {
	        return this.fetch('https://graph.facebook.com/?id=' + url).map(function (data) {
	            data = data.json();
	            if (data.hasOwnProperty('share') && data.share.hasOwnProperty('share_count')) {
	                return data.share.share_count;
	            }
	            return 0;
	        });
	    };
	    ShareButtonsService.prototype.linkedInCount = function (url) {
	        return this.fetchJsonp('https://www.linkedin.com/countserv/count/share?url=' + url).map(function (data) {
	            data = data.json();
	            return data.count | 0;
	        });
	    };
	    ShareButtonsService.prototype.redditCount = function (url) {
	        return this.fetch('https://buttons.reddit.com/button_info.json?url=' + url).map(function (data) {
	            data = data.json();
	            if (data.hasOwnProperty('data') && data.data.hasOwnProperty('children')) {
	                if (data.data.children.length) return data.data.children[0].data.score;
	            }
	            return 0;
	        });
	    };
	    ShareButtonsService.prototype.gPlusCount = function (url) {
	        var body = gplusCountBody(url);
	        return this.http.post('https://clients6.google.com/rpc?key=AIzaSyCKSbrvQasunBoV16zDH9R33D88CeLr9gQ', body).map(function (data) {
	            data = data.json();
	            if (data[0] && data[0].hasOwnProperty('result')) {
	                return data[0].result.metadata.globalCounts.count;
	            }
	            return 0;
	        });
	    };
	    ShareButtonsService.prototype.pinCount = function (url) {
	        return this.fetch('https://api.pinterest.com/v1/urls/count.json?callback=receiveCount&url=' + url).map(function (data) {
	            data = data.text();
	            var result = JSON.parse(data.replace(/^receiveCount\((.*)\)/, '$1'));
	            return result.count | 0;
	        });
	    };
	    ShareButtonsService.prototype.tumblrCount = function (url) {
	        return this.fetchJsonp('https://api.tumblr.com/v2/share/stats?url=' + url).map(function (data) {
	            data = data.json();
	            if (data.hasOwnProperty('response') && data.response.hasOwnProperty('note_count')) {
	                return data.response.note_count;
	            }
	            return 0;
	        });
	    };
	    ShareButtonsService.prototype.fetch = function (url) {
	        return this.http.get(url).catch(function (err) {
	            console.warn('[ShareService HTTP]: ', err);
	            return _Observable.Observable.empty();
	        });
	    };
	    ShareButtonsService.prototype.fetchJsonp = function (url) {
	        return this.jsonp.request(url + '&format=jsonp&callback=JSONP_CALLBACK').catch(function (err) {
	            console.warn('[ShareService JSONP]: ', err);
	            return _Observable.Observable.empty();
	        });
	    };
	    ShareButtonsService.prototype.windowAttr = function () {
	        return 'width=' + this.windowWidth + ', height=' + this.windowHeight;
	    };
	    ShareButtonsService.decorators = [{ type: _core.Injectable }];
	    /** @nocollapse */
	    ShareButtonsService.ctorParameters = [{ type: _http.Http }, { type: _http.Jsonp }];
	    return ShareButtonsService;
	}();
	/** Prepare gPlus count request body   */
	var gplusCountBody = exports.gplusCountBody = function gplusCountBody(url) {
	    return [{
	        "method": "pos.plusones.get",
	        "id": "p",
	        "params": { "nolog": true, "id": url, "source": "widget", "userId": "@viewer", "groupId": "@self" },
	        "jsonrpc": "2.0",
	        "key": "p",
	        "apiVersion": "v1"
	    }];
	};
	//# sourceMappingURL=share-buttons.service.js.map

/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.WindowService = undefined;
	
	var _core = __webpack_require__(3);
	
	var WindowService = exports.WindowService = function () {
	    function WindowService() {}
	    Object.defineProperty(WindowService.prototype, "nativeWindow", {
	        get: function get() {
	            return _window();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    WindowService.decorators = [{ type: _core.Injectable }];
	    /** @nocollapse */
	    WindowService.ctorParameters = [];
	    return WindowService;
	}();
	function _window() {
	    // return the global native browser window object
	    return typeof window != 'undefined' ? window : undefined;
	}
	//# sourceMappingURL=window.service.js.map

/***/ },
/* 260 */,
/* 261 */,
/* 262 */,
/* 263 */,
/* 264 */,
/* 265 */,
/* 266 */,
/* 267 */,
/* 268 */,
/* 269 */,
/* 270 */,
/* 271 */,
/* 272 */,
/* 273 */,
/* 274 */,
/* 275 */,
/* 276 */,
/* 277 */,
/* 278 */,
/* 279 */,
/* 280 */,
/* 281 */,
/* 282 */,
/* 283 */,
/* 284 */,
/* 285 */,
/* 286 */,
/* 287 */,
/* 288 */,
/* 289 */,
/* 290 */,
/* 291 */,
/* 292 */,
/* 293 */,
/* 294 */,
/* 295 */,
/* 296 */,
/* 297 */
/***/ function(module, exports) {

	var toString = {}.toString;
	
	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ },
/* 298 */,
/* 299 */
/***/ function(module, exports) {

	module.exports = {
		"_args": [
			[
				"prismic.io@^3.1.3",
				"/Users/vachirakornrungsikawanich/birls_real"
			]
		],
		"_from": "prismic.io@>=3.1.3 <4.0.0",
		"_id": "prismic.io@3.3.1",
		"_inCache": true,
		"_installable": true,
		"_location": "/prismic.io",
		"_nodeVersion": "4.6.2",
		"_npmOperationalInternal": {
			"host": "packages-18-east.internal.npmjs.com",
			"tmp": "tmp/prismic.io-3.3.1.tgz_1484132951481_0.3528884439729154"
		},
		"_npmUser": {
			"email": "arnaud.lewis@gmail.com",
			"name": "arnaudlewis"
		},
		"_npmVersion": "2.15.11",
		"_phantomChildren": {},
		"_requested": {
			"name": "prismic.io",
			"raw": "prismic.io@^3.1.3",
			"rawSpec": "^3.1.3",
			"scope": null,
			"spec": ">=3.1.3 <4.0.0",
			"type": "range"
		},
		"_requiredBy": [
			"/"
		],
		"_resolved": "https://registry.npmjs.org/prismic.io/-/prismic.io-3.3.1.tgz",
		"_shasum": "90b1e7ab68b7c5a006b2c1fcf0631a8459d0a7b4",
		"_shrinkwrap": null,
		"_spec": "prismic.io@^3.1.3",
		"_where": "/Users/vachirakornrungsikawanich/birls_real",
		"bugs": {
			"url": "https://github.com/prismicio/javascript-kit/issues"
		},
		"dependencies": {},
		"description": "JavaScript development kit for prismic.io",
		"devDependencies": {
			"babel-preset-es2015": "^6.3.13",
			"babelify": "^7.2.0",
			"browserify": "^12.0.1",
			"chai": "*",
			"codeclimate-test-reporter": "0.0.4",
			"es6-promise": "^3.2.1",
			"eslint": "^2.12.0",
			"istanbul": "^0.4.4",
			"jsdoc": "^3.4.0",
			"mocha": "*",
			"rimraf": "^2.5.4",
			"uglify-js": "^2.6.1",
			"vinyl-buffer": "^1.0.0",
			"vinyl-source-stream": "^1.1.0"
		},
		"directories": {},
		"dist": {
			"shasum": "90b1e7ab68b7c5a006b2c1fcf0631a8459d0a7b4",
			"tarball": "https://registry.npmjs.org/prismic.io/-/prismic.io-3.3.1.tgz"
		},
		"gitHead": "2190bcedced7dacc54581224b3436abd6cc709d8",
		"homepage": "https://github.com/prismicio/javascript-kit#readme",
		"keywords": [
			"prismic",
			"prismic.io",
			"cms",
			"content",
			"api"
		],
		"license": "Apache-2.0",
		"main": "lib/prismic.js",
		"maintainers": [
			{
				"email": "arnaud.lewis@gmail.com",
				"name": "arnaudlewis"
			},
			{
				"email": "dohzya@gmail.com",
				"name": "dohzya"
			},
			{
				"email": "eloisant@gmail.com",
				"name": "eloisant"
			},
			{
				"email": "srenault.contact@gmail.com",
				"name": "sre"
			}
		],
		"name": "prismic.io",
		"optionalDependencies": {},
		"readme": "ERROR: No README data found!",
		"repository": {
			"type": "git",
			"url": "git+ssh://git@github.com/prismicio/javascript-kit.git"
		},
		"scripts": {
			"build": "scripts/browser.js",
			"docs": "jsdoc dist/prismic.io.js README.md -d docs",
			"lint": "eslint lib",
			"postbuild": "npm run docs",
			"posttest": "eslint lib",
			"predocs": "rimraf ./docs",
			"prepublish": "npm run uglify",
			"preuglify": "npm run build",
			"test": "istanbul cover _mocha test/",
			"uglify": "uglifyjs -c -o=dist/prismic.io.min.js dist/prismic.io.js"
		},
		"url": "https://github.com/prismicio/javascript-kit",
		"version": "3.3.1"
	};

/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	__webpack_require__(596);
	var core_1 = __webpack_require__(3);
	var scroll_listener_1 = __webpack_require__(543);
	var lazyload_image_1 = __webpack_require__(541);
	var LazyLoadImageDirective = (function () {
	    function LazyLoadImageDirective(el, ngZone) {
	        this.scrollTarget = window;
	        this.elementRef = el;
	        this.ngZone = ngZone;
	    }
	    LazyLoadImageDirective.prototype.ngAfterContentInit = function () {
	        var _this = this;
	        this.ngZone.runOutsideAngular(function () {
	            if (_this.scrollObservable) {
	                _this.scrollSubscription = _this.scrollObservable
	                    .startWith('')
	                    .let(lazyload_image_1.lazyLoadImage(_this.elementRef.nativeElement, _this.lazyImage, _this.defaultImage, _this.errorImage, _this.offset))
	                    .subscribe(function () { });
	            }
	            else {
	                _this.scrollSubscription = scroll_listener_1.getScrollListener(_this.scrollTarget)
	                    .let(lazyload_image_1.lazyLoadImage(_this.elementRef.nativeElement, _this.lazyImage, _this.defaultImage, _this.errorImage, _this.offset))
	                    .subscribe(function () { });
	            }
	        });
	    };
	    LazyLoadImageDirective.prototype.ngOnDestroy = function () {
	        [this.scrollSubscription]
	            .filter(function (subscription) { return subscription && !subscription.isUnsubscribed; })
	            .forEach(function (subscription) { return subscription.unsubscribe(); });
	    };
	    return LazyLoadImageDirective;
	}());
	__decorate([
	    core_1.Input('lazyLoad'),
	    __metadata("design:type", Object)
	], LazyLoadImageDirective.prototype, "lazyImage", void 0);
	__decorate([
	    core_1.Input(),
	    __metadata("design:type", String)
	], LazyLoadImageDirective.prototype, "defaultImage", void 0);
	__decorate([
	    core_1.Input(),
	    __metadata("design:type", String)
	], LazyLoadImageDirective.prototype, "errorImage", void 0);
	__decorate([
	    core_1.Input(),
	    __metadata("design:type", Object)
	], LazyLoadImageDirective.prototype, "scrollTarget", void 0);
	__decorate([
	    core_1.Input(),
	    __metadata("design:type", Object)
	], LazyLoadImageDirective.prototype, "scrollObservable", void 0);
	__decorate([
	    core_1.Input(),
	    __metadata("design:type", Number)
	], LazyLoadImageDirective.prototype, "offset", void 0);
	LazyLoadImageDirective = __decorate([
	    core_1.Directive({
	        selector: '[lazyLoad]'
	    }),
	    __metadata("design:paramtypes", [core_1.ElementRef, core_1.NgZone])
	], LazyLoadImageDirective);
	exports.LazyLoadImageDirective = LazyLoadImageDirective;


/***/ },
/* 301 */
/***/ function(module, exports) {

	
	"use strict";
	
	/**
	 * A collection of experiments currently available
	 * @param data the json data received from the Prismic API
	 * @constructor
	 */
	function Experiments(data) {
	  var drafts = [];
	  var running = [];
	  if (data) {
	    data.drafts && data.drafts.forEach(function (exp) {
	      drafts.push(new Experiment(exp));
	    });
	    data.running && data.running.forEach(function (exp) {
	      running.push(new Experiment(exp));
	    });
	  }
	  this.drafts = drafts;
	  this.running = running;
	}
	
	Experiments.prototype.current = function() {
	  return this.running.length > 0 ? this.running[0] : null;
	};
	
	/**
	 * Get the current running experiment variation ref from a cookie content
	 */
	Experiments.prototype.refFromCookie = function(cookie) {
	  if (!cookie || cookie.trim() === "") return null;
	  var splitted = cookie.trim().split(" ");
	  if (splitted.length < 2) return null;
	  var expId = splitted[0];
	  var varIndex = parseInt(splitted[1], 10);
	  var exp = this.running.filter(function(exp) {
	    return exp.googleId() == expId && exp.variations.length > varIndex;
	  })[0];
	  return exp ? exp.variations[varIndex].ref() : null;
	};
	
	function Experiment(data) {
	  this.data = data;
	  var variations = [];
	  data.variations && data.variations.forEach(function(v) {
	    variations.push(new Variation(v));
	  });
	  this.variations = variations;
	}
	
	Experiment.prototype.id = function() {
	  return this.data.id;
	};
	
	Experiment.prototype.googleId = function() {
	  return this.data.googleId;
	};
	
	Experiment.prototype.name = function() {
	  return this.data.name;
	};
	
	function Variation(data) {
	  this.data = data;
	}
	
	Variation.prototype.id = function() {
	  return this.data.id;
	};
	
	Variation.prototype.ref = function() {
	  return this.data.ref;
	};
	
	Variation.prototype.label = function() {
	  return this.data.label;
	};
	
	module.exports = {
	  Experiments: Experiments,
	  Variation: Variation
	};


/***/ },
/* 302 */
/***/ function(module, exports) {

	"use strict";
	
	function stripQuotes(s) {
	  return s.replace(/"/g, "");
	}
	
	function toQueryValue(value) {
	  if (typeof value === 'string') {
	    return '"' + stripQuotes(value) + '"';
	  } else if (value instanceof Date) {
	    return value.getTime();
	  } else if (Array.isArray(value)) {
	    return "[" + value.map(function (item) {
	      return toQueryValue(item);
	    }).join(',') + "]";
	  }
	  return value;
	}
	
	/**
	 * @global
	 * @namespace
	 * @alias Predicates
	 */
	module.exports = {
	
	  /**
	   * Convert a predicate (array of 3 elements) into a query for prismic.io (string)
	   */
	  toQuery: function (predicate) {
	    var operator = stripQuotes(predicate[0]);
	    var path = stripQuotes(predicate[1]);
	    var pathArg = (path.indexOf("my.") === 0 || path.indexOf("document") === 0) ? path : '"' + path + '"';
	    var values = predicate.slice(2).map(toQueryValue).join(',');
	    return "[:d = " + operator + "(" + pathArg + (predicate.length > 2 ? ", " : "") + values + ")]";
	  },
	
	  /**
	   * Build an "at" predicate: equality of a fragment to a value.
	   *
	   * @example Predicates.at("document.type", "article")
	   * @param fragment {String}
	   * @param value {String}
	   * @returns {Array} an array corresponding to the predicate
	   */
	  at: function(fragment, value) { return ["at", fragment, value]; },
	
	  /**
	   * Build an "not" predicate: inequality of a fragment to a value.
	   *
	   * @example Predicates.not("document.type", "article")
	   * @param fragment {String}
	   * @param value {String}
	   * @returns {Array} an array corresponding to the predicate
	   */
	  not: function(fragment, value) { return ["not", fragment, value]; },
	
	  /**
	   * Build a "missing" predicate: documents where the requested field is empty
	   *
	   * @example Predicates.missing("my.blog-post.author")
	   * @param fragment {String}
	   * @returns {Array} an array corresponding to the predicate
	   */
	  missing: function(fragment) { return ["missing", fragment]; },
	
	  /**
	   * Build a "has" predicate: documents where the requested field is defined
	   *
	   * @example Predicates.has("my.blog-post.author")
	   * @param fragment {String}
	   * @returns {Array} an array corresponding to the predicate
	   */
	  has: function(fragment) { return ["has", fragment]; },
	
	  /**
	   * Build an "any" predicate: equality of a fragment to a value.
	   *
	   * @example Predicates.any("document.type", ["article", "blog-post"])
	   * @param fragment {String}
	   * @param values {Array}
	   * @returns {Array} an array corresponding to the predicate
	   */
	  any: function(fragment, values) { return ["any", fragment, values]; },
	
	  /**
	   * Build an "in" predicate: equality of a fragment to a value.
	   *
	   * @example Predicates.in("my.product.price", [4, 5])
	   * @param fragment {String}
	   * @param values {Array}
	   * @returns {Array} an array corresponding to the predicate
	   */
	  in: function(fragment, values) { return ["in", fragment, values]; },
	
	  /**
	   * Build a "fulltext" predicate: fulltext search in a fragment.
	   *
	   * @example Predicates.fulltext("my.article.body", "sausage"])
	   * @param fragment {String}
	   * @param value {String} the term to search
	   * @returns {Array} an array corresponding to the predicate
	   */
	  fulltext: function(fragment, value) { return ["fulltext", fragment, value]; },
	
	  /**
	   * Build a "similar" predicate.
	   *
	   * @example Predicates.similar("UXasdFwe42D", 10)
	   * @param documentId {String} the document id to retrieve similar documents to.
	   * @param maxResults {Number} the maximum number of results to return
	   * @returns {Array} an array corresponding to the predicate
	   */
	  similar: function(documentId, maxResults) { return ["similar", documentId, maxResults]; },
	
	  /**
	   * Build a "number.gt" predicate: documents where the fragment field is greater than the given value.
	   *
	   * @example Predicates.gt("my.product.price", 10)
	   * @param fragment {String} the name of the field - must be a number.
	   * @param value {Number} the lower bound of the predicate
	   * @returns {Array} an array corresponding to the predicate
	   */
	  gt: function(fragment, value) { return ["number.gt", fragment, value]; },
	
	  /**
	   * Build a "number.lt" predicate: documents where the fragment field is lower than the given value.
	   *
	   * @example Predicates.lt("my.product.price", 20)
	   * @param fragment {String} the name of the field - must be a number.
	   * @param value {Number} the upper bound of the predicate
	   * @returns {Array} an array corresponding to the predicate
	   */
	  lt: function(fragment, value) { return ["number.lt", fragment, value]; },
	
	  /**
	   * Build a "number.inRange" predicate: combination of lt and gt.
	   *
	   * @example Predicates.inRange("my.product.price", 10, 20)
	   * @param fragment {String} the name of the field - must be a number.
	   * @param before {Number}
	   * @param after {Number}
	   * @returns {Array} an array corresponding to the predicate
	   */
	  inRange: function(fragment, before, after) { return ["number.inRange", fragment, before, after]; },
	
	  /**
	   * Build a "date.before" predicate: documents where the fragment field is before the given date.
	   *
	   * @example Predicates.dateBefore("my.product.releaseDate", new Date(2014, 6, 1))
	   * @param fragment {String} the name of the field - must be a date or timestamp field.
	   * @param before {Date}
	   * @returns {Array} an array corresponding to the predicate
	   */
	  dateBefore: function(fragment, before) { return ["date.before", fragment, before]; },
	
	  /**
	   * Build a "date.after" predicate: documents where the fragment field is after the given date.
	   *
	   * @example Predicates.dateAfter("my.product.releaseDate", new Date(2014, 1, 1))
	   * @param fragment {String} the name of the field - must be a date or timestamp field.
	   * @param after {Date}
	   * @returns {Array} an array corresponding to the predicate
	   */
	  dateAfter: function(fragment, after) { return ["date.after", fragment, after]; },
	
	  /**
	   * Build a "date.between" predicate: combination of dateBefore and dateAfter
	   *
	   * @example Predicates.dateBetween("my.product.releaseDate", new Date(2014, 1, 1), new Date(2014, 6, 1))
	   * @param fragment {String} the name of the field - must be a date or timestamp field.
	   * @param before {Date}
	   * @param after {Date}
	   * @returns {Array} an array corresponding to the predicate
	   */
	  dateBetween: function(fragment, before, after) { return ["date.between", fragment, before, after]; },
	
	  /**
	   *
	   * @example Predicates.dayOfMonth("my.product.releaseDate", 14)
	   * @param fragment
	   * @param day {Number} between 1 and 31
	   * @returns {Array}
	   */
	  dayOfMonth: function(fragment, day) { return ["date.day-of-month", fragment, day]; },
	
	  /**
	   *
	   * @example Predicates.dayOfMonthAfter("my.product.releaseDate", 14)
	   * @param fragment
	   * @param day {Number} between 1 and 31
	   * @returns {Array}
	   */
	  dayOfMonthAfter: function(fragment, day) { return ["date.day-of-month-after", fragment, day]; },
	
	  /**
	   *
	   * @example Predicates.dayOfMonthBefore("my.product.releaseDate", 14)
	   * @param fragment
	   * @param day {Number} between 1 and 31
	   * @returns {Array}
	   */
	  dayOfMonthBefore: function(fragment, day) { return ["date.day-of-month-before", fragment, day]; },
	
	  /**
	   *
	   * @example Predicates.dayOfWeek("my.product.releaseDate", 14)
	   * @param fragment
	   * @param day {Number|String} Number between 1 and 7 or string between "Monday" and "Sunday"
	   * @returns {Array}
	   */
	  dayOfWeek: function(fragment, day) { return ["date.day-of-week", fragment, day]; },
	
	  /**
	   *
	   * @example Predicates.dayOfWeekAfter("my.product.releaseDate", "Wednesday")
	   * @param fragment
	   * @param day {Number|String} Number between 1 and 7 or string between "Monday" and "Sunday"
	   * @returns {Array}
	   */
	  dayOfWeekAfter: function(fragment, day) { return ["date.day-of-week-after", fragment, day]; },
	
	  /**
	   *
	   * @example Predicates.dayOfWeekBefore("my.product.releaseDate", "Wednesday")
	   * @param fragment
	   * @param day {Number|String} Number between 1 and 7 or string between "Monday" and "Sunday"
	   * @returns {Array}
	   */
	  dayOfWeekBefore: function(fragment, day) { return ["date.day-of-week-before", fragment, day]; },
	
	  /**
	   *
	   * @example Predicates.month("my.product.releaseDate", "June")
	   * @param fragment
	   * @param month {Number|String} Number between 1 and 12 or string between "January" and "December"
	   * @returns {Array}
	   */
	  month: function(fragment, month) { return ["date.month", fragment, month]; },
	
	  /**
	   *
	   * @example Predicates.monthBefore("my.product.releaseDate", "June")
	   * @param fragment
	   * @param month {Number|String} Number between 1 and 12 or string between "January" and "December"
	   * @returns {Array}
	   */
	  monthBefore: function(fragment, month) { return ["date.month-before", fragment, month]; },
	
	  /**
	   *
	   * @example Predicates.monthAfter("my.product.releaseDate", "June")
	   * @param fragment
	   * @param month {Number|String} Number between 1 and 12 or string between "January" and "December"
	   * @returns {Array}
	   * @returns {Array}
	   */
	  monthAfter: function(fragment, month) { return ["date.month-after", fragment, month]; },
	
	  /**
	   *
	   * @example Predicates.year("my.product.releaseDate", 2014)
	   * @param fragment
	   * @param year {Number}
	   * @returns {Array}
	   */
	  year: function(fragment, year) { return ["date.year", fragment, year]; },
	
	  /**
	   *
	   * @example Predicates.hour("my.product.releaseDate", 12)
	   * @param fragment
	   * @param hour {Number}
	   * @returns {Array}
	   */
	  hour: function(fragment, hour) { return ["date.hour", fragment, hour]; },
	
	  /**
	   *
	   * @example Predicates.hourBefore("my.product.releaseDate", 12)
	   * @param fragment
	   * @param hour {Number}
	   * @returns {Array}
	   */
	  hourBefore: function(fragment, hour) { return ["date.hour-before", fragment, hour]; },
	
	  /**
	   *
	   * @example Predicates.hourAfter("my.product.releaseDate", 12)
	   * @param fragment
	   * @param hour {Number}
	   * @returns {Array}
	   */
	  hourAfter: function(fragment, hour) { return ["date.hour-after", fragment, hour]; },
	
	  /**
	   *
	   * @example Predicates.near("my.store.location", 48.8768767, 2.3338802, 10)
	   * @param fragment
	   * @param latitude {Number}
	   * @param longitude {Number}
	   * @param radius {Number} in kilometers
	   * @returns {Array}
	   */
	  near: function(fragment, latitude, longitude, radius) { return ["geopoint.near", fragment, latitude, longitude, radius]; }
	
	};


/***/ },
/* 303 */
/***/ function(module, exports) {

	module.exports = "h1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-family: 'Roboto', sans-serif; }\n\nh1 {\n  font-size: 1.7em;\n  font-weight: 700;\n  margin-bottom: 10px; }\n\nh3 {\n  font-size: 1em !important;\n  font-weight: 700 !important; }\n\n.flex-row-center {\n  position: relative;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: row;\n  flex-direction: row;\n  -webkit-box-pack: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center; }\n\n.flex-col-center {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  -webkit-box-pack: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center; }\n\n.article-container {\n  padding-top: 20px;\n  background-color: white; }\n\n#content-section {\n  padding-bottom: 20px; }\n\n.article-title h1 {\n  padding: 0px 20px 0px 0px;\n  margin-bottom: 10px; }\n\n.article-category {\n  margin: 10px 0 10px 0 !important;\n  color: darkgrey; }\n\n.addthis_inline_share_toolbox {\n  margin-bottom: 10px; }\n\nimg.article-img {\n  margin-bottom: 15px;\n  width: 100%;\n  -o-object-fit: contain;\n  object-fit: contain;\n  -webkit-transition: all .1s ease-in-out;\n  transition: all .1s ease-in-out; }\n  img.article-img.hover {\n    -webkit-transform: scale(1.05);\n    transform: scale(1.05); }\n\n.paragraph {\n  font-family: 'Roboto', sans-serif; }\n\n.slice {\n  padding-bottom: 20px; }\n\n.image-with-caption {\n  text-align: center; }\n  .image-with-caption img {\n    max-width: 100%;\n    -o-object-fit: contain;\n    object-fit: contain; }\n  .image-with-caption p {\n    padding: 4px;\n    font-size: 0.8em; }\n\n#related-article {\n  border-top: 1px solid #CCC !important; }\n  #related-article .title {\n    font-size: 1.2em;\n    font-weight: bold;\n    padding: 10px; }\n\n@media only screen and (max-device-width: 992px) {\n  #right-section {\n    margin-top: 20px; } }\n\n.share-text {\n  text-align: center;\n  font-size: 0.90em; }\n  .share-text .number {\n    font-weight: bold; }\n\n.author {\n  margin-bottom: 15px;\n  text-align: center;\n  padding: 5px; }\n  .author .author-name {\n    font-size: 1em;\n    font-weight: bold;\n    margin: 5px; }\n  .author .divider {\n    display: block;\n    margin-top: 10px;\n    margin-bottom: 5px;\n    border-top: 1px solid lightgrey;\n    width: 30px; }\n\n#ig-section {\n  display: block;\n  width: 320px;\n  border: 1px solid #CCCCCC;\n  text-align: center;\n  background-color: white;\n  padding: 10px; }\n  #ig-section iframe {\n    border: 0;\n    width: 300px;\n    height: 250px;\n    margin: 0;\n    padding: 0; }\n\n#tag-section .title {\n  text-align: center;\n  font-weight: 700; }\n\n#tag-section ul {\n  -webkit-padding-start: 0 !important; }\n  #tag-section ul li {\n    display: inline; }\n\n#tag-section a.tag {\n  color: deeppink;\n  font-weight: bold;\n  margin-right: 5px; }\n\n#tag-section .tag-container {\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  padding: 0 25px; }\n\n#tag-section .tag-box {\n  margin: 3px 3px 3px 0px;\n  font-size: 14px;\n  color: #f1487c;\n  border: 1px solid rgba(241, 72, 124, 0.8);\n  border-radius: 3px;\n  padding: 5px;\n  width: auto;\n  height: 32px;\n  text-align: center;\n  overflow: hidden;\n  cursor: pointer;\n  -webkit-transition: all .3s ease-in-out;\n  -webkit-transition: all .3 ease-in-out;\n  transition: all .3 ease-in-out; }\n  #tag-section .tag-box:hover {\n    color: white;\n    border: 1px solid #f1487c;\n    background-color: #f1487c; }\n\n.comment {\n  background-color: #F6F6F6;\n  border-top: 1px solid #CCCCCC;\n  padding: 20px; }\n  .comment .title {\n    text-align: center;\n    font-size: 20px;\n    font-weight: bold; }\n  .comment i {\n    font-size: 20px; }\n  .comment disqus {\n    width: 50%; }\n"

/***/ },
/* 304 */
/***/ function(module, exports) {

	module.exports = "<div class=\"article-container\" *ngIf=\"loaded && document\">\n    <div class=\"container-fluid\">\n        <div class=\"row\" id=\"content-section\">\n            <div class=\"col-md-12 col-lg-7 col-lg-offset-1\">\n                <div class=\"article-title\">\n                    <h1>{{title?title.getTitle().text : ''}}</h1>\n                </div>\n                <div *ngIf=\"category\" class=\"article-category\">\n                    {{capitalizeFirstLetter(category)}}\n                </div>\n                <img *ngIf=\"image\" [src]=\"image?image.url:''\" class=\"article-img\">\n                <div class=\"slice\" *ngFor=\"let slice of slices\">\n                    <div *ngIf=\"slice.sliceType==='text'\" [innerHtml]=\"slice.value.asHtml()\" class=\"paragraph\"></div>\n                    <div *ngIf=\"slice.sliceType==='image-with-caption'\" class=\"image-with-caption\">\n                        <img [src]=\"slice.value.toArray()[0].getImage('illustration').url\">\n                        <p><span>{{slice.value.toArray()[0].get('caption').asText()}}</span></p>\n                    </div>\n                    <div *ngIf=\"slice.sliceType==='quote'\" class=\"quote\">\n                        <div class=\"blockquote\">\n                            <p>{{slice.value.asText()}}</p>\n                        </div>\n                    </div>\n                </div>\n                <div id=\"related-article\" *ngIf=\"_documents\" class=\"row\">\n                    <div class=\"col-lg-12\">\n                        <div class=\"title\">\n                            Related Articles\n                        </div>\n                    </div>\n                    <div class=\"col-sm-4 col-lg-4 flex-row-center\" *ngFor=\"let document of _documents;let i = index\">\n                        <card *ngIf=\"i < maxRelatedDocs\" [document]=\"document\" [styleNumber]=\"2\" [imageHeight]=\"200\" [limit]=\"100\"></card>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-md-12 col-lg-4\" id=\"right-section\">\n                <div class=\"row\">\n                    <div class=\"col-lg-12 flex-col-center\">\n                        <share-buttons [shareTitle]=\"'SHARES '\" [count]=\"true\" [totalCount]=\"true\" [url]=\"page_url\" [defaultStyle]=\"false\" [facebook]=\"fbInner\"\n                            [twitter]=\"twitterInner\" [pinterest]=\"pintInner\" [linkedIn]=\"inInner\" [google]=\"googleInner\" [tumblr]=\"tumblrInner\"\n                            [reddit]=\"false\" [stumbleUpOn]=\"false\">\n                        </share-buttons>\n                    </div>\n                    <div class=\"col-lg-12 author flex-col-center\">\n                        <div class=\"divider\" style=\"width: 80px;\"></div>\n                        <i class=\"fi flaticon-quill-drawing-a-line\"></i>\n                        <span class=\"author-name\">{{author}}</span>\n                        <p class=\"article-date\">\n                            {{date | amDateFormat:'MMMM DD, YYYY'}}\n                        </p>\n                       \n                    </div>\n                    <div *ngIf=\"tags.length > 0\" id=\"tag-section\" class=\"col-lg-12\">\n                        <div class=\"title\">\n                            <i class=\"fa fa-tags\" aria-hidden=\"true\"></i> TAGS\n                        </div>\n                        <div class=\"tag-container flex-row-center\">\n                            <div class=\"tag-box\" *ngFor=\"let tag of tags; let i = index\" [routerLink]=\"['/tags/' + tag]\">\n                                {{tag}}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-lg-12 comment flex-col-center\">\n                <div class=\"title\"> <i class=\"fi flaticon-blank-squared-bubble\"></i><br>Comment on Article </div>\n                <disqus [shortname]=\"disqusShortname\" [identifier]=\"page_url\"></disqus>\n            </div>\n        </div>\n    </div>\n</div>\n<div *ngIf=\"loaded && !document\">\n    <h2>Not found!</h2>\n</div>\n<!--loading-->\n<div class=\"loading\" *ngIf=\"!loaded\">\n    <!--preloader-->\n    <div id=\"pre-bootstrap-container\">\n        <div id=\"pre-bootstrap\">\n            <div class=\"logo\"></div>\n            <div class=\"loader\"></div>\n        </div>\n    </div>\n</div>"

/***/ },
/* 305 */
/***/ function(module, exports, __webpack_require__) {

	// a passthrough stream.
	// basically just the most minimal sort of Transform stream.
	// Every written chunk gets output as-is.
	
	'use strict';
	
	module.exports = PassThrough;
	
	var Transform = __webpack_require__(223);
	
	/*<replacement>*/
	var util = __webpack_require__(65);
	util.inherits = __webpack_require__(38);
	/*</replacement>*/
	
	util.inherits(PassThrough, Transform);
	
	function PassThrough(options) {
	  if (!(this instanceof PassThrough)) return new PassThrough(options);
	
	  Transform.call(this, options);
	}
	
	PassThrough.prototype._transform = function (chunk, encoding, cb) {
	  cb(null, chunk);
	};

/***/ },
/* 306 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	module.exports = Readable;
	
	/*<replacement>*/
	var processNextTick = __webpack_require__(222);
	/*</replacement>*/
	
	/*<replacement>*/
	var isArray = __webpack_require__(297);
	/*</replacement>*/
	
	/*<replacement>*/
	var Duplex;
	/*</replacement>*/
	
	Readable.ReadableState = ReadableState;
	
	/*<replacement>*/
	var EE = __webpack_require__(80).EventEmitter;
	
	var EElistenerCount = function (emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/
	
	/*<replacement>*/
	var Stream;
	(function () {
	  try {
	    Stream = __webpack_require__(236);
	  } catch (_) {} finally {
	    if (!Stream) Stream = __webpack_require__(80).EventEmitter;
	  }
	})();
	/*</replacement>*/
	
	var Buffer = __webpack_require__(53).Buffer;
	/*<replacement>*/
	var bufferShim = __webpack_require__(197);
	/*</replacement>*/
	
	/*<replacement>*/
	var util = __webpack_require__(65);
	util.inherits = __webpack_require__(38);
	/*</replacement>*/
	
	/*<replacement>*/
	var debugUtil = __webpack_require__(648);
	var debug = void 0;
	if (debugUtil && debugUtil.debuglog) {
	  debug = debugUtil.debuglog('stream');
	} else {
	  debug = function () {};
	}
	/*</replacement>*/
	
	var BufferList = __webpack_require__(583);
	var StringDecoder;
	
	util.inherits(Readable, Stream);
	
	function prependListener(emitter, event, fn) {
	  // Sadly this is not cacheable as some libraries bundle their own
	  // event emitter implementation with them.
	  if (typeof emitter.prependListener === 'function') {
	    return emitter.prependListener(event, fn);
	  } else {
	    // This is a hack to make sure that our error handler is attached before any
	    // userland ones.  NEVER DO THIS. This is here only because this code needs
	    // to continue to work with older versions of Node.js that do not include
	    // the prependListener() method. The goal is to eventually remove this hack.
	    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
	  }
	}
	
	function ReadableState(options, stream) {
	  Duplex = Duplex || __webpack_require__(48);
	
	  options = options || {};
	
	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;
	
	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
	
	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;
	
	  // cast to ints.
	  this.highWaterMark = ~ ~this.highWaterMark;
	
	  // A linked list is used to store data chunks instead of an array because the
	  // linked list can remove elements from the beginning faster than
	  // array.shift()
	  this.buffer = new BufferList();
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;
	
	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;
	
	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;
	  this.resumeScheduled = false;
	
	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';
	
	  // when piping, we only care about 'readable' events that happen
	  // after read()ing all the bytes and not getting any pushback.
	  this.ranOut = false;
	
	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;
	
	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;
	
	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder) StringDecoder = __webpack_require__(329).StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}
	
	function Readable(options) {
	  Duplex = Duplex || __webpack_require__(48);
	
	  if (!(this instanceof Readable)) return new Readable(options);
	
	  this._readableState = new ReadableState(options, this);
	
	  // legacy
	  this.readable = true;
	
	  if (options && typeof options.read === 'function') this._read = options.read;
	
	  Stream.call(this);
	}
	
	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function (chunk, encoding) {
	  var state = this._readableState;
	
	  if (!state.objectMode && typeof chunk === 'string') {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = bufferShim.from(chunk, encoding);
	      encoding = '';
	    }
	  }
	
	  return readableAddChunk(this, state, chunk, encoding, false);
	};
	
	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function (chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};
	
	Readable.prototype.isPaused = function () {
	  return this._readableState.flowing === false;
	};
	
	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (chunk === null) {
	    state.reading = false;
	    onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var _e = new Error('stream.unshift() after end event');
	      stream.emit('error', _e);
	    } else {
	      var skipAdd;
	      if (state.decoder && !addToFront && !encoding) {
	        chunk = state.decoder.write(chunk);
	        skipAdd = !state.objectMode && chunk.length === 0;
	      }
	
	      if (!addToFront) state.reading = false;
	
	      // Don't add to the buffer if we've decoded to an empty string chunk and
	      // we're not in object mode
	      if (!skipAdd) {
	        // if we want the data now, just emit it.
	        if (state.flowing && state.length === 0 && !state.sync) {
	          stream.emit('data', chunk);
	          stream.read(0);
	        } else {
	          // update the buffer info.
	          state.length += state.objectMode ? 1 : chunk.length;
	          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
	
	          if (state.needReadable) emitReadable(stream);
	        }
	      }
	
	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }
	
	  return needMoreData(state);
	}
	
	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
	}
	
	// backwards compatibility.
	Readable.prototype.setEncoding = function (enc) {
	  if (!StringDecoder) StringDecoder = __webpack_require__(329).StringDecoder;
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	  return this;
	};
	
	// Don't raise the hwm > 8MB
	var MAX_HWM = 0x800000;
	function computeNewHighWaterMark(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2 to prevent increasing hwm excessively in
	    // tiny amounts
	    n--;
	    n |= n >>> 1;
	    n |= n >>> 2;
	    n |= n >>> 4;
	    n |= n >>> 8;
	    n |= n >>> 16;
	    n++;
	  }
	  return n;
	}
	
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function howMuchToRead(n, state) {
	  if (n <= 0 || state.length === 0 && state.ended) return 0;
	  if (state.objectMode) return 1;
	  if (n !== n) {
	    // Only flow one buffer at a time
	    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
	  }
	  // If we're asking for more than the current hwm, then raise the hwm.
	  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
	  if (n <= state.length) return n;
	  // Don't have enough
	  if (!state.ended) {
	    state.needReadable = true;
	    return 0;
	  }
	  return state.length;
	}
	
	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function (n) {
	  debug('read', n);
	  n = parseInt(n, 10);
	  var state = this._readableState;
	  var nOrig = n;
	
	  if (n !== 0) state.emittedReadable = false;
	
	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
	    return null;
	  }
	
	  n = howMuchToRead(n, state);
	
	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0) endReadable(this);
	    return null;
	  }
	
	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.
	
	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);
	
	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }
	
	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  } else if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0) state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	    // If _read pushed data synchronously, then `reading` will be false,
	    // and we need to re-evaluate how much data we can return to the user.
	    if (!state.reading) n = howMuchToRead(nOrig, state);
	  }
	
	  var ret;
	  if (n > 0) ret = fromList(n, state);else ret = null;
	
	  if (ret === null) {
	    state.needReadable = true;
	    n = 0;
	  } else {
	    state.length -= n;
	  }
	
	  if (state.length === 0) {
	    // If we have nothing in the buffer, then we want to know
	    // as soon as we *do* get something into the buffer.
	    if (!state.ended) state.needReadable = true;
	
	    // If we tried to read() past the EOF, then emit end on the next tick.
	    if (nOrig !== n && state.ended) endReadable(this);
	  }
	
	  if (ret !== null) this.emit('data', ret);
	
	  return ret;
	};
	
	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}
	
	function onEofChunk(stream, state) {
	  if (state.ended) return;
	  if (state.decoder) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;
	
	  // emit 'readable' now to make sure it gets picked up.
	  emitReadable(stream);
	}
	
	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
	  }
	}
	
	function emitReadable_(stream) {
	  debug('emit readable');
	  stream.emit('readable');
	  flow(stream);
	}
	
	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    processNextTick(maybeReadMore_, stream, state);
	  }
	}
	
	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;else len = state.length;
	  }
	  state.readingMore = false;
	}
	
	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function (n) {
	  this.emit('error', new Error('_read() is not implemented'));
	};
	
	Readable.prototype.pipe = function (dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;
	
	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
	
	  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
	
	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);
	
	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    debug('onunpipe');
	    if (readable === src) {
	      cleanup();
	    }
	  }
	
	  function onend() {
	    debug('onend');
	    dest.end();
	  }
	
	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);
	
	  var cleanedUp = false;
	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);
	    src.removeListener('data', ondata);
	
	    cleanedUp = true;
	
	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
	  }
	
	  // If the user pushes more data while we're writing to dest then we'll end up
	  // in ondata again. However, we only want to increase awaitDrain once because
	  // dest will only emit one 'drain' event for the multiple writes.
	  // => Introduce a guard on increasing awaitDrain.
	  var increasedAwaitDrain = false;
	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    increasedAwaitDrain = false;
	    var ret = dest.write(chunk);
	    if (false === ret && !increasedAwaitDrain) {
	      // If the user unpiped during `dest.write()`, it is possible
	      // to get stuck in a permanently paused state if that write
	      // also returned false.
	      // => Check whether `dest` is still a piping destination.
	      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
	        debug('false write response, pause', src._readableState.awaitDrain);
	        src._readableState.awaitDrain++;
	        increasedAwaitDrain = true;
	      }
	      src.pause();
	    }
	  }
	
	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
	  }
	
	  // Make sure our error handler is attached before userland ones.
	  prependListener(dest, 'error', onerror);
	
	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);
	
	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }
	
	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);
	
	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }
	
	  return dest;
	};
	
	function pipeOnDrain(src) {
	  return function () {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain) state.awaitDrain--;
	    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}
	
	Readable.prototype.unpipe = function (dest) {
	  var state = this._readableState;
	
	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0) return this;
	
	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes) return this;
	
	    if (!dest) dest = state.pipes;
	
	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest) dest.emit('unpipe', this);
	    return this;
	  }
	
	  // slow case. multiple pipe destinations.
	
	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	
	    for (var i = 0; i < len; i++) {
	      dests[i].emit('unpipe', this);
	    }return this;
	  }
	
	  // try to find the right one.
	  var index = indexOf(state.pipes, dest);
	  if (index === -1) return this;
	
	  state.pipes.splice(index, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1) state.pipes = state.pipes[0];
	
	  dest.emit('unpipe', this);
	
	  return this;
	};
	
	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function (ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);
	
	  if (ev === 'data') {
	    // Start flowing on next tick if stream isn't explicitly paused
	    if (this._readableState.flowing !== false) this.resume();
	  } else if (ev === 'readable') {
	    var state = this._readableState;
	    if (!state.endEmitted && !state.readableListening) {
	      state.readableListening = state.needReadable = true;
	      state.emittedReadable = false;
	      if (!state.reading) {
	        processNextTick(nReadingNextTick, this);
	      } else if (state.length) {
	        emitReadable(this, state);
	      }
	    }
	  }
	
	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;
	
	function nReadingNextTick(self) {
	  debug('readable nexttick read 0');
	  self.read(0);
	}
	
	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function () {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    state.flowing = true;
	    resume(this, state);
	  }
	  return this;
	};
	
	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    processNextTick(resume_, stream, state);
	  }
	}
	
	function resume_(stream, state) {
	  if (!state.reading) {
	    debug('resume read 0');
	    stream.read(0);
	  }
	
	  state.resumeScheduled = false;
	  state.awaitDrain = 0;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading) stream.read(0);
	}
	
	Readable.prototype.pause = function () {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (false !== this._readableState.flowing) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  return this;
	};
	
	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  while (state.flowing && stream.read() !== null) {}
	}
	
	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function (stream) {
	  var state = this._readableState;
	  var paused = false;
	
	  var self = this;
	  stream.on('end', function () {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length) self.push(chunk);
	    }
	
	    self.push(null);
	  });
	
	  stream.on('data', function (chunk) {
	    debug('wrapped data');
	    if (state.decoder) chunk = state.decoder.write(chunk);
	
	    // don't skip over falsy values in objectMode
	    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;
	
	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });
	
	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (this[i] === undefined && typeof stream[i] === 'function') {
	      this[i] = function (method) {
	        return function () {
	          return stream[method].apply(stream, arguments);
	        };
	      }(i);
	    }
	  }
	
	  // proxy certain important events.
	  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
	  forEach(events, function (ev) {
	    stream.on(ev, self.emit.bind(self, ev));
	  });
	
	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function (n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };
	
	  return self;
	};
	
	// exposed for testing purposes only.
	Readable._fromList = fromList;
	
	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromList(n, state) {
	  // nothing buffered
	  if (state.length === 0) return null;
	
	  var ret;
	  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
	    // read it all, truncate the list
	    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
	    state.buffer.clear();
	  } else {
	    // read part of list
	    ret = fromListPartial(n, state.buffer, state.decoder);
	  }
	
	  return ret;
	}
	
	// Extracts only enough buffered data to satisfy the amount requested.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromListPartial(n, list, hasStrings) {
	  var ret;
	  if (n < list.head.data.length) {
	    // slice is the same for buffers and strings
	    ret = list.head.data.slice(0, n);
	    list.head.data = list.head.data.slice(n);
	  } else if (n === list.head.data.length) {
	    // first chunk is a perfect match
	    ret = list.shift();
	  } else {
	    // result spans more than one buffer
	    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
	  }
	  return ret;
	}
	
	// Copies a specified amount of characters from the list of buffered data
	// chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBufferString(n, list) {
	  var p = list.head;
	  var c = 1;
	  var ret = p.data;
	  n -= ret.length;
	  while (p = p.next) {
	    var str = p.data;
	    var nb = n > str.length ? str.length : n;
	    if (nb === str.length) ret += str;else ret += str.slice(0, n);
	    n -= nb;
	    if (n === 0) {
	      if (nb === str.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = str.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}
	
	// Copies a specified amount of bytes from the list of buffered data chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBuffer(n, list) {
	  var ret = bufferShim.allocUnsafe(n);
	  var p = list.head;
	  var c = 1;
	  p.data.copy(ret);
	  n -= p.data.length;
	  while (p = p.next) {
	    var buf = p.data;
	    var nb = n > buf.length ? buf.length : n;
	    buf.copy(ret, ret.length - n, 0, nb);
	    n -= nb;
	    if (n === 0) {
	      if (nb === buf.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = buf.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}
	
	function endReadable(stream) {
	  var state = stream._readableState;
	
	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');
	
	  if (!state.endEmitted) {
	    state.ended = true;
	    processNextTick(endReadableNT, state, stream);
	  }
	}
	
	function endReadableNT(state, stream) {
	  // Check that we didn't get one last unshift.
	  if (!state.endEmitted && state.length === 0) {
	    state.endEmitted = true;
	    stream.readable = false;
	    stream.emit('end');
	  }
	}
	
	function forEach(xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}
	
	function indexOf(xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(39)))

/***/ },
/* 307 */,
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(4);
	var empty_1 = __webpack_require__(607);
	Observable_1.Observable.empty = empty_1.empty;
	//# sourceMappingURL=empty.js.map

/***/ },
/* 309 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(4);
	var of_1 = __webpack_require__(317);
	Observable_1.Observable.of = of_1.of;
	//# sourceMappingURL=of.js.map

/***/ },
/* 310 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(4);
	var do_1 = __webpack_require__(319);
	Observable_1.Observable.prototype.do = do_1._do;
	Observable_1.Observable.prototype._do = do_1._do;
	//# sourceMappingURL=do.js.map

/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(4);
	var filter_1 = __webpack_require__(320);
	Observable_1.Observable.prototype.filter = filter_1.filter;
	//# sourceMappingURL=filter.js.map

/***/ },
/* 312 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(4);
	var map_1 = __webpack_require__(323);
	Observable_1.Observable.prototype.map = map_1.map;
	//# sourceMappingURL=map.js.map

/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(4);
	var share_1 = __webpack_require__(620);
	Observable_1.Observable.prototype.share = share_1.share;
	//# sourceMappingURL=share.js.map

/***/ },
/* 314 */,
/* 315 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var FromEventObservable_1 = __webpack_require__(604);
	exports.fromEvent = FromEventObservable_1.FromEventObservable.create;
	//# sourceMappingURL=fromEvent.js.map

/***/ },
/* 316 */,
/* 317 */,
/* 318 */,
/* 319 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(14);
	/* tslint:disable:max-line-length */
	/**
	 * Perform a side effect for every emission on the source Observable, but return
	 * an Observable that is identical to the source.
	 *
	 * <span class="informal">Intercepts each emission on the source and runs a
	 * function, but returns an output which is identical to the source.</span>
	 *
	 * <img src="./img/do.png" width="100%">
	 *
	 * Returns a mirrored Observable of the source Observable, but modified so that
	 * the provided Observer is called to perform a side effect for every value,
	 * error, and completion emitted by the source. Any errors that are thrown in
	 * the aforementioned Observer or handlers are safely sent down the error path
	 * of the output Observable.
	 *
	 * This operator is useful for debugging your Observables for the correct values
	 * or performing other side effects.
	 *
	 * Note: this is different to a `subscribe` on the Observable. If the Observable
	 * returned by `do` is not subscribed, the side effects specified by the
	 * Observer will never happen. `do` therefore simply spies on existing
	 * execution, it does not trigger an execution to happen like `subscribe` does.
	 *
	 * @example <caption>Map every every click to the clientX position of that click, while also logging the click event</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var positions = clicks
	 *   .do(ev => console.log(ev))
	 *   .map(ev => ev.clientX);
	 * positions.subscribe(x => console.log(x));
	 *
	 * @see {@link map}
	 * @see {@link subscribe}
	 *
	 * @param {Observer|function} [nextOrObserver] A normal Observer object or a
	 * callback for `next`.
	 * @param {function} [error] Callback for errors in the source.
	 * @param {function} [complete] Callback for the completion of the source.
	 * @return {Observable} An Observable identical to the source, but runs the
	 * specified Observer or callback(s) for each item.
	 * @method do
	 * @name do
	 * @owner Observable
	 */
	function _do(nextOrObserver, error, complete) {
	    return this.lift(new DoOperator(nextOrObserver, error, complete));
	}
	exports._do = _do;
	var DoOperator = (function () {
	    function DoOperator(nextOrObserver, error, complete) {
	        this.nextOrObserver = nextOrObserver;
	        this.error = error;
	        this.complete = complete;
	    }
	    DoOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));
	    };
	    return DoOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var DoSubscriber = (function (_super) {
	    __extends(DoSubscriber, _super);
	    function DoSubscriber(destination, nextOrObserver, error, complete) {
	        _super.call(this, destination);
	        var safeSubscriber = new Subscriber_1.Subscriber(nextOrObserver, error, complete);
	        safeSubscriber.syncErrorThrowable = true;
	        this.add(safeSubscriber);
	        this.safeSubscriber = safeSubscriber;
	    }
	    DoSubscriber.prototype._next = function (value) {
	        var safeSubscriber = this.safeSubscriber;
	        safeSubscriber.next(value);
	        if (safeSubscriber.syncErrorThrown) {
	            this.destination.error(safeSubscriber.syncErrorValue);
	        }
	        else {
	            this.destination.next(value);
	        }
	    };
	    DoSubscriber.prototype._error = function (err) {
	        var safeSubscriber = this.safeSubscriber;
	        safeSubscriber.error(err);
	        if (safeSubscriber.syncErrorThrown) {
	            this.destination.error(safeSubscriber.syncErrorValue);
	        }
	        else {
	            this.destination.error(err);
	        }
	    };
	    DoSubscriber.prototype._complete = function () {
	        var safeSubscriber = this.safeSubscriber;
	        safeSubscriber.complete();
	        if (safeSubscriber.syncErrorThrown) {
	            this.destination.error(safeSubscriber.syncErrorValue);
	        }
	        else {
	            this.destination.complete();
	        }
	    };
	    return DoSubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=do.js.map

/***/ },
/* 320 */,
/* 321 */,
/* 322 */
/***/ function(module, exports) {

	"use strict";
	/**
	 * @param func
	 * @return {Observable<R>}
	 * @method let
	 * @owner Observable
	 */
	function letProto(func) {
	    return func(this);
	}
	exports.letProto = letProto;
	//# sourceMappingURL=let.js.map

/***/ },
/* 323 */,
/* 324 */,
/* 325 */,
/* 326 */,
/* 327 */,
/* 328 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {exports.fetch = isFunction(global.fetch) && isFunction(global.ReadableStream)
	
	exports.blobConstructor = false
	try {
		new Blob([new ArrayBuffer(1)])
		exports.blobConstructor = true
	} catch (e) {}
	
	// The xhr request to example.com may violate some restrictive CSP configurations,
	// so if we're running in a browser that supports `fetch`, avoid calling getXHR()
	// and assume support for certain features below.
	var xhr
	function getXHR () {
		// Cache the xhr value
		if (xhr !== undefined) return xhr
	
		if (global.XMLHttpRequest) {
			xhr = new global.XMLHttpRequest()
			// If XDomainRequest is available (ie only, where xhr might not work
			// cross domain), use the page location. Otherwise use example.com
			// Note: this doesn't actually make an http request.
			try {
				xhr.open('GET', global.XDomainRequest ? '/' : 'https://example.com')
			} catch(e) {
				xhr = null
			}
		} else {
			// Service workers don't have XHR
			xhr = null
		}
		return xhr
	}
	
	function checkTypeSupport (type) {
		var xhr = getXHR()
		if (!xhr) return false
		try {
			xhr.responseType = type
			return xhr.responseType === type
		} catch (e) {}
		return false
	}
	
	// For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.
	// Safari 7.1 appears to have fixed this bug.
	var haveArrayBuffer = typeof global.ArrayBuffer !== 'undefined'
	var haveSlice = haveArrayBuffer && isFunction(global.ArrayBuffer.prototype.slice)
	
	// If fetch is supported, then arraybuffer will be supported too. Skip calling
	// checkTypeSupport(), since that calls getXHR().
	exports.arraybuffer = exports.fetch || (haveArrayBuffer && checkTypeSupport('arraybuffer'))
	
	// These next two tests unavoidably show warnings in Chrome. Since fetch will always
	// be used if it's available, just return false for these to avoid the warnings.
	exports.msstream = !exports.fetch && haveSlice && checkTypeSupport('ms-stream')
	exports.mozchunkedarraybuffer = !exports.fetch && haveArrayBuffer &&
		checkTypeSupport('moz-chunked-arraybuffer')
	
	// If fetch is supported, then overrideMimeType will be supported too. Skip calling
	// getXHR().
	exports.overrideMimeType = exports.fetch || (getXHR() ? isFunction(getXHR().overrideMimeType) : false)
	
	exports.vbArray = isFunction(global.VBArray)
	
	function isFunction (value) {
		return typeof value === 'function'
	}
	
	xhr = null // Help gc
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	var Buffer = __webpack_require__(53).Buffer;
	
	var isBufferEncoding = Buffer.isEncoding
	  || function(encoding) {
	       switch (encoding && encoding.toLowerCase()) {
	         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
	         default: return false;
	       }
	     }
	
	
	function assertEncoding(encoding) {
	  if (encoding && !isBufferEncoding(encoding)) {
	    throw new Error('Unknown encoding: ' + encoding);
	  }
	}
	
	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters. CESU-8 is handled as part of the UTF-8 encoding.
	//
	// @TODO Handling all encodings inside a single object makes it very difficult
	// to reason about this code, so it should be split up in the future.
	// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
	// points as used by CESU-8.
	var StringDecoder = exports.StringDecoder = function(encoding) {
	  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
	  assertEncoding(encoding);
	  switch (this.encoding) {
	    case 'utf8':
	      // CESU-8 represents each of Surrogate Pair by 3-bytes
	      this.surrogateSize = 3;
	      break;
	    case 'ucs2':
	    case 'utf16le':
	      // UTF-16 represents each of Surrogate Pair by 2-bytes
	      this.surrogateSize = 2;
	      this.detectIncompleteChar = utf16DetectIncompleteChar;
	      break;
	    case 'base64':
	      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
	      this.surrogateSize = 3;
	      this.detectIncompleteChar = base64DetectIncompleteChar;
	      break;
	    default:
	      this.write = passThroughWrite;
	      return;
	  }
	
	  // Enough space to store all bytes of a single character. UTF-8 needs 4
	  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
	  this.charBuffer = new Buffer(6);
	  // Number of bytes received for the current incomplete multi-byte character.
	  this.charReceived = 0;
	  // Number of bytes expected for the current incomplete multi-byte character.
	  this.charLength = 0;
	};
	
	
	// write decodes the given buffer and returns it as JS string that is
	// guaranteed to not contain any partial multi-byte characters. Any partial
	// character found at the end of the buffer is buffered up, and will be
	// returned when calling write again with the remaining bytes.
	//
	// Note: Converting a Buffer containing an orphan surrogate to a String
	// currently works, but converting a String to a Buffer (via `new Buffer`, or
	// Buffer#write) will replace incomplete surrogates with the unicode
	// replacement character. See https://codereview.chromium.org/121173009/ .
	StringDecoder.prototype.write = function(buffer) {
	  var charStr = '';
	  // if our last write ended with an incomplete multibyte character
	  while (this.charLength) {
	    // determine how many remaining bytes this buffer has to offer for this char
	    var available = (buffer.length >= this.charLength - this.charReceived) ?
	        this.charLength - this.charReceived :
	        buffer.length;
	
	    // add the new bytes to the char buffer
	    buffer.copy(this.charBuffer, this.charReceived, 0, available);
	    this.charReceived += available;
	
	    if (this.charReceived < this.charLength) {
	      // still not enough chars in this buffer? wait for more ...
	      return '';
	    }
	
	    // remove bytes belonging to the current character from the buffer
	    buffer = buffer.slice(available, buffer.length);
	
	    // get the character that was split
	    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);
	
	    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	    var charCode = charStr.charCodeAt(charStr.length - 1);
	    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	      this.charLength += this.surrogateSize;
	      charStr = '';
	      continue;
	    }
	    this.charReceived = this.charLength = 0;
	
	    // if there are no more bytes in this buffer, just emit our char
	    if (buffer.length === 0) {
	      return charStr;
	    }
	    break;
	  }
	
	  // determine and set charLength / charReceived
	  this.detectIncompleteChar(buffer);
	
	  var end = buffer.length;
	  if (this.charLength) {
	    // buffer the incomplete character bytes we got
	    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
	    end -= this.charReceived;
	  }
	
	  charStr += buffer.toString(this.encoding, 0, end);
	
	  var end = charStr.length - 1;
	  var charCode = charStr.charCodeAt(end);
	  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	    var size = this.surrogateSize;
	    this.charLength += size;
	    this.charReceived += size;
	    this.charBuffer.copy(this.charBuffer, size, 0, size);
	    buffer.copy(this.charBuffer, 0, 0, size);
	    return charStr.substring(0, end);
	  }
	
	  // or just emit the charStr
	  return charStr;
	};
	
	// detectIncompleteChar determines if there is an incomplete UTF-8 character at
	// the end of the given buffer. If so, it sets this.charLength to the byte
	// length that character, and sets this.charReceived to the number of bytes
	// that are available for this character.
	StringDecoder.prototype.detectIncompleteChar = function(buffer) {
	  // determine how many bytes we have to check at the end of this buffer
	  var i = (buffer.length >= 3) ? 3 : buffer.length;
	
	  // Figure out if one of the last i bytes of our buffer announces an
	  // incomplete char.
	  for (; i > 0; i--) {
	    var c = buffer[buffer.length - i];
	
	    // See http://en.wikipedia.org/wiki/UTF-8#Description
	
	    // 110XXXXX
	    if (i == 1 && c >> 5 == 0x06) {
	      this.charLength = 2;
	      break;
	    }
	
	    // 1110XXXX
	    if (i <= 2 && c >> 4 == 0x0E) {
	      this.charLength = 3;
	      break;
	    }
	
	    // 11110XXX
	    if (i <= 3 && c >> 3 == 0x1E) {
	      this.charLength = 4;
	      break;
	    }
	  }
	  this.charReceived = i;
	};
	
	StringDecoder.prototype.end = function(buffer) {
	  var res = '';
	  if (buffer && buffer.length)
	    res = this.write(buffer);
	
	  if (this.charReceived) {
	    var cr = this.charReceived;
	    var buf = this.charBuffer;
	    var enc = this.encoding;
	    res += buf.slice(0, cr).toString(enc);
	  }
	
	  return res;
	};
	
	function passThroughWrite(buffer) {
	  return buffer.toString(this.encoding);
	}
	
	function utf16DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 2;
	  this.charLength = this.charReceived ? 2 : 0;
	}
	
	function base64DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 3;
	  this.charLength = this.charReceived ? 3 : 0;
	}


/***/ },
/* 330 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	'use strict';
	
	var punycode = __webpack_require__(642);
	var util = __webpack_require__(643);
	
	exports.parse = urlParse;
	exports.resolve = urlResolve;
	exports.resolveObject = urlResolveObject;
	exports.format = urlFormat;
	
	exports.Url = Url;
	
	function Url() {
	  this.protocol = null;
	  this.slashes = null;
	  this.auth = null;
	  this.host = null;
	  this.port = null;
	  this.hostname = null;
	  this.hash = null;
	  this.search = null;
	  this.query = null;
	  this.pathname = null;
	  this.path = null;
	  this.href = null;
	}
	
	// Reference: RFC 3986, RFC 1808, RFC 2396
	
	// define these here so at least they only have to be
	// compiled once on the first module load.
	var protocolPattern = /^([a-z0-9.+-]+:)/i,
	    portPattern = /:[0-9]*$/,
	
	    // Special case for a simple path URL
	    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,
	
	    // RFC 2396: characters reserved for delimiting URLs.
	    // We actually just auto-escape these.
	    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],
	
	    // RFC 2396: characters not allowed for various reasons.
	    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),
	
	    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
	    autoEscape = ['\''].concat(unwise),
	    // Characters that are never ever allowed in a hostname.
	    // Note that any invalid chars are also handled, but these
	    // are the ones that are *expected* to be seen, so we fast-path
	    // them.
	    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
	    hostEndingChars = ['/', '?', '#'],
	    hostnameMaxLen = 255,
	    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
	    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
	    // protocols that can allow "unsafe" and "unwise" chars.
	    unsafeProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that never have a hostname.
	    hostlessProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that always contain a // bit.
	    slashedProtocol = {
	      'http': true,
	      'https': true,
	      'ftp': true,
	      'gopher': true,
	      'file': true,
	      'http:': true,
	      'https:': true,
	      'ftp:': true,
	      'gopher:': true,
	      'file:': true
	    },
	    querystring = __webpack_require__(561);
	
	function urlParse(url, parseQueryString, slashesDenoteHost) {
	  if (url && util.isObject(url) && url instanceof Url) return url;
	
	  var u = new Url;
	  u.parse(url, parseQueryString, slashesDenoteHost);
	  return u;
	}
	
	Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
	  if (!util.isString(url)) {
	    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
	  }
	
	  // Copy chrome, IE, opera backslash-handling behavior.
	  // Back slashes before the query string get converted to forward slashes
	  // See: https://code.google.com/p/chromium/issues/detail?id=25916
	  var queryIndex = url.indexOf('?'),
	      splitter =
	          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
	      uSplit = url.split(splitter),
	      slashRegex = /\\/g;
	  uSplit[0] = uSplit[0].replace(slashRegex, '/');
	  url = uSplit.join(splitter);
	
	  var rest = url;
	
	  // trim before proceeding.
	  // This is to support parse stuff like "  http://foo.com  \n"
	  rest = rest.trim();
	
	  if (!slashesDenoteHost && url.split('#').length === 1) {
	    // Try fast path regexp
	    var simplePath = simplePathPattern.exec(rest);
	    if (simplePath) {
	      this.path = rest;
	      this.href = rest;
	      this.pathname = simplePath[1];
	      if (simplePath[2]) {
	        this.search = simplePath[2];
	        if (parseQueryString) {
	          this.query = querystring.parse(this.search.substr(1));
	        } else {
	          this.query = this.search.substr(1);
	        }
	      } else if (parseQueryString) {
	        this.search = '';
	        this.query = {};
	      }
	      return this;
	    }
	  }
	
	  var proto = protocolPattern.exec(rest);
	  if (proto) {
	    proto = proto[0];
	    var lowerProto = proto.toLowerCase();
	    this.protocol = lowerProto;
	    rest = rest.substr(proto.length);
	  }
	
	  // figure out if it's got a host
	  // user@server is *always* interpreted as a hostname, and url
	  // resolution will treat //foo/bar as host=foo,path=bar because that's
	  // how the browser resolves relative URLs.
	  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
	    var slashes = rest.substr(0, 2) === '//';
	    if (slashes && !(proto && hostlessProtocol[proto])) {
	      rest = rest.substr(2);
	      this.slashes = true;
	    }
	  }
	
	  if (!hostlessProtocol[proto] &&
	      (slashes || (proto && !slashedProtocol[proto]))) {
	
	    // there's a hostname.
	    // the first instance of /, ?, ;, or # ends the host.
	    //
	    // If there is an @ in the hostname, then non-host chars *are* allowed
	    // to the left of the last @ sign, unless some host-ending character
	    // comes *before* the @-sign.
	    // URLs are obnoxious.
	    //
	    // ex:
	    // http://a@b@c/ => user:a@b host:c
	    // http://a@b?@c => user:a host:c path:/?@c
	
	    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
	    // Review our test case against browsers more comprehensively.
	
	    // find the first instance of any hostEndingChars
	    var hostEnd = -1;
	    for (var i = 0; i < hostEndingChars.length; i++) {
	      var hec = rest.indexOf(hostEndingChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	
	    // at this point, either we have an explicit point where the
	    // auth portion cannot go past, or the last @ char is the decider.
	    var auth, atSign;
	    if (hostEnd === -1) {
	      // atSign can be anywhere.
	      atSign = rest.lastIndexOf('@');
	    } else {
	      // atSign must be in auth portion.
	      // http://a@b/c@d => host:b auth:a path:/c@d
	      atSign = rest.lastIndexOf('@', hostEnd);
	    }
	
	    // Now we have a portion which is definitely the auth.
	    // Pull that off.
	    if (atSign !== -1) {
	      auth = rest.slice(0, atSign);
	      rest = rest.slice(atSign + 1);
	      this.auth = decodeURIComponent(auth);
	    }
	
	    // the host is the remaining to the left of the first non-host char
	    hostEnd = -1;
	    for (var i = 0; i < nonHostChars.length; i++) {
	      var hec = rest.indexOf(nonHostChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	    // if we still have not hit it, then the entire thing is a host.
	    if (hostEnd === -1)
	      hostEnd = rest.length;
	
	    this.host = rest.slice(0, hostEnd);
	    rest = rest.slice(hostEnd);
	
	    // pull out port.
	    this.parseHost();
	
	    // we've indicated that there is a hostname,
	    // so even if it's empty, it has to be present.
	    this.hostname = this.hostname || '';
	
	    // if hostname begins with [ and ends with ]
	    // assume that it's an IPv6 address.
	    var ipv6Hostname = this.hostname[0] === '[' &&
	        this.hostname[this.hostname.length - 1] === ']';
	
	    // validate a little.
	    if (!ipv6Hostname) {
	      var hostparts = this.hostname.split(/\./);
	      for (var i = 0, l = hostparts.length; i < l; i++) {
	        var part = hostparts[i];
	        if (!part) continue;
	        if (!part.match(hostnamePartPattern)) {
	          var newpart = '';
	          for (var j = 0, k = part.length; j < k; j++) {
	            if (part.charCodeAt(j) > 127) {
	              // we replace non-ASCII char with a temporary placeholder
	              // we need this to make sure size of hostname is not
	              // broken by replacing non-ASCII by nothing
	              newpart += 'x';
	            } else {
	              newpart += part[j];
	            }
	          }
	          // we test again with ASCII char only
	          if (!newpart.match(hostnamePartPattern)) {
	            var validParts = hostparts.slice(0, i);
	            var notHost = hostparts.slice(i + 1);
	            var bit = part.match(hostnamePartStart);
	            if (bit) {
	              validParts.push(bit[1]);
	              notHost.unshift(bit[2]);
	            }
	            if (notHost.length) {
	              rest = '/' + notHost.join('.') + rest;
	            }
	            this.hostname = validParts.join('.');
	            break;
	          }
	        }
	      }
	    }
	
	    if (this.hostname.length > hostnameMaxLen) {
	      this.hostname = '';
	    } else {
	      // hostnames are always lower case.
	      this.hostname = this.hostname.toLowerCase();
	    }
	
	    if (!ipv6Hostname) {
	      // IDNA Support: Returns a punycoded representation of "domain".
	      // It only converts parts of the domain name that
	      // have non-ASCII characters, i.e. it doesn't matter if
	      // you call it with a domain that already is ASCII-only.
	      this.hostname = punycode.toASCII(this.hostname);
	    }
	
	    var p = this.port ? ':' + this.port : '';
	    var h = this.hostname || '';
	    this.host = h + p;
	    this.href += this.host;
	
	    // strip [ and ] from the hostname
	    // the host field still retains them, though
	    if (ipv6Hostname) {
	      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
	      if (rest[0] !== '/') {
	        rest = '/' + rest;
	      }
	    }
	  }
	
	  // now rest is set to the post-host stuff.
	  // chop off any delim chars.
	  if (!unsafeProtocol[lowerProto]) {
	
	    // First, make 100% sure that any "autoEscape" chars get
	    // escaped, even if encodeURIComponent doesn't think they
	    // need to be.
	    for (var i = 0, l = autoEscape.length; i < l; i++) {
	      var ae = autoEscape[i];
	      if (rest.indexOf(ae) === -1)
	        continue;
	      var esc = encodeURIComponent(ae);
	      if (esc === ae) {
	        esc = escape(ae);
	      }
	      rest = rest.split(ae).join(esc);
	    }
	  }
	
	
	  // chop off from the tail first.
	  var hash = rest.indexOf('#');
	  if (hash !== -1) {
	    // got a fragment string.
	    this.hash = rest.substr(hash);
	    rest = rest.slice(0, hash);
	  }
	  var qm = rest.indexOf('?');
	  if (qm !== -1) {
	    this.search = rest.substr(qm);
	    this.query = rest.substr(qm + 1);
	    if (parseQueryString) {
	      this.query = querystring.parse(this.query);
	    }
	    rest = rest.slice(0, qm);
	  } else if (parseQueryString) {
	    // no query string, but parseQueryString still requested
	    this.search = '';
	    this.query = {};
	  }
	  if (rest) this.pathname = rest;
	  if (slashedProtocol[lowerProto] &&
	      this.hostname && !this.pathname) {
	    this.pathname = '/';
	  }
	
	  //to support http.request
	  if (this.pathname || this.search) {
	    var p = this.pathname || '';
	    var s = this.search || '';
	    this.path = p + s;
	  }
	
	  // finally, reconstruct the href based on what has been validated.
	  this.href = this.format();
	  return this;
	};
	
	// format a parsed object into a url string
	function urlFormat(obj) {
	  // ensure it's an object, and not a string url.
	  // If it's an obj, this is a no-op.
	  // this way, you can call url_format() on strings
	  // to clean up potentially wonky urls.
	  if (util.isString(obj)) obj = urlParse(obj);
	  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
	  return obj.format();
	}
	
	Url.prototype.format = function() {
	  var auth = this.auth || '';
	  if (auth) {
	    auth = encodeURIComponent(auth);
	    auth = auth.replace(/%3A/i, ':');
	    auth += '@';
	  }
	
	  var protocol = this.protocol || '',
	      pathname = this.pathname || '',
	      hash = this.hash || '',
	      host = false,
	      query = '';
	
	  if (this.host) {
	    host = auth + this.host;
	  } else if (this.hostname) {
	    host = auth + (this.hostname.indexOf(':') === -1 ?
	        this.hostname :
	        '[' + this.hostname + ']');
	    if (this.port) {
	      host += ':' + this.port;
	    }
	  }
	
	  if (this.query &&
	      util.isObject(this.query) &&
	      Object.keys(this.query).length) {
	    query = querystring.stringify(this.query);
	  }
	
	  var search = this.search || (query && ('?' + query)) || '';
	
	  if (protocol && protocol.substr(-1) !== ':') protocol += ':';
	
	  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
	  // unless they had them to begin with.
	  if (this.slashes ||
	      (!protocol || slashedProtocol[protocol]) && host !== false) {
	    host = '//' + (host || '');
	    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
	  } else if (!host) {
	    host = '';
	  }
	
	  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
	  if (search && search.charAt(0) !== '?') search = '?' + search;
	
	  pathname = pathname.replace(/[?#]/g, function(match) {
	    return encodeURIComponent(match);
	  });
	  search = search.replace('#', '%23');
	
	  return protocol + host + pathname + search + hash;
	};
	
	function urlResolve(source, relative) {
	  return urlParse(source, false, true).resolve(relative);
	}
	
	Url.prototype.resolve = function(relative) {
	  return this.resolveObject(urlParse(relative, false, true)).format();
	};
	
	function urlResolveObject(source, relative) {
	  if (!source) return relative;
	  return urlParse(source, false, true).resolveObject(relative);
	}
	
	Url.prototype.resolveObject = function(relative) {
	  if (util.isString(relative)) {
	    var rel = new Url();
	    rel.parse(relative, false, true);
	    relative = rel;
	  }
	
	  var result = new Url();
	  var tkeys = Object.keys(this);
	  for (var tk = 0; tk < tkeys.length; tk++) {
	    var tkey = tkeys[tk];
	    result[tkey] = this[tkey];
	  }
	
	  // hash is always overridden, no matter what.
	  // even href="" will remove it.
	  result.hash = relative.hash;
	
	  // if the relative url is empty, then there's nothing left to do here.
	  if (relative.href === '') {
	    result.href = result.format();
	    return result;
	  }
	
	  // hrefs like //foo/bar always cut to the protocol.
	  if (relative.slashes && !relative.protocol) {
	    // take everything except the protocol from relative
	    var rkeys = Object.keys(relative);
	    for (var rk = 0; rk < rkeys.length; rk++) {
	      var rkey = rkeys[rk];
	      if (rkey !== 'protocol')
	        result[rkey] = relative[rkey];
	    }
	
	    //urlParse appends trailing / to urls like http://www.example.com
	    if (slashedProtocol[result.protocol] &&
	        result.hostname && !result.pathname) {
	      result.path = result.pathname = '/';
	    }
	
	    result.href = result.format();
	    return result;
	  }
	
	  if (relative.protocol && relative.protocol !== result.protocol) {
	    // if it's a known url protocol, then changing
	    // the protocol does weird things
	    // first, if it's not file:, then we MUST have a host,
	    // and if there was a path
	    // to begin with, then we MUST have a path.
	    // if it is file:, then the host is dropped,
	    // because that's known to be hostless.
	    // anything else is assumed to be absolute.
	    if (!slashedProtocol[relative.protocol]) {
	      var keys = Object.keys(relative);
	      for (var v = 0; v < keys.length; v++) {
	        var k = keys[v];
	        result[k] = relative[k];
	      }
	      result.href = result.format();
	      return result;
	    }
	
	    result.protocol = relative.protocol;
	    if (!relative.host && !hostlessProtocol[relative.protocol]) {
	      var relPath = (relative.pathname || '').split('/');
	      while (relPath.length && !(relative.host = relPath.shift()));
	      if (!relative.host) relative.host = '';
	      if (!relative.hostname) relative.hostname = '';
	      if (relPath[0] !== '') relPath.unshift('');
	      if (relPath.length < 2) relPath.unshift('');
	      result.pathname = relPath.join('/');
	    } else {
	      result.pathname = relative.pathname;
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    result.host = relative.host || '';
	    result.auth = relative.auth;
	    result.hostname = relative.hostname || relative.host;
	    result.port = relative.port;
	    // to support http.request
	    if (result.pathname || result.search) {
	      var p = result.pathname || '';
	      var s = result.search || '';
	      result.path = p + s;
	    }
	    result.slashes = result.slashes || relative.slashes;
	    result.href = result.format();
	    return result;
	  }
	
	  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
	      isRelAbs = (
	          relative.host ||
	          relative.pathname && relative.pathname.charAt(0) === '/'
	      ),
	      mustEndAbs = (isRelAbs || isSourceAbs ||
	                    (result.host && relative.pathname)),
	      removeAllDots = mustEndAbs,
	      srcPath = result.pathname && result.pathname.split('/') || [],
	      relPath = relative.pathname && relative.pathname.split('/') || [],
	      psychotic = result.protocol && !slashedProtocol[result.protocol];
	
	  // if the url is a non-slashed url, then relative
	  // links like ../.. should be able
	  // to crawl up to the hostname, as well.  This is strange.
	  // result.protocol has already been set by now.
	  // Later on, put the first path part into the host field.
	  if (psychotic) {
	    result.hostname = '';
	    result.port = null;
	    if (result.host) {
	      if (srcPath[0] === '') srcPath[0] = result.host;
	      else srcPath.unshift(result.host);
	    }
	    result.host = '';
	    if (relative.protocol) {
	      relative.hostname = null;
	      relative.port = null;
	      if (relative.host) {
	        if (relPath[0] === '') relPath[0] = relative.host;
	        else relPath.unshift(relative.host);
	      }
	      relative.host = null;
	    }
	    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
	  }
	
	  if (isRelAbs) {
	    // it's absolute.
	    result.host = (relative.host || relative.host === '') ?
	                  relative.host : result.host;
	    result.hostname = (relative.hostname || relative.hostname === '') ?
	                      relative.hostname : result.hostname;
	    result.search = relative.search;
	    result.query = relative.query;
	    srcPath = relPath;
	    // fall through to the dot-handling below.
	  } else if (relPath.length) {
	    // it's relative
	    // throw away the existing file, and take the new path instead.
	    if (!srcPath) srcPath = [];
	    srcPath.pop();
	    srcPath = srcPath.concat(relPath);
	    result.search = relative.search;
	    result.query = relative.query;
	  } else if (!util.isNullOrUndefined(relative.search)) {
	    // just pull out the search.
	    // like href='?foo'.
	    // Put this after the other two cases because it simplifies the booleans
	    if (psychotic) {
	      result.hostname = result.host = srcPath.shift();
	      //occationaly the auth can get stuck only in host
	      //this especially happens in cases like
	      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	      var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                       result.host.split('@') : false;
	      if (authInHost) {
	        result.auth = authInHost.shift();
	        result.host = result.hostname = authInHost.shift();
	      }
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    //to support http.request
	    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
	      result.path = (result.pathname ? result.pathname : '') +
	                    (result.search ? result.search : '');
	    }
	    result.href = result.format();
	    return result;
	  }
	
	  if (!srcPath.length) {
	    // no path at all.  easy.
	    // we've already handled the other stuff above.
	    result.pathname = null;
	    //to support http.request
	    if (result.search) {
	      result.path = '/' + result.search;
	    } else {
	      result.path = null;
	    }
	    result.href = result.format();
	    return result;
	  }
	
	  // if a url ENDs in . or .., then it must get a trailing slash.
	  // however, if it ends in anything else non-slashy,
	  // then it must NOT get a trailing slash.
	  var last = srcPath.slice(-1)[0];
	  var hasTrailingSlash = (
	      (result.host || relative.host || srcPath.length > 1) &&
	      (last === '.' || last === '..') || last === '');
	
	  // strip single dots, resolve double dots to parent dir
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = srcPath.length; i >= 0; i--) {
	    last = srcPath[i];
	    if (last === '.') {
	      srcPath.splice(i, 1);
	    } else if (last === '..') {
	      srcPath.splice(i, 1);
	      up++;
	    } else if (up) {
	      srcPath.splice(i, 1);
	      up--;
	    }
	  }
	
	  // if the path is allowed to go above the root, restore leading ..s
	  if (!mustEndAbs && !removeAllDots) {
	    for (; up--; up) {
	      srcPath.unshift('..');
	    }
	  }
	
	  if (mustEndAbs && srcPath[0] !== '' &&
	      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
	    srcPath.unshift('');
	  }
	
	  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
	    srcPath.push('');
	  }
	
	  var isAbsolute = srcPath[0] === '' ||
	      (srcPath[0] && srcPath[0].charAt(0) === '/');
	
	  // put the host back
	  if (psychotic) {
	    result.hostname = result.host = isAbsolute ? '' :
	                                    srcPath.length ? srcPath.shift() : '';
	    //occationaly the auth can get stuck only in host
	    //this especially happens in cases like
	    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	    var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                     result.host.split('@') : false;
	    if (authInHost) {
	      result.auth = authInHost.shift();
	      result.host = result.hostname = authInHost.shift();
	    }
	  }
	
	  mustEndAbs = mustEndAbs || (result.host && srcPath.length);
	
	  if (mustEndAbs && !isAbsolute) {
	    srcPath.unshift('');
	  }
	
	  if (!srcPath.length) {
	    result.pathname = null;
	    result.path = null;
	  } else {
	    result.pathname = srcPath.join('/');
	  }
	
	  //to support request.http
	  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
	    result.path = (result.pathname ? result.pathname : '') +
	                  (result.search ? result.search : '');
	  }
	  result.auth = relative.auth || result.auth;
	  result.slashes = result.slashes || relative.slashes;
	  result.href = result.format();
	  return result;
	};
	
	Url.prototype.parseHost = function() {
	  var host = this.host;
	  var port = portPattern.exec(host);
	  if (port) {
	    port = port[0];
	    if (port !== ':') {
	      this.port = port.substr(1);
	    }
	    host = host.substr(0, host.length - port.length);
	  }
	  if (host) this.hostname = host;
	};


/***/ },
/* 331 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 332 */,
/* 333 */
/***/ function(module, exports, __webpack_require__) {

	/**
	  * @license Angular Material v2.0.0-beta.1
	  * Copyright (c) 2016 Google, Inc. https://material.angular.io/
	  * License: MIT
	  */
	(function (global, factory) {
	     true ? factory(exports, __webpack_require__(3), __webpack_require__(49), __webpack_require__(4), __webpack_require__(593), __webpack_require__(51), __webpack_require__(52), __webpack_require__(68), __webpack_require__(40), __webpack_require__(592), __webpack_require__(309), __webpack_require__(312), __webpack_require__(311), __webpack_require__(310), __webpack_require__(313), __webpack_require__(594), __webpack_require__(226), __webpack_require__(595)) :
	    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'rxjs/Subject', 'rxjs/Observable', 'rxjs/add/observable/fromEvent', '@angular/common', '@angular/platform-browser', '@angular/forms', '@angular/http', 'rxjs/add/observable/forkJoin', 'rxjs/add/observable/of', 'rxjs/add/operator/map', 'rxjs/add/operator/filter', 'rxjs/add/operator/do', 'rxjs/add/operator/share', 'rxjs/add/operator/finally', 'rxjs/add/operator/catch', 'rxjs/add/operator/first'], factory) :
	    (factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}),global.ng.core,global.Rx,global.Rx,global.Rx.Observable,global.ng.common,global.ng.platformBrowser,global.ng.forms,global.ng.http,global.Rx.Observable,global.Rx.Observable,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable.prototype));
	}(this, (function (exports,_angular_core,rxjs_Subject,rxjs_Observable,rxjs_add_observable_fromEvent,_angular_common,_angular_platformBrowser,_angular_forms,_angular_http,rxjs_add_observable_forkJoin,rxjs_add_observable_of,rxjs_add_operator_map,rxjs_add_operator_filter,rxjs_add_operator_do,rxjs_add_operator_share,rxjs_add_operator_finally,rxjs_add_operator_catch,rxjs_add_operator_first) { 'use strict';
	
	var __decorate$2 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$2 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var MATERIAL_COMPATIBILITY_MODE = new _angular_core.OpaqueToken('md-compatibiility-mode');
	/** Selector that matches all elements that may have style collisions with material1. */
	var MAT_ELEMENTS_SELECTOR = "\n  mat-autocomplete,\n  mat-card,\n  mat-card-actions,\n  mat-card-content,\n  mat-card-footer,\n  mat-card-header,\n  mat-card-subtitle,\n  mat-card-title,\n  mat-card-title-group,\n  mat-checkbox,\n  mat-chip,\n  mat-dialog-container,\n  mat-divider,\n  mat-grid-list,\n  mat-grid-tile,\n  mat-grid-tile-footer,\n  mat-grid-tile-header,\n  mat-hint,\n  mat-icon,\n  mat-ink-bar,\n  mat-input,\n  mat-list,\n  mat-list-item,\n  mat-menu,\n  mat-nav-list,\n  mat-option,\n  mat-placeholder,\n  mat-progress-bar,\n  mat-progress-circle,\n  mat-radio-button,\n  mat-radio-group,\n  mat-select,\n  mat-sidenav,\n  mat-slider,\n  mat-spinner,\n  mat-tab,\n  mat-toolbar\n";
	/** Directive that enforces that the `mat-` prefix cannot be used. */
	var MatPrefixEnforcer = (function () {
	    function MatPrefixEnforcer(isCompatibilityMode) {
	        if (!isCompatibilityMode) {
	            throw Error('The "mat-" prefix cannot be used out of ng-material v1 compatibility mode.');
	        }
	    }
	    MatPrefixEnforcer = __decorate$2([
	        _angular_core.Directive({ selector: MAT_ELEMENTS_SELECTOR }),
	        __param(0, _angular_core.Inject(MATERIAL_COMPATIBILITY_MODE)), 
	        __metadata$2('design:paramtypes', [Boolean])
	    ], MatPrefixEnforcer);
	    return MatPrefixEnforcer;
	}());
	/**
	 * Module that enforces the default "compatibility mode" settings. When this module is loaded
	 * without NoConflictStyleCompatibilityMode also being imported, it will throw an error if
	 * there are any uses of the `mat-` prefix.
	 *
	 * Because the point of this directive is to *not* be used, it will be tree-shaken away by
	 * optimizers when not in compatibility mode.
	 */
	var DefaultStyleCompatibilityModeModule = (function () {
	    function DefaultStyleCompatibilityModeModule() {
	    }
	    DefaultStyleCompatibilityModeModule.forRoot = function () {
	        return {
	            ngModule: DefaultStyleCompatibilityModeModule,
	            providers: [],
	        };
	    };
	    DefaultStyleCompatibilityModeModule = __decorate$2([
	        _angular_core.NgModule({
	            declarations: [MatPrefixEnforcer],
	            exports: [MatPrefixEnforcer],
	            providers: [{
	                    provide: MATERIAL_COMPATIBILITY_MODE, useValue: false,
	                }]
	        }), 
	        __metadata$2('design:paramtypes', [])
	    ], DefaultStyleCompatibilityModeModule);
	    return DefaultStyleCompatibilityModeModule;
	}());
	
	var __decorate$1 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$1 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/**
	 * Shared directive to count lines inside a text area, such as a list item.
	 * Line elements can be extracted with a @ContentChildren(MdLine) query, then
	 * counted by checking the query list's length.
	 */
	var MdLine = (function () {
	    function MdLine() {
	    }
	    MdLine = __decorate$1([
	        _angular_core.Directive({ selector: '[md-line], [mat-line]' }), 
	        __metadata$1('design:paramtypes', [])
	    ], MdLine);
	    return MdLine;
	}());
	/**
	 * Helper that takes a query list of lines and sets the correct class on the host.
	 * @docs-private
	 */
	var MdLineSetter = (function () {
	    function MdLineSetter(_lines, _renderer, _element) {
	        var _this = this;
	        this._lines = _lines;
	        this._renderer = _renderer;
	        this._element = _element;
	        this._setLineClass(this._lines.length);
	        this._lines.changes.subscribe(function () {
	            _this._setLineClass(_this._lines.length);
	        });
	    }
	    MdLineSetter.prototype._setLineClass = function (count) {
	        this._resetClasses();
	        if (count === 2 || count === 3) {
	            this._setClass("md-" + count + "-line", true);
	        }
	        else if (count > 3) {
	            this._setClass("md-multi-line", true);
	        }
	    };
	    MdLineSetter.prototype._resetClasses = function () {
	        this._setClass('md-2-line', false);
	        this._setClass('md-3-line', false);
	        this._setClass('md-multi-line', false);
	    };
	    MdLineSetter.prototype._setClass = function (className, bool) {
	        this._renderer.setElementClass(this._element.nativeElement, className, bool);
	    };
	    return MdLineSetter;
	}());
	var MdLineModule = (function () {
	    function MdLineModule() {
	    }
	    MdLineModule = __decorate$1([
	        _angular_core.NgModule({
	            imports: [DefaultStyleCompatibilityModeModule],
	            exports: [MdLine, DefaultStyleCompatibilityModeModule],
	            declarations: [MdLine],
	        }), 
	        __metadata$1('design:paramtypes', [])
	    ], MdLineModule);
	    return MdLineModule;
	}());
	
	var __decorate$3 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$3 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/**
	 * Directive to listen for changes of direction of part of the DOM.
	 *
	 * Applications should use this directive instead of the native attribute so that Material
	 * components can listen on changes of direction.
	 */
	var Dir = (function () {
	    function Dir() {
	        /** Layout direction of the element. */
	        this._dir = 'ltr';
	        /** Event emitted when the direction changes. */
	        this.dirChange = new _angular_core.EventEmitter();
	    }
	    Object.defineProperty(Dir.prototype, "dir", {
	        /** @docs-private */
	        get: function () {
	            return this._dir;
	        },
	        set: function (v) {
	            var old = this._dir;
	            this._dir = v;
	            if (old != this._dir) {
	                this.dirChange.emit();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Dir.prototype, "value", {
	        /** Current layout direction of the element. */
	        get: function () { return this.dir; },
	        set: function (v) { this.dir = v; },
	        enumerable: true,
	        configurable: true
	    });
	    __decorate$3([
	        _angular_core.Input('dir'), 
	        __metadata$3('design:type', String)
	    ], Dir.prototype, "_dir", void 0);
	    __decorate$3([
	        _angular_core.Output(), 
	        __metadata$3('design:type', Object)
	    ], Dir.prototype, "dirChange", void 0);
	    __decorate$3([
	        _angular_core.HostBinding('attr.dir'), 
	        __metadata$3('design:type', String)
	    ], Dir.prototype, "dir", null);
	    Dir = __decorate$3([
	        _angular_core.Directive({
	            selector: '[dir]',
	            // TODO(hansl): maybe `$implicit` isn't the best option here, but for now that's the best we got.
	            exportAs: '$implicit'
	        }), 
	        __metadata$3('design:paramtypes', [])
	    ], Dir);
	    return Dir;
	}());
	var RtlModule = (function () {
	    function RtlModule() {
	    }
	    RtlModule.forRoot = function () {
	        return {
	            ngModule: RtlModule,
	            providers: []
	        };
	    };
	    RtlModule = __decorate$3([
	        _angular_core.NgModule({
	            exports: [Dir],
	            declarations: [Dir]
	        }), 
	        __metadata$3('design:paramtypes', [])
	    ], RtlModule);
	    return RtlModule;
	}());
	
	var __decorate$4 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$4 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/**
	 * Directive that triggers a callback whenever the content of
	 * its associated element has changed.
	 */
	var ObserveContent = (function () {
	    function ObserveContent(_elementRef) {
	        this._elementRef = _elementRef;
	        /** Event emitted for each change in the element's content. */
	        this.event = new _angular_core.EventEmitter();
	    }
	    ObserveContent.prototype.ngAfterContentInit = function () {
	        var _this = this;
	        this._observer = new MutationObserver(function (mutations) { return mutations.forEach(function () { return _this.event.emit(); }); });
	        this._observer.observe(this._elementRef.nativeElement, {
	            characterData: true,
	            childList: true,
	            subtree: true
	        });
	    };
	    ObserveContent.prototype.ngOnDestroy = function () {
	        if (this._observer) {
	            this._observer.disconnect();
	        }
	    };
	    __decorate$4([
	        _angular_core.Output('cdkObserveContent'), 
	        __metadata$4('design:type', Object)
	    ], ObserveContent.prototype, "event", void 0);
	    ObserveContent = __decorate$4([
	        _angular_core.Directive({
	            selector: '[cdkObserveContent]'
	        }), 
	        __metadata$4('design:paramtypes', [_angular_core.ElementRef])
	    ], ObserveContent);
	    return ObserveContent;
	}());
	var ObserveContentModule = (function () {
	    function ObserveContentModule() {
	    }
	    ObserveContentModule.forRoot = function () {
	        return {
	            ngModule: ObserveContentModule,
	            providers: []
	        };
	    };
	    ObserveContentModule = __decorate$4([
	        _angular_core.NgModule({
	            exports: [ObserveContent],
	            declarations: [ObserveContent]
	        }), 
	        __metadata$4('design:paramtypes', [])
	    ], ObserveContentModule);
	    return ObserveContentModule;
	}());
	
	/** @docs-private */
	var ForegroundRippleState;
	(function (ForegroundRippleState) {
	    ForegroundRippleState[ForegroundRippleState["NEW"] = 0] = "NEW";
	    ForegroundRippleState[ForegroundRippleState["EXPANDING"] = 1] = "EXPANDING";
	    ForegroundRippleState[ForegroundRippleState["FADING_OUT"] = 2] = "FADING_OUT";
	})(ForegroundRippleState || (ForegroundRippleState = {}));
	/**
	 * Wrapper for a foreground ripple DOM element and its animation state.
	 * @docs-private
	 */
	var ForegroundRipple = (function () {
	    function ForegroundRipple(rippleElement) {
	        this.rippleElement = rippleElement;
	        this.state = ForegroundRippleState.NEW;
	    }
	    return ForegroundRipple;
	}());
	var RIPPLE_SPEED_PX_PER_SECOND = 1000;
	var MIN_RIPPLE_FILL_TIME_SECONDS = 0.1;
	var MAX_RIPPLE_FILL_TIME_SECONDS = 0.3;
	/**
	 * Returns the distance from the point (x, y) to the furthest corner of a rectangle.
	 */
	var distanceToFurthestCorner = function (x, y, rect) {
	    var distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));
	    var distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));
	    return Math.sqrt(distX * distX + distY * distY);
	};
	/**
	 * Helper service that performs DOM manipulations. Not intended to be used outside this module.
	 * The constructor takes a reference to the ripple directive's host element and a map of DOM
	 * event handlers to be installed on the element that triggers ripple animations.
	 * This will eventually become a custom renderer once Angular support exists.
	 * @docs-private
	 */
	var RippleRenderer = (function () {
	    function RippleRenderer(_elementRef, _eventHandlers, _ngZone) {
	        this._eventHandlers = _eventHandlers;
	        this._ngZone = _ngZone;
	        this._rippleElement = _elementRef.nativeElement;
	        // The background div is created in createBackgroundIfNeeded when the ripple becomes enabled.
	        // This avoids creating unneeded divs when the ripple is always disabled.
	        this._backgroundDiv = null;
	    }
	    /** Creates the div for the ripple background, if it doesn't already exist. */
	    RippleRenderer.prototype.createBackgroundIfNeeded = function () {
	        if (!this._backgroundDiv) {
	            this._backgroundDiv = document.createElement('div');
	            this._backgroundDiv.classList.add('md-ripple-background');
	            this._rippleElement.appendChild(this._backgroundDiv);
	        }
	    };
	    /**
	     * Installs event handlers on the given trigger element, and removes event handlers from the
	     * previous trigger if needed.
	     *
	     * @param newTrigger New trigger to which to attach the ripple handlers.
	     */
	    RippleRenderer.prototype.setTriggerElement = function (newTrigger) {
	        var _this = this;
	        if (this._triggerElement !== newTrigger) {
	            if (this._triggerElement) {
	                this._eventHandlers.forEach(function (eventHandler, eventName) {
	                    _this._triggerElement.removeEventListener(eventName, eventHandler);
	                });
	            }
	            this._triggerElement = newTrigger;
	            if (this._triggerElement) {
	                this._eventHandlers.forEach(function (eventHandler, eventName) {
	                    _this._triggerElement.addEventListener(eventName, eventHandler);
	                });
	            }
	        }
	    };
	    /** Installs event handlers on the host element of the md-ripple directive. */
	    RippleRenderer.prototype.setTriggerElementToHost = function () {
	        this.setTriggerElement(this._rippleElement);
	    };
	    /** Removes event handlers from the current trigger element if needed. */
	    RippleRenderer.prototype.clearTriggerElement = function () {
	        this.setTriggerElement(null);
	    };
	    /**
	     * Creates a foreground ripple and sets its animation to expand and fade in from the position
	     * given by rippleOriginLeft and rippleOriginTop (or from the center of the <md-ripple>
	     * bounding rect if centered is true).
	     *
	     * @param rippleOriginLeft Left origin of the ripple.
	     * @param rippleOriginTop Top origin of the ripple.
	     * @param color Ripple color.
	     * @param centered Whether the ripple should be centered.
	     * @param radius Radius of the ripple.
	     * @param speedFactor Speed at which the ripple expands towards the edges.
	     * @param transitionEndCallback Callback to be triggered when the ripple transition is done.
	     */
	    RippleRenderer.prototype.createForegroundRipple = function (rippleOriginLeft, rippleOriginTop, color, centered, radius, speedFactor, transitionEndCallback) {
	        var _this = this;
	        var parentRect = this._rippleElement.getBoundingClientRect();
	        // Create a foreground ripple div with the size and position of the fully expanded ripple.
	        // When the div is created, it's given a transform style that causes the ripple to be displayed
	        // small and centered on the event location (or the center of the bounding rect if the centered
	        // argument is true). Removing that transform causes the ripple to animate to its natural size.
	        var startX = centered ? (parentRect.left + parentRect.width / 2) : rippleOriginLeft;
	        var startY = centered ? (parentRect.top + parentRect.height / 2) : rippleOriginTop;
	        var offsetX = startX - parentRect.left;
	        var offsetY = startY - parentRect.top;
	        var maxRadius = radius > 0 ? radius : distanceToFurthestCorner(startX, startY, parentRect);
	        var rippleDiv = document.createElement('div');
	        this._rippleElement.appendChild(rippleDiv);
	        rippleDiv.classList.add('md-ripple-foreground');
	        rippleDiv.style.left = (offsetX - maxRadius) + "px";
	        rippleDiv.style.top = (offsetY - maxRadius) + "px";
	        rippleDiv.style.width = 2 * maxRadius + "px";
	        rippleDiv.style.height = rippleDiv.style.width;
	        // If color input is not set, this will default to the background color defined in CSS.
	        rippleDiv.style.backgroundColor = color;
	        // Start the ripple tiny.
	        rippleDiv.style.transform = "scale(0.001)";
	        var fadeInSeconds = (1 / (speedFactor || 1)) * Math.max(MIN_RIPPLE_FILL_TIME_SECONDS, Math.min(MAX_RIPPLE_FILL_TIME_SECONDS, maxRadius / RIPPLE_SPEED_PX_PER_SECOND));
	        rippleDiv.style.transitionDuration = fadeInSeconds + "s";
	        // https://timtaubert.de/blog/2012/09/css-transitions-for-dynamically-created-dom-elements/
	        // Store the opacity to prevent this line as being seen as a no-op by optimizers.
	        this._opacity = window.getComputedStyle(rippleDiv).opacity;
	        rippleDiv.classList.add('md-ripple-fade-in');
	        // Clearing the transform property causes the ripple to animate to its full size.
	        rippleDiv.style.transform = '';
	        var ripple = new ForegroundRipple(rippleDiv);
	        ripple.state = ForegroundRippleState.EXPANDING;
	        rippleDiv.addEventListener('transitionend', function (event) { return transitionEndCallback(ripple, event); });
	        // Ensure that ripples are always removed, even when transitionend doesn't fire.
	        // Run this outside the Angular zone because there's nothing that Angular cares about.
	        // If it were to run inside the Angular zone, every test that used ripples would have to be
	        // either async or fakeAsync.
	        this._ngZone.runOutsideAngular(function () {
	            // The ripple lasts a time equal to the sum of fade-in, transform,
	            // and fade-out (3 * fade-in time).
	            var rippleDuration = fadeInSeconds * 3 * 1000;
	            setTimeout(function () { return _this.removeRippleFromDom(ripple.rippleElement); }, rippleDuration);
	        });
	    };
	    /**
	     * Fades out a foreground ripple after it has fully expanded and faded in.
	     * @param ripple Ripple to be faded out.
	     */
	    RippleRenderer.prototype.fadeOutForegroundRipple = function (ripple) {
	        ripple.classList.remove('md-ripple-fade-in');
	        ripple.classList.add('md-ripple-fade-out');
	    };
	    /**
	     * Removes a foreground ripple from the DOM after it has faded out.
	     * @param ripple Ripple to be removed from the DOM.
	     */
	    RippleRenderer.prototype.removeRippleFromDom = function (ripple) {
	        if (ripple && ripple.parentElement) {
	            ripple.parentElement.removeChild(ripple);
	        }
	    };
	    /**
	     * Fades in the ripple background.
	     * @param color New background color for the ripple.
	     */
	    RippleRenderer.prototype.fadeInRippleBackground = function (color) {
	        this._backgroundDiv.classList.add('md-ripple-active');
	        // If color is not set, this will default to the background color defined in CSS.
	        this._backgroundDiv.style.backgroundColor = color;
	    };
	    /** Fades out the ripple background. */
	    RippleRenderer.prototype.fadeOutRippleBackground = function () {
	        if (this._backgroundDiv) {
	            this._backgroundDiv.classList.remove('md-ripple-active');
	        }
	    };
	    return RippleRenderer;
	}());
	
	var __decorate$6 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$6 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/**
	 * Simple utility for getting the bounds of the browser viewport.
	 * @docs-private
	 */
	var ViewportRuler = (function () {
	    function ViewportRuler() {
	    }
	    // TODO(jelbourn): cache the document's bounding rect and only update it when the window
	    // is resized (debounced).
	    /** Gets a ClientRect for the viewport's bounds. */
	    ViewportRuler.prototype.getViewportRect = function () {
	        // Use the document element's bounding rect rather than the window scroll properties
	        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll
	        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different
	        // conceptual viewports. Under most circumstances these viewports are equivalent, but they
	        // can disagree when the page is pinch-zoomed (on devices that support touch).
	        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4
	        // We use the documentElement instead of the body because, by default (without a css reset)
	        // browsers typically give the document body an 8px margin, which is not included in
	        // getBoundingClientRect().
	        var documentRect = document.documentElement.getBoundingClientRect();
	        var scrollPosition = this.getViewportScrollPosition(documentRect);
	        var height = window.innerHeight;
	        var width = window.innerWidth;
	        return {
	            top: scrollPosition.top,
	            left: scrollPosition.left,
	            bottom: scrollPosition.top + height,
	            right: scrollPosition.left + width,
	            height: height,
	            width: width,
	        };
	    };
	    /**
	     * Gets the (top, left) scroll position of the viewport.
	     * @param documentRect
	     */
	    ViewportRuler.prototype.getViewportScrollPosition = function (documentRect) {
	        if (documentRect === void 0) { documentRect = document.documentElement.getBoundingClientRect(); }
	        // The top-left-corner of the viewport is determined by the scroll position of the document
	        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about
	        // whether `document.body` or `document.documentElement` is the scrolled element, so reading
	        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of
	        // `document.documentElement` works consistently, where the `top` and `left` values will
	        // equal negative the scroll position.
	        var top = -documentRect.top || document.body.scrollTop || window.scrollY || 0;
	        var left = -documentRect.left || document.body.scrollLeft || window.scrollX || 0;
	        return { top: top, left: left };
	    };
	    ViewportRuler = __decorate$6([
	        _angular_core.Injectable(), 
	        __metadata$6('design:paramtypes', [])
	    ], ViewportRuler);
	    return ViewportRuler;
	}());
	
	var __decorate$5 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$5 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var MdRipple = (function () {
	    function MdRipple(_elementRef, _ngZone, _ruler) {
	        var _this = this;
	        /**
	         * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius
	         * will be the distance from the center of the ripple to the furthest corner of the host element's
	         * bounding rectangle.
	         */
	        this.maxRadius = 0;
	        /**
	         * If set, the normal duration of ripple animations is divided by this value. For example,
	         * setting it to 0.5 will cause the animations to take twice as long.
	         */
	        this.speedFactor = 1;
	        // These event handlers are attached to the element that triggers the ripple animations.
	        var eventHandlers = new Map();
	        eventHandlers.set('mousedown', function (event) { return _this._mouseDown(event); });
	        eventHandlers.set('click', function (event) { return _this._click(event); });
	        eventHandlers.set('mouseleave', function (event) { return _this._mouseLeave(event); });
	        this._rippleRenderer = new RippleRenderer(_elementRef, eventHandlers, _ngZone);
	        this._ruler = _ruler;
	    }
	    Object.defineProperty(MdRipple.prototype, "_triggerDeprecated", {
	        /** @deprecated */
	        get: function () { return this.trigger; },
	        set: function (value) { this.trigger = value; },
	        enumerable: true,
	        configurable: true
	    });
	    
	    Object.defineProperty(MdRipple.prototype, "_centeredDeprecated", {
	        /** @deprecated */
	        get: function () { return this.centered; },
	        set: function (value) { this.centered = value; },
	        enumerable: true,
	        configurable: true
	    });
	    
	    Object.defineProperty(MdRipple.prototype, "_disabledDeprecated", {
	        /** @deprecated */
	        get: function () { return this.disabled; },
	        set: function (value) { this.disabled = value; },
	        enumerable: true,
	        configurable: true
	    });
	    
	    Object.defineProperty(MdRipple.prototype, "_maxRadiusDeprecated", {
	        /** @deprecated */
	        get: function () { return this.maxRadius; },
	        set: function (value) { this.maxRadius = value; },
	        enumerable: true,
	        configurable: true
	    });
	    
	    Object.defineProperty(MdRipple.prototype, "_speedFactorDeprecated", {
	        /** @deprecated */
	        get: function () { return this.speedFactor; },
	        set: function (value) { this.speedFactor = value; },
	        enumerable: true,
	        configurable: true
	    });
	    
	    Object.defineProperty(MdRipple.prototype, "_colorDeprecated", {
	        /** @deprecated */
	        get: function () { return this.color; },
	        set: function (value) { this.color = value; },
	        enumerable: true,
	        configurable: true
	    });
	    
	    Object.defineProperty(MdRipple.prototype, "_backgroundColorDeprecated", {
	        /** @deprecated */
	        get: function () { return this.backgroundColor; },
	        set: function (value) { this.backgroundColor = value; },
	        enumerable: true,
	        configurable: true
	    });
	    
	    Object.defineProperty(MdRipple.prototype, "_focusedDeprecated", {
	        /** @deprecated */
	        get: function () { return this.focused; },
	        set: function (value) { this.focused = value; },
	        enumerable: true,
	        configurable: true
	    });
	    
	    Object.defineProperty(MdRipple.prototype, "_unboundedDeprecated", {
	        /** @deprecated */
	        get: function () { return this.unbounded; },
	        set: function (value) { this.unbounded = value; },
	        enumerable: true,
	        configurable: true
	    });
	    
	    MdRipple.prototype.ngOnInit = function () {
	        // If no trigger element was explicity set, use the host element
	        if (!this.trigger) {
	            this._rippleRenderer.setTriggerElementToHost();
	        }
	        if (!this.disabled) {
	            this._rippleRenderer.createBackgroundIfNeeded();
	        }
	    };
	    MdRipple.prototype.ngOnDestroy = function () {
	        // Remove event listeners on the trigger element.
	        this._rippleRenderer.clearTriggerElement();
	    };
	    MdRipple.prototype.ngOnChanges = function (changes) {
	        // If the trigger element changed (or is being initially set), add event listeners to it.
	        var changedInputs = Object.keys(changes);
	        if (changedInputs.indexOf('trigger') !== -1) {
	            this._rippleRenderer.setTriggerElement(this.trigger);
	        }
	        if (!this.disabled) {
	            this._rippleRenderer.createBackgroundIfNeeded();
	        }
	    };
	    /**
	     * Responds to the start of a ripple animation trigger by fading the background in.
	     */
	    MdRipple.prototype.start = function () {
	        this._rippleRenderer.createBackgroundIfNeeded();
	        this._rippleRenderer.fadeInRippleBackground(this.backgroundColor);
	    };
	    /**
	     * Responds to the end of a ripple animation trigger by fading the background out, and creating a
	     * foreground ripple that expands from the event location (or from the center of the element if
	     * the "centered" property is set or forceCenter is true).
	     */
	    MdRipple.prototype.end = function (left, top, forceCenter) {
	        var _this = this;
	        if (forceCenter === void 0) { forceCenter = true; }
	        this._rippleRenderer.createForegroundRipple(left, top, this.color, this.centered || forceCenter, this.maxRadius, this.speedFactor, function (ripple, e) { return _this._rippleTransitionEnded(ripple, e); });
	        this._rippleRenderer.fadeOutRippleBackground();
	    };
	    MdRipple.prototype._rippleTransitionEnded = function (ripple, event) {
	        if (event.propertyName === 'opacity') {
	            // If the ripple finished expanding, start fading it out. If it finished fading out,
	            // remove it from the DOM.
	            switch (ripple.state) {
	                case ForegroundRippleState.EXPANDING:
	                    this._rippleRenderer.fadeOutForegroundRipple(ripple.rippleElement);
	                    ripple.state = ForegroundRippleState.FADING_OUT;
	                    break;
	                case ForegroundRippleState.FADING_OUT:
	                    this._rippleRenderer.removeRippleFromDom(ripple.rippleElement);
	                    break;
	            }
	        }
	    };
	    /**
	     * Called when the trigger element receives a mousedown event. Starts the ripple animation by
	     * fading in the background.
	     */
	    MdRipple.prototype._mouseDown = function (event) {
	        if (!this.disabled && event.button === 0) {
	            this.start();
	        }
	    };
	    /**
	     * Called when the trigger element receives a click event. Creates a foreground ripple and
	     * runs its animation.
	     */
	    MdRipple.prototype._click = function (event) {
	        if (!this.disabled && event.button === 0) {
	            // If screen and page positions are all 0, this was probably triggered by a keypress.
	            // In that case, use the center of the bounding rect as the ripple origin.
	            // FIXME: This fails on IE11, which still sets pageX/Y and screenX/Y on keyboard clicks.
	            var isKeyEvent = (event.screenX === 0 && event.screenY === 0 && event.pageX === 0 && event.pageY === 0);
	            this.end(event.pageX - this._ruler.getViewportScrollPosition().left, event.pageY - this._ruler.getViewportScrollPosition().top, isKeyEvent);
	        }
	    };
	    /**
	     * Called when the trigger element receives a mouseleave event. Fades out the background.
	     */
	    MdRipple.prototype._mouseLeave = function (event) {
	        // We can always fade out the background here; It's a no-op if it was already inactive.
	        this._rippleRenderer.fadeOutRippleBackground();
	    };
	    __decorate$5([
	        _angular_core.Input('mdRippleTrigger'), 
	        __metadata$5('design:type', Object)
	    ], MdRipple.prototype, "trigger", void 0);
	    __decorate$5([
	        _angular_core.Input('md-ripple-trigger'), 
	        __metadata$5('design:type', Object)
	    ], MdRipple.prototype, "_triggerDeprecated", null);
	    __decorate$5([
	        _angular_core.Input('mdRippleCentered'), 
	        __metadata$5('design:type', Boolean)
	    ], MdRipple.prototype, "centered", void 0);
	    __decorate$5([
	        _angular_core.Input('md-ripple-centered'), 
	        __metadata$5('design:type', Object)
	    ], MdRipple.prototype, "_centeredDeprecated", null);
	    __decorate$5([
	        _angular_core.Input('mdRippleDisabled'), 
	        __metadata$5('design:type', Boolean)
	    ], MdRipple.prototype, "disabled", void 0);
	    __decorate$5([
	        _angular_core.Input('md-ripple-disabled'), 
	        __metadata$5('design:type', Object)
	    ], MdRipple.prototype, "_disabledDeprecated", null);
	    __decorate$5([
	        _angular_core.Input('mdRippleMaxRadius'), 
	        __metadata$5('design:type', Number)
	    ], MdRipple.prototype, "maxRadius", void 0);
	    __decorate$5([
	        _angular_core.Input('md-ripple-max-radius'), 
	        __metadata$5('design:type', Object)
	    ], MdRipple.prototype, "_maxRadiusDeprecated", null);
	    __decorate$5([
	        _angular_core.Input('mdRippleSpeedFactor'), 
	        __metadata$5('design:type', Number)
	    ], MdRipple.prototype, "speedFactor", void 0);
	    __decorate$5([
	        _angular_core.Input('md-ripple-speed-factor'), 
	        __metadata$5('design:type', Object)
	    ], MdRipple.prototype, "_speedFactorDeprecated", null);
	    __decorate$5([
	        _angular_core.Input('mdRippleColor'), 
	        __metadata$5('design:type', String)
	    ], MdRipple.prototype, "color", void 0);
	    __decorate$5([
	        _angular_core.Input('md-ripple-color'), 
	        __metadata$5('design:type', Object)
	    ], MdRipple.prototype, "_colorDeprecated", null);
	    __decorate$5([
	        _angular_core.Input('mdRippleBackgroundColor'), 
	        __metadata$5('design:type', String)
	    ], MdRipple.prototype, "backgroundColor", void 0);
	    __decorate$5([
	        _angular_core.Input('md-ripple-background-color'), 
	        __metadata$5('design:type', Object)
	    ], MdRipple.prototype, "_backgroundColorDeprecated", null);
	    __decorate$5([
	        _angular_core.HostBinding('class.md-ripple-focused'),
	        _angular_core.Input('mdRippleFocused'), 
	        __metadata$5('design:type', Boolean)
	    ], MdRipple.prototype, "focused", void 0);
	    __decorate$5([
	        _angular_core.Input('md-ripple-focused'), 
	        __metadata$5('design:type', Boolean)
	    ], MdRipple.prototype, "_focusedDeprecated", null);
	    __decorate$5([
	        _angular_core.HostBinding('class.md-ripple-unbounded'),
	        _angular_core.Input('mdRippleUnbounded'), 
	        __metadata$5('design:type', Boolean)
	    ], MdRipple.prototype, "unbounded", void 0);
	    __decorate$5([
	        _angular_core.Input('md-ripple-unbounded'), 
	        __metadata$5('design:type', Boolean)
	    ], MdRipple.prototype, "_unboundedDeprecated", null);
	    MdRipple = __decorate$5([
	        _angular_core.Directive({
	            selector: '[md-ripple], [mat-ripple]',
	        }), 
	        __metadata$5('design:paramtypes', [_angular_core.ElementRef, _angular_core.NgZone, ViewportRuler])
	    ], MdRipple);
	    return MdRipple;
	}());
	var MdRippleModule = (function () {
	    function MdRippleModule() {
	    }
	    MdRippleModule.forRoot = function () {
	        return {
	            ngModule: MdRippleModule,
	            providers: [ViewportRuler]
	        };
	    };
	    MdRippleModule = __decorate$5([
	        _angular_core.NgModule({
	            imports: [DefaultStyleCompatibilityModeModule],
	            exports: [MdRipple, DefaultStyleCompatibilityModeModule],
	            declarations: [MdRipple],
	        }), 
	        __metadata$5('design:paramtypes', [])
	    ], MdRippleModule);
	    return MdRippleModule;
	}());
	
	// TODO(kara): Revisit why error messages are not being properly set.
	var __extends$3 = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * Wrapper around Error that sets the error message.
	 * @docs-private
	 */
	var MdError = (function (_super) {
	    __extends$3(MdError, _super);
	    function MdError(value) {
	        _super.call(this);
	        this.message = value;
	    }
	    return MdError;
	}(Error));
	
	var __extends$2 = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * Exception thrown when attempting to attach a null portal to a host.
	 * @docs-private
	 */
	var NullPortalError = (function (_super) {
	    __extends$2(NullPortalError, _super);
	    function NullPortalError() {
	        _super.call(this, 'Must provide a portal to attach');
	    }
	    return NullPortalError;
	}(MdError));
	/**
	 * Exception thrown when attempting to attach a portal to a host that is already attached.
	 * @docs-private
	 */
	var PortalAlreadyAttachedError = (function (_super) {
	    __extends$2(PortalAlreadyAttachedError, _super);
	    function PortalAlreadyAttachedError() {
	        _super.call(this, 'Host already has a portal attached');
	    }
	    return PortalAlreadyAttachedError;
	}(MdError));
	/**
	 * Exception thrown when attempting to attach a portal to an already-disposed host.
	 * @docs-private
	 */
	var PortalHostAlreadyDisposedError = (function (_super) {
	    __extends$2(PortalHostAlreadyDisposedError, _super);
	    function PortalHostAlreadyDisposedError() {
	        _super.call(this, 'This PortalHost has already been disposed');
	    }
	    return PortalHostAlreadyDisposedError;
	}(MdError));
	/**
	 * Exception thrown when attempting to attach an unknown portal type.
	 * @docs-private
	 */
	var UnknownPortalTypeError = (function (_super) {
	    __extends$2(UnknownPortalTypeError, _super);
	    function UnknownPortalTypeError() {
	        _super.call(this, 'Attempting to attach an unknown Portal type. ' +
	            'BasePortalHost accepts either a ComponentPortal or a TemplatePortal.');
	    }
	    return UnknownPortalTypeError;
	}(MdError));
	/**
	 * Exception thrown when attempting to attach a portal to a null host.
	 * @docs-private
	 */
	var NullPortalHostError = (function (_super) {
	    __extends$2(NullPortalHostError, _super);
	    function NullPortalHostError() {
	        _super.call(this, 'Attempting to attach a portal to a null PortalHost');
	    }
	    return NullPortalHostError;
	}(MdError));
	/**
	 * Exception thrown when attempting to detach a portal that is not attached.
	 * @docs-private
	 */
	var NoPortalAttachedError = (function (_super) {
	    __extends$2(NoPortalAttachedError, _super);
	    function NoPortalAttachedError() {
	        _super.call(this, 'Attempting to detach a portal that is not attached to a host');
	    }
	    return NoPortalAttachedError;
	}(MdError));
	
	var __extends$1 = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * A `Portal` is something that you want to render somewhere else.
	 * It can be attach to / detached from a `PortalHost`.
	 */
	var Portal = (function () {
	    function Portal() {
	    }
	    /** Attach this portal to a host. */
	    Portal.prototype.attach = function (host) {
	        if (host == null) {
	            throw new NullPortalHostError();
	        }
	        if (host.hasAttached()) {
	            throw new PortalAlreadyAttachedError();
	        }
	        this._attachedHost = host;
	        return host.attach(this);
	    };
	    /** Detach this portal from its host */
	    Portal.prototype.detach = function () {
	        var host = this._attachedHost;
	        if (host == null) {
	            throw new NoPortalAttachedError();
	        }
	        this._attachedHost = null;
	        return host.detach();
	    };
	    Object.defineProperty(Portal.prototype, "isAttached", {
	        /** Whether this portal is attached to a host. */
	        get: function () {
	            return this._attachedHost != null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Sets the PortalHost reference without performing `attach()`. This is used directly by
	     * the PortalHost when it is performing an `attach()` or `detach()`.
	     */
	    Portal.prototype.setAttachedHost = function (host) {
	        this._attachedHost = host;
	    };
	    return Portal;
	}());
	/**
	 * A `ComponentPortal` is a portal that instantiates some Component upon attachment.
	 */
	var ComponentPortal = (function (_super) {
	    __extends$1(ComponentPortal, _super);
	    function ComponentPortal(component, viewContainerRef, injector) {
	        if (viewContainerRef === void 0) { viewContainerRef = null; }
	        if (injector === void 0) { injector = null; }
	        _super.call(this);
	        this.component = component;
	        this.viewContainerRef = viewContainerRef;
	        this.injector = injector;
	    }
	    return ComponentPortal;
	}(Portal));
	/**
	 * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).
	 */
	var TemplatePortal = (function (_super) {
	    __extends$1(TemplatePortal, _super);
	    function TemplatePortal(template, viewContainerRef) {
	        _super.call(this);
	        /**
	         * Additional locals for the instantiated embedded view.
	         * These locals can be seen as "exports" for the template, such as how ngFor has
	         * index / event / odd.
	         * See https://angular.io/docs/ts/latest/api/core/EmbeddedViewRef-class.html
	         */
	        this.locals = new Map();
	        this.templateRef = template;
	        this.viewContainerRef = viewContainerRef;
	    }
	    Object.defineProperty(TemplatePortal.prototype, "origin", {
	        get: function () {
	            return this.templateRef.elementRef;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TemplatePortal.prototype.attach = function (host, locals) {
	        this.locals = locals == null ? new Map() : locals;
	        return _super.prototype.attach.call(this, host);
	    };
	    TemplatePortal.prototype.detach = function () {
	        this.locals = new Map();
	        return _super.prototype.detach.call(this);
	    };
	    return TemplatePortal;
	}(Portal));
	/**
	 * Partial implementation of PortalHost that only deals with attaching either a
	 * ComponentPortal or a TemplatePortal.
	 */
	var BasePortalHost = (function () {
	    function BasePortalHost() {
	        /** Whether this host has already been permanently disposed. */
	        this._isDisposed = false;
	    }
	    /** Whether this host has an attached portal. */
	    BasePortalHost.prototype.hasAttached = function () {
	        return this._attachedPortal != null;
	    };
	    BasePortalHost.prototype.attach = function (portal) {
	        if (portal == null) {
	            throw new NullPortalError();
	        }
	        if (this.hasAttached()) {
	            throw new PortalAlreadyAttachedError();
	        }
	        if (this._isDisposed) {
	            throw new PortalHostAlreadyDisposedError();
	        }
	        if (portal instanceof ComponentPortal) {
	            this._attachedPortal = portal;
	            return this.attachComponentPortal(portal);
	        }
	        else if (portal instanceof TemplatePortal) {
	            this._attachedPortal = portal;
	            return this.attachTemplatePortal(portal);
	        }
	        throw new UnknownPortalTypeError();
	    };
	    BasePortalHost.prototype.detach = function () {
	        if (this._attachedPortal) {
	            this._attachedPortal.setAttachedHost(null);
	        }
	        this._attachedPortal = null;
	        if (this._disposeFn != null) {
	            this._disposeFn();
	            this._disposeFn = null;
	        }
	    };
	    BasePortalHost.prototype.dispose = function () {
	        if (this.hasAttached()) {
	            this.detach();
	        }
	        this._isDisposed = true;
	    };
	    BasePortalHost.prototype.setDisposeFn = function (fn) {
	        this._disposeFn = fn;
	    };
	    return BasePortalHost;
	}());
	
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate$7 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$7 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/**
	 * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,
	 * the directive instance itself can be attached to a host, enabling declarative use of portals.
	 *
	 * Usage:
	 * <template portal #greeting>
	 *   <p> Hello {{name}} </p>
	 * </template>
	 */
	var TemplatePortalDirective = (function (_super) {
	    __extends(TemplatePortalDirective, _super);
	    function TemplatePortalDirective(templateRef, viewContainerRef) {
	        _super.call(this, templateRef, viewContainerRef);
	    }
	    TemplatePortalDirective = __decorate$7([
	        _angular_core.Directive({
	            selector: '[cdk-portal], [portal]',
	            exportAs: 'cdkPortal',
	        }), 
	        __metadata$7('design:paramtypes', [_angular_core.TemplateRef, _angular_core.ViewContainerRef])
	    ], TemplatePortalDirective);
	    return TemplatePortalDirective;
	}(TemplatePortal));
	/**
	 * Directive version of a PortalHost. Because the directive *is* a PortalHost, portals can be
	 * directly attached to it, enabling declarative use.
	 *
	 * Usage:
	 * <template [cdkPortalHost]="greeting"></template>
	 */
	var PortalHostDirective = (function (_super) {
	    __extends(PortalHostDirective, _super);
	    function PortalHostDirective(_componentFactoryResolver, _viewContainerRef) {
	        _super.call(this);
	        this._componentFactoryResolver = _componentFactoryResolver;
	        this._viewContainerRef = _viewContainerRef;
	    }
	    Object.defineProperty(PortalHostDirective.prototype, "_deprecatedPortal", {
	        /** @deprecated */
	        get: function () { return this.portal; },
	        set: function (v) { this.portal = v; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PortalHostDirective.prototype, "portal", {
	        /** Portal associated with the Portal host. */
	        get: function () {
	            return this._portal;
	        },
	        set: function (p) {
	            if (p) {
	                this._replaceAttachedPortal(p);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    PortalHostDirective.prototype.ngOnDestroy = function () {
	        this.dispose();
	    };
	    /**
	     * Attach the given ComponentPortal to this PortalHost using the ComponentFactoryResolver.
	     *
	     * @param portal Portal to be attached to the portal host.
	     */
	    PortalHostDirective.prototype.attachComponentPortal = function (portal) {
	        portal.setAttachedHost(this);
	        // If the portal specifies an origin, use that as the logical location of the component
	        // in the application tree. Otherwise use the location of this PortalHost.
	        var viewContainerRef = portal.viewContainerRef != null ?
	            portal.viewContainerRef :
	            this._viewContainerRef;
	        var componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);
	        var ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.parentInjector);
	        this.setDisposeFn(function () { return ref.destroy(); });
	        return ref;
	    };
	    /**
	     * Attach the given TemplatePortal to this PortlHost as an embedded View.
	     * @param portal Portal to be attached.
	     */
	    PortalHostDirective.prototype.attachTemplatePortal = function (portal) {
	        var _this = this;
	        portal.setAttachedHost(this);
	        this._viewContainerRef.createEmbeddedView(portal.templateRef);
	        this.setDisposeFn(function () { return _this._viewContainerRef.clear(); });
	        // TODO(jelbourn): return locals from view
	        return new Map();
	    };
	    /** Detaches the currently attached Portal (if there is one) and attaches the given Portal. */
	    PortalHostDirective.prototype._replaceAttachedPortal = function (p) {
	        if (this.hasAttached()) {
	            this.detach();
	        }
	        if (p) {
	            this.attach(p);
	            this._portal = p;
	        }
	    };
	    __decorate$7([
	        _angular_core.Input('portalHost'), 
	        __metadata$7('design:type', Object)
	    ], PortalHostDirective.prototype, "_deprecatedPortal", null);
	    PortalHostDirective = __decorate$7([
	        _angular_core.Directive({
	            selector: '[cdkPortalHost], [portalHost]',
	            inputs: ['portal: cdkPortalHost']
	        }), 
	        __metadata$7('design:paramtypes', [_angular_core.ComponentFactoryResolver, _angular_core.ViewContainerRef])
	    ], PortalHostDirective);
	    return PortalHostDirective;
	}(BasePortalHost));
	var PortalModule = (function () {
	    function PortalModule() {
	    }
	    PortalModule.forRoot = function () {
	        return {
	            ngModule: PortalModule,
	            providers: []
	        };
	    };
	    PortalModule = __decorate$7([
	        _angular_core.NgModule({
	            exports: [TemplatePortalDirective, PortalHostDirective],
	            declarations: [TemplatePortalDirective, PortalHostDirective],
	        }), 
	        __metadata$7('design:paramtypes', [])
	    ], PortalModule);
	    return PortalModule;
	}());
	
	/**
	 * OverlayState is a bag of values for either the initial configuration or current state of an
	 * overlay.
	 */
	var OverlayState = (function () {
	    function OverlayState() {
	        /** Whether the overlay has a backdrop. */
	        this.hasBackdrop = false;
	        /** Custom class to add to the backdrop **/
	        this.backdropClass = 'cdk-overlay-dark-backdrop';
	        /** The direction of the text in the overlay panel. */
	        this.direction = 'ltr';
	    }
	    return OverlayState;
	}());
	
	var __extends$4 = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular
	 * application context.
	 *
	 * This is the only part of the portal core that directly touches the DOM.
	 */
	var DomPortalHost = (function (_super) {
	    __extends$4(DomPortalHost, _super);
	    function DomPortalHost(_hostDomElement, _componentFactoryResolver, _appRef, _defaultInjector) {
	        _super.call(this);
	        this._hostDomElement = _hostDomElement;
	        this._componentFactoryResolver = _componentFactoryResolver;
	        this._appRef = _appRef;
	        this._defaultInjector = _defaultInjector;
	    }
	    /**
	     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.
	     * @param portal Portal to be attached
	     */
	    DomPortalHost.prototype.attachComponentPortal = function (portal) {
	        var _this = this;
	        var componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);
	        var componentRef;
	        // If the portal specifies a ViewContainerRef, we will use that as the attachment point
	        // for the component (in terms of Angular's component tree, not rendering).
	        // When the ViewContainerRef is missing, we use the factory to create the component directly
	        // and then manually attach the ChangeDetector for that component to the application (which
	        // happens automatically when using a ViewContainer).
	        if (portal.viewContainerRef) {
	            componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.parentInjector);
	            this.setDisposeFn(function () { return componentRef.destroy(); });
	        }
	        else {
	            componentRef = componentFactory.create(portal.injector || this._defaultInjector);
	            // ApplicationRef's attachView and detachView methods are in Angular ^2.3.0 but not before.
	            // The `else` clause here can be removed once 2.3.0 is released.
	            if (this._appRef['attachView']) {
	                this._appRef.attachView(componentRef.hostView);
	                this.setDisposeFn(function () {
	                    _this._appRef.detachView(componentRef.hostView);
	                    componentRef.destroy();
	                });
	            }
	            else {
	                // When creating a component outside of a ViewContainer, we need to manually register
	                // its ChangeDetector with the application. This API is unfortunately not published
	                // in Angular < 2.3.0. The change detector must also be deregistered when the component
	                // is destroyed to prevent memory leaks.
	                var changeDetectorRef_1 = componentRef.changeDetectorRef;
	                this._appRef.registerChangeDetector(changeDetectorRef_1);
	                this.setDisposeFn(function () {
	                    _this._appRef.unregisterChangeDetector(changeDetectorRef_1);
	                    // Normally the ViewContainer will remove the component's nodes from the DOM.
	                    // Without a ViewContainer, we need to manually remove the nodes.
	                    var componentRootNode = _this._getComponentRootNode(componentRef);
	                    if (componentRootNode.parentNode) {
	                        componentRootNode.parentNode.removeChild(componentRootNode);
	                    }
	                    componentRef.destroy();
	                });
	            }
	        }
	        // At this point the component has been instantiated, so we move it to the location in the DOM
	        // where we want it to be rendered.
	        this._hostDomElement.appendChild(this._getComponentRootNode(componentRef));
	        return componentRef;
	    };
	    /**
	     * Attaches a template portal to the DOM as an embedded view.
	     * @param portal Portal to be attached.
	     */
	    DomPortalHost.prototype.attachTemplatePortal = function (portal) {
	        var _this = this;
	        var viewContainer = portal.viewContainerRef;
	        var viewRef = viewContainer.createEmbeddedView(portal.templateRef);
	        viewRef.rootNodes.forEach(function (rootNode) { return _this._hostDomElement.appendChild(rootNode); });
	        this.setDisposeFn((function () {
	            var index = viewContainer.indexOf(viewRef);
	            if (index != -1) {
	                viewContainer.remove(index);
	            }
	        }));
	        // TODO(jelbourn): Return locals from view.
	        return new Map();
	    };
	    /**
	     * Clears out a portal from the DOM.
	     */
	    DomPortalHost.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	        if (this._hostDomElement.parentNode != null) {
	            this._hostDomElement.parentNode.removeChild(this._hostDomElement);
	        }
	    };
	    /** Gets the root HTMLElement for an instantiated component. */
	    DomPortalHost.prototype._getComponentRootNode = function (componentRef) {
	        return componentRef.hostView.rootNodes[0];
	    };
	    return DomPortalHost;
	}(BasePortalHost));
	
	/**
	 * Reference to an overlay that has been created with the Overlay service.
	 * Used to manipulate or dispose of said overlay.
	 */
	var OverlayRef = (function () {
	    function OverlayRef(_portalHost, _pane, _state, _ngZone) {
	        this._portalHost = _portalHost;
	        this._pane = _pane;
	        this._state = _state;
	        this._ngZone = _ngZone;
	        this._backdropElement = null;
	        this._backdropClick = new rxjs_Subject.Subject();
	    }
	    Object.defineProperty(OverlayRef.prototype, "overlayElement", {
	        /** The overlay's HTML element */
	        get: function () {
	            return this._pane;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Attaches the overlay to a portal instance and adds the backdrop.
	     * @param portal Portal instance to which to attach the overlay.
	     * @returns The portal attachment result.
	     */
	    OverlayRef.prototype.attach = function (portal) {
	        if (this._state.hasBackdrop) {
	            this._attachBackdrop();
	        }
	        var attachResult = this._portalHost.attach(portal);
	        this.updateSize();
	        this.updateDirection();
	        this.updatePosition();
	        return attachResult;
	    };
	    /**
	     * Detaches an overlay from a portal.
	     * @returns Resolves when the overlay has been detached.
	     */
	    OverlayRef.prototype.detach = function () {
	        this._detachBackdrop();
	        return this._portalHost.detach();
	    };
	    /**
	     * Cleans up the overlay from the DOM.
	     */
	    OverlayRef.prototype.dispose = function () {
	        if (this._state.positionStrategy) {
	            this._state.positionStrategy.dispose();
	        }
	        this._detachBackdrop();
	        this._portalHost.dispose();
	    };
	    /**
	     * Checks whether the overlay has been attached.
	     */
	    OverlayRef.prototype.hasAttached = function () {
	        return this._portalHost.hasAttached();
	    };
	    /**
	     * Returns an observable that emits when the backdrop has been clicked.
	     */
	    OverlayRef.prototype.backdropClick = function () {
	        return this._backdropClick.asObservable();
	    };
	    /**
	     * Gets the current state config of the overlay.
	     */
	    OverlayRef.prototype.getState = function () {
	        return this._state;
	    };
	    /** Updates the position of the overlay based on the position strategy. */
	    OverlayRef.prototype.updatePosition = function () {
	        if (this._state.positionStrategy) {
	            this._state.positionStrategy.apply(this._pane);
	        }
	    };
	    /** Updates the text direction of the overlay panel. **/
	    OverlayRef.prototype.updateDirection = function () {
	        this._pane.setAttribute('dir', this._state.direction);
	    };
	    /** Updates the size of the overlay based on the overlay config. */
	    OverlayRef.prototype.updateSize = function () {
	        if (this._state.width || this._state.width === 0) {
	            this._pane.style.width = formatCssUnit(this._state.width);
	        }
	        if (this._state.height || this._state.height === 0) {
	            this._pane.style.height = formatCssUnit(this._state.height);
	        }
	        if (this._state.minWidth || this._state.minWidth === 0) {
	            this._pane.style.minWidth = formatCssUnit(this._state.minWidth);
	        }
	        if (this._state.minHeight || this._state.minHeight === 0) {
	            this._pane.style.minHeight = formatCssUnit(this._state.minHeight);
	        }
	    };
	    /** Attaches a backdrop for this overlay. */
	    OverlayRef.prototype._attachBackdrop = function () {
	        var _this = this;
	        this._backdropElement = document.createElement('div');
	        this._backdropElement.classList.add('cdk-overlay-backdrop');
	        this._backdropElement.classList.add(this._state.backdropClass);
	        // Insert the backdrop before the pane in the DOM order,
	        // in order to handle stacked overlays properly.
	        this._pane.parentElement.insertBefore(this._backdropElement, this._pane);
	        // Forward backdrop clicks such that the consumer of the overlay can perform whatever
	        // action desired when such a click occurs (usually closing the overlay).
	        this._backdropElement.addEventListener('click', function () { return _this._backdropClick.next(null); });
	        // Add class to fade-in the backdrop after one frame.
	        requestAnimationFrame(function () {
	            if (_this._backdropElement) {
	                _this._backdropElement.classList.add('cdk-overlay-backdrop-showing');
	            }
	        });
	    };
	    /** Detaches the backdrop (if any) associated with the overlay. */
	    OverlayRef.prototype._detachBackdrop = function () {
	        var _this = this;
	        var backdropToDetach = this._backdropElement;
	        if (backdropToDetach) {
	            var finishDetach_1 = function () {
	                // It may not be attached to anything in certain cases (e.g. unit tests).
	                if (backdropToDetach && backdropToDetach.parentNode) {
	                    backdropToDetach.parentNode.removeChild(backdropToDetach);
	                }
	                // It is possible that a new portal has been attached to this overlay since we started
	                // removing the backdrop. If that is the case, only clear the backdrop reference if it
	                // is still the same instance that we started to remove.
	                if (_this._backdropElement == backdropToDetach) {
	                    _this._backdropElement = null;
	                }
	            };
	            backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');
	            backdropToDetach.classList.remove(this._state.backdropClass);
	            backdropToDetach.addEventListener('transitionend', finishDetach_1);
	            // If the backdrop doesn't have a transition, the `transitionend` event won't fire.
	            // In this case we make it unclickable and we try to remove it after a delay.
	            backdropToDetach.style.pointerEvents = 'none';
	            // Run this outside the Angular zone because there's nothing that Angular cares about.
	            // If it were to run inside the Angular zone, every test that used Overlay would have to be
	            // either async or fakeAsync.
	            this._ngZone.runOutsideAngular(function () {
	                setTimeout(finishDetach_1, 500);
	            });
	        }
	    };
	    return OverlayRef;
	}());
	function formatCssUnit(value) {
	    return typeof value === 'string' ? value : value + "px";
	}
	
	var __decorate$11 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$11 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param$2 = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	/** The points of the origin element and the overlay element to connect. */
	var ConnectionPositionPair = (function () {
	    function ConnectionPositionPair(origin, overlay) {
	        this.originX = origin.originX;
	        this.originY = origin.originY;
	        this.overlayX = overlay.overlayX;
	        this.overlayY = overlay.overlayY;
	    }
	    return ConnectionPositionPair;
	}());
	/**
	 * Set of properties regarding the position of the origin and overlay relative to the viewport
	 * with respect to the containing Scrollable elements.
	 *
	 * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the
	 * bounds of any one of the strategy's Scrollable's bounding client rectangle.
	 *
	 * The overlay and origin are outside view if there is no overlap between their bounding client
	 * rectangle and any one of the strategy's Scrollable's bounding client rectangle.
	 *
	 *       -----------                    -----------
	 *       | outside |                    | clipped |
	 *       |  view   |              --------------------------
	 *       |         |              |     |         |        |
	 *       ----------               |     -----------        |
	 *  --------------------------    |                        |
	 *  |                        |    |      Scrollable        |
	 *  |                        |    |                        |
	 *  |                        |     --------------------------
	 *  |      Scrollable        |
	 *  |                        |
	 *  --------------------------
	 */
	var ScrollableViewProperties = (function () {
	    function ScrollableViewProperties() {
	    }
	    return ScrollableViewProperties;
	}());
	/** The change event emitted by the strategy when a fallback position is used. */
	var ConnectedOverlayPositionChange = (function () {
	    function ConnectedOverlayPositionChange(connectionPair, scrollableViewProperties) {
	        this.connectionPair = connectionPair;
	        this.scrollableViewProperties = scrollableViewProperties;
	    }
	    ConnectedOverlayPositionChange = __decorate$11([
	        __param$2(1, _angular_core.Optional()), 
	        __metadata$11('design:paramtypes', [ConnectionPositionPair, ScrollableViewProperties])
	    ], ConnectedOverlayPositionChange);
	    return ConnectedOverlayPositionChange;
	}());
	
	/**
	 * A strategy for positioning overlays. Using this strategy, an overlay is given an
	 * implicit position relative some origin element. The relative position is defined in terms of
	 * a point on the origin element that is connected to a point on the overlay element. For example,
	 * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner
	 * of the overlay.
	 */
	var ConnectedPositionStrategy = (function () {
	    function ConnectedPositionStrategy(_connectedTo, _originPos, _overlayPos, _viewportRuler) {
	        this._connectedTo = _connectedTo;
	        this._originPos = _originPos;
	        this._overlayPos = _overlayPos;
	        this._viewportRuler = _viewportRuler;
	        this._dir = 'ltr';
	        /** The offset in pixels for the overlay connection point on the x-axis */
	        this._offsetX = 0;
	        /** The offset in pixels for the overlay connection point on the y-axis */
	        this._offsetY = 0;
	        /** The Scrollable containers used to check scrollable view properties on position change. */
	        this.scrollables = [];
	        /** Ordered list of preferred positions, from most to least desirable. */
	        this._preferredPositions = [];
	        this._onPositionChange = new rxjs_Subject.Subject();
	        this._origin = this._connectedTo.nativeElement;
	        this.withFallbackPosition(_originPos, _overlayPos);
	    }
	    Object.defineProperty(ConnectedPositionStrategy.prototype, "_isRtl", {
	        /** Whether the we're dealing with an RTL context */
	        get: function () {
	            return this._dir === 'rtl';
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ConnectedPositionStrategy.prototype, "onPositionChange", {
	        /** Emits an event when the connection point changes. */
	        get: function () {
	            return this._onPositionChange.asObservable();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ConnectedPositionStrategy.prototype, "positions", {
	        /** Ordered list of preferred positions, from most to least desirable. */
	        get: function () {
	            return this._preferredPositions;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * To be used to for any cleanup after the element gets destroyed.
	     */
	    ConnectedPositionStrategy.prototype.dispose = function () { };
	    /**
	     * Updates the position of the overlay element, using whichever preferred position relative
	     * to the origin fits on-screen.
	     * @docs-private
	     *
	     * @param element Element to which to apply the CSS styles.
	     * @returns Resolves when the styles have been applied.
	     */
	    ConnectedPositionStrategy.prototype.apply = function (element) {
	        // We need the bounding rects for the origin and the overlay to determine how to position
	        // the overlay relative to the origin.
	        var originRect = this._origin.getBoundingClientRect();
	        var overlayRect = element.getBoundingClientRect();
	        // We use the viewport rect to determine whether a position would go off-screen.
	        var viewportRect = this._viewportRuler.getViewportRect();
	        // Fallback point if none of the fallbacks fit into the viewport.
	        var fallbackPoint = null;
	        // We want to place the overlay in the first of the preferred positions such that the
	        // overlay fits on-screen.
	        for (var _i = 0, _a = this._preferredPositions; _i < _a.length; _i++) {
	            var pos = _a[_i];
	            // Get the (x, y) point of connection on the origin, and then use that to get the
	            // (top, left) coordinate for the overlay at `pos`.
	            var originPoint = this._getOriginConnectionPoint(originRect, pos);
	            var overlayPoint = this._getOverlayPoint(originPoint, overlayRect, viewportRect, pos);
	            // If the overlay in the calculated position fits on-screen, put it there and we're done.
	            if (overlayPoint.fitsInViewport) {
	                this._setElementPosition(element, overlayPoint);
	                // Notify that the position has been changed along with its change properties.
	                var scrollableViewProperties = this.getScrollableViewProperties(element);
	                var positionChange = new ConnectedOverlayPositionChange(pos, scrollableViewProperties);
	                this._onPositionChange.next(positionChange);
	                return Promise.resolve(null);
	            }
	            else if (!fallbackPoint || fallbackPoint.visibleArea < overlayPoint.visibleArea) {
	                fallbackPoint = overlayPoint;
	            }
	        }
	        // If none of the preferred positions were in the viewport, take the one
	        // with the largest visible area.
	        this._setElementPosition(element, fallbackPoint);
	        return Promise.resolve(null);
	    };
	    /**
	     * Sets the list of Scrollable containers that host the origin element so that
	     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every
	     * Scrollable must be an ancestor element of the strategy's origin element.
	     */
	    ConnectedPositionStrategy.prototype.withScrollableContainers = function (scrollables) {
	        this.scrollables = scrollables;
	    };
	    /**
	     * Adds a new preferred fallback position.
	     * @param originPos
	     * @param overlayPos
	     */
	    ConnectedPositionStrategy.prototype.withFallbackPosition = function (originPos, overlayPos) {
	        this._preferredPositions.push(new ConnectionPositionPair(originPos, overlayPos));
	        return this;
	    };
	    /**
	     * Sets the layout direction so the overlay's position can be adjusted to match.
	     * @param dir New layout direction.
	     */
	    ConnectedPositionStrategy.prototype.withDirection = function (dir) {
	        this._dir = dir;
	        return this;
	    };
	    /**
	     * Sets an offset for the overlay's connection point on the x-axis
	     * @param offset New offset in the X axis.
	     */
	    ConnectedPositionStrategy.prototype.withOffsetX = function (offset) {
	        this._offsetX = offset;
	        return this;
	    };
	    /**
	     * Sets an offset for the overlay's connection point on the y-axis
	     * @param  offset New offset in the Y axis.
	     */
	    ConnectedPositionStrategy.prototype.withOffsetY = function (offset) {
	        this._offsetY = offset;
	        return this;
	    };
	    /**
	     * Gets the horizontal (x) "start" dimension based on whether the overlay is in an RTL context.
	     * @param rect
	     */
	    ConnectedPositionStrategy.prototype._getStartX = function (rect) {
	        return this._isRtl ? rect.right : rect.left;
	    };
	    /**
	     * Gets the horizontal (x) "end" dimension based on whether the overlay is in an RTL context.
	     * @param rect
	     */
	    ConnectedPositionStrategy.prototype._getEndX = function (rect) {
	        return this._isRtl ? rect.left : rect.right;
	    };
	    /**
	     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.
	     * @param originRect
	     * @param pos
	     */
	    ConnectedPositionStrategy.prototype._getOriginConnectionPoint = function (originRect, pos) {
	        var originStartX = this._getStartX(originRect);
	        var originEndX = this._getEndX(originRect);
	        var x;
	        if (pos.originX == 'center') {
	            x = originStartX + (originRect.width / 2);
	        }
	        else {
	            x = pos.originX == 'start' ? originStartX : originEndX;
	        }
	        var y;
	        if (pos.originY == 'center') {
	            y = originRect.top + (originRect.height / 2);
	        }
	        else {
	            y = pos.originY == 'top' ? originRect.top : originRect.bottom;
	        }
	        return { x: x, y: y };
	    };
	    /**
	     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and
	     * origin point to which the overlay should be connected, as well as how much of the element
	     * would be inside the viewport at that position.
	     */
	    ConnectedPositionStrategy.prototype._getOverlayPoint = function (originPoint, overlayRect, viewportRect, pos) {
	        // Calculate the (overlayStartX, overlayStartY), the start of the potential overlay position
	        // relative to the origin point.
	        var overlayStartX;
	        if (pos.overlayX == 'center') {
	            overlayStartX = -overlayRect.width / 2;
	        }
	        else if (pos.overlayX === 'start') {
	            overlayStartX = this._isRtl ? -overlayRect.width : 0;
	        }
	        else {
	            overlayStartX = this._isRtl ? 0 : -overlayRect.width;
	        }
	        var overlayStartY;
	        if (pos.overlayY == 'center') {
	            overlayStartY = -overlayRect.height / 2;
	        }
	        else {
	            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;
	        }
	        // The (x, y) coordinates of the overlay.
	        var x = originPoint.x + overlayStartX + this._offsetX;
	        var y = originPoint.y + overlayStartY + this._offsetY;
	        // How much the overlay would overflow at this position, on each side.
	        var leftOverflow = viewportRect.left - x;
	        var rightOverflow = (x + overlayRect.width) - viewportRect.right;
	        var topOverflow = viewportRect.top - y;
	        var bottomOverflow = (y + overlayRect.height) - viewportRect.bottom;
	        // Visible parts of the element on each axis.
	        var visibleWidth = this._subtractOverflows(overlayRect.width, leftOverflow, rightOverflow);
	        var visibleHeight = this._subtractOverflows(overlayRect.height, topOverflow, bottomOverflow);
	        // The area of the element that's within the viewport.
	        var visibleArea = visibleWidth * visibleHeight;
	        var fitsInViewport = (overlayRect.width * overlayRect.height) === visibleArea;
	        return { x: x, y: y, fitsInViewport: fitsInViewport, visibleArea: visibleArea };
	    };
	    /**
	     * Gets the view properties of the trigger and overlay, including whether they are clipped
	     * or completely outside the view of any of the strategy's scrollables.
	     */
	    ConnectedPositionStrategy.prototype.getScrollableViewProperties = function (overlay) {
	        var _this = this;
	        var originBounds = this._getElementBounds(this._origin);
	        var overlayBounds = this._getElementBounds(overlay);
	        var scrollContainerBounds = this.scrollables.map(function (scrollable) {
	            return _this._getElementBounds(scrollable.getElementRef().nativeElement);
	        });
	        return {
	            isOriginClipped: this.isElementClipped(originBounds, scrollContainerBounds),
	            isOriginOutsideView: this.isElementOutsideView(originBounds, scrollContainerBounds),
	            isOverlayClipped: this.isElementClipped(overlayBounds, scrollContainerBounds),
	            isOverlayOutsideView: this.isElementOutsideView(overlayBounds, scrollContainerBounds),
	        };
	    };
	    /** Whether the element is completely out of the view of any of the containers. */
	    ConnectedPositionStrategy.prototype.isElementOutsideView = function (elementBounds, containersBounds) {
	        return containersBounds.some(function (containerBounds) {
	            var outsideAbove = elementBounds.bottom < containerBounds.top;
	            var outsideBelow = elementBounds.top > containerBounds.bottom;
	            var outsideLeft = elementBounds.right < containerBounds.left;
	            var outsideRight = elementBounds.left > containerBounds.right;
	            return outsideAbove || outsideBelow || outsideLeft || outsideRight;
	        });
	    };
	    /** Whether the element is clipped by any of the containers. */
	    ConnectedPositionStrategy.prototype.isElementClipped = function (elementBounds, containersBounds) {
	        return containersBounds.some(function (containerBounds) {
	            var clippedAbove = elementBounds.top < containerBounds.top;
	            var clippedBelow = elementBounds.bottom > containerBounds.bottom;
	            var clippedLeft = elementBounds.left < containerBounds.left;
	            var clippedRight = elementBounds.right > containerBounds.right;
	            return clippedAbove || clippedBelow || clippedLeft || clippedRight;
	        });
	    };
	    /**
	     * Physically positions the overlay element to the given coordinate.
	     * @param element
	     * @param overlayPoint
	     */
	    ConnectedPositionStrategy.prototype._setElementPosition = function (element, overlayPoint) {
	        element.style.left = overlayPoint.x + 'px';
	        element.style.top = overlayPoint.y + 'px';
	    };
	    /** Returns the bounding positions of the provided element with respect to the viewport. */
	    ConnectedPositionStrategy.prototype._getElementBounds = function (element) {
	        var boundingClientRect = element.getBoundingClientRect();
	        return {
	            top: boundingClientRect.top,
	            right: boundingClientRect.left + boundingClientRect.width,
	            bottom: boundingClientRect.top + boundingClientRect.height,
	            left: boundingClientRect.left
	        };
	    };
	    /**
	     * Subtracts the amount that an element is overflowing on an axis from it's length.
	     */
	    ConnectedPositionStrategy.prototype._subtractOverflows = function (length) {
	        var overflows = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            overflows[_i - 1] = arguments[_i];
	        }
	        return overflows.reduce(function (currentValue, currentOverflow) {
	            return currentValue - Math.max(currentOverflow, 0);
	        }, length);
	    };
	    return ConnectedPositionStrategy;
	}());
	
	/**
	 * A strategy for positioning overlays. Using this strategy, an overlay is given an
	 * explicit position relative to the browser's viewport. We use flexbox, instead of
	 * transforms, in order to avoid issues with subpixel rendering which can cause the
	 * element to become blurry.
	 */
	var GlobalPositionStrategy = (function () {
	    function GlobalPositionStrategy() {
	        this._cssPosition = 'static';
	        this._topOffset = '';
	        this._bottomOffset = '';
	        this._leftOffset = '';
	        this._rightOffset = '';
	        this._alignItems = '';
	        this._justifyContent = '';
	        this._width = '';
	        this._height = '';
	    }
	    /**
	     * Sets the top position of the overlay. Clears any previously set vertical position.
	     * @param value New top offset.
	     */
	    GlobalPositionStrategy.prototype.top = function (value) {
	        this._bottomOffset = '';
	        this._topOffset = value;
	        this._alignItems = 'flex-start';
	        return this;
	    };
	    /**
	     * Sets the left position of the overlay. Clears any previously set horizontal position.
	     * @param value New left offset.
	     */
	    GlobalPositionStrategy.prototype.left = function (value) {
	        this._rightOffset = '';
	        this._leftOffset = value;
	        this._justifyContent = 'flex-start';
	        return this;
	    };
	    /**
	     * Sets the bottom position of the overlay. Clears any previously set vertical position.
	     * @param value New bottom offset.
	     */
	    GlobalPositionStrategy.prototype.bottom = function (value) {
	        this._topOffset = '';
	        this._bottomOffset = value;
	        this._alignItems = 'flex-end';
	        return this;
	    };
	    /**
	     * Sets the right position of the overlay. Clears any previously set horizontal position.
	     * @param value New right offset.
	     */
	    GlobalPositionStrategy.prototype.right = function (value) {
	        this._leftOffset = '';
	        this._rightOffset = value;
	        this._justifyContent = 'flex-end';
	        return this;
	    };
	    /**
	     * Sets the overlay width and clears any previously set width.
	     * @param value New width for the overlay
	     */
	    GlobalPositionStrategy.prototype.width = function (value) {
	        this._width = value;
	        // When the width is 100%, we should reset the `left` and the offset,
	        // in order to ensure that the element is flush against the viewport edge.
	        if (value === '100%') {
	            this.left('0px');
	        }
	        return this;
	    };
	    /**
	     * Sets the overlay height and clears any previously set height.
	     * @param value New height for the overlay
	     */
	    GlobalPositionStrategy.prototype.height = function (value) {
	        this._height = value;
	        // When the height is 100%, we should reset the `top` and the offset,
	        // in order to ensure that the element is flush against the viewport edge.
	        if (value === '100%') {
	            this.top('0px');
	        }
	        return this;
	    };
	    /**
	     * Centers the overlay horizontally with an optional offset.
	     * Clears any previously set horizontal position.
	     *
	     * @param offset Overlay offset from the horizontal center.
	     */
	    GlobalPositionStrategy.prototype.centerHorizontally = function (offset) {
	        if (offset === void 0) { offset = ''; }
	        this.left(offset);
	        this._justifyContent = 'center';
	        return this;
	    };
	    /**
	     * Centers the overlay vertically with an optional offset.
	     * Clears any previously set vertical position.
	     *
	     * @param offset Overlay offset from the vertical center.
	     */
	    GlobalPositionStrategy.prototype.centerVertically = function (offset) {
	        if (offset === void 0) { offset = ''; }
	        this.top(offset);
	        this._alignItems = 'center';
	        return this;
	    };
	    /**
	     * Apply the position to the element.
	     * @docs-private
	     *
	     * @param element Element to which to apply the CSS.
	     * @returns Resolved when the styles have been applied.
	     */
	    GlobalPositionStrategy.prototype.apply = function (element) {
	        if (!this._wrapper) {
	            this._wrapper = document.createElement('div');
	            this._wrapper.classList.add('cdk-global-overlay-wrapper');
	            element.parentNode.insertBefore(this._wrapper, element);
	            this._wrapper.appendChild(element);
	        }
	        var styles = element.style;
	        var parentStyles = element.parentNode.style;
	        styles.position = this._cssPosition;
	        styles.marginTop = this._topOffset;
	        styles.marginLeft = this._leftOffset;
	        styles.marginBottom = this._bottomOffset;
	        styles.marginRight = this._rightOffset;
	        styles.width = this._width;
	        styles.height = this._height;
	        parentStyles.justifyContent = this._justifyContent;
	        parentStyles.alignItems = this._alignItems;
	        return Promise.resolve(null);
	    };
	    /**
	     * Removes the wrapper element from the DOM.
	     */
	    GlobalPositionStrategy.prototype.dispose = function () {
	        if (this._wrapper && this._wrapper.parentNode) {
	            this._wrapper.parentNode.removeChild(this._wrapper);
	            this._wrapper = null;
	        }
	    };
	    return GlobalPositionStrategy;
	}());
	
	var __decorate$10 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$10 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/** Builder for overlay position strategy. */
	var OverlayPositionBuilder = (function () {
	    function OverlayPositionBuilder(_viewportRuler) {
	        this._viewportRuler = _viewportRuler;
	    }
	    /**
	     * Creates a global position strategy.
	     */
	    OverlayPositionBuilder.prototype.global = function () {
	        return new GlobalPositionStrategy();
	    };
	    /**
	     * Creates a relative position strategy.
	     * @param elementRef
	     * @param originPos
	     * @param overlayPos
	     */
	    OverlayPositionBuilder.prototype.connectedTo = function (elementRef, originPos, overlayPos) {
	        return new ConnectedPositionStrategy(elementRef, originPos, overlayPos, this._viewportRuler);
	    };
	    OverlayPositionBuilder = __decorate$10([
	        _angular_core.Injectable(), 
	        __metadata$10('design:paramtypes', [ViewportRuler])
	    ], OverlayPositionBuilder);
	    return OverlayPositionBuilder;
	}());
	
	/**
	 * The OverlayContainer is the container in which all overlays will load.
	 * It should be provided in the root component to ensure it is properly shared.
	 */
	var OverlayContainer = (function () {
	    function OverlayContainer() {
	    }
	    /**
	     * This method returns the overlay container element.  It will lazily
	     * create the element the first time  it is called to facilitate using
	     * the container in non-browser environments.
	     * @returns the container element
	     */
	    OverlayContainer.prototype.getContainerElement = function () {
	        if (!this._containerElement) {
	            this._createContainer();
	        }
	        return this._containerElement;
	    };
	    /**
	     * Create the overlay container element, which is simply a div
	     * with the 'cdk-overlay-container' class on the document body.
	     */
	    OverlayContainer.prototype._createContainer = function () {
	        var container = document.createElement('div');
	        container.classList.add('cdk-overlay-container');
	        document.body.appendChild(container);
	        this._containerElement = container;
	    };
	    return OverlayContainer;
	}());
	
	var __decorate$12 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$12 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/**
	 * Service contained all registered Scrollable references and emits an event when any one of the
	 * Scrollable references emit a scrolled event.
	 */
	var ScrollDispatcher = (function () {
	    function ScrollDispatcher() {
	        var _this = this;
	        /** Subject for notifying that a registered scrollable reference element has been scrolled. */
	        this._scrolled = new rxjs_Subject.Subject();
	        /**
	         * Map of all the scrollable references that are registered with the service and their
	         * scroll event subscriptions.
	         */
	        this.scrollableReferences = new Map();
	        // By default, notify a scroll event when the document is scrolled or the window is resized.
	        rxjs_Observable.Observable.fromEvent(window.document, 'scroll').subscribe(function () { return _this._notify(); });
	        rxjs_Observable.Observable.fromEvent(window, 'resize').subscribe(function () { return _this._notify(); });
	    }
	    /**
	     * Registers a Scrollable with the service and listens for its scrolled events. When the
	     * scrollable is scrolled, the service emits the event in its scrolled observable.
	     *
	     * @param scrollable Scrollable instance to be registered.
	     */
	    ScrollDispatcher.prototype.register = function (scrollable) {
	        var _this = this;
	        var scrollSubscription = scrollable.elementScrolled().subscribe(function () { return _this._notify(); });
	        this.scrollableReferences.set(scrollable, scrollSubscription);
	    };
	    /**
	     * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.
	     *
	     * @param scrollable Scrollable instance to be deregistered.
	     */
	    ScrollDispatcher.prototype.deregister = function (scrollable) {
	        this.scrollableReferences.get(scrollable).unsubscribe();
	        this.scrollableReferences.delete(scrollable);
	    };
	    /**
	     * Returns an observable that emits an event whenever any of the registered Scrollable
	     * references (or window, document, or body) fire a scrolled event.
	     */
	    ScrollDispatcher.prototype.scrolled = function () {
	        // TODO: Add an event limiter that includes throttle with the leading and trailing events.
	        return this._scrolled.asObservable();
	    };
	    /** Returns all registered Scrollables that contain the provided element. */
	    ScrollDispatcher.prototype.getScrollContainers = function (elementRef) {
	        var _this = this;
	        var scrollingContainers = [];
	        this.scrollableReferences.forEach(function (subscription, scrollable) {
	            if (_this.scrollableContainsElement(scrollable, elementRef)) {
	                scrollingContainers.push(scrollable);
	            }
	        });
	        return scrollingContainers;
	    };
	    /** Returns true if the element is contained within the provided Scrollable. */
	    ScrollDispatcher.prototype.scrollableContainsElement = function (scrollable, elementRef) {
	        var element = elementRef.nativeElement;
	        var scrollableElement = scrollable.getElementRef().nativeElement;
	        // Traverse through the element parents until we reach null, checking if any of the elements
	        // are the scrollable's element.
	        do {
	            if (element == scrollableElement) {
	                return true;
	            }
	        } while (element = element.parentElement);
	    };
	    /** Sends a notification that a scroll event has been fired. */
	    ScrollDispatcher.prototype._notify = function () {
	        this._scrolled.next();
	    };
	    ScrollDispatcher = __decorate$12([
	        _angular_core.Injectable(), 
	        __metadata$12('design:paramtypes', [])
	    ], ScrollDispatcher);
	    return ScrollDispatcher;
	}());
	
	var __decorate$9 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$9 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/** Next overlay unique ID. */
	var nextUniqueId = 0;
	/** The default state for newly created overlays. */
	var defaultState = new OverlayState();
	/**
	 * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be
	 * used as a low-level building building block for other components. Dialogs, tooltips, menus,
	 * selects, etc. can all be built using overlays. The service should primarily be used by authors
	 * of re-usable components rather than developers building end-user applications.
	 *
	 * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.
	 */
	var Overlay = (function () {
	    function Overlay(_overlayContainer, _componentFactoryResolver, _positionBuilder, _appRef, _injector, _ngZone) {
	        this._overlayContainer = _overlayContainer;
	        this._componentFactoryResolver = _componentFactoryResolver;
	        this._positionBuilder = _positionBuilder;
	        this._appRef = _appRef;
	        this._injector = _injector;
	        this._ngZone = _ngZone;
	    }
	    /**
	     * Creates an overlay.
	     * @param state State to apply to the overlay.
	     * @returns Reference to the created overlay.
	     */
	    Overlay.prototype.create = function (state$$1) {
	        if (state$$1 === void 0) { state$$1 = defaultState; }
	        return this._createOverlayRef(this._createPaneElement(), state$$1);
	    };
	    /**
	     * Returns a position builder that can be used, via fluent API,
	     * to construct and configure a position strategy.
	     */
	    Overlay.prototype.position = function () {
	        return this._positionBuilder;
	    };
	    /**
	     * Creates the DOM element for an overlay and appends it to the overlay container.
	     * @returns Newly-created pane element
	     */
	    Overlay.prototype._createPaneElement = function () {
	        var pane = document.createElement('div');
	        pane.id = "cdk-overlay-" + nextUniqueId++;
	        pane.classList.add('cdk-overlay-pane');
	        this._overlayContainer.getContainerElement().appendChild(pane);
	        return pane;
	    };
	    /**
	     * Create a DomPortalHost into which the overlay content can be loaded.
	     * @param pane The DOM element to turn into a portal host.
	     * @returns A portal host for the given DOM element.
	     */
	    Overlay.prototype._createPortalHost = function (pane) {
	        return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef, this._injector);
	    };
	    /**
	     * Creates an OverlayRef for an overlay in the given DOM element.
	     * @param pane DOM element for the overlay
	     * @param state
	     */
	    Overlay.prototype._createOverlayRef = function (pane, state$$1) {
	        return new OverlayRef(this._createPortalHost(pane), pane, state$$1, this._ngZone);
	    };
	    Overlay = __decorate$9([
	        _angular_core.Injectable(), 
	        __metadata$9('design:paramtypes', [OverlayContainer, _angular_core.ComponentFactoryResolver, OverlayPositionBuilder, _angular_core.ApplicationRef, _angular_core.Injector, _angular_core.NgZone])
	    ], Overlay);
	    return Overlay;
	}());
	/** Providers for Overlay and its related injectables. */
	var OVERLAY_PROVIDERS = [
	    ViewportRuler,
	    OverlayPositionBuilder,
	    Overlay,
	    OverlayContainer,
	    ScrollDispatcher,
	];
	
	var __decorate$13 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$13 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/**
	 * Sends an event when the directive's element is scrolled. Registers itself with the
	 * ScrollDispatcher service to include itself as part of its collection of scrolling events that it
	 * can be listened to through the service.
	 */
	var Scrollable = (function () {
	    function Scrollable(_elementRef, _scroll) {
	        this._elementRef = _elementRef;
	        this._scroll = _scroll;
	    }
	    Scrollable.prototype.ngOnInit = function () {
	        this._scroll.register(this);
	    };
	    Scrollable.prototype.ngOnDestroy = function () {
	        this._scroll.deregister(this);
	    };
	    /**
	     * Returns observable that emits when a scroll event is fired on the host element.
	     */
	    Scrollable.prototype.elementScrolled = function () {
	        return rxjs_Observable.Observable.fromEvent(this._elementRef.nativeElement, 'scroll');
	    };
	    Scrollable.prototype.getElementRef = function () {
	        return this._elementRef;
	    };
	    Scrollable = __decorate$13([
	        _angular_core.Directive({
	            selector: '[cdk-scrollable]'
	        }), 
	        __metadata$13('design:paramtypes', [_angular_core.ElementRef, ScrollDispatcher])
	    ], Scrollable);
	    return Scrollable;
	}());
	
	var __decorate$8 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$8 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param$1 = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	/** Default set of positions for the overlay. Follows the behavior of a dropdown. */
	var defaultPositionList = [
	    new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),
	    new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' }),
	];
	/**
	 * Directive applied to an element to make it usable as an origin for an Overlay using a
	 * ConnectedPositionStrategy.
	 */
	var OverlayOrigin = (function () {
	    function OverlayOrigin(elementRef) {
	        this.elementRef = elementRef;
	    }
	    OverlayOrigin = __decorate$8([
	        _angular_core.Directive({
	            selector: '[cdk-overlay-origin], [overlay-origin]',
	            exportAs: 'cdkOverlayOrigin',
	        }), 
	        __metadata$8('design:paramtypes', [_angular_core.ElementRef])
	    ], OverlayOrigin);
	    return OverlayOrigin;
	}());
	/**
	 * Directive to facilitate declarative creation of an Overlay using a ConnectedPositionStrategy.
	 */
	var ConnectedOverlayDirective = (function () {
	    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.
	    function ConnectedOverlayDirective(_overlay, templateRef, viewContainerRef, _dir) {
	        this._overlay = _overlay;
	        this._dir = _dir;
	        this._open = false;
	        this._hasBackdrop = false;
	        this._offsetX = 0;
	        this._offsetY = 0;
	        /** Event emitted when the backdrop is clicked. */
	        this.backdropClick = new _angular_core.EventEmitter();
	        /** Event emitted when the position has changed. */
	        this.positionChange = new _angular_core.EventEmitter();
	        /** Event emitted when the overlay has been attached. */
	        this.attach = new _angular_core.EventEmitter();
	        /** Event emitted when the overlay has been detached. */
	        this.detach = new _angular_core.EventEmitter();
	        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);
	    }
	    Object.defineProperty(ConnectedOverlayDirective.prototype, "offsetX", {
	        /** The offset in pixels for the overlay connection point on the x-axis */
	        get: function () {
	            return this._offsetX;
	        },
	        set: function (offsetX) {
	            this._offsetX = offsetX;
	            if (this._position) {
	                this._position.withOffsetX(offsetX);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ConnectedOverlayDirective.prototype, "offsetY", {
	        /** The offset in pixels for the overlay connection point on the y-axis */
	        get: function () {
	            return this._offsetY;
	        },
	        set: function (offsetY) {
	            this._offsetY = offsetY;
	            if (this._position) {
	                this._position.withOffsetY(offsetY);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ConnectedOverlayDirective.prototype, "hasBackdrop", {
	        /** Whether or not the overlay should attach a backdrop. */
	        get: function () {
	            return this._hasBackdrop;
	        },
	        // TODO: move the boolean coercion logic to a shared function in core
	        set: function (value) {
	            this._hasBackdrop = value != null && "" + value !== 'false';
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ConnectedOverlayDirective.prototype, "open", {
	        get: function () {
	            return this._open;
	        },
	        set: function (value) {
	            value ? this._attachOverlay() : this._detachOverlay();
	            this._open = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ConnectedOverlayDirective.prototype, "overlayRef", {
	        /** The associated overlay reference. */
	        get: function () {
	            return this._overlayRef;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ConnectedOverlayDirective.prototype, "dir", {
	        /** The element's layout direction. */
	        get: function () {
	            return this._dir ? this._dir.value : 'ltr';
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ConnectedOverlayDirective.prototype.ngOnDestroy = function () {
	        this._destroyOverlay();
	    };
	    /** Creates an overlay */
	    ConnectedOverlayDirective.prototype._createOverlay = function () {
	        if (!this.positions || !this.positions.length) {
	            this.positions = defaultPositionList;
	        }
	        this._overlayRef = this._overlay.create(this._buildConfig());
	    };
	    /** Builds the overlay config based on the directive's inputs */
	    ConnectedOverlayDirective.prototype._buildConfig = function () {
	        var overlayConfig = new OverlayState();
	        if (this.width || this.width === 0) {
	            overlayConfig.width = this.width;
	        }
	        if (this.height || this.height === 0) {
	            overlayConfig.height = this.height;
	        }
	        if (this.minWidth || this.minWidth === 0) {
	            overlayConfig.minWidth = this.minWidth;
	        }
	        if (this.minHeight || this.minHeight === 0) {
	            overlayConfig.minHeight = this.minHeight;
	        }
	        overlayConfig.hasBackdrop = this.hasBackdrop;
	        if (this.backdropClass) {
	            overlayConfig.backdropClass = this.backdropClass;
	        }
	        this._position = this._createPositionStrategy();
	        overlayConfig.positionStrategy = this._position;
	        overlayConfig.direction = this.dir;
	        return overlayConfig;
	    };
	    /** Returns the position strategy of the overlay to be set on the overlay config */
	    ConnectedOverlayDirective.prototype._createPositionStrategy = function () {
	        var pos = this.positions[0];
	        var originPoint = { originX: pos.originX, originY: pos.originY };
	        var overlayPoint = { overlayX: pos.overlayX, overlayY: pos.overlayY };
	        var strategy = this._overlay.position()
	            .connectedTo(this.origin.elementRef, originPoint, overlayPoint)
	            .withDirection(this.dir)
	            .withOffsetX(this.offsetX)
	            .withOffsetY(this.offsetY);
	        this._handlePositionChanges(strategy);
	        return strategy;
	    };
	    ConnectedOverlayDirective.prototype._handlePositionChanges = function (strategy) {
	        var _this = this;
	        for (var i = 1; i < this.positions.length; i++) {
	            strategy.withFallbackPosition({ originX: this.positions[i].originX, originY: this.positions[i].originY }, { overlayX: this.positions[i].overlayX, overlayY: this.positions[i].overlayY });
	        }
	        this._positionSubscription =
	            strategy.onPositionChange.subscribe(function (pos) { return _this.positionChange.emit(pos); });
	    };
	    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */
	    ConnectedOverlayDirective.prototype._attachOverlay = function () {
	        var _this = this;
	        if (!this._overlayRef) {
	            this._createOverlay();
	        }
	        if (!this._overlayRef.hasAttached()) {
	            this._overlayRef.attach(this._templatePortal);
	            this.attach.emit();
	        }
	        if (this.hasBackdrop) {
	            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(function () {
	                _this.backdropClick.emit();
	            });
	        }
	    };
	    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */
	    ConnectedOverlayDirective.prototype._detachOverlay = function () {
	        if (this._overlayRef) {
	            this._overlayRef.detach();
	            this.detach.emit();
	        }
	        if (this._backdropSubscription) {
	            this._backdropSubscription.unsubscribe();
	            this._backdropSubscription = null;
	        }
	    };
	    /** Destroys the overlay created by this directive. */
	    ConnectedOverlayDirective.prototype._destroyOverlay = function () {
	        if (this._overlayRef) {
	            this._overlayRef.dispose();
	        }
	        if (this._backdropSubscription) {
	            this._backdropSubscription.unsubscribe();
	        }
	        if (this._positionSubscription) {
	            this._positionSubscription.unsubscribe();
	        }
	    };
	    __decorate$8([
	        _angular_core.Input(), 
	        __metadata$8('design:type', OverlayOrigin)
	    ], ConnectedOverlayDirective.prototype, "origin", void 0);
	    __decorate$8([
	        _angular_core.Input(), 
	        __metadata$8('design:type', Array)
	    ], ConnectedOverlayDirective.prototype, "positions", void 0);
	    __decorate$8([
	        _angular_core.Input(), 
	        __metadata$8('design:type', Number)
	    ], ConnectedOverlayDirective.prototype, "offsetX", null);
	    __decorate$8([
	        _angular_core.Input(), 
	        __metadata$8('design:type', Object)
	    ], ConnectedOverlayDirective.prototype, "offsetY", null);
	    __decorate$8([
	        _angular_core.Input(), 
	        __metadata$8('design:type', Object)
	    ], ConnectedOverlayDirective.prototype, "width", void 0);
	    __decorate$8([
	        _angular_core.Input(), 
	        __metadata$8('design:type', Object)
	    ], ConnectedOverlayDirective.prototype, "height", void 0);
	    __decorate$8([
	        _angular_core.Input(), 
	        __metadata$8('design:type', Object)
	    ], ConnectedOverlayDirective.prototype, "minWidth", void 0);
	    __decorate$8([
	        _angular_core.Input(), 
	        __metadata$8('design:type', Object)
	    ], ConnectedOverlayDirective.prototype, "minHeight", void 0);
	    __decorate$8([
	        _angular_core.Input(), 
	        __metadata$8('design:type', String)
	    ], ConnectedOverlayDirective.prototype, "backdropClass", void 0);
	    __decorate$8([
	        _angular_core.Input(), 
	        __metadata$8('design:type', Object)
	    ], ConnectedOverlayDirective.prototype, "hasBackdrop", null);
	    __decorate$8([
	        _angular_core.Input(), 
	        __metadata$8('design:type', Object)
	    ], ConnectedOverlayDirective.prototype, "open", null);
	    __decorate$8([
	        _angular_core.Output(), 
	        __metadata$8('design:type', Object)
	    ], ConnectedOverlayDirective.prototype, "backdropClick", void 0);
	    __decorate$8([
	        _angular_core.Output(), 
	        __metadata$8('design:type', Object)
	    ], ConnectedOverlayDirective.prototype, "positionChange", void 0);
	    __decorate$8([
	        _angular_core.Output(), 
	        __metadata$8('design:type', Object)
	    ], ConnectedOverlayDirective.prototype, "attach", void 0);
	    __decorate$8([
	        _angular_core.Output(), 
	        __metadata$8('design:type', Object)
	    ], ConnectedOverlayDirective.prototype, "detach", void 0);
	    ConnectedOverlayDirective = __decorate$8([
	        _angular_core.Directive({
	            selector: '[cdk-connected-overlay], [connected-overlay]',
	            exportAs: 'cdkConnectedOverlay'
	        }),
	        __param$1(3, _angular_core.Optional()), 
	        __metadata$8('design:paramtypes', [Overlay, _angular_core.TemplateRef, _angular_core.ViewContainerRef, Dir])
	    ], ConnectedOverlayDirective);
	    return ConnectedOverlayDirective;
	}());
	var OverlayModule = (function () {
	    function OverlayModule() {
	    }
	    OverlayModule.forRoot = function () {
	        return {
	            ngModule: OverlayModule,
	            providers: OVERLAY_PROVIDERS,
	        };
	    };
	    OverlayModule = __decorate$8([
	        _angular_core.NgModule({
	            imports: [PortalModule],
	            exports: [ConnectedOverlayDirective, OverlayOrigin, Scrollable],
	            declarations: [ConnectedOverlayDirective, OverlayOrigin, Scrollable],
	        }), 
	        __metadata$8('design:paramtypes', [])
	    ], OverlayModule);
	    return OverlayModule;
	}());
	
	var __decorate$17 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$17 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	// Whether the current platform supports the V8 Break Iterator. The V8 check
	// is necessary to detect all Blink based browsers.
	var hasV8BreakIterator = typeof (window) !== 'undefined' ?
	    (window.Intl && window.Intl.v8BreakIterator) :
	    (typeof (Intl) !== 'undefined' && Intl.v8BreakIterator);
	/**
	 * Service to detect the current platform by comparing the userAgent strings and
	 * checking browser-specific global properties.
	 * @docs-private
	 */
	var Platform = (function () {
	    function Platform() {
	        /** Layout Engines */
	        this.EDGE = /(edge)/i.test(navigator.userAgent);
	        this.TRIDENT = /(msie|trident)/i.test(navigator.userAgent);
	        // EdgeHTML and Trident mock Blink specific things and need to excluded from this check.
	        this.BLINK = !!(window.chrome || hasV8BreakIterator) && !!CSS && !this.EDGE && !this.TRIDENT;
	        // Webkit is part of the userAgent in EdgeHTML Blink and Trident, so we need to
	        // ensure that Webkit runs standalone and is not use as another engines base.
	        this.WEBKIT = /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;
	        /** Browsers and Platform Types */
	        this.IOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
	        // It's difficult to detect the plain Gecko engine, because most of the browsers identify
	        // them self as Gecko-like browsers and modify the userAgent's according to that.
	        // Since we only cover one explicit Firefox case, we can simply check for Firefox
	        // instead of having an unstable check for Gecko.
	        this.FIREFOX = /(firefox|minefield)/i.test(navigator.userAgent);
	        // Trident on mobile adds the android platform to the userAgent to trick detections.
	        this.ANDROID = /android/i.test(navigator.userAgent) && !this.TRIDENT;
	    }
	    Platform = __decorate$17([
	        _angular_core.Injectable(), 
	        __metadata$17('design:paramtypes', [])
	    ], Platform);
	    return Platform;
	}());
	
	var __decorate$16 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$16 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/**
	 * The InteractivityChecker leans heavily on the ally.js accessibility utilities.
	 * Methods like `isTabbable` are only covering specific edge-cases for the browsers which are
	 * supported.
	 */
	/**
	 * Utility for checking the interactivity of an element, such as whether is is focusable or
	 * tabbable.
	 */
	var InteractivityChecker = (function () {
	    function InteractivityChecker(_platform) {
	        this._platform = _platform;
	    }
	    /**
	     * Gets whether an element is disabled.
	     *
	     * @param element Element to be checked.
	     * @returns Whether the element is disabled.
	     */
	    InteractivityChecker.prototype.isDisabled = function (element) {
	        // This does not capture some cases, such as a non-form control with a disabled attribute or
	        // a form control inside of a disabled form, but should capture the most common cases.
	        return element.hasAttribute('disabled');
	    };
	    /**
	     * Gets whether an element is visible for the purposes of interactivity.
	     *
	     * This will capture states like `display: none` and `visibility: hidden`, but not things like
	     * being clipped by an `overflow: hidden` parent or being outside the viewport.
	     *
	     * @returns Whether the element is visible.
	     */
	    InteractivityChecker.prototype.isVisible = function (element) {
	        return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';
	    };
	    /**
	     * Gets whether an element can be reached via Tab key.
	     * Assumes that the element has already been checked with isFocusable.
	     *
	     * @param element Element to be checked.
	     * @returns Whether the element is tabbable.
	     */
	    InteractivityChecker.prototype.isTabbable = function (element) {
	        var frameElement = getWindow(element).frameElement;
	        if (frameElement) {
	            var frameType = frameElement && frameElement.nodeName.toLowerCase();
	            // Frame elements inherit their tabindex onto all child elements.
	            if (getTabIndexValue(frameElement) === -1) {
	                return false;
	            }
	            // Webkit and Blink consider anything inside of an <object> element as non-tabbable.
	            if ((this._platform.BLINK || this._platform.WEBKIT) && frameType === 'object') {
	                return false;
	            }
	            // Webkit and Blink disable tabbing to an element inside of an invisible frame.
	            if ((this._platform.BLINK || this._platform.WEBKIT) && !this.isVisible(frameElement)) {
	                return false;
	            }
	        }
	        var nodeName = element.nodeName.toLowerCase();
	        var tabIndexValue = getTabIndexValue(element);
	        if (element.hasAttribute('contenteditable')) {
	            return tabIndexValue !== -1;
	        }
	        if (nodeName === 'iframe') {
	            // The frames may be tabbable depending on content, but it's not possibly to reliably
	            // investigate the content of the frames.
	            return false;
	        }
	        if (nodeName === 'audio') {
	            if (!element.hasAttribute('controls')) {
	                // By default an <audio> element without the controls enabled is not tabbable.
	                return false;
	            }
	            else if (this._platform.BLINK) {
	                // In Blink <audio controls> elements are always tabbable.
	                return true;
	            }
	        }
	        if (nodeName === 'video') {
	            if (!element.hasAttribute('controls') && this._platform.TRIDENT) {
	                // In Trident a <video> element without the controls enabled is not tabbable.
	                return false;
	            }
	            else if (this._platform.BLINK || this._platform.FIREFOX) {
	                // In Chrome and Firefox <video controls> elements are always tabbable.
	                return true;
	            }
	        }
	        if (nodeName === 'object' && (this._platform.BLINK || this._platform.WEBKIT)) {
	            // In all Blink and WebKit based browsers <object> elements are never tabbable.
	            return false;
	        }
	        // In iOS the browser only considers some specific elements as tabbable.
	        if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {
	            return false;
	        }
	        return element.tabIndex >= 0;
	    };
	    /**
	     * Gets whether an element can be focused by the user.
	     *
	     * @param element Element to be checked.
	     * @returns Whether the element is focusable.
	     */
	    InteractivityChecker.prototype.isFocusable = function (element) {
	        // Perform checks in order of left to most expensive.
	        // Again, naive approach that does not capture many edge cases and browser quirks.
	        return isPotentiallyFocusable(element) && !this.isDisabled(element) && this.isVisible(element);
	    };
	    InteractivityChecker = __decorate$16([
	        _angular_core.Injectable(), 
	        __metadata$16('design:paramtypes', [Platform])
	    ], InteractivityChecker);
	    return InteractivityChecker;
	}());
	/** Checks whether the specified element has any geometry / rectangles. */
	function hasGeometry(element) {
	    // Use logic from jQuery to check for an invisible element.
	    // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12
	    return !!(element.offsetWidth || element.offsetHeight || element.getClientRects().length);
	}
	/** Gets whether an element's  */
	function isNativeFormElement(element) {
	    var nodeName = element.nodeName.toLowerCase();
	    return nodeName === 'input' ||
	        nodeName === 'select' ||
	        nodeName === 'button' ||
	        nodeName === 'textarea';
	}
	/** Gets whether an element is an <input type="hidden">. */
	function isHiddenInput(element) {
	    return isInputElement(element) && element.type == 'hidden';
	}
	/** Gets whether an element is an anchor that has an href attribute. */
	function isAnchorWithHref(element) {
	    return isAnchorElement(element) && element.hasAttribute('href');
	}
	/** Gets whether an element is an input element. */
	function isInputElement(element) {
	    return element.nodeName == 'input';
	}
	/** Gets whether an element is an anchor element. */
	function isAnchorElement(element) {
	    return element.nodeName.toLowerCase() == 'a';
	}
	/** Gets whether an element has a valid tabindex. */
	function hasValidTabIndex(element) {
	    if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {
	        return false;
	    }
	    var tabIndex = element.getAttribute('tabindex');
	    // IE11 parses tabindex="" as the value "-32768"
	    if (tabIndex == '-32768') {
	        return false;
	    }
	    return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));
	}
	/**
	 * Returns the parsed tabindex from the element attributes instead of returning the
	 * evaluated tabindex from the browsers defaults.
	 */
	function getTabIndexValue(element) {
	    if (!hasValidTabIndex(element)) {
	        return null;
	    }
	    // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054
	    var tabIndex = parseInt(element.getAttribute('tabindex'), 10);
	    return isNaN(tabIndex) ? -1 : tabIndex;
	}
	/** Checks whether the specified element is potentially tabbable on iOS */
	function isPotentiallyTabbableIOS(element) {
	    var nodeName = element.nodeName.toLowerCase();
	    var inputType = nodeName === 'input' && element.type;
	    return inputType === 'text'
	        || inputType === 'password'
	        || nodeName === 'select'
	        || nodeName === 'textarea';
	}
	/**
	 * Gets whether an element is potentially focusable without taking current visible/disabled state
	 * into account.
	 */
	function isPotentiallyFocusable(element) {
	    // Inputs are potentially focusable *unless* they're type="hidden".
	    if (isHiddenInput(element)) {
	        return false;
	    }
	    return isNativeFormElement(element) ||
	        isAnchorWithHref(element) ||
	        element.hasAttribute('contenteditable') ||
	        hasValidTabIndex(element);
	}
	/** Gets the parent window of a DOM node with regards of being inside of an iframe. */
	function getWindow(node) {
	    return node.ownerDocument.defaultView || window;
	}
	
	/** Coerces a data-bound value (typically a string) to a boolean. */
	function coerceBooleanProperty(value) {
	    return value != null && "" + value !== 'false';
	}
	
	var __decorate$15 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$15 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/**
	 * Directive for trapping focus within a region.
	 *
	 * NOTE: This directive currently uses a very simple (naive) approach to focus trapping.
	 * It assumes that the tab order is the same as DOM order, which is not necessarily true.
	 * Things like tabIndex > 0, flex `order`, and shadow roots can cause to two to misalign.
	 * This will be replaced with a more intelligent solution before the library is considered stable.
	 */
	var FocusTrap = (function () {
	    function FocusTrap(_checker, _ngZone) {
	        this._checker = _checker;
	        this._ngZone = _ngZone;
	        this._disabled = false;
	    }
	    Object.defineProperty(FocusTrap.prototype, "disabled", {
	        /** Whether the focus trap is active. */
	        get: function () { return this._disabled; },
	        set: function (val) { this._disabled = coerceBooleanProperty(val); },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Waits for microtask queue to empty, then focuses the first tabbable element within the focus
	     * trap region.
	     */
	    FocusTrap.prototype.focusFirstTabbableElementWhenReady = function () {
	        var _this = this;
	        this._ngZone.onMicrotaskEmpty.first().subscribe(function () {
	            _this.focusFirstTabbableElement();
	        });
	    };
	    /**
	     * Waits for microtask queue to empty, then focuses the last tabbable element within the focus
	     * trap region.
	     */
	    FocusTrap.prototype.focusLastTabbableElementWhenReady = function () {
	        var _this = this;
	        this._ngZone.onMicrotaskEmpty.first().subscribe(function () {
	            _this.focusLastTabbableElement();
	        });
	    };
	    /**
	     * Focuses the first tabbable element within the focus trap region.
	     */
	    FocusTrap.prototype.focusFirstTabbableElement = function () {
	        var rootElement = this.trappedContent.nativeElement;
	        var redirectToElement = rootElement.querySelector('[cdk-focus-start]') ||
	            this._getFirstTabbableElement(rootElement);
	        if (redirectToElement) {
	            redirectToElement.focus();
	        }
	    };
	    /**
	     * Focuses the last tabbable element within the focus trap region.
	     */
	    FocusTrap.prototype.focusLastTabbableElement = function () {
	        var rootElement = this.trappedContent.nativeElement;
	        var focusTargets = rootElement.querySelectorAll('[cdk-focus-end]');
	        var redirectToElement = null;
	        if (focusTargets.length) {
	            redirectToElement = focusTargets[focusTargets.length - 1];
	        }
	        else {
	            redirectToElement = this._getLastTabbableElement(rootElement);
	        }
	        if (redirectToElement) {
	            redirectToElement.focus();
	        }
	    };
	    /** Get the first tabbable element from a DOM subtree (inclusive). */
	    FocusTrap.prototype._getFirstTabbableElement = function (root) {
	        if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {
	            return root;
	        }
	        // Iterate in DOM order.
	        var childCount = root.children.length;
	        for (var i = 0; i < childCount; i++) {
	            var tabbableChild = this._getFirstTabbableElement(root.children[i]);
	            if (tabbableChild) {
	                return tabbableChild;
	            }
	        }
	        return null;
	    };
	    /** Get the last tabbable element from a DOM subtree (inclusive). */
	    FocusTrap.prototype._getLastTabbableElement = function (root) {
	        if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {
	            return root;
	        }
	        // Iterate in reverse DOM order.
	        for (var i = root.children.length - 1; i >= 0; i--) {
	            var tabbableChild = this._getLastTabbableElement(root.children[i]);
	            if (tabbableChild) {
	                return tabbableChild;
	            }
	        }
	        return null;
	    };
	    __decorate$15([
	        _angular_core.ViewChild('trappedContent'), 
	        __metadata$15('design:type', _angular_core.ElementRef)
	    ], FocusTrap.prototype, "trappedContent", void 0);
	    __decorate$15([
	        _angular_core.Input(), 
	        __metadata$15('design:type', Boolean)
	    ], FocusTrap.prototype, "disabled", null);
	    FocusTrap = __decorate$15([
	        _angular_core.Component({selector: 'cdk-focus-trap, focus-trap',
	            template: "<div *ngIf=\"!disabled\" tabindex=\"0\" (focus)=\"focusLastTabbableElement()\"></div><div #trappedContent class=\"cdk-focus-trap-content\"><ng-content></ng-content></div><div *ngIf=\"!disabled\" tabindex=\"0\" (focus)=\"focusFirstTabbableElement()\"></div>",
	            encapsulation: _angular_core.ViewEncapsulation.None,
	        }), 
	        __metadata$15('design:paramtypes', [InteractivityChecker, _angular_core.NgZone])
	    ], FocusTrap);
	    return FocusTrap;
	}());
	
	var __decorate$18 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$18 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param$3 = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var LIVE_ANNOUNCER_ELEMENT_TOKEN = new _angular_core.OpaqueToken('liveAnnouncerElement');
	var LiveAnnouncer = (function () {
	    function LiveAnnouncer(elementToken) {
	        // We inject the live element as `any` because the constructor signature cannot reference
	        // browser globals (HTMLElement) on non-browser environments, since having a class decorator
	        // causes TypeScript to preserve the constructor signature types.
	        this._liveElement = elementToken || this._createLiveElement();
	    }
	    /**
	     * Announces a message to screenreaders.
	     * @param message Message to be announced to the screenreader
	     * @param politeness The politeness of the announcer element
	     */
	    LiveAnnouncer.prototype.announce = function (message, politeness) {
	        var _this = this;
	        if (politeness === void 0) { politeness = 'polite'; }
	        this._liveElement.textContent = '';
	        // TODO: ensure changing the politeness works on all environments we support.
	        this._liveElement.setAttribute('aria-live', politeness);
	        // This 100ms timeout is necessary for some browser + screen-reader combinations:
	        // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.
	        // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a
	        //   second time without clearing and then using a non-zero delay.
	        // (using JAWS 17 at time of this writing).
	        setTimeout(function () { return _this._liveElement.textContent = message; }, 100);
	    };
	    /** Removes the aria-live element from the DOM. */
	    LiveAnnouncer.prototype._removeLiveElement = function () {
	        if (this._liveElement && this._liveElement.parentNode) {
	            this._liveElement.parentNode.removeChild(this._liveElement);
	        }
	    };
	    LiveAnnouncer.prototype._createLiveElement = function () {
	        var liveEl = document.createElement('div');
	        liveEl.classList.add('cdk-visually-hidden');
	        liveEl.setAttribute('aria-atomic', 'true');
	        liveEl.setAttribute('aria-live', 'polite');
	        document.body.appendChild(liveEl);
	        return liveEl;
	    };
	    LiveAnnouncer = __decorate$18([
	        _angular_core.Injectable(),
	        __param$3(0, _angular_core.Optional()),
	        __param$3(0, _angular_core.Inject(LIVE_ANNOUNCER_ELEMENT_TOKEN)), 
	        __metadata$18('design:paramtypes', [Object])
	    ], LiveAnnouncer);
	    return LiveAnnouncer;
	}());
	
	var supportedInputTypes;
	/** @returns The input types supported by this browser. */
	function getSupportedInputTypes() {
	    if (!supportedInputTypes) {
	        var featureTestInput_1 = document.createElement('input');
	        supportedInputTypes = new Set([
	            'button',
	            'checkbox',
	            'color',
	            'date',
	            'datetime-local',
	            'email',
	            'file',
	            'hidden',
	            'image',
	            'month',
	            'number',
	            'password',
	            'radio',
	            'range',
	            'reset',
	            'search',
	            'submit',
	            'tel',
	            'text',
	            'time',
	            'url',
	            'week',
	        ].filter(function (value) {
	            featureTestInput_1.setAttribute('type', value);
	            return featureTestInput_1.type === value;
	        }));
	    }
	    return supportedInputTypes;
	}
	
	var __decorate$19 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$19 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var PlatformModule = (function () {
	    function PlatformModule() {
	    }
	    PlatformModule.forRoot = function () {
	        return {
	            ngModule: PlatformModule,
	            providers: [Platform],
	        };
	    };
	    PlatformModule = __decorate$19([
	        _angular_core.NgModule({}), 
	        __metadata$19('design:paramtypes', [])
	    ], PlatformModule);
	    return PlatformModule;
	}());
	
	var __decorate$14 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$14 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var A11Y_PROVIDERS = [LiveAnnouncer, InteractivityChecker];
	var A11yModule = (function () {
	    function A11yModule() {
	    }
	    A11yModule.forRoot = function () {
	        return {
	            ngModule: A11yModule,
	            providers: [
	                PlatformModule.forRoot().providers,
	                A11Y_PROVIDERS,
	            ],
	        };
	    };
	    A11yModule = __decorate$14([
	        _angular_core.NgModule({
	            imports: [_angular_common.CommonModule, PlatformModule],
	            declarations: [FocusTrap],
	            exports: [FocusTrap],
	        }), 
	        __metadata$14('design:paramtypes', [])
	    ], A11yModule);
	    return A11yModule;
	}());
	
	var __decorate$20 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$20 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	// "Polyfill" for `Node.replaceWith()`.
	// cf. https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/replaceWith
	function _replaceWith(toReplaceEl, otherEl) {
	    toReplaceEl.parentElement.replaceChild(otherEl, toReplaceEl);
	}
	/** @docs-private */
	var DomProjectionHost = (function () {
	    function DomProjectionHost(ref) {
	        this.ref = ref;
	    }
	    DomProjectionHost = __decorate$20([
	        _angular_core.Directive({
	            selector: 'cdk-dom-projection-host'
	        }), 
	        __metadata$20('design:paramtypes', [_angular_core.ElementRef])
	    ], DomProjectionHost);
	    return DomProjectionHost;
	}());
	/** @docs-private */
	var DomProjection = (function () {
	    function DomProjection() {
	    }
	    /**
	     * Project an element into a host element.
	     * Replace a host element by another element. This also replaces the children of the element
	     * by the children of the host.
	     *
	     * It should be used like this:
	     *
	     * ```
	     *   @Component({
	     *     template: `<div>
	     *       <cdk-dom-projection-host>
	     *         <div>other</div>
	     *         <ng-content></ng-content>
	     *       </cdk-dom-projection-host>
	     *     </div>`
	     *   })
	     *   class Cmpt {
	     *     constructor(private _projector: DomProjection, private _el: ElementRef) {}
	     *     ngOnInit() { this._projector.project(this._el, this._projector); }
	     *   }
	     * ```
	     *
	     * This component will move the content of the element it's applied to in the outer div. Because
	     * `project()` also move the children of the host inside the projected element, the element will
	     * contain the `<div>other</div>` HTML as well as its own children.
	     *
	     * Note: without `<ng-content></ng-content>` the projection will project an empty element.
	     *
	     * @param ref ElementRef to be projected.
	     * @param host Projection host into which to project the `ElementRef`.
	     */
	    DomProjection.prototype.project = function (ref, host) {
	        var projectedEl = ref.nativeElement;
	        var hostEl = host.ref.nativeElement;
	        var childNodes = projectedEl.childNodes;
	        var child = childNodes[0];
	        // We hoist all of the projected element's children out into the projected elements position
	        // because we *only* want to move the projected element and not its children.
	        _replaceWith(projectedEl, child);
	        var l = childNodes.length;
	        while (l--) {
	            child.parentNode.insertBefore(childNodes[0], child.nextSibling);
	            child = child.nextSibling; // nextSibling is now the childNodes[0].
	        }
	        // Insert all host children under the projectedEl, then replace host by component.
	        l = hostEl.childNodes.length;
	        while (l--) {
	            projectedEl.appendChild(hostEl.childNodes[0]);
	        }
	        _replaceWith(hostEl, projectedEl);
	        // At this point the host is replaced by the component. Nothing else to be done.
	    };
	    DomProjection = __decorate$20([
	        _angular_core.Injectable(), 
	        __metadata$20('design:paramtypes', [])
	    ], DomProjection);
	    return DomProjection;
	}());
	/** @docs-private */
	var ProjectionModule = (function () {
	    function ProjectionModule() {
	    }
	    ProjectionModule.forRoot = function () {
	        return {
	            ngModule: ProjectionModule,
	            providers: [DomProjection]
	        };
	    };
	    ProjectionModule = __decorate$20([
	        _angular_core.NgModule({
	            exports: [DomProjectionHost],
	            declarations: [DomProjectionHost],
	        }), 
	        __metadata$20('design:paramtypes', [])
	    ], ProjectionModule);
	    return ProjectionModule;
	}());
	
	var __extends$5 = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate$21 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$21 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/* Adjusts configuration of our gesture library, Hammer. */
	var GestureConfig = (function (_super) {
	    __extends$5(GestureConfig, _super);
	    function GestureConfig() {
	        _super.call(this);
	        this._hammer = typeof window !== 'undefined' ? window.Hammer : null;
	        /* List of new event names to add to the gesture support list */
	        this.events = this._hammer ? [
	            'longpress',
	            'slide',
	            'slidestart',
	            'slideend',
	            'slideright',
	            'slideleft'
	        ] : [];
	        if (!this._hammer && _angular_core.isDevMode()) {
	            console.warn('Could not find HammerJS. Certain Angular Material ' +
	                'components may not work correctly.');
	        }
	    }
	    /**
	     * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.
	     *
	     * Our gesture names come from the Material Design gestures spec:
	     * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics
	     *
	     * More information on default recognizers can be found in Hammer docs:
	     * http://hammerjs.github.io/recognizer-pan/
	     * http://hammerjs.github.io/recognizer-press/
	     *
	     * @param element Element to which to assign the new HammerJS gestures.
	     * @returns Newly-created HammerJS instance.
	     */
	    GestureConfig.prototype.buildHammer = function (element) {
	        var mc = new this._hammer(element);
	        // Default Hammer Recognizers.
	        var pan = new this._hammer.Pan();
	        var swipe = new this._hammer.Swipe();
	        var press = new this._hammer.Press();
	        // Notice that a HammerJS recognizer can only depend on one other recognizer once.
	        // Otherwise the previous `recognizeWith` will be dropped.
	        // TODO: Confirm threshold numbers with Material Design UX Team
	        var slide = this._createRecognizer(pan, { event: 'slide', threshold: 0 }, swipe);
	        var longpress = this._createRecognizer(press, { event: 'longpress', time: 500 });
	        // Overwrite the default `pan` event to use the swipe event.
	        pan.recognizeWith(swipe);
	        // Add customized gestures to Hammer manager
	        mc.add([swipe, press, pan, slide, longpress]);
	        return mc;
	    };
	    /** Creates a new recognizer, without affecting the default recognizers of HammerJS */
	    GestureConfig.prototype._createRecognizer = function (base, options) {
	        var inheritances = [];
	        for (var _i = 2; _i < arguments.length; _i++) {
	            inheritances[_i - 2] = arguments[_i];
	        }
	        var recognizer = new base.constructor(options);
	        inheritances.push(base);
	        inheritances.forEach(function (item) { return recognizer.recognizeWith(item); });
	        return recognizer;
	    };
	    GestureConfig = __decorate$21([
	        _angular_core.Injectable(), 
	        __metadata$21('design:paramtypes', [])
	    ], GestureConfig);
	    return GestureConfig;
	}(_angular_platformBrowser.HammerGestureConfig));
	
	/**
	 * Stripped-down HammerJS annotations to be used within Material, which are necessary,
	 * because HammerJS is an optional dependency. For the full annotations see:
	 * https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/hammerjs
	 */
	
	/**
	 * Screenreaders will often fire fake mousedown events when a focusable element
	 * is activated using the keyboard. We can typically distinguish between these faked
	 * mousedown events and real mousedown events using the "buttons" property. While
	 * real mousedowns will indicate the mouse button that was pressed (e.g. "1" for
	 * the left mouse button), faked mousedowns will usually set the property value to 0.
	 */
	function isFakeMousedownFromScreenReader(event) {
	    return event.buttons === 0;
	}
	
	var __decorate$22 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$22 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/**
	 * Class to coordinate unique selection based on name.
	 * Intended to be consumed as an Angular service.
	 * This service is needed because native radio change events are only fired on the item currently
	 * being selected, and we still need to uncheck the previous selection.
	 *
	 * This service does not *store* any IDs and names because they may change at any time, so it is
	 * less error-prone if they are simply passed through when the events occur.
	 */
	var UniqueSelectionDispatcher = (function () {
	    function UniqueSelectionDispatcher() {
	        this._listeners = [];
	    }
	    /**
	     * Notify other items that selection for the given name has been set.
	     * @param id ID of the item.
	     * @param name Name of the item.
	     */
	    UniqueSelectionDispatcher.prototype.notify = function (id, name) {
	        for (var _i = 0, _a = this._listeners; _i < _a.length; _i++) {
	            var listener = _a[_i];
	            listener(id, name);
	        }
	    };
	    /** Listen for future changes to item selection. */
	    UniqueSelectionDispatcher.prototype.listen = function (listener) {
	        this._listeners.push(listener);
	    };
	    UniqueSelectionDispatcher = __decorate$22([
	        _angular_core.Injectable(), 
	        __metadata$22('design:paramtypes', [])
	    ], UniqueSelectionDispatcher);
	    return UniqueSelectionDispatcher;
	}());
	
	/**
	 * Applies a CSS transform to an element, including browser-prefixed properties.
	 * @param element
	 * @param transformValue
	 */
	function applyCssTransform(element, transformValue) {
	    // It's important to trim the result, because the browser will ignore the set operation
	    // if the string contains only whitespace.
	    var value = transformValue.trim();
	    element.style.transform = value;
	    element.style.webkitTransform = value;
	}
	
	// Due to a bug in the ChromeDriver, Angular 2 keyboard events are not triggered by `sendKeys`
	// during E2E tests when using dot notation such as `(keydown.rightArrow)`. To get around this,
	// we are temporarily using a single (keydown) handler.
	// See: https://github.com/angular/angular/issues/9419
	var UP_ARROW = 38;
	var DOWN_ARROW = 40;
	var RIGHT_ARROW = 39;
	var LEFT_ARROW = 37;
	var PAGE_UP = 33;
	var PAGE_DOWN = 34;
	var HOME = 36;
	var END = 35;
	var ENTER = 13;
	var SPACE = 32;
	var TAB = 9;
	var ESCAPE = 27;
	var BACKSPACE = 8;
	var DELETE = 46;
	
	/** @docs-private */
	var AnimationCurves = (function () {
	    function AnimationCurves() {
	    }
	    AnimationCurves.STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';
	    AnimationCurves.DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';
	    AnimationCurves.ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';
	    AnimationCurves.SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';
	    return AnimationCurves;
	}());
	/** @docs-private */
	var AnimationDurations = (function () {
	    function AnimationDurations() {
	    }
	    AnimationDurations.COMPLEX = '375ms';
	    AnimationDurations.ENTERING = '225ms';
	    AnimationDurations.EXITING = '195ms';
	    return AnimationDurations;
	}());
	
	/** Coerces a data-bound value (typically a string) to a number. */
	function coerceNumberProperty(value, fallbackValue) {
	    if (fallbackValue === void 0) { fallbackValue = 0; }
	    // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,
	    // and other non-number values as NaN, where Number just uses 0) but it considers the string
	    // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.
	    return isNaN(parseFloat(value)) || isNaN(Number(value)) ? fallbackValue : Number(value);
	}
	
	var __decorate$23 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$23 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/** Selector that matches all elements that may have style collisions with material1. */
	var MD_ELEMENTS_SELECTOR = "\n  md-autocomplete,\n  md-card,\n  md-card-actions,\n  md-card-content,\n  md-card-footer,\n  md-card-header,\n  md-card-subtitle,\n  md-card-title,\n  md-card-title-group,\n  md-checkbox,\n  md-chip,\n  md-dialog-container,\n  md-divider,\n  md-grid-list,\n  md-grid-tile,\n  md-grid-tile-footer,\n  md-grid-tile-header,\n  md-hint,\n  md-icon,\n  md-ink-bar,\n  md-input,\n  md-list,\n  md-list-item,\n  md-menu,\n  md-nav-list,\n  md-option,\n  md-placeholder,\n  md-progress-bar,\n  md-progress-circle,\n  md-radio-button,\n  md-radio-group,\n  md-select,\n  md-sidenav,\n  md-slider,\n  md-spinner,\n  md-tab,\n  md-toolbar\n";
	/** Directive that enforces that the `md-` prefix cannot be used. */
	var MdPrefixEnforcer = (function () {
	    function MdPrefixEnforcer() {
	        throw Error('The "md-" prefix cannot be used in ng-material v1 compatibility mode.');
	    }
	    MdPrefixEnforcer = __decorate$23([
	        _angular_core.Directive({ selector: MD_ELEMENTS_SELECTOR }), 
	        __metadata$23('design:paramtypes', [])
	    ], MdPrefixEnforcer);
	    return MdPrefixEnforcer;
	}());
	var NoConflictStyleCompatibilityMode = (function () {
	    function NoConflictStyleCompatibilityMode() {
	    }
	    NoConflictStyleCompatibilityMode.forRoot = function () {
	        return {
	            ngModule: NoConflictStyleCompatibilityMode,
	            providers: [],
	        };
	    };
	    NoConflictStyleCompatibilityMode = __decorate$23([
	        _angular_core.NgModule({
	            declarations: [MdPrefixEnforcer],
	            exports: [MdPrefixEnforcer],
	            providers: [{
	                    provide: MATERIAL_COMPATIBILITY_MODE, useValue: true,
	                }],
	        }), 
	        __metadata$23('design:paramtypes', [])
	    ], NoConflictStyleCompatibilityMode);
	    return NoConflictStyleCompatibilityMode;
	}());
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var MdCoreModule = (function () {
	    function MdCoreModule() {
	    }
	    MdCoreModule.forRoot = function () {
	        return {
	            ngModule: MdCoreModule,
	            providers: [A11Y_PROVIDERS, OVERLAY_PROVIDERS],
	        };
	    };
	    MdCoreModule = __decorate([
	        _angular_core.NgModule({
	            imports: [
	                MdLineModule,
	                RtlModule,
	                MdRippleModule,
	                ObserveContentModule,
	                PortalModule,
	                OverlayModule,
	                A11yModule,
	            ],
	            exports: [
	                MdLineModule,
	                RtlModule,
	                MdRippleModule,
	                ObserveContentModule,
	                PortalModule,
	                OverlayModule,
	                A11yModule,
	            ],
	        }), 
	        __metadata('design:paramtypes', [])
	    ], MdCoreModule);
	    return MdCoreModule;
	}());
	
	var __decorate$25 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$25 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param$4 = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	/**
	 * Provider Expression that allows md-button-toggle-group to register as a ControlValueAccessor.
	 * This allows it to support [(ngModel)].
	 * @docs-private
	 */
	var MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {
	    provide: _angular_forms.NG_VALUE_ACCESSOR,
	    useExisting: _angular_core.forwardRef(function () { return MdButtonToggleGroup; }),
	    multi: true
	};
	var _uniqueIdCounter = 0;
	/** Change event object emitted by MdButtonToggle. */
	var MdButtonToggleChange = (function () {
	    function MdButtonToggleChange() {
	    }
	    return MdButtonToggleChange;
	}());
	/** Exclusive selection button toggle group that behaves like a radio-button group. */
	var MdButtonToggleGroup = (function () {
	    function MdButtonToggleGroup() {
	        /** The value for the button toggle group. Should match currently selected button toggle. */
	        this._value = null;
	        /** The HTML name attribute applied to toggles in this group. */
	        this._name = "md-radio-group-" + _uniqueIdCounter++;
	        /** Disables all toggles in the group. */
	        this._disabled = null;
	        /** Whether the button toggle group should be vertical. */
	        this._vertical = false;
	        /** The currently selected button toggle, should match the value. */
	        this._selected = null;
	        /** Whether the button toggle group is initialized or not. */
	        this._isInitialized = false;
	        /**
	         * The method to be called in order to update ngModel.
	         * Now `ngModel` binding is not supported in multiple selection mode.
	         */
	        this._controlValueAccessorChangeFn = function (value) { };
	        /** onTouch function registered via registerOnTouch (ControlValueAccessor). */
	        this.onTouched = function () { };
	        /** Event emitted when the group's value changes. */
	        this._change = new _angular_core.EventEmitter();
	        /** Child button toggle buttons. */
	        this._buttonToggles = null;
	    }
	    Object.defineProperty(MdButtonToggleGroup.prototype, "change", {
	        get: function () {
	            return this._change.asObservable();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MdButtonToggleGroup.prototype.ngAfterViewInit = function () {
	        this._isInitialized = true;
	    };
	    Object.defineProperty(MdButtonToggleGroup.prototype, "name", {
	        /** `name` attribute for the underlying `input` element. */
	        get: function () {
	            return this._name;
	        },
	        set: function (value) {
	            this._name = value;
	            this._updateButtonToggleNames();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdButtonToggleGroup.prototype, "disabled", {
	        /** Whether the toggle group is disabled. */
	        get: function () {
	            return this._disabled;
	        },
	        set: function (value) {
	            this._disabled = coerceBooleanProperty(value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdButtonToggleGroup.prototype, "vertical", {
	        /** Whether the toggle group is vertical. */
	        get: function () {
	            return this._vertical;
	        },
	        set: function (value) {
	            this._vertical = coerceBooleanProperty(value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdButtonToggleGroup.prototype, "value", {
	        /** Value of the toggle group. */
	        get: function () {
	            return this._value;
	        },
	        set: function (newValue) {
	            if (this._value != newValue) {
	                this._value = newValue;
	                this._updateSelectedButtonToggleFromValue();
	                // Only emit a change event if the view is completely initialized.
	                // We don't want to emit a change event for the initial values.
	                if (this._isInitialized) {
	                    this._emitChangeEvent();
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdButtonToggleGroup.prototype, "selected", {
	        /** Whether the toggle group is selected. */
	        get: function () {
	            return this._selected;
	        },
	        set: function (selected) {
	            this._selected = selected;
	            this.value = selected ? selected.value : null;
	            if (selected && !selected.checked) {
	                selected.checked = true;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MdButtonToggleGroup.prototype._updateButtonToggleNames = function () {
	        var _this = this;
	        if (this._buttonToggles) {
	            this._buttonToggles.forEach(function (toggle) {
	                toggle.name = _this._name;
	            });
	        }
	    };
	    // TODO: Refactor into shared code with radio.
	    MdButtonToggleGroup.prototype._updateSelectedButtonToggleFromValue = function () {
	        var _this = this;
	        var isAlreadySelected = this._selected != null && this._selected.value == this._value;
	        if (this._buttonToggles != null && !isAlreadySelected) {
	            var matchingButtonToggle = this._buttonToggles.filter(function (buttonToggle) { return buttonToggle.value == _this._value; })[0];
	            if (matchingButtonToggle) {
	                this.selected = matchingButtonToggle;
	            }
	            else if (this.value == null) {
	                this.selected = null;
	                this._buttonToggles.forEach(function (buttonToggle) {
	                    buttonToggle.checked = false;
	                });
	            }
	        }
	    };
	    /** Dispatch change event with current selection and group value. */
	    MdButtonToggleGroup.prototype._emitChangeEvent = function () {
	        var event = new MdButtonToggleChange();
	        event.source = this._selected;
	        event.value = this._value;
	        this._controlValueAccessorChangeFn(event.value);
	        this._change.emit(event);
	    };
	    /**
	     * Sets the model value. Implemented as part of ControlValueAccessor.
	     * @param value Value to be set to the model.
	     */
	    MdButtonToggleGroup.prototype.writeValue = function (value) {
	        this.value = value;
	    };
	    /**
	     * Registers a callback that will be triggered when the value has changed.
	     * Implemented as part of ControlValueAccessor.
	     * @param fn On change callback function.
	     */
	    MdButtonToggleGroup.prototype.registerOnChange = function (fn) {
	        this._controlValueAccessorChangeFn = fn;
	    };
	    /**
	     * Registers a callback that will be triggered when the control has been touched.
	     * Implemented as part of ControlValueAccessor.
	     * @param fn On touch callback function.
	     */
	    MdButtonToggleGroup.prototype.registerOnTouched = function (fn) {
	        this.onTouched = fn;
	    };
	    __decorate$25([
	        _angular_core.Output(), 
	        __metadata$25('design:type', rxjs_Observable.Observable)
	    ], MdButtonToggleGroup.prototype, "change", null);
	    __decorate$25([
	        _angular_core.ContentChildren(_angular_core.forwardRef(function () { return MdButtonToggle; })), 
	        __metadata$25('design:type', _angular_core.QueryList)
	    ], MdButtonToggleGroup.prototype, "_buttonToggles", void 0);
	    __decorate$25([
	        _angular_core.Input(), 
	        __metadata$25('design:type', String)
	    ], MdButtonToggleGroup.prototype, "name", null);
	    __decorate$25([
	        _angular_core.Input(), 
	        __metadata$25('design:type', Boolean)
	    ], MdButtonToggleGroup.prototype, "disabled", null);
	    __decorate$25([
	        _angular_core.Input(), 
	        __metadata$25('design:type', Boolean)
	    ], MdButtonToggleGroup.prototype, "vertical", null);
	    __decorate$25([
	        _angular_core.Input(), 
	        __metadata$25('design:type', Object)
	    ], MdButtonToggleGroup.prototype, "value", null);
	    __decorate$25([
	        _angular_core.Input(), 
	        __metadata$25('design:type', Object)
	    ], MdButtonToggleGroup.prototype, "selected", null);
	    MdButtonToggleGroup = __decorate$25([
	        _angular_core.Directive({
	            selector: 'md-button-toggle-group:not([multiple])',
	            providers: [MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],
	            host: {
	                'role': 'radiogroup',
	                '[class.md-button-toggle-vertical]': 'vertical'
	            },
	            exportAs: 'mdButtonToggleGroup',
	        }), 
	        __metadata$25('design:paramtypes', [])
	    ], MdButtonToggleGroup);
	    return MdButtonToggleGroup;
	}());
	/** Multiple selection button-toggle group. `ngModel` is not supported in this mode. */
	var MdButtonToggleGroupMultiple = (function () {
	    function MdButtonToggleGroupMultiple() {
	        /** Disables all toggles in the group. */
	        this._disabled = null;
	        /** Whether the button toggle group should be vertical. */
	        this._vertical = false;
	    }
	    Object.defineProperty(MdButtonToggleGroupMultiple.prototype, "disabled", {
	        /** Whether the toggle group is disabled. */
	        get: function () {
	            return this._disabled;
	        },
	        set: function (value) {
	            this._disabled = (value != null && value !== false) ? true : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdButtonToggleGroupMultiple.prototype, "vertical", {
	        /** Whether the toggle group is vertical. */
	        get: function () {
	            return this._vertical;
	        },
	        set: function (value) {
	            this._vertical = coerceBooleanProperty(value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    __decorate$25([
	        _angular_core.Input(), 
	        __metadata$25('design:type', Boolean)
	    ], MdButtonToggleGroupMultiple.prototype, "disabled", null);
	    __decorate$25([
	        _angular_core.Input(), 
	        __metadata$25('design:type', Boolean)
	    ], MdButtonToggleGroupMultiple.prototype, "vertical", null);
	    MdButtonToggleGroupMultiple = __decorate$25([
	        _angular_core.Directive({
	            selector: 'md-button-toggle-group[multiple]',
	            exportAs: 'mdButtonToggleGroup',
	            host: {
	                '[class.md-button-toggle-vertical]': 'vertical'
	            }
	        }), 
	        __metadata$25('design:paramtypes', [])
	    ], MdButtonToggleGroupMultiple);
	    return MdButtonToggleGroupMultiple;
	}());
	/** Single button inside of a toggle group. */
	var MdButtonToggle = (function () {
	    function MdButtonToggle(toggleGroup, toggleGroupMultiple, buttonToggleDispatcher, _renderer) {
	        var _this = this;
	        this.buttonToggleDispatcher = buttonToggleDispatcher;
	        this._renderer = _renderer;
	        /** Whether or not this button toggle is checked. */
	        this._checked = false;
	        /** Whether or not this button toggle is disabled. */
	        this._disabled = null;
	        /** Value assigned to this button toggle. */
	        this._value = null;
	        /** Whether or not the button toggle is a single selection. */
	        this._isSingleSelector = null;
	        /** Event emitted when the group value changes. */
	        this._change = new _angular_core.EventEmitter();
	        this.buttonToggleGroup = toggleGroup;
	        this.buttonToggleGroupMultiple = toggleGroupMultiple;
	        if (this.buttonToggleGroup) {
	            buttonToggleDispatcher.listen(function (id, name) {
	                if (id != _this.id && name == _this.name) {
	                    _this.checked = false;
	                }
	            });
	            this._type = 'radio';
	            this.name = this.buttonToggleGroup.name;
	            this._isSingleSelector = true;
	        }
	        else {
	            // Even if there is no group at all, treat the button toggle as a checkbox so it can be
	            // toggled on or off.
	            this._type = 'checkbox';
	            this._isSingleSelector = false;
	        }
	    }
	    Object.defineProperty(MdButtonToggle.prototype, "change", {
	        get: function () {
	            return this._change.asObservable();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MdButtonToggle.prototype.ngOnInit = function () {
	        if (this.id == null) {
	            this.id = "md-button-toggle-" + _uniqueIdCounter++;
	        }
	        if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {
	            this._checked = true;
	        }
	    };
	    Object.defineProperty(MdButtonToggle.prototype, "inputId", {
	        /** Unique ID for the underlying `input` element. */
	        get: function () {
	            return this.id + "-input";
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdButtonToggle.prototype, "checked", {
	        /** Whether the button is checked. */
	        get: function () {
	            return this._checked;
	        },
	        set: function (newCheckedState) {
	            if (this._isSingleSelector) {
	                if (newCheckedState) {
	                    // Notify all button toggles with the same name (in the same group) to un-check.
	                    this.buttonToggleDispatcher.notify(this.id, this.name);
	                }
	            }
	            this._checked = newCheckedState;
	            if (newCheckedState && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {
	                this.buttonToggleGroup.selected = this;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdButtonToggle.prototype, "value", {
	        /** MdButtonToggleGroup reads this to assign its own value. */
	        get: function () {
	            return this._value;
	        },
	        set: function (value) {
	            if (this._value != value) {
	                if (this.buttonToggleGroup != null && this.checked) {
	                    this.buttonToggleGroup.value = value;
	                }
	                this._value = value;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /** Dispatch change event with current value. */
	    MdButtonToggle.prototype._emitChangeEvent = function () {
	        var event = new MdButtonToggleChange();
	        event.source = this;
	        event.value = this._value;
	        this._change.emit(event);
	    };
	    Object.defineProperty(MdButtonToggle.prototype, "disabled", {
	        /** Whether the button is disabled. */
	        get: function () {
	            return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||
	                (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);
	        },
	        set: function (value) {
	            this._disabled = (value != null && value !== false) ? true : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /** Toggle the state of the current button toggle. */
	    MdButtonToggle.prototype._toggle = function () {
	        this.checked = !this.checked;
	    };
	    /** Checks the button toggle due to an interaction with the underlying native input. */
	    MdButtonToggle.prototype._onInputChange = function (event) {
	        event.stopPropagation();
	        if (this._isSingleSelector) {
	            // Propagate the change one-way via the group, which will in turn mark this
	            // button toggle as checked.
	            this.checked = true;
	            this.buttonToggleGroup.selected = this;
	            this.buttonToggleGroup.onTouched();
	        }
	        else {
	            this._toggle();
	        }
	        // Emit a change event when the native input does.
	        this._emitChangeEvent();
	    };
	    MdButtonToggle.prototype._onInputClick = function (event) {
	        // We have to stop propagation for click events on the visual hidden input element.
	        // By default, when a user clicks on a label element, a generated click event will be
	        // dispatched on the associated input element. Since we are using a label element as our
	        // root container, the click event on the `slide-toggle` will be executed twice.
	        // The real click event will bubble up, and the generated click event also tries to bubble up.
	        // This will lead to multiple click events.
	        // Preventing bubbling for the second event will solve that issue.
	        event.stopPropagation();
	    };
	    /** Focuses the button. */
	    MdButtonToggle.prototype.focus = function () {
	        this._renderer.invokeElementMethod(this._inputElement.nativeElement, 'focus');
	    };
	    __decorate$25([
	        _angular_core.HostBinding(),
	        _angular_core.Input(), 
	        __metadata$25('design:type', String)
	    ], MdButtonToggle.prototype, "id", void 0);
	    __decorate$25([
	        _angular_core.Input(), 
	        __metadata$25('design:type', String)
	    ], MdButtonToggle.prototype, "name", void 0);
	    __decorate$25([
	        _angular_core.Output(), 
	        __metadata$25('design:type', rxjs_Observable.Observable)
	    ], MdButtonToggle.prototype, "change", null);
	    __decorate$25([
	        _angular_core.ViewChild('input'), 
	        __metadata$25('design:type', _angular_core.ElementRef)
	    ], MdButtonToggle.prototype, "_inputElement", void 0);
	    __decorate$25([
	        _angular_core.HostBinding('class.md-button-toggle-checked'),
	        _angular_core.Input(), 
	        __metadata$25('design:type', Boolean)
	    ], MdButtonToggle.prototype, "checked", null);
	    __decorate$25([
	        _angular_core.Input(), 
	        __metadata$25('design:type', Object)
	    ], MdButtonToggle.prototype, "value", null);
	    __decorate$25([
	        _angular_core.HostBinding('class.md-button-toggle-disabled'),
	        _angular_core.Input(), 
	        __metadata$25('design:type', Boolean)
	    ], MdButtonToggle.prototype, "disabled", null);
	    MdButtonToggle = __decorate$25([
	        _angular_core.Component({selector: 'md-button-toggle',
	            template: "<label [attr.for]=\"inputId\" class=\"md-button-toggle-label\"><input #input class=\"md-button-toggle-input cdk-visually-hidden\" [type]=\"_type\" [id]=\"inputId\" [checked]=\"checked\" [disabled]=\"disabled\" [name]=\"name\" (change)=\"_onInputChange($event)\" (click)=\"_onInputClick($event)\"><div class=\"md-button-toggle-label-content\"><ng-content></ng-content></div></label>",
	            styles: ["md-button-toggle-group{box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12);position:relative;display:inline-flex;flex-direction:row;border-radius:2px;cursor:pointer;white-space:nowrap}.md-button-toggle-vertical{flex-direction:column}.md-button-toggle-vertical .md-button-toggle-label-content{display:block}.md-button-toggle-disabled .md-button-toggle-label-content{cursor:default}md-button-toggle{white-space:nowrap}.md-button-toggle-label-content{display:inline-block;line-height:36px;padding:0 16px;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.md-button-toggle-label-content>*{vertical-align:middle}"],
	            encapsulation: _angular_core.ViewEncapsulation.None,
	        }),
	        __param$4(0, _angular_core.Optional()),
	        __param$4(1, _angular_core.Optional()), 
	        __metadata$25('design:paramtypes', [MdButtonToggleGroup, MdButtonToggleGroupMultiple, UniqueSelectionDispatcher, _angular_core.Renderer])
	    ], MdButtonToggle);
	    return MdButtonToggle;
	}());
	var MdButtonToggleModule = (function () {
	    function MdButtonToggleModule() {
	    }
	    MdButtonToggleModule.forRoot = function () {
	        return {
	            ngModule: MdButtonToggleModule,
	            providers: [UniqueSelectionDispatcher]
	        };
	    };
	    MdButtonToggleModule = __decorate$25([
	        _angular_core.NgModule({
	            imports: [_angular_forms.FormsModule, DefaultStyleCompatibilityModeModule],
	            exports: [
	                MdButtonToggleGroup,
	                MdButtonToggleGroupMultiple,
	                MdButtonToggle,
	                DefaultStyleCompatibilityModeModule,
	            ],
	            declarations: [MdButtonToggleGroup, MdButtonToggleGroupMultiple, MdButtonToggle],
	        }), 
	        __metadata$25('design:paramtypes', [])
	    ], MdButtonToggleModule);
	    return MdButtonToggleModule;
	}());
	
	var __extends$6 = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate$26 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$26 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	// TODO(jelbourn): Make the `isMouseDown` stuff done with one global listener.
	// TODO(kara): Convert attribute selectors to classes when attr maps become available
	/**
	 * Material design button.
	 */
	var MdButton = (function () {
	    function MdButton(_elementRef, _renderer) {
	        this._elementRef = _elementRef;
	        this._renderer = _renderer;
	        /** Whether the button has focus from the keyboard (not the mouse). Used for class binding. */
	        this._isKeyboardFocused = false;
	        /** Whether a mousedown has occurred on this element in the last 100ms. */
	        this._isMouseDown = false;
	        /** Whether the ripple effect on click should be disabled. */
	        this._disableRipple = false;
	        this._disabled = null;
	    }
	    Object.defineProperty(MdButton.prototype, "disableRipple", {
	        /** Whether the ripple effect for this button is disabled. */
	        get: function () { return this._disableRipple; },
	        set: function (v) { this._disableRipple = coerceBooleanProperty(v); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdButton.prototype, "disabled", {
	        /** Whether the button is disabled. */
	        get: function () { return this._disabled; },
	        set: function (value) { this._disabled = coerceBooleanProperty(value) ? true : null; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdButton.prototype, "color", {
	        /** The color of the button. Can be `primary`, `accent`, or `warn`. */
	        get: function () { return this._color; },
	        set: function (value) { this._updateColor(value); },
	        enumerable: true,
	        configurable: true
	    });
	    MdButton.prototype._setMousedown = function () {
	        var _this = this;
	        // We only *show* the focus style when focus has come to the button via the keyboard.
	        // The Material Design spec is silent on this topic, and without doing this, the
	        // button continues to look :active after clicking.
	        // @see http://marcysutton.com/button-focus-hell/
	        this._isMouseDown = true;
	        setTimeout(function () { _this._isMouseDown = false; }, 100);
	    };
	    MdButton.prototype._updateColor = function (newColor) {
	        this._setElementColor(this._color, false);
	        this._setElementColor(newColor, true);
	        this._color = newColor;
	    };
	    MdButton.prototype._setElementColor = function (color, isAdd) {
	        if (color != null && color != '') {
	            this._renderer.setElementClass(this._elementRef.nativeElement, "md-" + color, isAdd);
	        }
	    };
	    MdButton.prototype._setKeyboardFocus = function () {
	        this._isKeyboardFocused = !this._isMouseDown;
	    };
	    MdButton.prototype._removeKeyboardFocus = function () {
	        this._isKeyboardFocused = false;
	    };
	    /** Focuses the button. */
	    MdButton.prototype.focus = function () {
	        this._renderer.invokeElementMethod(this._elementRef.nativeElement, 'focus');
	    };
	    MdButton.prototype._getHostElement = function () {
	        return this._elementRef.nativeElement;
	    };
	    MdButton.prototype._isRoundButton = function () {
	        var el = this._elementRef.nativeElement;
	        return el.hasAttribute('md-icon-button') ||
	            el.hasAttribute('md-fab') ||
	            el.hasAttribute('md-mini-fab');
	    };
	    MdButton.prototype._isRippleDisabled = function () {
	        return this.disableRipple || this.disabled;
	    };
	    __decorate$26([
	        _angular_core.Input(), 
	        __metadata$26('design:type', Object)
	    ], MdButton.prototype, "disableRipple", null);
	    __decorate$26([
	        _angular_core.Input(), 
	        __metadata$26('design:type', Object)
	    ], MdButton.prototype, "disabled", null);
	    __decorate$26([
	        _angular_core.Input(), 
	        __metadata$26('design:type', String)
	    ], MdButton.prototype, "color", null);
	    MdButton = __decorate$26([
	        _angular_core.Component({selector: 'button[md-button], button[md-raised-button], button[md-icon-button], ' +
	                'button[md-fab], button[md-mini-fab]',
	            host: {
	                '[disabled]': 'disabled',
	                '[class.md-button-focus]': '_isKeyboardFocused',
	                '(mousedown)': '_setMousedown()',
	                '(focus)': '_setKeyboardFocus()',
	                '(blur)': '_removeKeyboardFocus()',
	            },
	            template: "<span class=\"md-button-wrapper\"><ng-content></ng-content></span><div md-ripple *ngIf=\"!_isRippleDisabled()\" class=\"md-button-ripple\" [class.md-button-ripple-round]=\"_isRoundButton()\" [mdRippleTrigger]=\"_getHostElement()\" [mdRippleColor]=\"_isRoundButton() ? 'rgba(255, 255, 255, 0.2)' : ''\" mdRippleBackgroundColor=\"rgba(0, 0, 0, 0)\"></div><div class=\"md-button-focus-overlay\" (touchstart)=\"$event.preventDefault()\"></div>",
	            styles: [".md-button-focus[md-button] .md-button-focus-overlay,.md-button-focus[md-fab] .md-button-focus-overlay,.md-button-focus[md-icon-button] .md-button-focus-overlay,.md-button-focus[md-mini-fab] .md-button-focus-overlay,.md-button-focus[md-raised-button] .md-button-focus-overlay,[md-button]:hover .md-button-focus-overlay,[md-icon-button]:hover .md-button-focus-overlay{opacity:1}[md-icon-button],[md-mini-fab]{width:40px;height:40px}[md-button],[md-fab],[md-icon-button],[md-mini-fab],[md-raised-button]{box-sizing:border-box;position:relative;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;outline:0;border:none;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;font-size:14px;font-family:Roboto,\"Helvetica Neue\",sans-serif;font-weight:500;color:currentColor;text-align:center;margin:0;min-width:88px;line-height:36px;padding:0 16px;border-radius:2px}[disabled][md-button],[disabled][md-fab],[disabled][md-icon-button],[disabled][md-mini-fab],[disabled][md-raised-button]{cursor:default}[md-fab],[md-mini-fab],[md-raised-button]{box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12);transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1)}[md-fab],[md-mini-fab]{box-shadow:0 3px 5px -1px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12);flex-shrink:0;padding:0;min-width:0;border-radius:50%}[md-fab]:active,[md-mini-fab]:active,[md-raised-button]:active{box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}[disabled][md-fab],[disabled][md-mini-fab],[disabled][md-raised-button]{box-shadow:none}[md-button][disabled]:hover .md-button-focus-overlay,[md-button][disabled]:hover.md-accent,[md-button][disabled]:hover.md-primary,[md-button][disabled]:hover.md-warn,[md-icon-button][disabled]:hover .md-button-focus-overlay,[md-icon-button][disabled]:hover.md-accent,[md-icon-button][disabled]:hover.md-primary,[md-icon-button][disabled]:hover.md-warn{background-color:transparent}[md-fab]{width:56px;height:56px}[md-fab]:active,[md-mini-fab]:active{box-shadow:0 7px 8px -4px rgba(0,0,0,.2),0 12px 17px 2px rgba(0,0,0,.14),0 5px 22px 4px rgba(0,0,0,.12)}[md-fab] i,[md-fab] md-icon{padding:16px 0;line-height:24px}[md-mini-fab] i,[md-mini-fab] md-icon{padding:8px 0;line-height:24px}[md-icon-button]{padding:0;min-width:0;flex-shrink:0;line-height:40px;border-radius:50%}[md-icon-button] i,[md-icon-button] md-icon{line-height:24px}[md-button] .md-button-wrapper>*,[md-icon-button] .md-button-wrapper>*,[md-raised-button] .md-button-wrapper>*{vertical-align:middle}.md-button-focus-overlay,.md-button-ripple{position:absolute;top:0;left:0;bottom:0;right:0}.md-button-focus-overlay{background-color:rgba(0,0,0,.12);border-radius:inherit;pointer-events:none;opacity:0}.md-button-ripple-round{border-radius:50%;z-index:1}@media screen and (-ms-high-contrast:active){.md-button-focus-overlay{background-color:rgba(255,255,255,.5)}[md-button],[md-fab],[md-icon-button],[md-mini-fab],[md-raised-button]{outline:solid 1px}}"],
	            encapsulation: _angular_core.ViewEncapsulation.None,
	            changeDetection: _angular_core.ChangeDetectionStrategy.OnPush,
	        }), 
	        __metadata$26('design:paramtypes', [_angular_core.ElementRef, _angular_core.Renderer])
	    ], MdButton);
	    return MdButton;
	}());
	/**
	 * Raised Material design button.
	 */
	var MdAnchor = (function (_super) {
	    __extends$6(MdAnchor, _super);
	    function MdAnchor(elementRef, renderer) {
	        _super.call(this, elementRef, renderer);
	    }
	    Object.defineProperty(MdAnchor.prototype, "tabIndex", {
	        /** @docs-private */
	        get: function () {
	            return this.disabled ? -1 : 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdAnchor.prototype, "_isAriaDisabled", {
	        get: function () {
	            return this.disabled ? 'true' : 'false';
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MdAnchor.prototype._haltDisabledEvents = function (event) {
	        // A disabled button shouldn't apply any actions
	        if (this.disabled) {
	            event.preventDefault();
	            event.stopImmediatePropagation();
	        }
	    };
	    __decorate$26([
	        _angular_core.HostBinding('tabIndex'), 
	        __metadata$26('design:type', Number)
	    ], MdAnchor.prototype, "tabIndex", null);
	    MdAnchor = __decorate$26([
	        _angular_core.Component({selector: 'a[md-button], a[md-raised-button], a[md-icon-button], a[md-fab], a[md-mini-fab]',
	            inputs: ['color', 'disabled', 'disableRipple'],
	            host: {
	                '[attr.disabled]': 'disabled',
	                '[attr.aria-disabled]': '_isAriaDisabled',
	                '[class.md-button-focus]': '_isKeyboardFocused',
	                '(mousedown)': '_setMousedown()',
	                '(focus)': '_setKeyboardFocus()',
	                '(blur)': '_removeKeyboardFocus()',
	                '(click)': '_haltDisabledEvents($event)',
	            },
	            template: "<span class=\"md-button-wrapper\"><ng-content></ng-content></span><div md-ripple *ngIf=\"!_isRippleDisabled()\" class=\"md-button-ripple\" [class.md-button-ripple-round]=\"_isRoundButton()\" [mdRippleTrigger]=\"_getHostElement()\" [mdRippleColor]=\"_isRoundButton() ? 'rgba(255, 255, 255, 0.2)' : ''\" mdRippleBackgroundColor=\"rgba(0, 0, 0, 0)\"></div><div class=\"md-button-focus-overlay\" (touchstart)=\"$event.preventDefault()\"></div>",
	            styles: [".md-button-focus[md-button] .md-button-focus-overlay,.md-button-focus[md-fab] .md-button-focus-overlay,.md-button-focus[md-icon-button] .md-button-focus-overlay,.md-button-focus[md-mini-fab] .md-button-focus-overlay,.md-button-focus[md-raised-button] .md-button-focus-overlay,[md-button]:hover .md-button-focus-overlay,[md-icon-button]:hover .md-button-focus-overlay{opacity:1}[md-icon-button],[md-mini-fab]{width:40px;height:40px}[md-button],[md-fab],[md-icon-button],[md-mini-fab],[md-raised-button]{box-sizing:border-box;position:relative;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;outline:0;border:none;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;font-size:14px;font-family:Roboto,\"Helvetica Neue\",sans-serif;font-weight:500;color:currentColor;text-align:center;margin:0;min-width:88px;line-height:36px;padding:0 16px;border-radius:2px}[disabled][md-button],[disabled][md-fab],[disabled][md-icon-button],[disabled][md-mini-fab],[disabled][md-raised-button]{cursor:default}[md-fab],[md-mini-fab],[md-raised-button]{box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12);transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1)}[md-fab],[md-mini-fab]{box-shadow:0 3px 5px -1px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12);flex-shrink:0;padding:0;min-width:0;border-radius:50%}[md-fab]:active,[md-mini-fab]:active,[md-raised-button]:active{box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}[disabled][md-fab],[disabled][md-mini-fab],[disabled][md-raised-button]{box-shadow:none}[md-button][disabled]:hover .md-button-focus-overlay,[md-button][disabled]:hover.md-accent,[md-button][disabled]:hover.md-primary,[md-button][disabled]:hover.md-warn,[md-icon-button][disabled]:hover .md-button-focus-overlay,[md-icon-button][disabled]:hover.md-accent,[md-icon-button][disabled]:hover.md-primary,[md-icon-button][disabled]:hover.md-warn{background-color:transparent}[md-fab]{width:56px;height:56px}[md-fab]:active,[md-mini-fab]:active{box-shadow:0 7px 8px -4px rgba(0,0,0,.2),0 12px 17px 2px rgba(0,0,0,.14),0 5px 22px 4px rgba(0,0,0,.12)}[md-fab] i,[md-fab] md-icon{padding:16px 0;line-height:24px}[md-mini-fab] i,[md-mini-fab] md-icon{padding:8px 0;line-height:24px}[md-icon-button]{padding:0;min-width:0;flex-shrink:0;line-height:40px;border-radius:50%}[md-icon-button] i,[md-icon-button] md-icon{line-height:24px}[md-button] .md-button-wrapper>*,[md-icon-button] .md-button-wrapper>*,[md-raised-button] .md-button-wrapper>*{vertical-align:middle}.md-button-focus-overlay,.md-button-ripple{position:absolute;top:0;left:0;bottom:0;right:0}.md-button-focus-overlay{background-color:rgba(0,0,0,.12);border-radius:inherit;pointer-events:none;opacity:0}.md-button-ripple-round{border-radius:50%;z-index:1}@media screen and (-ms-high-contrast:active){.md-button-focus-overlay{background-color:rgba(255,255,255,.5)}[md-button],[md-fab],[md-icon-button],[md-mini-fab],[md-raised-button]{outline:solid 1px}}"],
	            encapsulation: _angular_core.ViewEncapsulation.None
	        }), 
	        __metadata$26('design:paramtypes', [_angular_core.ElementRef, _angular_core.Renderer])
	    ], MdAnchor);
	    return MdAnchor;
	}(MdButton));
	var MdButtonModule = (function () {
	    function MdButtonModule() {
	    }
	    MdButtonModule.forRoot = function () {
	        return {
	            ngModule: MdButtonModule,
	            providers: [ViewportRuler]
	        };
	    };
	    MdButtonModule = __decorate$26([
	        _angular_core.NgModule({
	            imports: [_angular_common.CommonModule, MdRippleModule, DefaultStyleCompatibilityModeModule],
	            exports: [MdButton, MdAnchor, DefaultStyleCompatibilityModeModule],
	            declarations: [MdButton, MdAnchor],
	        }), 
	        __metadata$26('design:paramtypes', [])
	    ], MdButtonModule);
	    return MdButtonModule;
	}());
	
	var __decorate$27 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$27 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/** Monotonically increasing integer used to auto-generate unique ids for checkbox components. */
	var nextId = 0;
	/**
	 * Provider Expression that allows md-checkbox to register as a ControlValueAccessor.
	 * This allows it to support [(ngModel)].
	 * @docs-private
	 */
	var MD_CHECKBOX_CONTROL_VALUE_ACCESSOR = {
	    provide: _angular_forms.NG_VALUE_ACCESSOR,
	    useExisting: _angular_core.forwardRef(function () { return MdCheckbox; }),
	    multi: true
	};
	/**
	 * Represents the different states that require custom transitions between them.
	 * @docs-private
	 */
	
	(function (TransitionCheckState) {
	    /** The initial state of the component before any user interaction. */
	    TransitionCheckState[TransitionCheckState["Init"] = 0] = "Init";
	    /** The state representing the component when it's becoming checked. */
	    TransitionCheckState[TransitionCheckState["Checked"] = 1] = "Checked";
	    /** The state representing the component when it's becoming unchecked. */
	    TransitionCheckState[TransitionCheckState["Unchecked"] = 2] = "Unchecked";
	    /** The state representing the component when it's becoming indeterminate. */
	    TransitionCheckState[TransitionCheckState["Indeterminate"] = 3] = "Indeterminate";
	})(exports.TransitionCheckState || (exports.TransitionCheckState = {}));
	/** Change event object emitted by MdCheckbox. */
	var MdCheckboxChange = (function () {
	    function MdCheckboxChange() {
	    }
	    return MdCheckboxChange;
	}());
	/**
	 * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,
	 * and exposes a similar API. A MdCheckbox can be either checked, unchecked, indeterminate, or
	 * disabled. Note that all additional accessibility attributes are taken care of by the component,
	 * so there is no need to provide them yourself. However, if you want to omit a label and still
	 * have the checkbox be accessible, you may supply an [aria-label] input.
	 * See: https://www.google.com/design/spec/components/selection-controls.html
	 */
	var MdCheckbox = (function () {
	    function MdCheckbox(_renderer, _elementRef, _changeDetectorRef) {
	        this._renderer = _renderer;
	        this._elementRef = _elementRef;
	        this._changeDetectorRef = _changeDetectorRef;
	        /**
	         * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will
	         * take precedence so this may be omitted.
	         */
	        this.ariaLabel = '';
	        /**
	         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element
	         */
	        this.ariaLabelledby = null;
	        /** A unique id for the checkbox. If one is not supplied, it is auto-generated. */
	        this.id = "md-checkbox-" + ++nextId;
	        /** Whether the label should appear after or before the checkbox. Defaults to 'after' */
	        this.labelPosition = 'after';
	        this._disabled = false;
	        /** @docs-private */
	        this.tabindex = 0;
	        /** Name value will be applied to the input element if present */
	        this.name = null;
	        /** Event emitted when the checkbox's `checked` value changes. */
	        this.change = new _angular_core.EventEmitter();
	        /**
	         * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.
	         * @docs-private
	         */
	        this.onTouched = function () { };
	        this._currentAnimationClass = '';
	        this._currentCheckState = exports.TransitionCheckState.Init;
	        this._checked = false;
	        this._indeterminate = false;
	        this._controlValueAccessorChangeFn = function (value) { };
	        this._hasFocus = false;
	        this.color = 'accent';
	    }
	    Object.defineProperty(MdCheckbox.prototype, "disableRipple", {
	        /** Whether the ripple effect for this checkbox is disabled. */
	        get: function () { return this._disableRipple; },
	        set: function (value) { this._disableRipple = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdCheckbox.prototype, "inputId", {
	        /** ID of the native input element inside `<md-checkbox>` */
	        get: function () {
	            return "input-" + this.id;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdCheckbox.prototype, "required", {
	        /** Whether the checkbox is required. */
	        get: function () { return this._required; },
	        set: function (value) { this._required = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdCheckbox.prototype, "align", {
	        /**
	         * Whether or not the checkbox should appear before or after the label.
	         * @deprecated
	         */
	        get: function () {
	            // align refers to the checkbox relative to the label, while labelPosition refers to the
	            // label relative to the checkbox. As such, they are inverted.
	            return this.labelPosition == 'after' ? 'start' : 'end';
	        },
	        set: function (v) {
	            this.labelPosition = (v == 'start') ? 'after' : 'before';
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdCheckbox.prototype, "disabled", {
	        /** Whether the checkbox is disabled. */
	        get: function () { return this._disabled; },
	        set: function (value) { this._disabled = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdCheckbox.prototype, "checked", {
	        /**
	         * Whether the checkbox is checked. Note that setting `checked` will immediately set
	         * `indeterminate` to false.
	         */
	        get: function () {
	            return this._checked;
	        },
	        set: function (checked) {
	            if (checked != this.checked) {
	                this._indeterminate = false;
	                this._checked = checked;
	                this._transitionCheckState(this._checked ? exports.TransitionCheckState.Checked : exports.TransitionCheckState.Unchecked);
	                this._changeDetectorRef.markForCheck();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdCheckbox.prototype, "indeterminate", {
	        /**
	         * Whether the checkbox is indeterminate. This is also known as "mixed" mode and can be used to
	         * represent a checkbox with three states, e.g. a checkbox that represents a nested list of
	         * checkable items. Note that whenever `checked` is set, indeterminate is immediately set to
	         * false. This differs from the web platform in that indeterminate state on native
	         * checkboxes is only remove when the user manually checks the checkbox (rather than setting the
	         * `checked` property programmatically). However, we feel that this behavior is more accommodating
	         * to the way consumers would envision using this component.
	         */
	        get: function () {
	            return this._indeterminate;
	        },
	        set: function (indeterminate) {
	            this._indeterminate = indeterminate;
	            if (this._indeterminate) {
	                this._transitionCheckState(exports.TransitionCheckState.Indeterminate);
	            }
	            else {
	                this._transitionCheckState(this.checked ? exports.TransitionCheckState.Checked : exports.TransitionCheckState.Unchecked);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdCheckbox.prototype, "color", {
	        /** The color of the button. Can be `primary`, `accent`, or `warn`. */
	        get: function () { return this._color; },
	        set: function (value) { this._updateColor(value); },
	        enumerable: true,
	        configurable: true
	    });
	    MdCheckbox.prototype._updateColor = function (newColor) {
	        this._setElementColor(this._color, false);
	        this._setElementColor(newColor, true);
	        this._color = newColor;
	    };
	    MdCheckbox.prototype._setElementColor = function (color, isAdd) {
	        if (color != null && color != '') {
	            this._renderer.setElementClass(this._elementRef.nativeElement, "md-" + color, isAdd);
	        }
	    };
	    MdCheckbox.prototype._isRippleDisabled = function () {
	        return this.disableRipple || this.disabled;
	    };
	    /**
	     * Sets the model value. Implemented as part of ControlValueAccessor.
	     * @param value Value to be set to the model.
	     */
	    MdCheckbox.prototype.writeValue = function (value) {
	        this.checked = !!value;
	    };
	    /**
	     * Registers a callback to be triggered when the value has changed.
	     * Implemented as part of ControlValueAccessor.
	     * @param fn Function to be called on change.
	     */
	    MdCheckbox.prototype.registerOnChange = function (fn) {
	        this._controlValueAccessorChangeFn = fn;
	    };
	    /**
	     * Registers a callback to be triggered when the control has been touched.
	     * Implemented as part of ControlValueAccessor.
	     * @param fn Callback to be triggered when the checkbox is touched.
	     */
	    MdCheckbox.prototype.registerOnTouched = function (fn) {
	        this.onTouched = fn;
	    };
	    /**
	     * Sets the checkbox's disabled state. Implemented as a part of ControlValueAccessor.
	     * @param isDisabled Whether the checkbox should be disabled.
	     */
	    MdCheckbox.prototype.setDisabledState = function (isDisabled) {
	        this.disabled = isDisabled;
	    };
	    MdCheckbox.prototype._transitionCheckState = function (newState) {
	        var oldState = this._currentCheckState;
	        var renderer = this._renderer;
	        var elementRef = this._elementRef;
	        if (oldState === newState) {
	            return;
	        }
	        if (this._currentAnimationClass.length > 0) {
	            renderer.setElementClass(elementRef.nativeElement, this._currentAnimationClass, false);
	        }
	        this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(oldState, newState);
	        this._currentCheckState = newState;
	        if (this._currentAnimationClass.length > 0) {
	            renderer.setElementClass(elementRef.nativeElement, this._currentAnimationClass, true);
	        }
	    };
	    MdCheckbox.prototype._emitChangeEvent = function () {
	        var event = new MdCheckboxChange();
	        event.source = this;
	        event.checked = this.checked;
	        this._controlValueAccessorChangeFn(this.checked);
	        this.change.emit(event);
	    };
	    /** Informs the component when the input has focus so that we can style accordingly */
	    MdCheckbox.prototype._onInputFocus = function () {
	        this._hasFocus = true;
	    };
	    /** Informs the component when we lose focus in order to style accordingly */
	    MdCheckbox.prototype._onInputBlur = function () {
	        this._hasFocus = false;
	        this.onTouched();
	    };
	    /** Toggles the `checked` state of the checkbox. */
	    MdCheckbox.prototype.toggle = function () {
	        this.checked = !this.checked;
	    };
	    /**
	     * Event handler for checkbox input element.
	     * Toggles checked state if element is not disabled.
	     * @param event
	     */
	    MdCheckbox.prototype._onInteractionEvent = function (event) {
	        // We always have to stop propagation on the change event.
	        // Otherwise the change event, from the input element, will bubble up and
	        // emit its event object to the `change` output.
	        event.stopPropagation();
	        if (!this.disabled) {
	            this.toggle();
	            // Emit our custom change event if the native input emitted one.
	            // It is important to only emit it, if the native input triggered one, because
	            // we don't want to trigger a change event, when the `checked` variable changes for example.
	            this._emitChangeEvent();
	        }
	    };
	    /** Focuses the checkbox. */
	    MdCheckbox.prototype.focus = function () {
	        this._renderer.invokeElementMethod(this._inputElement.nativeElement, 'focus');
	        this._onInputFocus();
	    };
	    MdCheckbox.prototype._onInputClick = function (event) {
	        // We have to stop propagation for click events on the visual hidden input element.
	        // By default, when a user clicks on a label element, a generated click event will be
	        // dispatched on the associated input element. Since we are using a label element as our
	        // root container, the click event on the `checkbox` will be executed twice.
	        // The real click event will bubble up, and the generated click event also tries to bubble up.
	        // This will lead to multiple click events.
	        // Preventing bubbling for the second event will solve that issue.
	        event.stopPropagation();
	    };
	    MdCheckbox.prototype._getAnimationClassForCheckStateTransition = function (oldState, newState) {
	        var animSuffix;
	        switch (oldState) {
	            case exports.TransitionCheckState.Init:
	                // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or
	                // [checked] bound to it.
	                if (newState === exports.TransitionCheckState.Checked) {
	                    animSuffix = 'unchecked-checked';
	                }
	                else {
	                    return '';
	                }
	                break;
	            case exports.TransitionCheckState.Unchecked:
	                animSuffix = newState === exports.TransitionCheckState.Checked ?
	                    'unchecked-checked' : 'unchecked-indeterminate';
	                break;
	            case exports.TransitionCheckState.Checked:
	                animSuffix = newState === exports.TransitionCheckState.Unchecked ?
	                    'checked-unchecked' : 'checked-indeterminate';
	                break;
	            case exports.TransitionCheckState.Indeterminate:
	                animSuffix = newState === exports.TransitionCheckState.Checked ?
	                    'indeterminate-checked' : 'indeterminate-unchecked';
	        }
	        return "md-checkbox-anim-" + animSuffix;
	    };
	    MdCheckbox.prototype._getHostElement = function () {
	        return this._elementRef.nativeElement;
	    };
	    __decorate$27([
	        _angular_core.Input('aria-label'), 
	        __metadata$27('design:type', String)
	    ], MdCheckbox.prototype, "ariaLabel", void 0);
	    __decorate$27([
	        _angular_core.Input('aria-labelledby'), 
	        __metadata$27('design:type', String)
	    ], MdCheckbox.prototype, "ariaLabelledby", void 0);
	    __decorate$27([
	        _angular_core.Input(), 
	        __metadata$27('design:type', String)
	    ], MdCheckbox.prototype, "id", void 0);
	    __decorate$27([
	        _angular_core.Input(), 
	        __metadata$27('design:type', Boolean)
	    ], MdCheckbox.prototype, "disableRipple", null);
	    __decorate$27([
	        _angular_core.Input(), 
	        __metadata$27('design:type', Boolean)
	    ], MdCheckbox.prototype, "required", null);
	    __decorate$27([
	        _angular_core.Input(), 
	        __metadata$27('design:type', Object)
	    ], MdCheckbox.prototype, "align", null);
	    __decorate$27([
	        _angular_core.Input(), 
	        __metadata$27('design:type', Object)
	    ], MdCheckbox.prototype, "labelPosition", void 0);
	    __decorate$27([
	        _angular_core.Input(), 
	        __metadata$27('design:type', Boolean)
	    ], MdCheckbox.prototype, "disabled", null);
	    __decorate$27([
	        _angular_core.Input(), 
	        __metadata$27('design:type', Number)
	    ], MdCheckbox.prototype, "tabindex", void 0);
	    __decorate$27([
	        _angular_core.Input(), 
	        __metadata$27('design:type', String)
	    ], MdCheckbox.prototype, "name", void 0);
	    __decorate$27([
	        _angular_core.Output(), 
	        __metadata$27('design:type', _angular_core.EventEmitter)
	    ], MdCheckbox.prototype, "change", void 0);
	    __decorate$27([
	        _angular_core.ViewChild('input'), 
	        __metadata$27('design:type', _angular_core.ElementRef)
	    ], MdCheckbox.prototype, "_inputElement", void 0);
	    __decorate$27([
	        _angular_core.Input(), 
	        __metadata$27('design:type', Object)
	    ], MdCheckbox.prototype, "checked", null);
	    __decorate$27([
	        _angular_core.Input(), 
	        __metadata$27('design:type', Object)
	    ], MdCheckbox.prototype, "indeterminate", null);
	    __decorate$27([
	        _angular_core.Input(), 
	        __metadata$27('design:type', String)
	    ], MdCheckbox.prototype, "color", null);
	    MdCheckbox = __decorate$27([
	        _angular_core.Component({selector: 'md-checkbox, mat-checkbox',
	            template: "<label class=\"md-checkbox-layout\"><div class=\"md-checkbox-inner-container\"><input #input class=\"md-checkbox-input cdk-visually-hidden\" type=\"checkbox\" [id]=\"inputId\" [required]=\"required\" [checked]=\"checked\" [disabled]=\"disabled\" [name]=\"name\" [tabIndex]=\"tabindex\" [indeterminate]=\"indeterminate\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledby\" (focus)=\"_onInputFocus()\" (blur)=\"_onInputBlur()\" (change)=\"_onInteractionEvent($event)\" (click)=\"_onInputClick($event)\"><div md-ripple *ngIf=\"!_isRippleDisabled()\" class=\"md-checkbox-ripple\" [mdRippleTrigger]=\"_getHostElement()\" [mdRippleCentered]=\"true\" [mdRippleSpeedFactor]=\"0.3\" mdRippleBackgroundColor=\"rgba(0, 0, 0, 0)\"></div><div class=\"md-checkbox-frame\"></div><div class=\"md-checkbox-background\"><svg version=\"1.1\" class=\"md-checkbox-checkmark\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" xml:space=\"preserve\"><path class=\"md-checkbox-checkmark-path\" fill=\"none\" stroke=\"white\" d=\"M4.1,12.7 9,17.6 20.3,6.3\"/></svg><div class=\"md-checkbox-mixedmark\"></div></div></div><span class=\"md-checkbox-label\"><ng-content></ng-content></span></label>",
	            styles: [".md-checkbox-frame,.md-checkbox-unchecked .md-checkbox-background{background-color:transparent}@keyframes md-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes md-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes md-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.91026}50%{animation-timing-function:cubic-bezier(0,0,.2,.1)}100%{stroke-dashoffset:0}}@keyframes md-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0,0,0,1)}100%{transform:scaleX(1)}}@keyframes md-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(.4,0,1,1);stroke-dashoffset:0}to{stroke-dashoffset:-22.91026}}@keyframes md-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(45deg)}}@keyframes md-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes md-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0)}}@keyframes md-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(315deg)}}@keyframes md-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}100%,32.8%{opacity:0;transform:scaleX(0)}}.md-checkbox-background,.md-checkbox-checkmark,.md-checkbox-frame{bottom:0;left:0;position:absolute;right:0;top:0}.md-checkbox-checkmark,.md-checkbox-mixedmark{width:calc(100% - 4px)}.md-checkbox-background,.md-checkbox-frame{border-radius:2px;box-sizing:border-box;pointer-events:none}md-checkbox{cursor:pointer;transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1)}.md-checkbox-layout{cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex}.md-checkbox-inner-container{display:inline-block;height:20px;line-height:0;margin:auto 8px auto auto;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:20px;flex-shrink:0}[dir=rtl] .md-checkbox-inner-container{margin-left:8px;margin-right:auto}.md-checkbox-layout .md-checkbox-label{line-height:24px}.md-checkbox-frame{border:2px solid;transition:border-color 90ms cubic-bezier(0,0,.2,.1);will-change:border-color}.md-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0,0,.2,.1),opacity 90ms cubic-bezier(0,0,.2,.1);will-change:background-color,opacity}.md-checkbox-checkmark{width:100%}.md-checkbox-checkmark-path{stroke-dashoffset:22.91026;stroke-dasharray:22.91026;stroke-width:2.67px}.md-checkbox-checked .md-checkbox-checkmark-path,.md-checkbox-indeterminate .md-checkbox-checkmark-path{stroke-dashoffset:0}.md-checkbox-mixedmark{height:2px;opacity:0;transform:scaleX(0) rotate(0)}.md-checkbox-label-before .md-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .md-checkbox-label-before .md-checkbox-inner-container{margin-left:auto;margin-right:8px}.md-checkbox-checked .md-checkbox-checkmark{opacity:1}.md-checkbox-checked .md-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.md-checkbox-indeterminate .md-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.md-checkbox-indeterminate .md-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0)}.md-checkbox-disabled{cursor:default}.md-checkbox-anim-unchecked-checked .md-checkbox-background{animation:180ms linear 0s md-checkbox-fade-in-background}.md-checkbox-anim-unchecked-checked .md-checkbox-checkmark-path{animation:180ms linear 0s md-checkbox-unchecked-checked-checkmark-path}.md-checkbox-anim-unchecked-indeterminate .md-checkbox-background{animation:180ms linear 0s md-checkbox-fade-in-background}.md-checkbox-anim-unchecked-indeterminate .md-checkbox-mixedmark{animation:90ms linear 0s md-checkbox-unchecked-indeterminate-mixedmark}.md-checkbox-anim-checked-unchecked .md-checkbox-background{animation:180ms linear 0s md-checkbox-fade-out-background}.md-checkbox-anim-checked-unchecked .md-checkbox-checkmark-path{animation:90ms linear 0s md-checkbox-checked-unchecked-checkmark-path}.md-checkbox-anim-checked-indeterminate .md-checkbox-checkmark{animation:90ms linear 0s md-checkbox-checked-indeterminate-checkmark}.md-checkbox-anim-checked-indeterminate .md-checkbox-mixedmark{animation:90ms linear 0s md-checkbox-checked-indeterminate-mixedmark}.md-checkbox-anim-indeterminate-checked .md-checkbox-checkmark{animation:.5s linear 0s md-checkbox-indeterminate-checked-checkmark}.md-checkbox-anim-indeterminate-checked .md-checkbox-mixedmark{animation:.5s linear 0s md-checkbox-indeterminate-checked-mixedmark}.md-checkbox-anim-indeterminate-unchecked .md-checkbox-background{animation:180ms linear 0s md-checkbox-fade-out-background}.md-checkbox-anim-indeterminate-unchecked .md-checkbox-mixedmark{animation:.3s linear 0s md-checkbox-indeterminate-unchecked-mixedmark}.md-checkbox-input{bottom:0;left:50%}.md-checkbox-ripple{position:absolute;left:-15px;top:-15px;right:-15px;bottom:-15px;border-radius:50%;z-index:1;pointer-events:none}"],
	            host: {
	                '[class.md-checkbox-indeterminate]': 'indeterminate',
	                '[class.md-checkbox-checked]': 'checked',
	                '[class.md-checkbox-disabled]': 'disabled',
	                '[class.md-checkbox-label-before]': 'labelPosition == "before"',
	                '[class.md-checkbox-focused]': '_hasFocus',
	            },
	            providers: [MD_CHECKBOX_CONTROL_VALUE_ACCESSOR],
	            encapsulation: _angular_core.ViewEncapsulation.None,
	            changeDetection: _angular_core.ChangeDetectionStrategy.OnPush
	        }), 
	        __metadata$27('design:paramtypes', [_angular_core.Renderer, _angular_core.ElementRef, _angular_core.ChangeDetectorRef])
	    ], MdCheckbox);
	    return MdCheckbox;
	}());
	var MdCheckboxModule = (function () {
	    function MdCheckboxModule() {
	    }
	    MdCheckboxModule.forRoot = function () {
	        return {
	            ngModule: MdCheckboxModule,
	            providers: [ViewportRuler]
	        };
	    };
	    MdCheckboxModule = __decorate$27([
	        _angular_core.NgModule({
	            imports: [_angular_common.CommonModule, MdRippleModule, DefaultStyleCompatibilityModeModule],
	            exports: [MdCheckbox, DefaultStyleCompatibilityModeModule],
	            declarations: [MdCheckbox],
	        }), 
	        __metadata$27('design:paramtypes', [])
	    ], MdCheckboxModule);
	    return MdCheckboxModule;
	}());
	
	var __decorate$28 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$28 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param$5 = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	/**
	 * Provider Expression that allows md-radio-group to register as a ControlValueAccessor. This
	 * allows it to support [(ngModel)] and ngControl.
	 * @docs-private
	 */
	var MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {
	    provide: _angular_forms.NG_VALUE_ACCESSOR,
	    useExisting: _angular_core.forwardRef(function () { return MdRadioGroup; }),
	    multi: true
	};
	var _uniqueIdCounter$1 = 0;
	/** Change event object emitted by MdRadio and MdRadioGroup. */
	var MdRadioChange = (function () {
	    function MdRadioChange() {
	    }
	    return MdRadioChange;
	}());
	/**
	 * A group of radio buttons. May contain one or more `<md-radio-button>` elements.
	 */
	var MdRadioGroup = (function () {
	    function MdRadioGroup() {
	        /**
	         * Selected value for group. Should equal the value of the selected radio button if there *is*
	         * a corresponding radio button with a matching value. If there is *not* such a corresponding
	         * radio button, this value persists to be applied in case a new radio button is added with a
	         * matching value.
	         */
	        this._value = null;
	        /** The HTML name attribute applied to radio buttons in this group. */
	        this._name = "md-radio-group-" + _uniqueIdCounter$1++;
	        /** Disables all individual radio buttons assigned to this group. */
	        this._disabled = false;
	        /** The currently selected radio button. Should match value. */
	        this._selected = null;
	        /** Whether the `value` has been set to its initial value. */
	        this._isInitialized = false;
	        /** The method to be called in order to update ngModel */
	        this._controlValueAccessorChangeFn = function (value) { };
	        /**
	         * onTouch function registered via registerOnTouch (ControlValueAccessor).
	         * @docs-private
	         */
	        this.onTouched = function () { };
	        /**
	         * Event emitted when the group value changes.
	         * Change events are only emitted when the value changes due to user interaction with
	         * a radio button (the same behavior as `<input type-"radio">`).
	         */
	        this.change = new _angular_core.EventEmitter();
	        /** Child radio buttons. */
	        this._radios = null;
	        /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */
	        this.labelPosition = 'after';
	    }
	    Object.defineProperty(MdRadioGroup.prototype, "name", {
	        /** Name of the radio button group. All radio buttons inside this group will use this name. */
	        get: function () { return this._name; },
	        set: function (value) {
	            this._name = value;
	            this._updateRadioButtonNames();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdRadioGroup.prototype, "align", {
	        /**
	         * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.
	         * @deprecated
	         */
	        get: function () {
	            // align refers to the checkbox relative to the label, while labelPosition refers to the
	            // label relative to the checkbox. As such, they are inverted.
	            return this.labelPosition == 'after' ? 'start' : 'end';
	        },
	        set: function (v) {
	            this.labelPosition = (v == 'start') ? 'after' : 'before';
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdRadioGroup.prototype, "disabled", {
	        /** Whether the radio button is disabled. */
	        get: function () { return this._disabled; },
	        set: function (value) {
	            // The presence of *any* disabled value makes the component disabled, *except* for false.
	            this._disabled = (value != null && value !== false) ? true : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdRadioGroup.prototype, "value", {
	        /** Value of the radio button. */
	        get: function () { return this._value; },
	        set: function (newValue) {
	            if (this._value != newValue) {
	                // Set this before proceeding to ensure no circular loop occurs with selection.
	                this._value = newValue;
	                this._updateSelectedRadioFromValue();
	                this._checkSelectedRadioButton();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MdRadioGroup.prototype._checkSelectedRadioButton = function () {
	        if (this.selected && !this._selected.checked) {
	            this._selected.checked = true;
	        }
	    };
	    Object.defineProperty(MdRadioGroup.prototype, "selected", {
	        /** Whether the radio button is selected. */
	        get: function () { return this._selected; },
	        set: function (selected) {
	            this._selected = selected;
	            this.value = selected ? selected.value : null;
	            this._checkSelectedRadioButton();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Initialize properties once content children are available.
	     * This allows us to propagate relevant attributes to associated buttons.
	     */
	    MdRadioGroup.prototype.ngAfterContentInit = function () {
	        // Mark this component as initialized in AfterContentInit because the initial value can
	        // possibly be set by NgModel on MdRadioGroup, and it is possible that the OnInit of the
	        // NgModel occurs *after* the OnInit of the MdRadioGroup.
	        this._isInitialized = true;
	    };
	    /**
	     * Mark this group as being "touched" (for ngModel). Meant to be called by the contained
	     * radio buttons upon their blur.
	     */
	    MdRadioGroup.prototype._touch = function () {
	        if (this.onTouched) {
	            this.onTouched();
	        }
	    };
	    MdRadioGroup.prototype._updateRadioButtonNames = function () {
	        var _this = this;
	        if (this._radios) {
	            this._radios.forEach(function (radio) {
	                radio.name = _this.name;
	            });
	        }
	    };
	    /** Updates the `selected` radio button from the internal _value state. */
	    MdRadioGroup.prototype._updateSelectedRadioFromValue = function () {
	        var _this = this;
	        // If the value already matches the selected radio, do nothing.
	        var isAlreadySelected = this._selected != null && this._selected.value == this._value;
	        if (this._radios != null && !isAlreadySelected) {
	            this._selected = null;
	            this._radios.forEach(function (radio) {
	                radio.checked = _this.value == radio.value;
	                if (radio.checked) {
	                    _this._selected = radio;
	                }
	            });
	        }
	    };
	    /** Dispatch change event with current selection and group value. */
	    MdRadioGroup.prototype._emitChangeEvent = function () {
	        if (this._isInitialized) {
	            var event_1 = new MdRadioChange();
	            event_1.source = this._selected;
	            event_1.value = this._value;
	            this.change.emit(event_1);
	        }
	    };
	    /**
	     * Sets the model value. Implemented as part of ControlValueAccessor.
	     * @param value
	     */
	    MdRadioGroup.prototype.writeValue = function (value) {
	        this.value = value;
	    };
	    /**
	     * Registers a callback to be triggered when the model value changes.
	     * Implemented as part of ControlValueAccessor.
	     * @param fn Callback to be registered.
	     */
	    MdRadioGroup.prototype.registerOnChange = function (fn) {
	        this._controlValueAccessorChangeFn = fn;
	    };
	    /**
	     * Registers a callback to be triggered when the control is touched.
	     * Implemented as part of ControlValueAccessor.
	     * @param fn Callback to be registered.
	     */
	    MdRadioGroup.prototype.registerOnTouched = function (fn) {
	        this.onTouched = fn;
	    };
	    /**
	     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.
	     * @param isDisabled Whether the control should be disabled.
	     */
	    MdRadioGroup.prototype.setDisabledState = function (isDisabled) {
	        this.disabled = isDisabled;
	    };
	    __decorate$28([
	        _angular_core.Output(), 
	        __metadata$28('design:type', _angular_core.EventEmitter)
	    ], MdRadioGroup.prototype, "change", void 0);
	    __decorate$28([
	        _angular_core.ContentChildren(_angular_core.forwardRef(function () { return MdRadioButton; })), 
	        __metadata$28('design:type', _angular_core.QueryList)
	    ], MdRadioGroup.prototype, "_radios", void 0);
	    __decorate$28([
	        _angular_core.Input(), 
	        __metadata$28('design:type', String)
	    ], MdRadioGroup.prototype, "name", null);
	    __decorate$28([
	        _angular_core.Input(), 
	        __metadata$28('design:type', Object)
	    ], MdRadioGroup.prototype, "align", null);
	    __decorate$28([
	        _angular_core.Input(), 
	        __metadata$28('design:type', Object)
	    ], MdRadioGroup.prototype, "labelPosition", void 0);
	    __decorate$28([
	        _angular_core.Input(), 
	        __metadata$28('design:type', Boolean)
	    ], MdRadioGroup.prototype, "disabled", null);
	    __decorate$28([
	        _angular_core.Input(), 
	        __metadata$28('design:type', Object)
	    ], MdRadioGroup.prototype, "value", null);
	    __decorate$28([
	        _angular_core.Input(), 
	        __metadata$28('design:type', Object)
	    ], MdRadioGroup.prototype, "selected", null);
	    MdRadioGroup = __decorate$28([
	        _angular_core.Directive({
	            selector: 'md-radio-group, mat-radio-group',
	            providers: [MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],
	            host: {
	                'role': 'radiogroup',
	            },
	        }), 
	        __metadata$28('design:paramtypes', [])
	    ], MdRadioGroup);
	    return MdRadioGroup;
	}());
	/**
	 * A radio-button. May be inside of
	 */
	var MdRadioButton = (function () {
	    function MdRadioButton(radioGroup, _elementRef, _renderer, radioDispatcher) {
	        // Assertions. Ideally these should be stripped out by the compiler.
	        // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.
	        var _this = this;
	        this._elementRef = _elementRef;
	        this._renderer = _renderer;
	        this.radioDispatcher = radioDispatcher;
	        /** Whether this radio is checked. */
	        this._checked = false;
	        /** The unique ID for the radio button. */
	        this.id = "md-radio-" + _uniqueIdCounter$1++;
	        /** Value assigned to this radio.*/
	        this._value = null;
	        /**
	         * Event emitted when the checked state of this radio button changes.
	         * Change events are only emitted when the value changes due to user interaction with
	         * the radio button (the same behavior as `<input type-"radio">`).
	         */
	        this.change = new _angular_core.EventEmitter();
	        this.radioGroup = radioGroup;
	        radioDispatcher.listen(function (id, name) {
	            if (id != _this.id && name == _this.name) {
	                _this.checked = false;
	            }
	        });
	    }
	    Object.defineProperty(MdRadioButton.prototype, "disableRipple", {
	        /** Whether the ripple effect for this radio button is disabled. */
	        get: function () { return this._disableRipple; },
	        set: function (value) { this._disableRipple = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdRadioButton.prototype, "inputId", {
	        /** ID of the native input element inside `<md-radio-button>` */
	        get: function () {
	            return this.id + "-input";
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdRadioButton.prototype, "checked", {
	        /** Whether this radio button is checked. */
	        get: function () {
	            return this._checked;
	        },
	        set: function (newCheckedState) {
	            if (this._checked != newCheckedState) {
	                this._checked = newCheckedState;
	                if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {
	                    this.radioGroup.selected = this;
	                }
	                else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {
	                    // When unchecking the selected radio button, update the selected radio
	                    // property on the group.
	                    this.radioGroup.selected = null;
	                }
	                if (newCheckedState) {
	                    // Notify all radio buttons with the same name to un-check.
	                    this.radioDispatcher.notify(this.id, this.name);
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdRadioButton.prototype, "value", {
	        /** The value of this radio button. */
	        get: function () {
	            return this._value;
	        },
	        set: function (value) {
	            if (this._value != value) {
	                this._value = value;
	                if (this.radioGroup != null) {
	                    if (!this.checked) {
	                        // Update checked when the value changed to match the radio group's value
	                        this.checked = this.radioGroup.value == value;
	                    }
	                    if (this.checked) {
	                        this.radioGroup.selected = this;
	                    }
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdRadioButton.prototype, "align", {
	        /**
	         * Whether or not the radio-button should appear before or after the label.
	         * @deprecated
	         */
	        get: function () {
	            // align refers to the checkbox relative to the label, while labelPosition refers to the
	            // label relative to the checkbox. As such, they are inverted.
	            return this.labelPosition == 'after' ? 'start' : 'end';
	        },
	        set: function (v) {
	            this.labelPosition = (v == 'start') ? 'after' : 'before';
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdRadioButton.prototype, "labelPosition", {
	        /** Whether the label should appear after or before the radio button. Defaults to 'after' */
	        get: function () {
	            return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';
	        },
	        set: function (value) {
	            this._labelPosition = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdRadioButton.prototype, "disabled", {
	        /** Whether the radio button is disabled. */
	        get: function () {
	            return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);
	        },
	        set: function (value) {
	            // The presence of *any* disabled value makes the component disabled, *except* for false.
	            this._disabled = (value != null && value !== false) ? true : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MdRadioButton.prototype.ngOnInit = function () {
	        if (this.radioGroup) {
	            // If the radio is inside a radio group, determine if it should be checked
	            this.checked = this.radioGroup.value === this._value;
	            // Copy name from parent radio group
	            this.name = this.radioGroup.name;
	        }
	    };
	    /** Dispatch change event with current value. */
	    MdRadioButton.prototype._emitChangeEvent = function () {
	        var event = new MdRadioChange();
	        event.source = this;
	        event.value = this._value;
	        this.change.emit(event);
	    };
	    MdRadioButton.prototype._isRippleDisabled = function () {
	        return this.disableRipple || this.disabled;
	    };
	    /**
	     * We use a hidden native input field to handle changes to focus state via keyboard navigation,
	     * with visual rendering done separately. The native element is kept in sync with the overall
	     * state of the component.
	     */
	    MdRadioButton.prototype._onInputFocus = function () {
	        this._isFocused = true;
	    };
	    /** Focuses the radio button. */
	    MdRadioButton.prototype.focus = function () {
	        this._renderer.invokeElementMethod(this._inputElement.nativeElement, 'focus');
	        this._onInputFocus();
	    };
	    MdRadioButton.prototype._onInputBlur = function () {
	        this._isFocused = false;
	        if (this.radioGroup) {
	            this.radioGroup._touch();
	        }
	    };
	    MdRadioButton.prototype._onInputClick = function (event) {
	        // We have to stop propagation for click events on the visual hidden input element.
	        // By default, when a user clicks on a label element, a generated click event will be
	        // dispatched on the associated input element. Since we are using a label element as our
	        // root container, the click event on the `radio-button` will be executed twice.
	        // The real click event will bubble up, and the generated click event also tries to bubble up.
	        // This will lead to multiple click events.
	        // Preventing bubbling for the second event will solve that issue.
	        event.stopPropagation();
	    };
	    /**
	     * Triggered when the radio button received a click or the input recognized any change.
	     * Clicking on a label element, will trigger a change event on the associated input.
	     */
	    MdRadioButton.prototype._onInputChange = function (event) {
	        // We always have to stop propagation on the change event.
	        // Otherwise the change event, from the input element, will bubble up and
	        // emit its event object to the `change` output.
	        event.stopPropagation();
	        var groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;
	        this.checked = true;
	        this._emitChangeEvent();
	        if (this.radioGroup) {
	            this.radioGroup._controlValueAccessorChangeFn(this.value);
	            this.radioGroup._touch();
	            if (groupValueChanged) {
	                this.radioGroup._emitChangeEvent();
	            }
	        }
	    };
	    MdRadioButton.prototype._getHostElement = function () {
	        return this._elementRef.nativeElement;
	    };
	    __decorate$28([
	        _angular_core.HostBinding('class.md-radio-focused'), 
	        __metadata$28('design:type', Boolean)
	    ], MdRadioButton.prototype, "_isFocused", void 0);
	    __decorate$28([
	        _angular_core.HostBinding('id'),
	        _angular_core.Input(), 
	        __metadata$28('design:type', String)
	    ], MdRadioButton.prototype, "id", void 0);
	    __decorate$28([
	        _angular_core.Input(), 
	        __metadata$28('design:type', String)
	    ], MdRadioButton.prototype, "name", void 0);
	    __decorate$28([
	        _angular_core.Input('aria-label'), 
	        __metadata$28('design:type', String)
	    ], MdRadioButton.prototype, "ariaLabel", void 0);
	    __decorate$28([
	        _angular_core.Input('aria-labelledby'), 
	        __metadata$28('design:type', String)
	    ], MdRadioButton.prototype, "ariaLabelledby", void 0);
	    __decorate$28([
	        _angular_core.Input(), 
	        __metadata$28('design:type', Boolean)
	    ], MdRadioButton.prototype, "disableRipple", null);
	    __decorate$28([
	        _angular_core.Output(), 
	        __metadata$28('design:type', _angular_core.EventEmitter)
	    ], MdRadioButton.prototype, "change", void 0);
	    __decorate$28([
	        _angular_core.ViewChild('input'), 
	        __metadata$28('design:type', _angular_core.ElementRef)
	    ], MdRadioButton.prototype, "_inputElement", void 0);
	    __decorate$28([
	        _angular_core.HostBinding('class.md-radio-checked'),
	        _angular_core.Input(), 
	        __metadata$28('design:type', Boolean)
	    ], MdRadioButton.prototype, "checked", null);
	    __decorate$28([
	        _angular_core.Input(), 
	        __metadata$28('design:type', Object)
	    ], MdRadioButton.prototype, "value", null);
	    __decorate$28([
	        _angular_core.Input(), 
	        __metadata$28('design:type', Object)
	    ], MdRadioButton.prototype, "align", null);
	    __decorate$28([
	        _angular_core.Input(), 
	        __metadata$28('design:type', Object)
	    ], MdRadioButton.prototype, "labelPosition", null);
	    __decorate$28([
	        _angular_core.HostBinding('class.md-radio-disabled'),
	        _angular_core.Input(), 
	        __metadata$28('design:type', Boolean)
	    ], MdRadioButton.prototype, "disabled", null);
	    MdRadioButton = __decorate$28([
	        _angular_core.Component({selector: 'md-radio-button, mat-radio-button',
	            template: "<label [attr.for]=\"inputId\" class=\"md-radio-label\"><div class=\"md-radio-container\"><div class=\"md-radio-outer-circle\"></div><div class=\"md-radio-inner-circle\"></div><div md-ripple *ngIf=\"!_isRippleDisabled()\" class=\"md-radio-ripple\" [mdRippleTrigger]=\"_getHostElement()\" [mdRippleCentered]=\"true\" [mdRippleSpeedFactor]=\"0.3\" mdRippleBackgroundColor=\"rgba(0, 0, 0, 0)\"></div></div><input #input class=\"md-radio-input cdk-visually-hidden\" type=\"radio\" [id]=\"inputId\" [checked]=\"checked\" [disabled]=\"disabled\" [name]=\"name\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledby\" (change)=\"_onInputChange($event)\" (focus)=\"_onInputFocus()\" (blur)=\"_onInputBlur()\" (click)=\"_onInputClick($event)\"><div class=\"md-radio-label-content\" [class.md-radio-label-before]=\"labelPosition == 'before'\"><ng-content></ng-content></div></label>",
	            styles: ["md-radio-button{display:inline-block}.md-radio-label{cursor:pointer;display:inline-flex;align-items:baseline;white-space:nowrap}.md-radio-container{box-sizing:border-box;display:inline-block;height:20px;position:relative;width:20px;top:2px}.md-radio-inner-circle,.md-radio-outer-circle{box-sizing:border-box;height:20px;left:0;top:0;width:20px;position:absolute}.md-radio-outer-circle{border:2px solid;border-radius:50%;transition:border-color ease 280ms}.md-radio-inner-circle{border-radius:50%;transition:transform ease 280ms,background-color ease 280ms;transform:scale(0)}.md-radio-checked .md-radio-inner-circle{transform:scale(.5)}.md-radio-label-content{display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .md-radio-label-content{padding-right:8px;padding-left:0}.md-radio-label-content.md-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .md-radio-label-content.md-radio-label-before{padding-right:0;padding-left:8px}.md-radio-disabled,.md-radio-disabled .md-radio-label{cursor:default}.md-radio-ripple{position:absolute;left:-15px;top:-15px;right:-15px;bottom:-15px;border-radius:50%;z-index:1;pointer-events:none}"],
	            encapsulation: _angular_core.ViewEncapsulation.None
	        }),
	        __param$5(0, _angular_core.Optional()), 
	        __metadata$28('design:paramtypes', [MdRadioGroup, _angular_core.ElementRef, _angular_core.Renderer, UniqueSelectionDispatcher])
	    ], MdRadioButton);
	    return MdRadioButton;
	}());
	var MdRadioModule = (function () {
	    function MdRadioModule() {
	    }
	    MdRadioModule.forRoot = function () {
	        return {
	            ngModule: MdRadioModule,
	            providers: [UniqueSelectionDispatcher, ViewportRuler],
	        };
	    };
	    MdRadioModule = __decorate$28([
	        _angular_core.NgModule({
	            imports: [_angular_common.CommonModule, MdRippleModule, DefaultStyleCompatibilityModeModule],
	            exports: [MdRadioGroup, MdRadioButton, DefaultStyleCompatibilityModeModule],
	            declarations: [MdRadioGroup, MdRadioButton],
	        }), 
	        __metadata$28('design:paramtypes', [])
	    ], MdRadioModule);
	    return MdRadioModule;
	}());
	
	var __decorate$31 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$31 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/**
	 * Option IDs need to be unique across components, so this counter exists outside of
	 * the component definition.
	 */
	var _uniqueIdCounter$2 = 0;
	/**
	 * Single option inside of a `<md-select>` element.
	 */
	var MdOption = (function () {
	    function MdOption(_element, _renderer) {
	        this._element = _element;
	        this._renderer = _renderer;
	        this._selected = false;
	        /** Whether the option is disabled.  */
	        this._disabled = false;
	        this._id = "md-select-option-" + _uniqueIdCounter$2++;
	        /** Event emitted when the option is selected. */
	        this.onSelect = new _angular_core.EventEmitter();
	    }
	    Object.defineProperty(MdOption.prototype, "id", {
	        /** The unique ID of the option. */
	        get: function () { return this._id; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdOption.prototype, "disabled", {
	        /** Whether the option is disabled. */
	        get: function () { return this._disabled; },
	        set: function (value) { this._disabled = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdOption.prototype, "selected", {
	        /** Whether or not the option is currently selected. */
	        get: function () {
	            return this._selected;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdOption.prototype, "viewValue", {
	        /**
	         * The displayed value of the option. It is necessary to show the selected option in the
	         * select's trigger.
	         */
	        get: function () {
	            // TODO(kara): Add input property alternative for node envs.
	            return this._getHostElement().textContent.trim();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /** Selects the option. */
	    MdOption.prototype.select = function () {
	        this._selected = true;
	        this.onSelect.emit();
	    };
	    /** Deselects the option. */
	    MdOption.prototype.deselect = function () {
	        this._selected = false;
	    };
	    /** Sets focus onto this option. */
	    MdOption.prototype.focus = function () {
	        this._renderer.invokeElementMethod(this._getHostElement(), 'focus');
	    };
	    /** Ensures the option is selected when activated from the keyboard. */
	    MdOption.prototype._handleKeydown = function (event) {
	        if (event.keyCode === ENTER || event.keyCode === SPACE) {
	            this._selectViaInteraction();
	        }
	    };
	    /**
	     * Selects the option while indicating the selection came from the user. Used to
	     * determine if the select's view -> model callback should be invoked.
	     */
	    MdOption.prototype._selectViaInteraction = function () {
	        if (!this.disabled) {
	            this._selected = true;
	            this.onSelect.emit(true);
	        }
	    };
	    /** Returns the correct tabindex for the option depending on disabled state. */
	    MdOption.prototype._getTabIndex = function () {
	        return this.disabled ? '-1' : '0';
	    };
	    MdOption.prototype._getHostElement = function () {
	        return this._element.nativeElement;
	    };
	    __decorate$31([
	        _angular_core.Input(), 
	        __metadata$31('design:type', Object)
	    ], MdOption.prototype, "value", void 0);
	    __decorate$31([
	        _angular_core.Input(), 
	        __metadata$31('design:type', Object)
	    ], MdOption.prototype, "disabled", null);
	    __decorate$31([
	        _angular_core.Output(), 
	        __metadata$31('design:type', Object)
	    ], MdOption.prototype, "onSelect", void 0);
	    MdOption = __decorate$31([
	        _angular_core.Component({selector: 'md-option, mat-option',
	            host: {
	                'role': 'option',
	                '[attr.tabindex]': '_getTabIndex()',
	                '[class.md-selected]': 'selected',
	                '[id]': 'id',
	                '[attr.aria-selected]': 'selected.toString()',
	                '[attr.aria-disabled]': 'disabled.toString()',
	                '[class.md-option-disabled]': 'disabled',
	                '(click)': '_selectViaInteraction()',
	                '(keydown)': '_handleKeydown($event)'
	            },
	            template: "<ng-content></ng-content><div class=\"md-option-ripple\" *ngIf=\"!disabled\" md-ripple mdRippleBackgroundColor=\"rgba(0,0,0,0)\" [mdRippleTrigger]=\"_getHostElement()\"></div>",
	            styles: [".md-select-value,md-option{white-space:nowrap;text-overflow:ellipsis}md-select{display:inline-block;outline:0}.md-select-trigger{display:flex;justify-content:space-between;align-items:center;height:30px;min-width:112px;cursor:pointer;position:relative;box-sizing:border-box}[aria-disabled=true] .md-select-trigger{background-image:linear-gradient(to right,rgba(0,0,0,.26) 0,rgba(0,0,0,.26) 33%,transparent 0);background-size:4px 1px;background-repeat:repeat-x;border-bottom:transparent;background-position:0 bottom;cursor:default;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.md-select-placeholder{position:relative;padding:0 2px;transform-origin:left top}.md-select-placeholder.md-floating-placeholder{top:-22px;left:-2px;transform:scale(.75)}[dir=rtl] .md-select-placeholder{transform-origin:right top}[dir=rtl] .md-select-placeholder.md-floating-placeholder{left:2px}[aria-required=true] .md-select-placeholder::after{content:'*'}.md-select-value{position:absolute;overflow-x:hidden;left:0;top:6px}[dir=rtl] .md-select-value{left:auto;right:0}.md-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.md-select-panel{box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12);min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px}@media screen and (-ms-high-contrast:active){.md-select-panel{outline:solid 1px}.md-option-ripple{opacity:.5}}md-option{overflow-x:hidden;display:flex;flex-direction:row;align-items:center;height:48px;padding:0 16px;font-size:16px;font-family:Roboto,\"Helvetica Neue\",sans-serif;text-align:start;text-decoration:none;position:relative;cursor:pointer;outline:0}md-option[disabled]{cursor:default}md-option md-icon{margin-right:16px}[dir=rtl] md-option md-icon{margin-left:16px}md-option[aria-disabled=true]{cursor:default;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.md-option-ripple{position:absolute;top:0;left:0;bottom:0;right:0}"],
	            encapsulation: _angular_core.ViewEncapsulation.None
	        }), 
	        __metadata$31('design:paramtypes', [_angular_core.ElementRef, _angular_core.Renderer])
	    ], MdOption);
	    return MdOption;
	}());
	
	/**
	 * This class manages keyboard events for selectable lists. If you pass it a query list
	 * of focusable items, it will focus the correct item when arrow events occur.
	 */
	var ListKeyManager = (function () {
	    function ListKeyManager(_items) {
	        this._items = _items;
	        this._tabOut = new rxjs_Subject.Subject();
	        this._wrap = false;
	    }
	    /**
	     * Turns on focus wrapping mode, which ensures that the focus will wrap to
	     * the other end of list when there are no more items in the given direction.
	     *
	     * @returns The ListKeyManager that the method was called on.
	     */
	    ListKeyManager.prototype.withFocusWrap = function () {
	        this._wrap = true;
	        return this;
	    };
	    /**
	     * Sets the focus of the list to the item at the index specified.
	     *
	     * @param index The index of the item to be focused.
	     */
	    ListKeyManager.prototype.setFocus = function (index) {
	        this._focusedItemIndex = index;
	        this._items.toArray()[index].focus();
	    };
	    /**
	     * Sets the focus depending on the key event passed in.
	     * @param event Keyboard event to be used for determining which element to focus.
	     */
	    ListKeyManager.prototype.onKeydown = function (event) {
	        switch (event.keyCode) {
	            case DOWN_ARROW:
	                this.focusNextItem();
	                break;
	            case UP_ARROW:
	                this.focusPreviousItem();
	                break;
	            case HOME:
	                this.focusFirstItem();
	                break;
	            case END:
	                this.focusLastItem();
	                break;
	            case TAB:
	                // Note that we shouldn't prevent the default action on tab.
	                this._tabOut.next(null);
	                return;
	            default:
	                return;
	        }
	        event.preventDefault();
	    };
	    /** Focuses the first enabled item in the list. */
	    ListKeyManager.prototype.focusFirstItem = function () {
	        this._setFocusByIndex(0, 1);
	    };
	    /** Focuses the last enabled item in the list. */
	    ListKeyManager.prototype.focusLastItem = function () {
	        this._setFocusByIndex(this._items.length - 1, -1);
	    };
	    /** Focuses the next enabled item in the list. */
	    ListKeyManager.prototype.focusNextItem = function () {
	        this._setFocusByDelta(1);
	    };
	    /** Focuses a previous enabled item in the list. */
	    ListKeyManager.prototype.focusPreviousItem = function () {
	        this._setFocusByDelta(-1);
	    };
	    Object.defineProperty(ListKeyManager.prototype, "focusedItemIndex", {
	        /** Returns the index of the currently focused item. */
	        get: function () {
	            return this._focusedItemIndex;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Allows setting of the focusedItemIndex without focusing the item.
	     * @param index The new focusedItemIndex.
	     */
	    ListKeyManager.prototype.updateFocusedItemIndex = function (index) {
	        this._focusedItemIndex = index;
	    };
	    Object.defineProperty(ListKeyManager.prototype, "tabOut", {
	        /**
	         * Observable that emits any time the TAB key is pressed, so components can react
	         * when focus is shifted off of the list.
	         */
	        get: function () {
	            return this._tabOut.asObservable();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * This method sets focus to the correct item, given a list of items and the delta
	     * between the currently focused item and the new item to be focused. It will calculate
	     * the proper focus differently depending on whether wrap mode is turned on.
	     */
	    ListKeyManager.prototype._setFocusByDelta = function (delta, items) {
	        if (items === void 0) { items = this._items.toArray(); }
	        this._wrap ? this._setWrapModeFocus(delta, items)
	            : this._setDefaultModeFocus(delta, items);
	    };
	    /**
	     * Sets the focus properly given "wrap" mode. In other words, it will continue to move
	     * down the list until it finds an item that is not disabled, and it will wrap if it
	     * encounters either end of the list.
	     */
	    ListKeyManager.prototype._setWrapModeFocus = function (delta, items) {
	        // when focus would leave menu, wrap to beginning or end
	        this._focusedItemIndex =
	            (this._focusedItemIndex + delta + items.length) % items.length;
	        // skip all disabled menu items recursively until an active one is reached
	        if (items[this._focusedItemIndex].disabled) {
	            this._setWrapModeFocus(delta, items);
	        }
	        else {
	            items[this._focusedItemIndex].focus();
	        }
	    };
	    /**
	     * Sets the focus properly given the default mode. In other words, it will
	     * continue to move down the list until it finds an item that is not disabled. If
	     * it encounters either end of the list, it will stop and not wrap.
	     */
	    ListKeyManager.prototype._setDefaultModeFocus = function (delta, items) {
	        this._setFocusByIndex(this._focusedItemIndex + delta, delta, items);
	    };
	    /**
	     * Sets the focus to the first enabled item starting at the index specified. If the
	     * item is disabled, it will move in the fallbackDelta direction until it either
	     * finds an enabled item or encounters the end of the list.
	     */
	    ListKeyManager.prototype._setFocusByIndex = function (index, fallbackDelta, items) {
	        if (items === void 0) { items = this._items.toArray(); }
	        if (!items[index]) {
	            return;
	        }
	        while (items[index].disabled) {
	            index += fallbackDelta;
	            if (!items[index]) {
	                return;
	            }
	        }
	        this.setFocus(index);
	    };
	    return ListKeyManager;
	}());
	
	/**
	 * The following are all the animations for the md-select component, with each
	 * const containing the metadata for one animation.
	 *
	 * The values below match the implementation of the Material 1 md-select animation.
	 */
	/**
	 * This animation shrinks the placeholder text to 75% of its normal size and translates
	 * it to either the top left corner (ltr) or top right corner (rtl) of the trigger,
	 * depending on the text direction of the application.
	 */
	var transformPlaceholder = _angular_core.trigger('transformPlaceholder', [
	    _angular_core.state('floating-ltr', _angular_core.style({
	        top: '-22px',
	        left: '-2px',
	        transform: "scale(0.75)"
	    })),
	    _angular_core.state('floating-rtl', _angular_core.style({
	        top: '-22px',
	        left: '2px',
	        transform: "scale(0.75)"
	    })),
	    _angular_core.transition('* => *', _angular_core.animate("400ms cubic-bezier(0.25, 0.8, 0.25, 1)"))
	]);
	/**
	 * This animation transforms the select's overlay panel on and off the page.
	 *
	 * When the panel is attached to the DOM, it expands its width 32px, scales it up to
	 * 100% on the Y axis, fades in its border, and translates slightly up and to the
	 * side to ensure the option text correctly overlaps the trigger text.
	 *
	 * When the panel is removed from the DOM, it simply fades out linearly.
	 */
	var transformPanel = _angular_core.trigger('transformPanel', [
	    _angular_core.state('showing', _angular_core.style({
	        opacity: 1,
	        minWidth: 'calc(100% + 32px)',
	        transform: "translate3d(0,0,0) scaleY(1)"
	    })),
	    _angular_core.transition('void => *', [
	        _angular_core.style({
	            opacity: 0,
	            minWidth: '100%',
	            transform: "translate3d(0, 0, 0) scaleY(0)"
	        }),
	        _angular_core.animate("150ms cubic-bezier(0.25, 0.8, 0.25, 1)")
	    ]),
	    _angular_core.transition('* => void', [
	        _angular_core.animate('250ms 100ms linear', _angular_core.style({ opacity: 0 }))
	    ])
	]);
	/**
	 * This animation fades in the background color and text content of the
	 * select's options. It is time delayed to occur 100ms after the overlay
	 * panel has transformed in.
	 */
	var fadeInContent = _angular_core.trigger('fadeInContent', [
	    _angular_core.state('showing', _angular_core.style({ opacity: 1 })),
	    _angular_core.transition('void => showing', [
	        _angular_core.style({ opacity: 0 }),
	        _angular_core.animate("150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)")
	    ])
	]);
	
	var __decorate$30 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$30 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param$6 = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	/**
	 * The following style constants are necessary to save here in order
	 * to properly calculate the alignment of the selected option over
	 * the trigger element.
	 */
	/** The fixed height of every option element. */
	var SELECT_OPTION_HEIGHT = 48;
	/** The max height of the select's overlay panel */
	var SELECT_PANEL_MAX_HEIGHT = 256;
	/** The max number of options visible at once in the select panel. */
	var SELECT_MAX_OPTIONS_DISPLAYED = 5;
	/** The fixed height of the select's trigger element. */
	var SELECT_TRIGGER_HEIGHT = 30;
	/**
	 * Must adjust for the difference in height between the option and the trigger,
	 * so the text will align on the y axis.
	 * (SELECT_OPTION_HEIGHT (48) - SELECT_TRIGGER_HEIGHT (30)) / 2 = 9
	 */
	var SELECT_OPTION_HEIGHT_ADJUSTMENT = 9;
	/** The panel's padding on the x-axis */
	var SELECT_PANEL_PADDING_X = 16;
	/**
	 * The panel's padding on the y-axis. This padding indicates there are more
	 * options available if you scroll.
	 */
	var SELECT_PANEL_PADDING_Y = 16;
	/**
	 * The select panel will only "fit" inside the viewport if it is positioned at
	 * this value or more away from the viewport boundary.
	 */
	var SELECT_PANEL_VIEWPORT_PADDING = 8;
	var MdSelect = (function () {
	    function MdSelect(_element, _renderer, _viewportRuler, _dir, _control) {
	        this._element = _element;
	        this._renderer = _renderer;
	        this._viewportRuler = _viewportRuler;
	        this._dir = _dir;
	        this._control = _control;
	        /** Whether or not the overlay panel is open. */
	        this._panelOpen = false;
	        /** Subscriptions to option events. */
	        this._subscriptions = [];
	        /** Whether filling out the select is required in the form.  */
	        this._required = false;
	        /** Whether the select is disabled.  */
	        this._disabled = false;
	        /** The scroll position of the overlay panel, calculated to center the selected option. */
	        this._scrollTop = 0;
	        /** The animation state of the placeholder. */
	        this._placeholderState = '';
	        /** View -> model callback called when value changes */
	        this._onChange = function (value) { };
	        /** View -> model callback called when select has been touched */
	        this._onTouched = function () { };
	        /** The IDs of child options to be passed to the aria-owns attribute. */
	        this._optionIds = '';
	        /** The value of the select panel's transform-origin property. */
	        this._transformOrigin = 'top';
	        /**
	         * The x-offset of the overlay panel in relation to the trigger's top start corner.
	         * This must be adjusted to align the selected option text over the trigger text when
	         * the panel opens. Will change based on LTR or RTL text direction.
	         */
	        this._offsetX = 0;
	        /**
	         * The y-offset of the overlay panel in relation to the trigger's top start corner.
	         * This must be adjusted to align the selected option text over the trigger text.
	         * when the panel opens. Will change based on the y-position of the selected option.
	         */
	        this._offsetY = 0;
	        /**
	         * This position config ensures that the top "start" corner of the overlay
	         * is aligned with with the top "start" of the origin by default (overlapping
	         * the trigger completely). If the panel cannot fit below the trigger, it
	         * will fall back to a position above the trigger.
	         */
	        this._positions = [
	            {
	                originX: 'start',
	                originY: 'top',
	                overlayX: 'start',
	                overlayY: 'top',
	            },
	            {
	                originX: 'start',
	                originY: 'bottom',
	                overlayX: 'start',
	                overlayY: 'bottom',
	            },
	        ];
	        /** Event emitted when the select has been opened. */
	        this.onOpen = new _angular_core.EventEmitter();
	        /** Event emitted when the select has been closed. */
	        this.onClose = new _angular_core.EventEmitter();
	        if (this._control) {
	            this._control.valueAccessor = this;
	        }
	    }
	    Object.defineProperty(MdSelect.prototype, "placeholder", {
	        /** Placeholder to be shown if no value has been selected. */
	        get: function () { return this._placeholder; },
	        set: function (value) {
	            var _this = this;
	            this._placeholder = value;
	            // Must wait to record the trigger width to ensure placeholder width is included.
	            Promise.resolve(null).then(function () { return _this._triggerWidth = _this._getWidth(); });
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSelect.prototype, "disabled", {
	        /** Whether the component is disabled. */
	        get: function () { return this._disabled; },
	        set: function (value) {
	            this._disabled = coerceBooleanProperty(value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSelect.prototype, "required", {
	        /** Whether the component is required. */
	        get: function () { return this._required; },
	        set: function (value) { this._required = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    MdSelect.prototype.ngAfterContentInit = function () {
	        var _this = this;
	        this._initKeyManager();
	        this._resetOptions();
	        this._changeSubscription = this.options.changes.subscribe(function () { return _this._resetOptions(); });
	    };
	    MdSelect.prototype.ngOnDestroy = function () {
	        this._dropSubscriptions();
	        this._changeSubscription.unsubscribe();
	        this._tabSubscription.unsubscribe();
	    };
	    /** Toggles the overlay panel open or closed. */
	    MdSelect.prototype.toggle = function () {
	        this.panelOpen ? this.close() : this.open();
	    };
	    /** Opens the overlay panel. */
	    MdSelect.prototype.open = function () {
	        if (this.disabled) {
	            return;
	        }
	        this._calculateOverlayPosition();
	        this._placeholderState = this._isRtl() ? 'floating-rtl' : 'floating-ltr';
	        this._panelOpen = true;
	    };
	    /** Closes the overlay panel and focuses the host element. */
	    MdSelect.prototype.close = function () {
	        this._panelOpen = false;
	        if (!this._selected) {
	            this._placeholderState = '';
	        }
	        this._focusHost();
	    };
	    /**
	     * Sets the select's value. Part of the ControlValueAccessor interface
	     * required to integrate with Angular's core forms API.
	     *
	     * @param value New value to be written to the model.
	     */
	    MdSelect.prototype.writeValue = function (value) {
	        var _this = this;
	        if (!this.options) {
	            // In reactive forms, writeValue() will be called synchronously before
	            // the select's child options have been created. It's necessary to call
	            // writeValue() again after the options have been created to ensure any
	            // initial view value is set.
	            Promise.resolve(null).then(function () { return _this.writeValue(value); });
	            return;
	        }
	        this._setSelectionByValue(value);
	    };
	    /**
	     * Saves a callback function to be invoked when the select's value
	     * changes from user input. Part of the ControlValueAccessor interface
	     * required to integrate with Angular's core forms API.
	     *
	     * @param fn Callback to be triggered when the value changes.
	     */
	    MdSelect.prototype.registerOnChange = function (fn) {
	        this._onChange = fn;
	    };
	    /**
	     * Saves a callback function to be invoked when the select is blurred
	     * by the user. Part of the ControlValueAccessor interface required
	     * to integrate with Angular's core forms API.
	     *
	     * @param fn Callback to be triggered when the component has been touched.
	     */
	    MdSelect.prototype.registerOnTouched = function (fn) {
	        this._onTouched = fn;
	    };
	    /**
	     * Disables the select. Part of the ControlValueAccessor interface required
	     * to integrate with Angular's core forms API.
	     *
	     * @param isDisabled Sets whether the component is disabled.
	     */
	    MdSelect.prototype.setDisabledState = function (isDisabled) {
	        this.disabled = isDisabled;
	    };
	    Object.defineProperty(MdSelect.prototype, "panelOpen", {
	        /** Whether or not the overlay panel is open. */
	        get: function () {
	            return this._panelOpen;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSelect.prototype, "selected", {
	        /** The currently selected option. */
	        get: function () {
	            return this._selected;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MdSelect.prototype._isRtl = function () {
	        return this._dir ? this._dir.value === 'rtl' : false;
	    };
	    /** The width of the trigger element. This is necessary to match
	     * the overlay width to the trigger width.
	     */
	    MdSelect.prototype._getWidth = function () {
	        return this._getTriggerRect().width;
	    };
	    /** Ensures the panel opens if activated by the keyboard. */
	    MdSelect.prototype._handleKeydown = function (event) {
	        if (event.keyCode === ENTER || event.keyCode === SPACE) {
	            this.open();
	        }
	    };
	    /**
	     * When the panel is finished animating, emits an event and focuses
	     * an option if the panel is open.
	     */
	    MdSelect.prototype._onPanelDone = function () {
	        if (this.panelOpen) {
	            this._focusCorrectOption();
	            this.onOpen.emit();
	        }
	        else {
	            this.onClose.emit();
	        }
	    };
	    /**
	     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will
	     * "blur" to the panel when it opens, causing a false positive.
	     */
	    MdSelect.prototype._onBlur = function () {
	        if (!this.panelOpen) {
	            this._onTouched();
	        }
	    };
	    /** Returns the correct tabindex for the select depending on disabled state. */
	    MdSelect.prototype._getTabIndex = function () {
	        return this.disabled ? '-1' : '0';
	    };
	    /**
	     * Sets the scroll position of the scroll container. This must be called after
	     * the overlay pane is attached or the scroll container element will not yet be
	     * present in the DOM.
	     */
	    MdSelect.prototype._setScrollTop = function () {
	        var scrollContainer = this.overlayDir.overlayRef.overlayElement.querySelector('.md-select-panel');
	        scrollContainer.scrollTop = this._scrollTop;
	    };
	    /**
	     * Sets the selected option based on a value. If no option can be
	     * found with the designated value, the select trigger is cleared.
	     */
	    MdSelect.prototype._setSelectionByValue = function (value) {
	        var options = this.options.toArray();
	        for (var i = 0; i < this.options.length; i++) {
	            if (options[i].value === value) {
	                options[i].select();
	                return;
	            }
	        }
	        // Clear selection if no item was selected.
	        this._clearSelection();
	    };
	    /** Clears the select trigger and deselects every option in the list. */
	    MdSelect.prototype._clearSelection = function () {
	        this._selected = null;
	        this._updateOptions();
	    };
	    MdSelect.prototype._getTriggerRect = function () {
	        return this.trigger.nativeElement.getBoundingClientRect();
	    };
	    /** Sets up a key manager to listen to keyboard events on the overlay panel. */
	    MdSelect.prototype._initKeyManager = function () {
	        var _this = this;
	        this._keyManager = new ListKeyManager(this.options);
	        this._tabSubscription = this._keyManager.tabOut.subscribe(function () {
	            _this.close();
	        });
	    };
	    /** Drops current option subscriptions and IDs and resets from scratch. */
	    MdSelect.prototype._resetOptions = function () {
	        this._dropSubscriptions();
	        this._listenToOptions();
	        this._setOptionIds();
	    };
	    /** Listens to selection events on each option. */
	    MdSelect.prototype._listenToOptions = function () {
	        var _this = this;
	        this.options.forEach(function (option) {
	            var sub = option.onSelect.subscribe(function (isUserInput) {
	                if (isUserInput) {
	                    _this._onChange(option.value);
	                }
	                _this._onSelect(option);
	            });
	            _this._subscriptions.push(sub);
	        });
	    };
	    /** Unsubscribes from all option subscriptions. */
	    MdSelect.prototype._dropSubscriptions = function () {
	        this._subscriptions.forEach(function (sub) { return sub.unsubscribe(); });
	        this._subscriptions = [];
	    };
	    /** Records option IDs to pass to the aria-owns property. */
	    MdSelect.prototype._setOptionIds = function () {
	        this._optionIds = this.options.map(function (option) { return option.id; }).join(' ');
	    };
	    /** When a new option is selected, deselects the others and closes the panel. */
	    MdSelect.prototype._onSelect = function (option) {
	        this._selected = option;
	        this._updateOptions();
	        this._setValueWidth();
	        this._placeholderState = '';
	        if (this.panelOpen) {
	            this.close();
	        }
	    };
	    /** Deselect each option that doesn't match the current selection. */
	    MdSelect.prototype._updateOptions = function () {
	        var _this = this;
	        this.options.forEach(function (option) {
	            if (option !== _this.selected) {
	                option.deselect();
	            }
	        });
	    };
	    /**
	     * Must set the width of the selected option's value programmatically
	     * because it is absolutely positioned and otherwise will not clip
	     * overflow. The selection arrow is 9px wide, add 4px of padding = 13
	     */
	    MdSelect.prototype._setValueWidth = function () {
	        this._selectedValueWidth = this._triggerWidth - 13;
	    };
	    /** Focuses the selected item. If no option is selected, it will focus
	     * the first item instead.
	     */
	    MdSelect.prototype._focusCorrectOption = function () {
	        if (this.selected) {
	            this._keyManager.setFocus(this._getOptionIndex(this.selected));
	        }
	        else {
	            this._keyManager.focusFirstItem();
	        }
	    };
	    /** Focuses the host element when the panel closes. */
	    MdSelect.prototype._focusHost = function () {
	        this._renderer.invokeElementMethod(this._element.nativeElement, 'focus');
	    };
	    /** Gets the index of the provided option in the option list. */
	    MdSelect.prototype._getOptionIndex = function (option) {
	        return this.options.reduce(function (result, current, index) {
	            return result === undefined ? (option === current ? index : undefined) : result;
	        }, undefined);
	    };
	    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */
	    MdSelect.prototype._calculateOverlayPosition = function () {
	        this._offsetX = this._isRtl() ? SELECT_PANEL_PADDING_X : -SELECT_PANEL_PADDING_X;
	        var panelHeight = Math.min(this.options.length * SELECT_OPTION_HEIGHT, SELECT_PANEL_MAX_HEIGHT);
	        var scrollContainerHeight = this.options.length * SELECT_OPTION_HEIGHT;
	        // The farthest the panel can be scrolled before it hits the bottom
	        var maxScroll = scrollContainerHeight - panelHeight;
	        if (this.selected) {
	            var selectedIndex = this._getOptionIndex(this.selected);
	            // We must maintain a scroll buffer so the selected option will be scrolled to the
	            // center of the overlay panel rather than the top.
	            var scrollBuffer = panelHeight / 2;
	            this._scrollTop = this._calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll);
	            this._offsetY = this._calculateOverlayOffset(selectedIndex, scrollBuffer, maxScroll);
	        }
	        else {
	            // If no option is selected, the panel centers on the first option. In this case,
	            // we must only adjust for the height difference between the option element
	            // and the trigger element, then multiply it by -1 to ensure the panel moves
	            // in the correct direction up the page.
	            this._offsetY = (SELECT_OPTION_HEIGHT - SELECT_TRIGGER_HEIGHT) / 2 * -1;
	        }
	        this._checkOverlayWithinViewport(maxScroll);
	    };
	    /**
	     * Calculates the scroll position of the select's overlay panel.
	     *
	     * Attempts to center the selected option in the panel. If the option is
	     * too high or too low in the panel to be scrolled to the center, it clamps the
	     * scroll position to the min or max scroll positions respectively.
	     */
	    MdSelect.prototype._calculateOverlayScroll = function (selectedIndex, scrollBuffer, maxScroll) {
	        var optionOffsetFromScrollTop = SELECT_OPTION_HEIGHT * selectedIndex;
	        var halfOptionHeight = SELECT_OPTION_HEIGHT / 2;
	        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the
	        // scroll container, then subtracts the scroll buffer to scroll the option down to
	        // the center of the overlay panel. Half the option height must be re-added to the
	        // scrollTop so the option is centered based on its middle, not its top edge.
	        var optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;
	        return clampValue(0, optimalScrollPosition, maxScroll);
	    };
	    /**
	     * Calculates the y-offset of the select's overlay panel in relation to the
	     * top start corner of the trigger. It has to be adjusted in order for the
	     * selected option to be aligned over the trigger when the panel opens.
	     */
	    MdSelect.prototype._calculateOverlayOffset = function (selectedIndex, scrollBuffer, maxScroll) {
	        var optionOffsetFromPanelTop;
	        if (this._scrollTop === 0) {
	            optionOffsetFromPanelTop = selectedIndex * SELECT_OPTION_HEIGHT;
	        }
	        else if (this._scrollTop === maxScroll) {
	            var firstDisplayedIndex = this.options.length - SELECT_MAX_OPTIONS_DISPLAYED;
	            var selectedDisplayIndex = selectedIndex - firstDisplayedIndex;
	            // Because the panel height is longer than the height of the options alone,
	            // there is always extra padding at the top or bottom of the panel. When
	            // scrolled to the very bottom, this padding is at the top of the panel and
	            // must be added to the offset.
	            optionOffsetFromPanelTop =
	                selectedDisplayIndex * SELECT_OPTION_HEIGHT + SELECT_PANEL_PADDING_Y;
	        }
	        else {
	            // If the option was scrolled to the middle of the panel using a scroll buffer,
	            // its offset will be the scroll buffer minus the half height that was added to
	            // center it.
	            optionOffsetFromPanelTop = scrollBuffer - SELECT_OPTION_HEIGHT / 2;
	        }
	        // The final offset is the option's offset from the top, adjusted for the height
	        // difference, multiplied by -1 to ensure that the overlay moves in the correct
	        // direction up the page.
	        return optionOffsetFromPanelTop * -1 - SELECT_OPTION_HEIGHT_ADJUSTMENT;
	    };
	    /**
	     * Checks that the attempted overlay position will fit within the viewport.
	     * If it will not fit, tries to adjust the scroll position and the associated
	     * y-offset so the panel can open fully on-screen. If it still won't fit,
	     * sets the offset back to 0 to allow the fallback position to take over.
	     */
	    MdSelect.prototype._checkOverlayWithinViewport = function (maxScroll) {
	        var viewportRect = this._viewportRuler.getViewportRect();
	        var triggerRect = this._getTriggerRect();
	        var topSpaceAvailable = triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;
	        var bottomSpaceAvailable = viewportRect.height - triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;
	        var panelHeightTop = Math.abs(this._offsetY);
	        var totalPanelHeight = Math.min(this.options.length * SELECT_OPTION_HEIGHT, SELECT_PANEL_MAX_HEIGHT);
	        var panelHeightBottom = totalPanelHeight - panelHeightTop - triggerRect.height;
	        if (panelHeightBottom > bottomSpaceAvailable) {
	            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);
	        }
	        else if (panelHeightTop > topSpaceAvailable) {
	            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);
	        }
	        else {
	            this._transformOrigin = this._getOriginBasedOnOption();
	        }
	    };
	    /** Adjusts the overlay panel up to fit in the viewport. */
	    MdSelect.prototype._adjustPanelUp = function (panelHeightBottom, bottomSpaceAvailable) {
	        var distanceBelowViewport = panelHeightBottom - bottomSpaceAvailable;
	        // Scrolls the panel up by the distance it was extending past the boundary, then
	        // adjusts the offset by that amount to move the panel up into the viewport.
	        this._scrollTop -= distanceBelowViewport;
	        this._offsetY -= distanceBelowViewport;
	        this._transformOrigin = this._getOriginBasedOnOption();
	        // If the panel is scrolled to the very top, it won't be able to fit the panel
	        // by scrolling, so set the offset to 0 to allow the fallback position to take
	        // effect.
	        if (this._scrollTop <= 0) {
	            this._scrollTop = 0;
	            this._offsetY = 0;
	            this._transformOrigin = "50% bottom 0px";
	        }
	    };
	    /** Adjusts the overlay panel down to fit in the viewport. */
	    MdSelect.prototype._adjustPanelDown = function (panelHeightTop, topSpaceAvailable, maxScroll) {
	        var distanceAboveViewport = panelHeightTop - topSpaceAvailable;
	        // Scrolls the panel down by the distance it was extending past the boundary, then
	        // adjusts the offset by that amount to move the panel down into the viewport.
	        this._scrollTop += distanceAboveViewport;
	        this._offsetY += distanceAboveViewport;
	        this._transformOrigin = this._getOriginBasedOnOption();
	        // If the panel is scrolled to the very bottom, it won't be able to fit the
	        // panel by scrolling, so set the offset to 0 to allow the fallback position
	        // to take effect.
	        if (this._scrollTop >= maxScroll) {
	            this._scrollTop = maxScroll;
	            this._offsetY = 0;
	            this._transformOrigin = "50% top 0px";
	            return;
	        }
	    };
	    /** Sets the transform origin point based on the selected option. */
	    MdSelect.prototype._getOriginBasedOnOption = function () {
	        var originY = Math.abs(this._offsetY) - SELECT_OPTION_HEIGHT_ADJUSTMENT + SELECT_OPTION_HEIGHT / 2;
	        return "50% " + originY + "px 0px";
	    };
	    __decorate$30([
	        _angular_core.ViewChild('trigger'), 
	        __metadata$30('design:type', _angular_core.ElementRef)
	    ], MdSelect.prototype, "trigger", void 0);
	    __decorate$30([
	        _angular_core.ViewChild(ConnectedOverlayDirective), 
	        __metadata$30('design:type', ConnectedOverlayDirective)
	    ], MdSelect.prototype, "overlayDir", void 0);
	    __decorate$30([
	        _angular_core.ContentChildren(MdOption), 
	        __metadata$30('design:type', _angular_core.QueryList)
	    ], MdSelect.prototype, "options", void 0);
	    __decorate$30([
	        _angular_core.Input(), 
	        __metadata$30('design:type', Object)
	    ], MdSelect.prototype, "placeholder", null);
	    __decorate$30([
	        _angular_core.Input(), 
	        __metadata$30('design:type', Object)
	    ], MdSelect.prototype, "disabled", null);
	    __decorate$30([
	        _angular_core.Input(), 
	        __metadata$30('design:type', Object)
	    ], MdSelect.prototype, "required", null);
	    __decorate$30([
	        _angular_core.Output(), 
	        __metadata$30('design:type', Object)
	    ], MdSelect.prototype, "onOpen", void 0);
	    __decorate$30([
	        _angular_core.Output(), 
	        __metadata$30('design:type', Object)
	    ], MdSelect.prototype, "onClose", void 0);
	    MdSelect = __decorate$30([
	        _angular_core.Component({selector: 'md-select, mat-select',
	            template: "<div class=\"md-select-trigger\" cdk-overlay-origin (click)=\"toggle()\" #origin=\"cdkOverlayOrigin\" #trigger><span class=\"md-select-placeholder\" [class.md-floating-placeholder]=\"this.selected\" [@transformPlaceholder]=\"_placeholderState\" [style.width.px]=\"_selectedValueWidth\">{{ placeholder }} </span><span class=\"md-select-value\" *ngIf=\"selected\">{{ selected?.viewValue }} </span><span class=\"md-select-arrow\"></span></div><template cdk-connected-overlay [origin]=\"origin\" [open]=\"panelOpen\" hasBackdrop (backdropClick)=\"close()\" backdropClass=\"cdk-overlay-transparent-backdrop\" [positions]=\"_positions\" [minWidth]=\"_triggerWidth\" [offsetY]=\"_offsetY\" [offsetX]=\"_offsetX\" (attach)=\"_setScrollTop()\"><div class=\"md-select-panel\" [@transformPanel]=\"'showing'\" (@transformPanel.done)=\"_onPanelDone()\" (keydown)=\"_keyManager.onKeydown($event)\" [style.transformOrigin]=\"_transformOrigin\"><div class=\"md-select-content\" [@fadeInContent]=\"'showing'\"><ng-content></ng-content></div></div></template>",
	            styles: [".md-select-value,md-option{white-space:nowrap;text-overflow:ellipsis}md-select{display:inline-block;outline:0}.md-select-trigger{display:flex;justify-content:space-between;align-items:center;height:30px;min-width:112px;cursor:pointer;position:relative;box-sizing:border-box}[aria-disabled=true] .md-select-trigger{background-image:linear-gradient(to right,rgba(0,0,0,.26) 0,rgba(0,0,0,.26) 33%,transparent 0);background-size:4px 1px;background-repeat:repeat-x;border-bottom:transparent;background-position:0 bottom;cursor:default;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.md-select-placeholder{position:relative;padding:0 2px;transform-origin:left top}.md-select-placeholder.md-floating-placeholder{top:-22px;left:-2px;transform:scale(.75)}[dir=rtl] .md-select-placeholder{transform-origin:right top}[dir=rtl] .md-select-placeholder.md-floating-placeholder{left:2px}[aria-required=true] .md-select-placeholder::after{content:'*'}.md-select-value{position:absolute;overflow-x:hidden;left:0;top:6px}[dir=rtl] .md-select-value{left:auto;right:0}.md-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.md-select-panel{box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12);min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px}@media screen and (-ms-high-contrast:active){.md-select-panel{outline:solid 1px}.md-option-ripple{opacity:.5}}md-option{overflow-x:hidden;display:flex;flex-direction:row;align-items:center;height:48px;padding:0 16px;font-size:16px;font-family:Roboto,\"Helvetica Neue\",sans-serif;text-align:start;text-decoration:none;position:relative;cursor:pointer;outline:0}md-option[disabled]{cursor:default}md-option md-icon{margin-right:16px}[dir=rtl] md-option md-icon{margin-left:16px}md-option[aria-disabled=true]{cursor:default;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.md-option-ripple{position:absolute;top:0;left:0;bottom:0;right:0}"],
	            encapsulation: _angular_core.ViewEncapsulation.None,
	            host: {
	                'role': 'listbox',
	                '[attr.tabindex]': '_getTabIndex()',
	                '[attr.aria-label]': 'placeholder',
	                '[attr.aria-required]': 'required.toString()',
	                '[attr.aria-disabled]': 'disabled.toString()',
	                '[attr.aria-invalid]': '_control?.invalid || "false"',
	                '[attr.aria-owns]': '_optionIds',
	                '[class.md-select-disabled]': 'disabled',
	                '(keydown)': '_handleKeydown($event)',
	                '(blur)': '_onBlur()'
	            },
	            animations: [
	                transformPlaceholder,
	                transformPanel,
	                fadeInContent
	            ],
	            exportAs: 'mdSelect',
	        }),
	        __param$6(3, _angular_core.Optional()),
	        __param$6(4, _angular_core.Optional()), 
	        __metadata$30('design:paramtypes', [_angular_core.ElementRef, _angular_core.Renderer, ViewportRuler, Dir, _angular_forms.NgControl])
	    ], MdSelect);
	    return MdSelect;
	}());
	/** Clamps a value n between min and max values. */
	function clampValue(min, n, max) {
	    return Math.min(Math.max(min, n), max);
	}
	
	var __decorate$29 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$29 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var MdSelectModule = (function () {
	    function MdSelectModule() {
	    }
	    MdSelectModule.forRoot = function () {
	        return {
	            ngModule: MdSelectModule,
	            providers: [OVERLAY_PROVIDERS]
	        };
	    };
	    MdSelectModule = __decorate$29([
	        _angular_core.NgModule({
	            imports: [_angular_common.CommonModule, OverlayModule, MdRippleModule, DefaultStyleCompatibilityModeModule],
	            exports: [MdSelect, MdOption, DefaultStyleCompatibilityModeModule],
	            declarations: [MdSelect, MdOption],
	        }), 
	        __metadata$29('design:paramtypes', [])
	    ], MdSelectModule);
	    return MdSelectModule;
	}());
	
	var __decorate$32 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$32 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var MD_SLIDE_TOGGLE_VALUE_ACCESSOR = {
	    provide: _angular_forms.NG_VALUE_ACCESSOR,
	    useExisting: _angular_core.forwardRef(function () { return MdSlideToggle; }),
	    multi: true
	};
	// A simple change event emitted by the MdSlideToggle component.
	var MdSlideToggleChange = (function () {
	    function MdSlideToggleChange() {
	    }
	    return MdSlideToggleChange;
	}());
	// Increasing integer for generating unique ids for slide-toggle components.
	var nextId$1 = 0;
	/**
	 * Two-state control, which can be also called `switch`.
	 */
	var MdSlideToggle = (function () {
	    function MdSlideToggle(_elementRef, _renderer) {
	        this._elementRef = _elementRef;
	        this._renderer = _renderer;
	        this.onChange = function (_) { };
	        this.onTouched = function () { };
	        // A unique id for the slide-toggle. By default the id is auto-generated.
	        this._uniqueId = "md-slide-toggle-" + ++nextId$1;
	        this._checked = false;
	        this._isMousedown = false;
	        this._slideRenderer = null;
	        this._disabled = false;
	        this._required = false;
	        // Needs to be public to support AOT compilation (as host binding).
	        this._hasFocus = false;
	        /** Name value will be applied to the input element if present */
	        this.name = null;
	        /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */
	        this.id = this._uniqueId;
	        /** Used to specify the tabIndex value for the underlying input element. */
	        this.tabIndex = 0;
	        /** Used to set the aria-label attribute on the underlying input element. */
	        this.ariaLabel = null;
	        /** Used to set the aria-labelledby attribute on the underlying input element. */
	        this.ariaLabelledby = null;
	        this._change = new _angular_core.EventEmitter();
	        /** An event will be dispatched each time the slide-toggle changes its value. */
	        this.change = this._change.asObservable();
	    }
	    Object.defineProperty(MdSlideToggle.prototype, "disabled", {
	        /** Whether the slide-toggle is disabled. */
	        get: function () { return this._disabled; },
	        set: function (value) { this._disabled = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlideToggle.prototype, "required", {
	        /** Whether the slide-toggle is required. */
	        get: function () { return this._required; },
	        set: function (value) { this._required = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlideToggle.prototype, "inputId", {
	        /** Returns the unique id for the visual hidden input. */
	        get: function () { return (this.id || this._uniqueId) + "-input"; },
	        enumerable: true,
	        configurable: true
	    });
	    MdSlideToggle.prototype.ngAfterContentInit = function () {
	        this._slideRenderer = new SlideToggleRenderer(this._elementRef);
	    };
	    /**
	     * The onChangeEvent method will be also called on click.
	     * This is because everything for the slide-toggle is wrapped inside of a label,
	     * which triggers a onChange event on click.
	     */
	    MdSlideToggle.prototype._onChangeEvent = function (event) {
	        // We always have to stop propagation on the change event.
	        // Otherwise the change event, from the input element, will bubble up and
	        // emit its event object to the component's `change` output.
	        event.stopPropagation();
	        // Once a drag is currently in progress, we do not want to toggle the slide-toggle on a click.
	        if (!this.disabled && !this._slideRenderer.isDragging()) {
	            this.toggle();
	            // Emit our custom change event if the native input emitted one.
	            // It is important to only emit it, if the native input triggered one, because
	            // we don't want to trigger a change event, when the `checked` variable changes for example.
	            this._emitChangeEvent();
	        }
	    };
	    MdSlideToggle.prototype._onInputClick = function (event) {
	        this.onTouched();
	        // We have to stop propagation for click events on the visual hidden input element.
	        // By default, when a user clicks on a label element, a generated click event will be
	        // dispatched on the associated input element. Since we are using a label element as our
	        // root container, the click event on the `slide-toggle` will be executed twice.
	        // The real click event will bubble up, and the generated click event also tries to bubble up.
	        // This will lead to multiple click events.
	        // Preventing bubbling for the second event will solve that issue.
	        event.stopPropagation();
	    };
	    MdSlideToggle.prototype._setMousedown = function () {
	        var _this = this;
	        // We only *show* the focus style when focus has come to the button via the keyboard.
	        // The Material Design spec is silent on this topic, and without doing this, the
	        // button continues to look :active after clicking.
	        // @see http://marcysutton.com/button-focus-hell/
	        this._isMousedown = true;
	        setTimeout(function () { return _this._isMousedown = false; }, 100);
	    };
	    MdSlideToggle.prototype._onInputFocus = function () {
	        // Only show the focus / ripple indicator when the focus was not triggered by a mouse
	        // interaction on the component.
	        if (!this._isMousedown) {
	            this._hasFocus = true;
	        }
	    };
	    MdSlideToggle.prototype._onInputBlur = function () {
	        this._hasFocus = false;
	        this.onTouched();
	    };
	    /** Implemented as part of ControlValueAccessor. */
	    MdSlideToggle.prototype.writeValue = function (value) {
	        this.checked = value;
	    };
	    /** Implemented as part of ControlValueAccessor. */
	    MdSlideToggle.prototype.registerOnChange = function (fn) {
	        this.onChange = fn;
	    };
	    /** Implemented as part of ControlValueAccessor. */
	    MdSlideToggle.prototype.registerOnTouched = function (fn) {
	        this.onTouched = fn;
	    };
	    /** Implemented as a part of ControlValueAccessor. */
	    MdSlideToggle.prototype.setDisabledState = function (isDisabled) {
	        this.disabled = isDisabled;
	    };
	    /** Focuses the slide-toggle. */
	    MdSlideToggle.prototype.focus = function () {
	        this._renderer.invokeElementMethod(this._inputElement.nativeElement, 'focus');
	        this._onInputFocus();
	    };
	    Object.defineProperty(MdSlideToggle.prototype, "checked", {
	        /** Whether the slide-toggle is checked. */
	        get: function () { return !!this._checked; },
	        set: function (value) {
	            if (this.checked !== !!value) {
	                this._checked = value;
	                this.onChange(this._checked);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlideToggle.prototype, "color", {
	        /** The color of the slide-toggle. Can be primary, accent, or warn. */
	        get: function () { return this._color; },
	        set: function (value) {
	            this._updateColor(value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /** Toggles the checked state of the slide-toggle. */
	    MdSlideToggle.prototype.toggle = function () {
	        this.checked = !this.checked;
	    };
	    MdSlideToggle.prototype._updateColor = function (newColor) {
	        this._setElementColor(this._color, false);
	        this._setElementColor(newColor, true);
	        this._color = newColor;
	    };
	    MdSlideToggle.prototype._setElementColor = function (color, isAdd) {
	        if (color != null && color != '') {
	            this._renderer.setElementClass(this._elementRef.nativeElement, "md-" + color, isAdd);
	        }
	    };
	    /** Emits the change event to the `change` output EventEmitter */
	    MdSlideToggle.prototype._emitChangeEvent = function () {
	        var event = new MdSlideToggleChange();
	        event.source = this;
	        event.checked = this.checked;
	        this._change.emit(event);
	    };
	    MdSlideToggle.prototype._onDragStart = function () {
	        if (!this.disabled) {
	            this._slideRenderer.startThumbDrag(this.checked);
	        }
	    };
	    MdSlideToggle.prototype._onDrag = function (event) {
	        if (this._slideRenderer.isDragging()) {
	            this._slideRenderer.updateThumbPosition(event.deltaX);
	        }
	    };
	    MdSlideToggle.prototype._onDragEnd = function () {
	        var _this = this;
	        if (!this._slideRenderer.isDragging()) {
	            return;
	        }
	        // Notice that we have to stop outside of the current event handler,
	        // because otherwise the click event will be fired and will reset the new checked variable.
	        setTimeout(function () {
	            _this.checked = _this._slideRenderer.stopThumbDrag();
	            _this._emitChangeEvent();
	        }, 0);
	    };
	    __decorate$32([
	        _angular_core.Input(), 
	        __metadata$32('design:type', String)
	    ], MdSlideToggle.prototype, "name", void 0);
	    __decorate$32([
	        _angular_core.Input(), 
	        __metadata$32('design:type', String)
	    ], MdSlideToggle.prototype, "id", void 0);
	    __decorate$32([
	        _angular_core.Input(), 
	        __metadata$32('design:type', Number)
	    ], MdSlideToggle.prototype, "tabIndex", void 0);
	    __decorate$32([
	        _angular_core.Input(), 
	        __metadata$32('design:type', String)
	    ], MdSlideToggle.prototype, "ariaLabel", void 0);
	    __decorate$32([
	        _angular_core.Input(), 
	        __metadata$32('design:type', String)
	    ], MdSlideToggle.prototype, "ariaLabelledby", void 0);
	    __decorate$32([
	        _angular_core.Input(), 
	        __metadata$32('design:type', Boolean)
	    ], MdSlideToggle.prototype, "disabled", null);
	    __decorate$32([
	        _angular_core.Input(), 
	        __metadata$32('design:type', Boolean)
	    ], MdSlideToggle.prototype, "required", null);
	    __decorate$32([
	        _angular_core.Output(), 
	        __metadata$32('design:type', rxjs_Observable.Observable)
	    ], MdSlideToggle.prototype, "change", void 0);
	    __decorate$32([
	        _angular_core.ViewChild('input'), 
	        __metadata$32('design:type', _angular_core.ElementRef)
	    ], MdSlideToggle.prototype, "_inputElement", void 0);
	    __decorate$32([
	        _angular_core.Input(), 
	        __metadata$32('design:type', Object)
	    ], MdSlideToggle.prototype, "checked", null);
	    __decorate$32([
	        _angular_core.Input(), 
	        __metadata$32('design:type', String)
	    ], MdSlideToggle.prototype, "color", null);
	    MdSlideToggle = __decorate$32([
	        _angular_core.Component({selector: 'md-slide-toggle, mat-slide-toggle',
	            host: {
	                '[class.md-checked]': 'checked',
	                '[class.md-disabled]': 'disabled',
	                // This md-slide-toggle prefix will change, once the temporary ripple is removed.
	                '[class.md-slide-toggle-focused]': '_hasFocus',
	                '(mousedown)': '_setMousedown()'
	            },
	            template: "<label class=\"md-slide-toggle-label\"><div class=\"md-slide-toggle-container\"><div class=\"md-slide-toggle-bar\"></div><div class=\"md-slide-toggle-thumb-container\" (slidestart)=\"_onDragStart()\" (slide)=\"_onDrag($event)\" (slideend)=\"_onDragEnd()\"><div class=\"md-slide-toggle-thumb\"><div class=\"md-ink-ripple\"></div></div></div><input #input class=\"md-slide-toggle-input cdk-visually-hidden\" type=\"checkbox\" [id]=\"inputId\" [required]=\"required\" [tabIndex]=\"tabIndex\" [checked]=\"checked\" [disabled]=\"disabled\" [attr.name]=\"name\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledby\" (blur)=\"_onInputBlur()\" (focus)=\"_onInputFocus()\" (change)=\"_onChangeEvent($event)\" (click)=\"_onInputClick($event)\"></div><span class=\"md-slide-toggle-content\"><ng-content></ng-content></span></label>",
	            styles: ["md-slide-toggle{display:flex;height:24px;margin:16px 0;line-height:24px;white-space:nowrap;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;outline:0}md-slide-toggle.md-checked .md-slide-toggle-thumb-container{transform:translate3d(100%,0,0)}md-slide-toggle .md-ink-ripple{border-radius:50%;opacity:0;height:48px;left:50%;overflow:hidden;pointer-events:none;position:absolute;top:50%;transform:translate(-50%,-50%);transition:opacity ease 280ms,background-color ease 280ms;width:48px}md-slide-toggle.md-slide-toggle-focused .md-ink-ripple{opacity:1}md-slide-toggle.md-slide-toggle-disabled .md-ink-ripple{background-color:#000}md-slide-toggle.md-disabled .md-slide-toggle-container,md-slide-toggle.md-disabled .md-slide-toggle-label{cursor:default}.md-slide-toggle-content{font-size:14px;font-family:Roboto,\"Helvetica Neue\",sans-serif;font-weight:500}.md-slide-toggle-label{display:flex;flex:1;cursor:pointer}.md-slide-toggle-container{cursor:-webkit-grab;cursor:grab;width:36px;height:24px;position:relative;margin-right:8px}[dir=rtl] .md-slide-toggle-container{margin-left:8px;margin-right:0}.md-slide-toggle-thumb-container{position:absolute;top:2px;left:0;z-index:1;width:16px;transform:translate3d(0,0,0);transition:all 80ms linear;transition-property:transform}.md-slide-toggle-thumb-container.md-dragging{transition-duration:0s}.md-slide-toggle-thumb{position:absolute;margin:0;left:0;top:0;height:20px;width:20px;border-radius:50%;box-shadow:0 2px 1px -1px rgba(0,0,0,.2),0 1px 1px 0 rgba(0,0,0,.14),0 1px 3px 0 rgba(0,0,0,.12)}@media screen and (-ms-high-contrast:active){.md-slide-toggle-thumb{background:#fff;border:1px solid #000}.md-slide-toggle-bar{background:#fff}}.md-slide-toggle-bar{position:absolute;left:1px;top:5px;width:34px;height:14px;border-radius:8px}.md-slide-toggle-input{bottom:0;left:10px}.md-slide-toggle-bar,.md-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}"],
	            providers: [MD_SLIDE_TOGGLE_VALUE_ACCESSOR],
	            encapsulation: _angular_core.ViewEncapsulation.None,
	            changeDetection: _angular_core.ChangeDetectionStrategy.OnPush
	        }), 
	        __metadata$32('design:paramtypes', [_angular_core.ElementRef, _angular_core.Renderer])
	    ], MdSlideToggle);
	    return MdSlideToggle;
	}());
	/**
	 * Renderer for the Slide Toggle component, which separates DOM modification in its own class
	 */
	var SlideToggleRenderer = (function () {
	    function SlideToggleRenderer(_elementRef) {
	        this._elementRef = _elementRef;
	        this._thumbEl = _elementRef.nativeElement.querySelector('.md-slide-toggle-thumb-container');
	        this._thumbBarEl = _elementRef.nativeElement.querySelector('.md-slide-toggle-bar');
	    }
	    /** Whether the slide-toggle is currently dragging. */
	    SlideToggleRenderer.prototype.isDragging = function () {
	        return !!this._thumbBarWidth;
	    };
	    /** Initializes the drag of the slide-toggle. */
	    SlideToggleRenderer.prototype.startThumbDrag = function (checked) {
	        if (!this.isDragging()) {
	            this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;
	            this._checked = checked;
	            this._thumbEl.classList.add('md-dragging');
	        }
	    };
	    /** Stops the current drag and returns the new checked value. */
	    SlideToggleRenderer.prototype.stopThumbDrag = function () {
	        if (this.isDragging()) {
	            this._thumbBarWidth = null;
	            this._thumbEl.classList.remove('md-dragging');
	            applyCssTransform(this._thumbEl, '');
	            return this._percentage > 50;
	        }
	    };
	    /** Updates the thumb containers position from the specified distance. */
	    SlideToggleRenderer.prototype.updateThumbPosition = function (distance) {
	        this._percentage = this._getThumbPercentage(distance);
	        applyCssTransform(this._thumbEl, "translate3d(" + this._percentage + "%, 0, 0)");
	    };
	    /** Retrieves the percentage of thumb from the moved distance. */
	    SlideToggleRenderer.prototype._getThumbPercentage = function (distance) {
	        var percentage = (distance / this._thumbBarWidth) * 100;
	        // When the toggle was initially checked, then we have to start the drag at the end.
	        if (this._checked) {
	            percentage += 100;
	        }
	        return Math.max(0, Math.min(percentage, 100));
	    };
	    return SlideToggleRenderer;
	}());
	var MdSlideToggleModule = (function () {
	    function MdSlideToggleModule() {
	    }
	    MdSlideToggleModule.forRoot = function () {
	        return {
	            ngModule: MdSlideToggleModule,
	            providers: [{ provide: _angular_platformBrowser.HAMMER_GESTURE_CONFIG, useClass: GestureConfig }]
	        };
	    };
	    MdSlideToggleModule = __decorate$32([
	        _angular_core.NgModule({
	            imports: [_angular_forms.FormsModule, DefaultStyleCompatibilityModeModule],
	            exports: [MdSlideToggle, DefaultStyleCompatibilityModeModule],
	            declarations: [MdSlideToggle],
	        }), 
	        __metadata$32('design:paramtypes', [])
	    ], MdSlideToggleModule);
	    return MdSlideToggleModule;
	}());
	
	var __decorate$33 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$33 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param$7 = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	/**
	 * Visually, a 30px separation between tick marks looks best. This is very subjective but it is
	 * the default separation we chose.
	 */
	var MIN_AUTO_TICK_SEPARATION = 30;
	/**
	 * Provider Expression that allows md-slider to register as a ControlValueAccessor.
	 * This allows it to support [(ngModel)] and [formControl].
	 */
	var MD_SLIDER_VALUE_ACCESSOR = {
	    provide: _angular_forms.NG_VALUE_ACCESSOR,
	    useExisting: _angular_core.forwardRef(function () { return MdSlider; }),
	    multi: true
	};
	/** A simple change event emitted by the MdSlider component. */
	var MdSliderChange = (function () {
	    function MdSliderChange() {
	    }
	    return MdSliderChange;
	}());
	/**
	 * Allows users to select from a range of values by moving the slider thumb. It is similar in
	 * behavior to the native `<input type="range">` element.
	 */
	var MdSlider = (function () {
	    function MdSlider(_dir, elementRef) {
	        this._dir = _dir;
	        /** A renderer to handle updating the slider's thumb and fill track. */
	        this._renderer = null;
	        /** The dimensions of the slider. */
	        this._sliderDimensions = null;
	        this._disabled = false;
	        this._thumbLabel = false;
	        this._controlValueAccessorChangeFn = function () { };
	        /** The last value for which a change event was emitted. */
	        this._lastEmittedValue = null;
	        /** onTouch function registered via registerOnTouch (ControlValueAccessor). */
	        this.onTouched = function () { };
	        /**
	         * Whether or not the thumb is sliding.
	         * Used to determine if there should be a transition for the thumb and fill track.
	         */
	        this._isSliding = false;
	        /**
	         * Whether or not the slider is active (clicked or sliding).
	         * Used to shrink and grow the thumb as according to the Material Design spec.
	         */
	        this._isActive = false;
	        this._step = 1;
	        this._tickInterval = 0;
	        this._tickIntervalPercent = 0;
	        this._percent = 0;
	        this._value = null;
	        this._min = 0;
	        this._max = 100;
	        this._invert = false;
	        this._vertical = false;
	        /** Event emitted when the slider value has changed. */
	        this.change = new _angular_core.EventEmitter();
	        this._renderer = new SliderRenderer(elementRef);
	    }
	    Object.defineProperty(MdSlider.prototype, "disabled", {
	        /** Whether or not the slider is disabled. */
	        get: function () { return this._disabled; },
	        set: function (value) { this._disabled = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlider.prototype, "thumbLabel", {
	        /** Whether or not to show the thumb label. */
	        get: function () { return this._thumbLabel; },
	        set: function (value) { this._thumbLabel = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlider.prototype, "_thumbLabelDeprecated", {
	        /** @deprecated */
	        get: function () { return this._thumbLabel; },
	        set: function (value) { this._thumbLabel = value; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlider.prototype, "step", {
	        /** The values at which the thumb will snap. */
	        get: function () { return this._step; },
	        set: function (v) { this._step = coerceNumberProperty(v, this._step); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlider.prototype, "tickInterval", {
	        /**
	         * How often to show ticks. Relative to the step so that a tick always appears on a step.
	         * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).
	         */
	        get: function () { return this._tickInterval; },
	        set: function (v) {
	            this._tickInterval = (v == 'auto') ? v : coerceNumberProperty(v, this._tickInterval);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlider.prototype, "_tickIntervalDeprecated", {
	        /** @deprecated */
	        get: function () { return this.tickInterval; },
	        set: function (v) { this.tickInterval = v; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlider.prototype, "tickIntervalPercent", {
	        /** The size of a tick interval as a percentage of the size of the track. */
	        get: function () { return this._tickIntervalPercent; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlider.prototype, "percent", {
	        /** The percentage of the slider that coincides with the value. */
	        get: function () { return this._clamp(this._percent); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlider.prototype, "value", {
	        /** Value of the slider. */
	        get: function () {
	            // If the value needs to be read and it is still uninitialized, initialize it to the min.
	            if (this._value === null) {
	                this.value = this._min;
	            }
	            return this._value;
	        },
	        set: function (v) {
	            this._value = coerceNumberProperty(v, this._value);
	            this._percent = this._calculatePercentage(this._value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlider.prototype, "min", {
	        /** The miniumum value that the slider can have. */
	        get: function () {
	            return this._min;
	        },
	        set: function (v) {
	            this._min = coerceNumberProperty(v, this._min);
	            // If the value wasn't explicitly set by the user, set it to the min.
	            if (this._value === null) {
	                this.value = this._min;
	            }
	            this._percent = this._calculatePercentage(this.value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlider.prototype, "max", {
	        /** The maximum value that the slider can have. */
	        get: function () {
	            return this._max;
	        },
	        set: function (v) {
	            this._max = coerceNumberProperty(v, this._max);
	            this._percent = this._calculatePercentage(this.value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlider.prototype, "invert", {
	        /** Whether the slider is inverted. */
	        get: function () { return this._invert; },
	        set: function (value) { this._invert = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlider.prototype, "vertical", {
	        /** Whether the slider is vertical. */
	        get: function () { return this._vertical; },
	        set: function (value) { this._vertical = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlider.prototype, "invertAxis", {
	        /**
	         * Whether the axis of the slider is inverted.
	         * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).
	         */
	        get: function () {
	            // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to
	            // top. However from a y-axis standpoint this is inverted.
	            return this.vertical ? !this.invert : this.invert;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlider.prototype, "invertMouseCoords", {
	        /**
	         * Whether mouse events should be converted to a slider position by calculating their distance
	         * from the right or bottom edge of the slider as opposed to the top or left.
	         */
	        get: function () {
	            return (this.direction == 'rtl' && !this.vertical) ? !this.invertAxis : this.invertAxis;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlider.prototype, "trackFillStyles", {
	        /** CSS styles for the track fill element. */
	        get: function () {
	            var axis = this.vertical ? 'Y' : 'X';
	            return {
	                'transform': "scale" + axis + "(" + this.percent + ")"
	            };
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlider.prototype, "ticksContainerStyles", {
	        /** CSS styles for the ticks container element. */
	        get: function () {
	            var axis = this.vertical ? 'Y' : 'X';
	            // For a horizontal slider in RTL languages we push the ticks container off the left edge
	            // instead of the right edge to avoid causing a horizontal scrollbar to appear.
	            var sign = !this.vertical && this.direction == 'rtl' ? '' : '-';
	            var offset = this.tickIntervalPercent / 2 * 100;
	            return {
	                'transform': "translate" + axis + "(" + sign + offset + "%)"
	            };
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlider.prototype, "ticksStyles", {
	        /** CSS styles for the ticks element. */
	        get: function () {
	            var tickSize = this.tickIntervalPercent * 100;
	            var backgroundSize = this.vertical ? "2px " + tickSize + "%" : tickSize + "% 2px";
	            var axis = this.vertical ? 'Y' : 'X';
	            // Depending on the direction we pushed the ticks container, push the ticks the opposite
	            // direction to re-center them but clip off the end edge. In RTL languages we need to flip the
	            // ticks 180 degrees so we're really cutting off the end edge abd not the start.
	            var sign = !this.vertical && this.direction == 'rtl' ? '-' : '';
	            var rotate = !this.vertical && this.direction == 'rtl' ? ' rotate(180deg)' : '';
	            return {
	                'backgroundSize': backgroundSize,
	                // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.
	                'transform': "translateZ(0) translate" + axis + "(" + sign + tickSize / 2 + "%)" + rotate
	            };
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlider.prototype, "thumbContainerStyles", {
	        get: function () {
	            var axis = this.vertical ? 'Y' : 'X';
	            // For a horizontal slider in RTL languages we push the thumb container off the left edge
	            // instead of the right edge to avoid causing a horizontal scrollbar to appear.
	            var invertOffset = (this.direction == 'rtl' && !this.vertical) ? !this.invertAxis : this.invertAxis;
	            var offset = (invertOffset ? this.percent : 1 - this.percent) * 100;
	            return {
	                'transform': "translate" + axis + "(-" + offset + "%)"
	            };
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSlider.prototype, "direction", {
	        /** The language direction for this slider element. */
	        get: function () {
	            return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MdSlider.prototype._onMouseenter = function () {
	        if (this.disabled) {
	            return;
	        }
	        // We save the dimensions of the slider here so we can use them to update the spacing of the
	        // ticks and determine where on the slider click and slide events happen.
	        this._sliderDimensions = this._renderer.getSliderDimensions();
	        this._updateTickIntervalPercent();
	    };
	    MdSlider.prototype._onClick = function (event) {
	        if (this.disabled) {
	            return;
	        }
	        this._isActive = true;
	        this._isSliding = false;
	        this._renderer.addFocus();
	        this._updateValueFromPosition({ x: event.clientX, y: event.clientY });
	        this._emitValueIfChanged();
	    };
	    MdSlider.prototype._onSlide = function (event) {
	        if (this.disabled) {
	            return;
	        }
	        // Prevent the slide from selecting anything else.
	        event.preventDefault();
	        this._updateValueFromPosition({ x: event.center.x, y: event.center.y });
	    };
	    MdSlider.prototype._onSlideStart = function (event) {
	        if (this.disabled) {
	            return;
	        }
	        // Simulate mouseenter in case this is a mobile device.
	        this._onMouseenter();
	        event.preventDefault();
	        this._isSliding = true;
	        this._isActive = true;
	        this._renderer.addFocus();
	        this._updateValueFromPosition({ x: event.center.x, y: event.center.y });
	    };
	    MdSlider.prototype._onSlideEnd = function () {
	        this._isSliding = false;
	        this._emitValueIfChanged();
	    };
	    MdSlider.prototype._onBlur = function () {
	        this._isActive = false;
	        this.onTouched();
	    };
	    MdSlider.prototype._onKeydown = function (event) {
	        if (this.disabled) {
	            return;
	        }
	        switch (event.keyCode) {
	            case PAGE_UP:
	                this._increment(10);
	                break;
	            case PAGE_DOWN:
	                this._increment(-10);
	                break;
	            case END:
	                this.value = this.max;
	                break;
	            case HOME:
	                this.value = this.min;
	                break;
	            case LEFT_ARROW:
	                // NOTE: For a sighted user it would make more sense that when they press an arrow key on an
	                // inverted slider the thumb moves in that direction. However for a blind user, nothing
	                // about the slider indicates that it is inverted. They will expect left to be decrement,
	                // regardless of how it appears on the screen. For speakers ofRTL languages, they probably
	                // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for
	                // RTL. For inverted sliders we prefer a good a11y experience to having it "look right" for
	                // sighted users, therefore we do not swap the meaning.
	                this._increment(this.direction == 'rtl' ? 1 : -1);
	                break;
	            case UP_ARROW:
	                this._increment(1);
	                break;
	            case RIGHT_ARROW:
	                // See comment on LEFT_ARROW about the conditions under which we flip the meaning.
	                this._increment(this.direction == 'rtl' ? -1 : 1);
	                break;
	            case DOWN_ARROW:
	                this._increment(-1);
	                break;
	            default:
	                // Return if the key is not one that we explicitly handle to avoid calling preventDefault on
	                // it.
	                return;
	        }
	        event.preventDefault();
	    };
	    /** Increments the slider by the given number of steps (negative number decrements). */
	    MdSlider.prototype._increment = function (numSteps) {
	        this.value = this._clamp(this.value + this.step * numSteps, this.min, this.max);
	    };
	    /** Calculate the new value from the new physical location. The value will always be snapped. */
	    MdSlider.prototype._updateValueFromPosition = function (pos) {
	        if (!this._sliderDimensions) {
	            return;
	        }
	        var offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;
	        var size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;
	        var posComponent = this.vertical ? pos.y : pos.x;
	        // The exact value is calculated from the event and used to find the closest snap value.
	        var percent = this._clamp((posComponent - offset) / size);
	        if (this.invertMouseCoords) {
	            percent = 1 - percent;
	        }
	        var exactValue = this._calculateValue(percent);
	        // This calculation finds the closest step by finding the closest whole number divisible by the
	        // step relative to the min.
	        var closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;
	        // The value needs to snap to the min and max.
	        this.value = this._clamp(closestValue, this.min, this.max);
	    };
	    /** Emits a change event if the current value is different from the last emitted value. */
	    MdSlider.prototype._emitValueIfChanged = function () {
	        if (this.value != this._lastEmittedValue) {
	            var event_1 = new MdSliderChange();
	            event_1.source = this;
	            event_1.value = this.value;
	            this._lastEmittedValue = this.value;
	            this._controlValueAccessorChangeFn(this.value);
	            this.change.emit(event_1);
	        }
	    };
	    /** Updates the amount of space between ticks as a percentage of the width of the slider. */
	    MdSlider.prototype._updateTickIntervalPercent = function () {
	        if (!this.tickInterval) {
	            return;
	        }
	        if (this.tickInterval == 'auto') {
	            var trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;
	            var pixelsPerStep = trackSize * this.step / (this.max - this.min);
	            var stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);
	            var pixelsPerTick = stepsPerTick * this.step;
	            this._tickIntervalPercent = pixelsPerTick / trackSize;
	        }
	        else {
	            this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);
	        }
	    };
	    /** Calculates the percentage of the slider that a value is. */
	    MdSlider.prototype._calculatePercentage = function (value) {
	        return (value - this.min) / (this.max - this.min);
	    };
	    /** Calculates the value a percentage of the slider corresponds to. */
	    MdSlider.prototype._calculateValue = function (percentage) {
	        return this.min + percentage * (this.max - this.min);
	    };
	    /** Return a number between two numbers. */
	    MdSlider.prototype._clamp = function (value, min, max) {
	        if (min === void 0) { min = 0; }
	        if (max === void 0) { max = 1; }
	        return Math.max(min, Math.min(value, max));
	    };
	    /**
	     * Sets the model value. Implemented as part of ControlValueAccessor.
	     * @param value
	     */
	    MdSlider.prototype.writeValue = function (value) {
	        this.value = value;
	    };
	    /**
	     * Registers a callback to eb triggered when the value has changed.
	     * Implemented as part of ControlValueAccessor.
	     * @param fn Callback to be registered.
	     */
	    MdSlider.prototype.registerOnChange = function (fn) {
	        this._controlValueAccessorChangeFn = fn;
	    };
	    /**
	     * Registers a callback to be triggered when the component is touched.
	     * Implemented as part of ControlValueAccessor.
	     * @param fn Callback to be registered.
	     */
	    MdSlider.prototype.registerOnTouched = function (fn) {
	        this.onTouched = fn;
	    };
	    /**
	     * Sets whether the component should be disabled.
	     * Implemented as part of ControlValueAccessor.
	     * @param isDisabled
	     */
	    MdSlider.prototype.setDisabledState = function (isDisabled) {
	        this.disabled = isDisabled;
	    };
	    __decorate$33([
	        _angular_core.Input(), 
	        __metadata$33('design:type', Boolean)
	    ], MdSlider.prototype, "disabled", null);
	    __decorate$33([
	        _angular_core.Input('thumbLabel'), 
	        __metadata$33('design:type', Boolean)
	    ], MdSlider.prototype, "thumbLabel", null);
	    __decorate$33([
	        _angular_core.Input('thumb-label'), 
	        __metadata$33('design:type', Boolean)
	    ], MdSlider.prototype, "_thumbLabelDeprecated", null);
	    __decorate$33([
	        _angular_core.Input(), 
	        __metadata$33('design:type', Object)
	    ], MdSlider.prototype, "step", null);
	    __decorate$33([
	        _angular_core.Input(), 
	        __metadata$33('design:type', Object)
	    ], MdSlider.prototype, "tickInterval", null);
	    __decorate$33([
	        _angular_core.Input('tick-interval'), 
	        __metadata$33('design:type', Object)
	    ], MdSlider.prototype, "_tickIntervalDeprecated", null);
	    __decorate$33([
	        _angular_core.Input(), 
	        __metadata$33('design:type', Object)
	    ], MdSlider.prototype, "value", null);
	    __decorate$33([
	        _angular_core.Input(), 
	        __metadata$33('design:type', Object)
	    ], MdSlider.prototype, "min", null);
	    __decorate$33([
	        _angular_core.Input(), 
	        __metadata$33('design:type', Object)
	    ], MdSlider.prototype, "max", null);
	    __decorate$33([
	        _angular_core.Input(), 
	        __metadata$33('design:type', Object)
	    ], MdSlider.prototype, "invert", null);
	    __decorate$33([
	        _angular_core.Input(), 
	        __metadata$33('design:type', Object)
	    ], MdSlider.prototype, "vertical", null);
	    __decorate$33([
	        _angular_core.Output(), 
	        __metadata$33('design:type', Object)
	    ], MdSlider.prototype, "change", void 0);
	    MdSlider = __decorate$33([
	        _angular_core.Component({selector: 'md-slider, mat-slider',
	            providers: [MD_SLIDER_VALUE_ACCESSOR],
	            host: {
	                '(blur)': '_onBlur()',
	                '(click)': '_onClick($event)',
	                '(keydown)': '_onKeydown($event)',
	                '(mouseenter)': '_onMouseenter()',
	                '(slide)': '_onSlide($event)',
	                '(slideend)': '_onSlideEnd()',
	                '(slidestart)': '_onSlideStart($event)',
	                'role': 'slider',
	                'tabindex': '0',
	                '[attr.aria-disabled]': 'disabled',
	                '[attr.aria-valuemax]': 'max',
	                '[attr.aria-valuemin]': 'min',
	                '[attr.aria-valuenow]': 'value',
	                '[class.md-slider-active]': '_isActive',
	                '[class.md-slider-disabled]': 'disabled',
	                '[class.md-slider-has-ticks]': 'tickInterval',
	                '[class.md-slider-horizontal]': '!vertical',
	                '[class.md-slider-axis-inverted]': 'invertAxis',
	                '[class.md-slider-sliding]': '_isSliding',
	                '[class.md-slider-thumb-label-showing]': 'thumbLabel',
	                '[class.md-slider-vertical]': 'vertical',
	            },
	            template: "<div class=\"md-slider-track\"><div class=\"md-slider-track-fill\" [ngStyle]=\"trackFillStyles\"></div><div class=\"md-slider-ticks-container\" [ngStyle]=\"ticksContainerStyles\"><div class=\"md-slider-ticks\" [ngStyle]=\"ticksStyles\"></div></div><div class=\"md-slider-thumb-container\" [ngStyle]=\"thumbContainerStyles\"><div class=\"md-slider-thumb\"></div><div class=\"md-slider-thumb-label\"><span class=\"md-slider-thumb-label-text\">{{value}}</span></div></div></div>",
	            styles: ["md-slider{display:inline-block;position:relative;box-sizing:border-box;padding:8px;outline:0;vertical-align:middle}.md-slider-track{position:absolute}.md-slider-track-fill{position:absolute;transform-origin:0 0;transition:transform .4s cubic-bezier(.25,.8,.25,1)}.md-slider-ticks-container{position:absolute;left:0;top:0;overflow:hidden}.md-slider-ticks{opacity:0;transition:opacity .4s cubic-bezier(.25,.8,.25,1)}.md-slider-thumb,.md-slider-thumb-container{transition:transform .4s cubic-bezier(.25,.8,.25,1);position:absolute}.md-slider-thumb-container{z-index:1}.md-slider-thumb{right:-10px;bottom:-10px;width:20px;height:20px;border-radius:50%;transform:scale(.7)}.md-slider-thumb-label{display:none;align-items:center;justify-content:center;position:absolute;width:28px;height:28px;border-radius:50%;transition:.3s cubic-bezier(.35,0,.25,1);transition-property:transform,border-radius}.md-slider-thumb-label-text{z-index:1;font-size:12px;font-weight:700;opacity:0;transition:opacity .3s cubic-bezier(.35,0,.25,1)}.md-slider-sliding .md-slider-thumb-container,.md-slider-sliding .md-slider-track-fill{transition-duration:0s}.md-slider-has-ticks .md-slider-track::after{content:'';position:absolute;border:0 solid rgba(0,0,0,.6);opacity:0;transition:opacity .3s cubic-bezier(.35,0,.25,1)}.md-slider-active .md-slider-thumb-label-text,.md-slider-has-ticks.md-slider-active .md-slider-ticks,.md-slider-has-ticks.md-slider-active .md-slider-track::after,.md-slider-has-ticks:hover .md-slider-ticks,.md-slider-has-ticks:hover .md-slider-track::after{opacity:1}.md-slider-thumb-label-showing .md-slider-thumb-label{display:flex}.md-slider-axis-inverted .md-slider-track-fill{transform-origin:100% 100%}.md-slider-active .md-slider-thumb{transform:scale(1)}.md-slider-active.md-slider-thumb-label-showing .md-slider-thumb{transform:scale(0)}.md-slider-active .md-slider-thumb-label{border-radius:50% 50% 0}.md-slider-horizontal{height:48px;min-width:128px}.md-slider-horizontal .md-slider-track{height:2px;top:23px;left:8px;right:8px}.md-slider-horizontal .md-slider-track::after{height:2px;border-left-width:2px;right:0}.md-slider-horizontal .md-slider-track-fill{height:2px;width:100%;transform:scaleX(0)}.md-slider-horizontal .md-slider-ticks-container{height:2px;width:100%}.md-slider-horizontal .md-slider-ticks{background:repeating-linear-gradient(to right,rgba(0,0,0,.6),rgba(0,0,0,.6) 2px,transparent 0,transparent);background:-moz-repeating-linear-gradient(.0001deg,rgba(0,0,0,.6),rgba(0,0,0,.6) 2px,transparent 0,transparent);height:2px;width:100%}.md-slider-horizontal .md-slider-thumb-container{width:100%;height:0;top:50%}.md-slider-horizontal .md-slider-thumb-label{right:-14px;top:-40px;transform:translateY(26px) scale(.4) rotate(45deg)}.md-slider-horizontal .md-slider-thumb-label-text{transform:rotate(-45deg)}.md-slider-horizontal.md-slider-active .md-slider-thumb-label{transform:rotate(45deg)}.md-slider-vertical{width:48px;min-height:128px}.md-slider-vertical .md-slider-track{width:2px;top:8px;bottom:8px;left:23px}.md-slider-vertical .md-slider-track::after{width:2px;border-top-width:2px;bottom:0}.md-slider-vertical .md-slider-track-fill{height:100%;width:2px;transform:scaleY(0)}.md-slider-vertical .md-slider-ticks-container{width:2px;height:100%}.md-slider-vertical .md-slider-ticks{background:repeating-linear-gradient(to bottom,rgba(0,0,0,.6),rgba(0,0,0,.6) 2px,transparent 0,transparent);width:2px;height:100%}.md-slider-vertical .md-slider-thumb-container{height:100%;width:0;left:50%}.md-slider-vertical .md-slider-thumb-label{bottom:-14px;left:-40px;transform:translateX(26px) scale(.4) rotate(-45deg)}.md-slider-vertical .md-slider-thumb-label-text{transform:rotate(45deg)}.md-slider-vertical.md-slider-active .md-slider-thumb-label{transform:rotate(-45deg)}[dir=rtl] .md-slider-track::after{left:0;right:auto}[dir=rtl] .md-slider-horizontal .md-slider-track-fill{transform-origin:100% 100%}[dir=rtl] .md-slider-horizontal.md-slider-axis-inverted .md-slider-track-fill{transform-origin:0 0}"],
	            encapsulation: _angular_core.ViewEncapsulation.None,
	        }),
	        __param$7(0, _angular_core.Optional()), 
	        __metadata$33('design:paramtypes', [Dir, _angular_core.ElementRef])
	    ], MdSlider);
	    return MdSlider;
	}());
	/**
	 * Renderer class in order to keep all dom manipulation in one place and outside of the main class.
	 * @docs-private
	 */
	var SliderRenderer = (function () {
	    function SliderRenderer(elementRef) {
	        this._sliderElement = elementRef.nativeElement;
	    }
	    /**
	     * Get the bounding client rect of the slider track element.
	     * The track is used rather than the native element to ignore the extra space that the thumb can
	     * take up.
	     */
	    SliderRenderer.prototype.getSliderDimensions = function () {
	        var trackElement = this._sliderElement.querySelector('.md-slider-track');
	        return trackElement.getBoundingClientRect();
	    };
	    /**
	     * Focuses the native element.
	     * Currently only used to allow a blur event to fire but will be used with keyboard input later.
	     */
	    SliderRenderer.prototype.addFocus = function () {
	        this._sliderElement.focus();
	    };
	    return SliderRenderer;
	}());
	var MdSliderModule = (function () {
	    function MdSliderModule() {
	    }
	    MdSliderModule.forRoot = function () {
	        return {
	            ngModule: MdSliderModule,
	            providers: [{ provide: _angular_platformBrowser.HAMMER_GESTURE_CONFIG, useClass: GestureConfig }]
	        };
	    };
	    MdSliderModule = __decorate$33([
	        _angular_core.NgModule({
	            imports: [_angular_common.CommonModule, _angular_forms.FormsModule, DefaultStyleCompatibilityModeModule],
	            exports: [MdSlider, DefaultStyleCompatibilityModeModule],
	            declarations: [MdSlider],
	            providers: [
	                { provide: _angular_platformBrowser.HAMMER_GESTURE_CONFIG, useClass: GestureConfig },
	            ],
	        }), 
	        __metadata$33('design:paramtypes', [])
	    ], MdSliderModule);
	    return MdSliderModule;
	}());
	
	var __extends$7 = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate$34 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$34 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param$8 = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	/** Exception thrown when two MdSidenav are matching the same side. */
	var MdDuplicatedSidenavError = (function (_super) {
	    __extends$7(MdDuplicatedSidenavError, _super);
	    function MdDuplicatedSidenavError(align) {
	        _super.call(this, "A sidenav was already declared for 'align=\"" + align + "\"'");
	    }
	    return MdDuplicatedSidenavError;
	}(MdError));
	/** Sidenav toggle promise result. */
	var MdSidenavToggleResult = (function () {
	    function MdSidenavToggleResult(type, animationFinished) {
	        this.type = type;
	        this.animationFinished = animationFinished;
	    }
	    return MdSidenavToggleResult;
	}());
	/**
	 * <md-sidenav> component.
	 *
	 * This component corresponds to the drawer of the sidenav.
	 *
	 * Please refer to README.md for examples on how to use it.
	 */
	var MdSidenav = (function () {
	    /**
	     * @param _elementRef The DOM element reference. Used for transition and width calculation.
	     *     If not available we do not hook on transitions.
	     */
	    function MdSidenav(_elementRef, _renderer) {
	        var _this = this;
	        this._elementRef = _elementRef;
	        this._renderer = _renderer;
	        /** Alignment of the sidenav (direction neutral); whether 'start' or 'end'. */
	        this._align = 'start';
	        this._valid = true;
	        /** Mode of the sidenav; whether 'over' or 'side'. */
	        this.mode = 'over';
	        /** Whether the sidenav is opened. */
	        this._opened = false;
	        /** Event emitted when the sidenav is being opened. Use this to synchronize animations. */
	        this.onOpenStart = new _angular_core.EventEmitter();
	        /** Event emitted when the sidenav is fully opened. */
	        this.onOpen = new _angular_core.EventEmitter();
	        /** Event emitted when the sidenav is being closed. Use this to synchronize animations. */
	        this.onCloseStart = new _angular_core.EventEmitter();
	        /** Event emitted when the sidenav is fully closed. */
	        this.onClose = new _angular_core.EventEmitter();
	        /** Event emitted when the sidenav alignment changes. */
	        this.onAlignChanged = new _angular_core.EventEmitter();
	        /** The current toggle animation promise. `null` if no animation is in progress. */
	        this._toggleAnimationPromise = null;
	        /**
	         * The current toggle animation promise resolution function.
	         * `null` if no animation is in progress.
	         */
	        this._resolveToggleAnimationPromise = null;
	        this._elementFocusedBeforeSidenavWasOpened = null;
	        this.onOpen.subscribe(function () {
	            _this._elementFocusedBeforeSidenavWasOpened = document.activeElement;
	            if (!_this.isFocusTrapDisabled) {
	                _this._focusTrap.focusFirstTabbableElementWhenReady();
	            }
	        });
	        this.onClose.subscribe(function () {
	            if (_this._elementFocusedBeforeSidenavWasOpened instanceof HTMLElement) {
	                _this._renderer.invokeElementMethod(_this._elementFocusedBeforeSidenavWasOpened, 'focus');
	            }
	            else {
	                _this._renderer.invokeElementMethod(_this._elementRef.nativeElement, 'blur');
	            }
	            _this._elementFocusedBeforeSidenavWasOpened = null;
	        });
	    }
	    Object.defineProperty(MdSidenav.prototype, "valid", {
	        /** Whether this md-sidenav is part of a valid md-sidenav-container configuration. */
	        get: function () { return this._valid; },
	        set: function (value) {
	            value = coerceBooleanProperty(value);
	            // When the drawers are not in a valid configuration we close them all until they are in a valid
	            // configuration again.
	            if (!value) {
	                this.close();
	            }
	            this._valid = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSidenav.prototype, "align", {
	        /** Direction which the sidenav is aligned in. */
	        get: function () { return this._align; },
	        set: function (value) {
	            // Make sure we have a valid value.
	            value = (value == 'end') ? 'end' : 'start';
	            if (value != this._align) {
	                this._align = value;
	                this.onAlignChanged.emit();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSidenav.prototype, "isFocusTrapDisabled", {
	        get: function () {
	            // The focus trap is only enabled when the sidenav is open in any mode other than side.
	            return !this.opened || this.mode == 'side';
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MdSidenav.prototype.ngAfterContentInit = function () {
	        // This can happen when the sidenav is set to opened in the template and the transition
	        // isn't ended.
	        if (this._toggleAnimationPromise) {
	            this._resolveToggleAnimationPromise(true);
	            this._toggleAnimationPromise = this._resolveToggleAnimationPromise = null;
	        }
	    };
	    Object.defineProperty(MdSidenav.prototype, "opened", {
	        /**
	         * Whether the sidenav is opened. We overload this because we trigger an event when it
	         * starts or end.
	         */
	        get: function () { return this._opened; },
	        set: function (v) {
	            this.toggle(coerceBooleanProperty(v));
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /** Open this sidenav, and return a Promise that will resolve when it's fully opened (or get
	     * rejected if it didn't). */
	    MdSidenav.prototype.open = function () {
	        return this.toggle(true);
	    };
	    /**
	     * Close this sidenav, and return a Promise that will resolve when it's fully closed (or get
	     * rejected if it didn't).
	     */
	    MdSidenav.prototype.close = function () {
	        return this.toggle(false);
	    };
	    /**
	     * Toggle this sidenav. This is equivalent to calling open() when it's already opened, or
	     * close() when it's closed.
	     * @param isOpen Whether the sidenav should be open.
	     * @returns Resolves with the result of whether the sidenav was opened or closed.
	     */
	    MdSidenav.prototype.toggle = function (isOpen) {
	        var _this = this;
	        if (isOpen === void 0) { isOpen = !this.opened; }
	        if (!this.valid) {
	            return Promise.resolve(new MdSidenavToggleResult(isOpen ? 'open' : 'close', true));
	        }
	        // Shortcut it if we're already opened.
	        if (isOpen === this.opened) {
	            return this._toggleAnimationPromise ||
	                Promise.resolve(new MdSidenavToggleResult(isOpen ? 'open' : 'close', true));
	        }
	        this._opened = isOpen;
	        if (isOpen) {
	            this.onOpenStart.emit();
	        }
	        else {
	            this.onCloseStart.emit();
	        }
	        if (this._toggleAnimationPromise) {
	            this._resolveToggleAnimationPromise(false);
	        }
	        this._toggleAnimationPromise = new Promise(function (resolve) {
	            _this._resolveToggleAnimationPromise = function (animationFinished) {
	                return resolve(new MdSidenavToggleResult(isOpen ? 'open' : 'close', animationFinished));
	            };
	        });
	        return this._toggleAnimationPromise;
	    };
	    /**
	     * Handles the keyboard events.
	     * @docs-private
	     */
	    MdSidenav.prototype.handleKeydown = function (event) {
	        if (event.keyCode === ESCAPE) {
	            this.close();
	            event.stopPropagation();
	        }
	    };
	    /**
	     * When transition has finished, set the internal state for classes and emit the proper event.
	     * The event passed is actually of type TransitionEvent, but that type is not available in
	     * Android so we use any.
	     */
	    MdSidenav.prototype._onTransitionEnd = function (transitionEvent) {
	        if (transitionEvent.target == this._elementRef.nativeElement
	            && transitionEvent.propertyName.endsWith('transform')) {
	            if (this._opened) {
	                this.onOpen.emit();
	            }
	            else {
	                this.onClose.emit();
	            }
	            if (this._toggleAnimationPromise) {
	                this._resolveToggleAnimationPromise(true);
	                this._toggleAnimationPromise = this._resolveToggleAnimationPromise = null;
	            }
	        }
	    };
	    Object.defineProperty(MdSidenav.prototype, "_isClosing", {
	        get: function () {
	            return !this._opened && !!this._toggleAnimationPromise;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSidenav.prototype, "_isOpening", {
	        get: function () {
	            return this._opened && !!this._toggleAnimationPromise;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSidenav.prototype, "_isClosed", {
	        get: function () {
	            return !this._opened && !this._toggleAnimationPromise;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSidenav.prototype, "_isOpened", {
	        get: function () {
	            return this._opened && !this._toggleAnimationPromise;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSidenav.prototype, "_isEnd", {
	        get: function () {
	            return this.align == 'end';
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSidenav.prototype, "_modeSide", {
	        get: function () {
	            return this.mode == 'side';
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSidenav.prototype, "_modeOver", {
	        get: function () {
	            return this.mode == 'over';
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSidenav.prototype, "_modePush", {
	        get: function () {
	            return this.mode == 'push';
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSidenav.prototype, "_width", {
	        get: function () {
	            if (this._elementRef.nativeElement) {
	                return this._elementRef.nativeElement.offsetWidth;
	            }
	            return 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    __decorate$34([
	        _angular_core.ViewChild(FocusTrap), 
	        __metadata$34('design:type', FocusTrap)
	    ], MdSidenav.prototype, "_focusTrap", void 0);
	    __decorate$34([
	        _angular_core.Input(), 
	        __metadata$34('design:type', Object)
	    ], MdSidenav.prototype, "align", null);
	    __decorate$34([
	        _angular_core.Input(), 
	        __metadata$34('design:type', Object)
	    ], MdSidenav.prototype, "mode", void 0);
	    __decorate$34([
	        _angular_core.Output('open-start'), 
	        __metadata$34('design:type', Object)
	    ], MdSidenav.prototype, "onOpenStart", void 0);
	    __decorate$34([
	        _angular_core.Output('open'), 
	        __metadata$34('design:type', Object)
	    ], MdSidenav.prototype, "onOpen", void 0);
	    __decorate$34([
	        _angular_core.Output('close-start'), 
	        __metadata$34('design:type', Object)
	    ], MdSidenav.prototype, "onCloseStart", void 0);
	    __decorate$34([
	        _angular_core.Output('close'), 
	        __metadata$34('design:type', Object)
	    ], MdSidenav.prototype, "onClose", void 0);
	    __decorate$34([
	        _angular_core.Output('align-changed'), 
	        __metadata$34('design:type', Object)
	    ], MdSidenav.prototype, "onAlignChanged", void 0);
	    __decorate$34([
	        _angular_core.Input(), 
	        __metadata$34('design:type', Boolean)
	    ], MdSidenav.prototype, "opened", null);
	    MdSidenav = __decorate$34([
	        _angular_core.Component({selector: 'md-sidenav, mat-sidenav',
	            // TODO(mmalerba): move template to separate file.
	            template: "<cdk-focus-trap class=\"md-sidenav-focus-trap\" [disabled]=\"isFocusTrapDisabled\"><ng-content></ng-content></cdk-focus-trap>",
	            host: {
	                '(transitionend)': '_onTransitionEnd($event)',
	                '(keydown)': 'handleKeydown($event)',
	                // must prevent the browser from aligning text based on value
	                '[attr.align]': 'null',
	                '[class.md-sidenav-closed]': '_isClosed',
	                '[class.md-sidenav-closing]': '_isClosing',
	                '[class.md-sidenav-end]': '_isEnd',
	                '[class.md-sidenav-opened]': '_isOpened',
	                '[class.md-sidenav-opening]': '_isOpening',
	                '[class.md-sidenav-over]': '_modeOver',
	                '[class.md-sidenav-push]': '_modePush',
	                '[class.md-sidenav-side]': '_modeSide',
	                '[class.md-sidenav-invalid]': '!valid',
	                'tabIndex': '-1'
	            },
	            changeDetection: _angular_core.ChangeDetectionStrategy.OnPush,
	            encapsulation: _angular_core.ViewEncapsulation.None,
	        }), 
	        __metadata$34('design:paramtypes', [_angular_core.ElementRef, _angular_core.Renderer])
	    ], MdSidenav);
	    return MdSidenav;
	}());
	/**
	 * <md-sidenav-container> component.
	 *
	 * This is the parent component to one or two <md-sidenav>s that validates the state internally
	 * and coordinates the backdrop and content styling.
	 */
	var MdSidenavContainer = (function () {
	    function MdSidenavContainer(_dir, _element, _renderer) {
	        var _this = this;
	        this._dir = _dir;
	        this._element = _element;
	        this._renderer = _renderer;
	        /** Event emitted when the sidenav backdrop is clicked. */
	        this.onBackdropClicked = new _angular_core.EventEmitter();
	        // If a `Dir` directive exists up the tree, listen direction changes and update the left/right
	        // properties to point to the proper start/end.
	        if (_dir != null) {
	            _dir.dirChange.subscribe(function () { return _this._validateDrawers(); });
	        }
	    }
	    Object.defineProperty(MdSidenavContainer.prototype, "start", {
	        /** The sidenav child with the `start` alignment. */
	        get: function () { return this._start; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdSidenavContainer.prototype, "end", {
	        /** The sidenav child with the `end` alignment. */
	        get: function () { return this._end; },
	        enumerable: true,
	        configurable: true
	    });
	    MdSidenavContainer.prototype.ngAfterContentInit = function () {
	        var _this = this;
	        // On changes, assert on consistency.
	        this._sidenavs.changes.subscribe(function () { return _this._validateDrawers(); });
	        this._sidenavs.forEach(function (sidenav) {
	            _this._watchSidenavToggle(sidenav);
	            _this._watchSidenavAlign(sidenav);
	        });
	        this._validateDrawers();
	    };
	    /**
	     * Subscribes to sidenav events in order to set a class on the main container element when the
	     * sidenav is open and the backdrop is visible. This ensures any overflow on the container element
	     * is properly hidden.
	     */
	    MdSidenavContainer.prototype._watchSidenavToggle = function (sidenav) {
	        var _this = this;
	        if (!sidenav || sidenav.mode === 'side') {
	            return;
	        }
	        sidenav.onOpen.subscribe(function () { return _this._setContainerClass(sidenav, true); });
	        sidenav.onClose.subscribe(function () { return _this._setContainerClass(sidenav, false); });
	    };
	    /**
	     * Subscribes to sidenav onAlignChanged event in order to re-validate drawers when the align
	     * changes.
	     */
	    MdSidenavContainer.prototype._watchSidenavAlign = function (sidenav) {
	        var _this = this;
	        if (!sidenav) {
	            return;
	        }
	        sidenav.onAlignChanged.subscribe(function () { return _this._validateDrawers(); });
	    };
	    /** Toggles the 'md-sidenav-opened' class on the main 'md-sidenav-container' element. */
	    MdSidenavContainer.prototype._setContainerClass = function (sidenav, bool) {
	        this._renderer.setElementClass(this._element.nativeElement, 'md-sidenav-opened', bool);
	    };
	    /** Sets the valid state of the drawers. */
	    MdSidenavContainer.prototype._setDrawersValid = function (valid) {
	        this._sidenavs.forEach(function (sidenav) {
	            sidenav.valid = valid;
	        });
	        if (!valid) {
	            this._start = this._end = this._left = this._right = null;
	        }
	    };
	    /** Validate the state of the sidenav children components. */
	    MdSidenavContainer.prototype._validateDrawers = function () {
	        this._start = this._end = null;
	        // Ensure that we have at most one start and one end sidenav.
	        // NOTE: We must call toArray on _sidenavs even though it's iterable
	        // (see https://github.com/Microsoft/TypeScript/issues/3164).
	        for (var _i = 0, _a = this._sidenavs.toArray(); _i < _a.length; _i++) {
	            var sidenav = _a[_i];
	            if (sidenav.align == 'end') {
	                if (this._end != null) {
	                    this._setDrawersValid(false);
	                    return;
	                }
	                this._end = sidenav;
	            }
	            else {
	                if (this._start != null) {
	                    this._setDrawersValid(false);
	                    return;
	                }
	                this._start = sidenav;
	            }
	        }
	        this._right = this._left = null;
	        // Detect if we're LTR or RTL.
	        if (this._dir == null || this._dir.value == 'ltr') {
	            this._left = this._start;
	            this._right = this._end;
	        }
	        else {
	            this._left = this._end;
	            this._right = this._start;
	        }
	        this._setDrawersValid(true);
	    };
	    MdSidenavContainer.prototype._onBackdropClicked = function () {
	        this.onBackdropClicked.emit();
	        this._closeModalSidenav();
	    };
	    MdSidenavContainer.prototype._closeModalSidenav = function () {
	        if (this._start != null && this._start.mode != 'side') {
	            this._start.close();
	        }
	        if (this._end != null && this._end.mode != 'side') {
	            this._end.close();
	        }
	    };
	    MdSidenavContainer.prototype._isShowingBackdrop = function () {
	        return (this._isSidenavOpen(this._start) && this._start.mode != 'side')
	            || (this._isSidenavOpen(this._end) && this._end.mode != 'side');
	    };
	    MdSidenavContainer.prototype._isSidenavOpen = function (side) {
	        return side != null && side.opened;
	    };
	    /**
	     * Return the width of the sidenav, if it's in the proper mode and opened.
	     * This may relayout the view, so do not call this often.
	     * @param sidenav
	     * @param mode
	     */
	    MdSidenavContainer.prototype._getSidenavEffectiveWidth = function (sidenav, mode) {
	        return (this._isSidenavOpen(sidenav) && sidenav.mode == mode) ? sidenav._width : 0;
	    };
	    MdSidenavContainer.prototype._getMarginLeft = function () {
	        return this._getSidenavEffectiveWidth(this._left, 'side');
	    };
	    MdSidenavContainer.prototype._getMarginRight = function () {
	        return this._getSidenavEffectiveWidth(this._right, 'side');
	    };
	    MdSidenavContainer.prototype._getPositionLeft = function () {
	        return this._getSidenavEffectiveWidth(this._left, 'push');
	    };
	    MdSidenavContainer.prototype._getPositionRight = function () {
	        return this._getSidenavEffectiveWidth(this._right, 'push');
	    };
	    /**
	     * Returns the horizontal offset for the content area.  There should never be a value for both
	     * left and right, so by subtracting the right value from the left value, we should always get
	     * the appropriate offset.
	     */
	    MdSidenavContainer.prototype._getPositionOffset = function () {
	        return this._getPositionLeft() - this._getPositionRight();
	    };
	    /**
	     * This is using [ngStyle] rather than separate [style...] properties because [style.transform]
	     * doesn't seem to work right now.
	     */
	    MdSidenavContainer.prototype._getStyles = function () {
	        return {
	            marginLeft: this._getMarginLeft() + "px",
	            marginRight: this._getMarginRight() + "px",
	            transform: "translate3d(" + this._getPositionOffset() + "px, 0, 0)"
	        };
	    };
	    __decorate$34([
	        _angular_core.ContentChildren(MdSidenav), 
	        __metadata$34('design:type', _angular_core.QueryList)
	    ], MdSidenavContainer.prototype, "_sidenavs", void 0);
	    __decorate$34([
	        _angular_core.Output('backdrop-clicked'), 
	        __metadata$34('design:type', Object)
	    ], MdSidenavContainer.prototype, "onBackdropClicked", void 0);
	    MdSidenavContainer = __decorate$34([
	        _angular_core.Component({selector: 'md-sidenav-container, mat-sidenav-container, md-sidenav-layout, mat-sidenav-layout',
	            // Do not use ChangeDetectionStrategy.OnPush. It does not work for this component because
	            // technically it is a sibling of MdSidenav (on the content tree) and isn't updated when MdSidenav
	            // changes its state.
	            template: "<div class=\"md-sidenav-backdrop\" (click)=\"_onBackdropClicked()\" [class.md-sidenav-shown]=\"_isShowingBackdrop()\"></div><ng-content select=\"md-sidenav, mat-sidenav\"></ng-content><div class=\"md-sidenav-content\" [ngStyle]=\"_getStyles()\"><ng-content></ng-content></div>",
	            styles: [".md-sidenav-container,.md-sidenav-content{transform:translate3d(0,0,0);display:block}.md-sidenav-container{position:relative;box-sizing:border-box;-webkit-overflow-scrolling:touch;overflow:hidden}.md-sidenav-backdrop,.md-sidenav-container[fullscreen]{position:absolute;top:0;bottom:0;right:0;left:0}.md-sidenav-container[fullscreen].md-sidenav-opened{overflow:hidden}.md-sidenav-backdrop{display:block;z-index:2;visibility:hidden}.md-sidenav-backdrop.md-sidenav-shown{visibility:visible}@media screen and (-ms-high-contrast:active){.md-sidenav-backdrop{opacity:.5}}.md-sidenav-content{position:relative;height:100%;overflow:auto}md-sidenav,md-sidenav.md-sidenav-closing{transform:translate3d(-100%,0,0)}md-sidenav{display:block;position:absolute;top:0;bottom:0;z-index:3;min-width:5%;outline:0}md-sidenav.md-sidenav-closed{visibility:hidden}md-sidenav.md-sidenav-opened,md-sidenav.md-sidenav-opening{box-shadow:0 8px 10px -5px rgba(0,0,0,.2),0 16px 24px 2px rgba(0,0,0,.14),0 6px 30px 5px rgba(0,0,0,.12);transform:translate3d(0,0,0)}md-sidenav.md-sidenav-opening{visibility:visible}md-sidenav.md-sidenav-end,md-sidenav.md-sidenav-end.md-sidenav-closing{transform:translate3d(100%,0,0)}md-sidenav.md-sidenav-side{z-index:1}md-sidenav.md-sidenav-end{right:0}md-sidenav.md-sidenav-end.md-sidenav-closed{visibility:hidden}md-sidenav.md-sidenav-end.md-sidenav-opened,md-sidenav.md-sidenav-end.md-sidenav-opening{box-shadow:0 8px 10px -5px rgba(0,0,0,.2),0 16px 24px 2px rgba(0,0,0,.14),0 6px 30px 5px rgba(0,0,0,.12);transform:translate3d(0,0,0)}md-sidenav.md-sidenav-end.md-sidenav-opening{visibility:visible}[dir=rtl] md-sidenav,[dir=rtl] md-sidenav.md-sidenav-closing{transform:translate3d(100%,0,0)}[dir=rtl] md-sidenav.md-sidenav-closed{visibility:hidden}[dir=rtl] md-sidenav.md-sidenav-opened,[dir=rtl] md-sidenav.md-sidenav-opening{box-shadow:0 8px 10px -5px rgba(0,0,0,.2),0 16px 24px 2px rgba(0,0,0,.14),0 6px 30px 5px rgba(0,0,0,.12);transform:translate3d(0,0,0)}[dir=rtl] md-sidenav.md-sidenav-opening{visibility:visible}[dir=rtl] md-sidenav.md-sidenav-end{left:0;right:auto;transform:translate3d(-100%,0,0)}[dir=rtl] md-sidenav.md-sidenav-end.md-sidenav-closed{visibility:hidden}[dir=rtl] md-sidenav.md-sidenav-end.md-sidenav-closing{transform:translate3d(-100%,0,0)}[dir=rtl] md-sidenav.md-sidenav-end.md-sidenav-opened,[dir=rtl] md-sidenav.md-sidenav-end.md-sidenav-opening{box-shadow:0 8px 10px -5px rgba(0,0,0,.2),0 16px 24px 2px rgba(0,0,0,.14),0 6px 30px 5px rgba(0,0,0,.12);transform:translate3d(0,0,0)}[dir=rtl] md-sidenav.md-sidenav-end.md-sidenav-opening{visibility:visible}.md-sidenav-focus-trap{height:100%}.md-sidenav-focus-trap>.cdk-focus-trap-content{box-sizing:border-box;height:100%;overflow-y:auto;transform:translateZ(0)}.md-sidenav-invalid{display:none}",
	".md-sidenav-content,md-sidenav{transition:transform .4s cubic-bezier(.25,.8,.25,1)}.md-sidenav-backdrop.md-sidenav-shown{transition:background-color .4s cubic-bezier(.25,.8,.25,1)}"],
	            host: {
	                'class': 'md-sidenav-container',
	            },
	            encapsulation: _angular_core.ViewEncapsulation.None,
	        }),
	        __param$8(0, _angular_core.Optional()), 
	        __metadata$34('design:paramtypes', [Dir, _angular_core.ElementRef, _angular_core.Renderer])
	    ], MdSidenavContainer);
	    return MdSidenavContainer;
	}());
	var MdSidenavModule = (function () {
	    function MdSidenavModule() {
	    }
	    MdSidenavModule.forRoot = function () {
	        return {
	            ngModule: MdSidenavModule,
	            providers: [InteractivityChecker]
	        };
	    };
	    MdSidenavModule = __decorate$34([
	        _angular_core.NgModule({
	            imports: [_angular_common.CommonModule, DefaultStyleCompatibilityModeModule, A11yModule, OverlayModule],
	            exports: [MdSidenavContainer, MdSidenav, DefaultStyleCompatibilityModeModule],
	            declarations: [MdSidenavContainer, MdSidenav],
	        }), 
	        __metadata$34('design:paramtypes', [])
	    ], MdSidenavModule);
	    return MdSidenavModule;
	}());
	
	var __decorate$35 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$35 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var MdListDivider = (function () {
	    function MdListDivider() {
	    }
	    MdListDivider = __decorate$35([
	        _angular_core.Directive({
	            selector: 'md-divider, mat-divider'
	        }), 
	        __metadata$35('design:paramtypes', [])
	    ], MdListDivider);
	    return MdListDivider;
	}());
	var MdList = (function () {
	    function MdList() {
	    }
	    MdList = __decorate$35([
	        _angular_core.Component({selector: 'md-list, mat-list, md-nav-list, mat-nav-list',
	            host: { 'role': 'list' },
	            template: '<ng-content></ng-content>',
	            styles: ["md-list,md-nav-list{padding-top:8px;display:block}md-list [md-subheader],md-nav-list [md-subheader]{display:block;box-sizing:border-box;height:48px;padding:16px;margin:0;font-size:14px;font-weight:500}md-list [md-subheader]:first-child,md-nav-list [md-subheader]:first-child{margin-top:-8px}md-list a[md-list-item],md-list md-list-item,md-nav-list a[md-list-item],md-nav-list md-list-item{display:block}md-list a[md-list-item] .md-list-item,md-list md-list-item .md-list-item,md-nav-list a[md-list-item] .md-list-item,md-nav-list md-list-item .md-list-item{display:flex;flex-direction:row;align-items:center;font-family:Roboto,\"Helvetica Neue\",sans-serif;box-sizing:border-box;font-size:16px;height:48px;padding:0 16px}md-list a[md-list-item].md-list-avatar .md-list-item,md-list md-list-item.md-list-avatar .md-list-item,md-nav-list a[md-list-item].md-list-avatar .md-list-item,md-nav-list md-list-item.md-list-avatar .md-list-item{height:56px}md-list a[md-list-item].md-2-line .md-list-item,md-list md-list-item.md-2-line .md-list-item,md-nav-list a[md-list-item].md-2-line .md-list-item,md-nav-list md-list-item.md-2-line .md-list-item{height:72px}md-list a[md-list-item].md-3-line .md-list-item,md-list md-list-item.md-3-line .md-list-item,md-nav-list a[md-list-item].md-3-line .md-list-item,md-nav-list md-list-item.md-3-line .md-list-item{height:88px}md-list a[md-list-item].md-multi-line .md-list-item,md-list md-list-item.md-multi-line .md-list-item,md-nav-list a[md-list-item].md-multi-line .md-list-item,md-nav-list md-list-item.md-multi-line .md-list-item{height:100%;padding:8px 16px}md-list a[md-list-item] .md-list-text,md-list md-list-item .md-list-text,md-nav-list a[md-list-item] .md-list-text,md-nav-list md-list-item .md-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0 16px}md-list a[md-list-item] .md-list-text>*,md-list md-list-item .md-list-text>*,md-nav-list a[md-list-item] .md-list-text>*,md-nav-list md-list-item .md-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}md-list a[md-list-item] .md-list-text:empty,md-list md-list-item .md-list-text:empty,md-nav-list a[md-list-item] .md-list-text:empty,md-nav-list md-list-item .md-list-text:empty{display:none}md-list a[md-list-item] .md-list-text:first-child,md-list md-list-item .md-list-text:first-child,md-nav-list a[md-list-item] .md-list-text:first-child,md-nav-list md-list-item .md-list-text:first-child{padding:0}md-list a[md-list-item] [md-list-avatar],md-list md-list-item [md-list-avatar],md-nav-list a[md-list-item] [md-list-avatar],md-nav-list md-list-item [md-list-avatar]{flex-shrink:0;width:40px;height:40px;border-radius:50%}md-list a[md-list-item] [md-list-icon],md-list md-list-item [md-list-icon],md-nav-list a[md-list-item] [md-list-icon],md-nav-list md-list-item [md-list-icon]{width:24px;height:24px;border-radius:50%;padding:4px}md-list a[md-list-item] [md-line],md-list md-list-item [md-line],md-nav-list a[md-list-item] [md-line],md-nav-list md-list-item [md-line]{white-space:nowrap;overflow-x:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}md-list a[md-list-item] [md-line]:nth-child(n+2),md-list md-list-item [md-line]:nth-child(n+2),md-nav-list a[md-list-item] [md-line]:nth-child(n+2),md-nav-list md-list-item [md-line]:nth-child(n+2){font-size:14px}md-list[dense],md-nav-list[dense]{padding-top:4px;display:block}md-list[dense] [md-subheader],md-nav-list[dense] [md-subheader]{display:block;box-sizing:border-box;height:40px;padding:16px;margin:0;font-size:13px;font-weight:500}md-list[dense] [md-subheader]:first-child,md-nav-list[dense] [md-subheader]:first-child{margin-top:-4px}md-list[dense] a[md-list-item],md-list[dense] md-list-item,md-nav-list[dense] a[md-list-item],md-nav-list[dense] md-list-item{display:block}md-list[dense] a[md-list-item] .md-list-item,md-list[dense] md-list-item .md-list-item,md-nav-list[dense] a[md-list-item] .md-list-item,md-nav-list[dense] md-list-item .md-list-item{display:flex;flex-direction:row;align-items:center;font-family:Roboto,\"Helvetica Neue\",sans-serif;box-sizing:border-box;font-size:13px;height:40px;padding:0 16px}md-list[dense] a[md-list-item].md-list-avatar .md-list-item,md-list[dense] md-list-item.md-list-avatar .md-list-item,md-nav-list[dense] a[md-list-item].md-list-avatar .md-list-item,md-nav-list[dense] md-list-item.md-list-avatar .md-list-item{height:48px}md-list[dense] a[md-list-item].md-2-line .md-list-item,md-list[dense] md-list-item.md-2-line .md-list-item,md-nav-list[dense] a[md-list-item].md-2-line .md-list-item,md-nav-list[dense] md-list-item.md-2-line .md-list-item{height:60px}md-list[dense] a[md-list-item].md-3-line .md-list-item,md-list[dense] md-list-item.md-3-line .md-list-item,md-nav-list[dense] a[md-list-item].md-3-line .md-list-item,md-nav-list[dense] md-list-item.md-3-line .md-list-item{height:76px}md-list[dense] a[md-list-item].md-multi-line .md-list-item,md-list[dense] md-list-item.md-multi-line .md-list-item,md-nav-list[dense] a[md-list-item].md-multi-line .md-list-item,md-nav-list[dense] md-list-item.md-multi-line .md-list-item{height:100%;padding:8px 16px}md-list[dense] a[md-list-item] .md-list-text,md-list[dense] md-list-item .md-list-text,md-nav-list[dense] a[md-list-item] .md-list-text,md-nav-list[dense] md-list-item .md-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0 16px}md-list[dense] a[md-list-item] .md-list-text>*,md-list[dense] md-list-item .md-list-text>*,md-nav-list[dense] a[md-list-item] .md-list-text>*,md-nav-list[dense] md-list-item .md-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}md-list[dense] a[md-list-item] .md-list-text:empty,md-list[dense] md-list-item .md-list-text:empty,md-nav-list[dense] a[md-list-item] .md-list-text:empty,md-nav-list[dense] md-list-item .md-list-text:empty{display:none}md-list[dense] a[md-list-item] .md-list-text:first-child,md-list[dense] md-list-item .md-list-text:first-child,md-nav-list[dense] a[md-list-item] .md-list-text:first-child,md-nav-list[dense] md-list-item .md-list-text:first-child{padding:0}md-list[dense] a[md-list-item] [md-list-avatar],md-list[dense] md-list-item [md-list-avatar],md-nav-list[dense] a[md-list-item] [md-list-avatar],md-nav-list[dense] md-list-item [md-list-avatar]{flex-shrink:0;width:40px;height:40px;border-radius:50%}md-list[dense] a[md-list-item] [md-list-icon],md-list[dense] md-list-item [md-list-icon],md-nav-list[dense] a[md-list-item] [md-list-icon],md-nav-list[dense] md-list-item [md-list-icon]{width:24px;height:24px;border-radius:50%;padding:4px}md-list[dense] a[md-list-item] [md-line],md-list[dense] md-list-item [md-line],md-nav-list[dense] a[md-list-item] [md-line],md-nav-list[dense] md-list-item [md-line]{white-space:nowrap;overflow-x:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}md-list[dense] a[md-list-item] [md-line]:nth-child(n+2),md-list[dense] md-list-item [md-line]:nth-child(n+2),md-nav-list[dense] a[md-list-item] [md-line]:nth-child(n+2),md-nav-list[dense] md-list-item [md-line]:nth-child(n+2){font-size:13px}md-divider{display:block;border-top-style:solid;border-top-width:1px;margin:0}md-nav-list a{text-decoration:none;color:inherit}md-nav-list .md-list-item{cursor:pointer}md-nav-list .md-list-item.md-list-item-focus,md-nav-list .md-list-item:hover{outline:0}"],
	            encapsulation: _angular_core.ViewEncapsulation.None
	        }), 
	        __metadata$35('design:paramtypes', [])
	    ], MdList);
	    return MdList;
	}());
	/* Need directive for a ContentChild query in list-item */
	var MdListAvatar = (function () {
	    function MdListAvatar() {
	    }
	    MdListAvatar = __decorate$35([
	        _angular_core.Directive({ selector: '[md-list-avatar], [mat-list-avatar]' }), 
	        __metadata$35('design:paramtypes', [])
	    ], MdListAvatar);
	    return MdListAvatar;
	}());
	var MdListItem = (function () {
	    function MdListItem(_renderer, _element) {
	        this._renderer = _renderer;
	        this._element = _element;
	        this._hasFocus = false;
	    }
	    Object.defineProperty(MdListItem.prototype, "_hasAvatar", {
	        set: function (avatar) {
	            this._renderer.setElementClass(this._element.nativeElement, 'md-list-avatar', avatar != null);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MdListItem.prototype.ngAfterContentInit = function () {
	        this._lineSetter = new MdLineSetter(this._lines, this._renderer, this._element);
	    };
	    MdListItem.prototype._handleFocus = function () {
	        this._hasFocus = true;
	    };
	    MdListItem.prototype._handleBlur = function () {
	        this._hasFocus = false;
	    };
	    __decorate$35([
	        _angular_core.ContentChildren(MdLine), 
	        __metadata$35('design:type', _angular_core.QueryList)
	    ], MdListItem.prototype, "_lines", void 0);
	    __decorate$35([
	        _angular_core.ContentChild(MdListAvatar), 
	        __metadata$35('design:type', MdListAvatar), 
	        __metadata$35('design:paramtypes', [MdListAvatar])
	    ], MdListItem.prototype, "_hasAvatar", null);
	    MdListItem = __decorate$35([
	        _angular_core.Component({selector: 'md-list-item, mat-list-item, a[md-list-item], a[mat-list-item]',
	            host: {
	                'role': 'listitem',
	                '(focus)': '_handleFocus()',
	                '(blur)': '_handleBlur()',
	            },
	            template: "<div class=\"md-list-item\" [class.md-list-item-focus]=\"_hasFocus\"><ng-content select=\"[md-list-avatar],[md-list-icon], [mat-list-avatar], [mat-list-icon]\"></ng-content><div class=\"md-list-text\"><ng-content select=\"[md-line], [mat-line]\"></ng-content></div><ng-content></ng-content></div>",
	            encapsulation: _angular_core.ViewEncapsulation.None
	        }), 
	        __metadata$35('design:paramtypes', [_angular_core.Renderer, _angular_core.ElementRef])
	    ], MdListItem);
	    return MdListItem;
	}());
	var MdListModule = (function () {
	    function MdListModule() {
	    }
	    MdListModule.forRoot = function () {
	        return {
	            ngModule: MdListModule,
	            providers: []
	        };
	    };
	    MdListModule = __decorate$35([
	        _angular_core.NgModule({
	            imports: [MdLineModule, DefaultStyleCompatibilityModeModule],
	            exports: [
	                MdList,
	                MdListItem,
	                MdListDivider,
	                MdListAvatar,
	                MdLineModule,
	                DefaultStyleCompatibilityModeModule,
	            ],
	            declarations: [MdList, MdListItem, MdListDivider, MdListAvatar],
	        }), 
	        __metadata$35('design:paramtypes', [])
	    ], MdListModule);
	    return MdListModule;
	}());
	
	/**
	 * Converts values into strings. Falsy values become empty strings.
	 * @docs-private
	 */
	function coerceToString(value) {
	    return "" + (value || '');
	}
	/**
	 * Converts a value that might be a string into a number.
	 * @docs-private
	 */
	function coerceToNumber(value) {
	    return typeof value === 'string' ? parseInt(value, 10) : value;
	}
	
	var __decorate$37 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$37 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var MdGridTile = (function () {
	    function MdGridTile(_renderer, _element) {
	        this._renderer = _renderer;
	        this._element = _element;
	        this._rowspan = 1;
	        this._colspan = 1;
	    }
	    Object.defineProperty(MdGridTile.prototype, "rowspan", {
	        /** Amount of rows that the grid tile takes up. */
	        get: function () { return this._rowspan; },
	        set: function (value) { this._rowspan = coerceToNumber(value); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdGridTile.prototype, "colspan", {
	        /** Amount of columns that the grid tile takes up. */
	        get: function () { return this._colspan; },
	        set: function (value) { this._colspan = coerceToNumber(value); },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Sets the style of the grid-tile element.  Needs to be set manually to avoid
	     * "Changed after checked" errors that would occur with HostBinding.
	     */
	    MdGridTile.prototype._setStyle = function (property, value) {
	        this._renderer.setElementStyle(this._element.nativeElement, property, value);
	    };
	    __decorate$37([
	        _angular_core.Input(), 
	        __metadata$37('design:type', Object)
	    ], MdGridTile.prototype, "rowspan", null);
	    __decorate$37([
	        _angular_core.Input(), 
	        __metadata$37('design:type', Object)
	    ], MdGridTile.prototype, "colspan", null);
	    MdGridTile = __decorate$37([
	        _angular_core.Component({selector: 'md-grid-tile, mat-grid-tile',
	            host: { 'role': 'listitem' },
	            template: "<figure><ng-content></ng-content></figure>",
	            styles: ["md-grid-list{display:block;position:relative}md-grid-tile{display:block;position:absolute;overflow:hidden}md-grid-tile figure{display:flex;position:absolute;align-items:center;justify-content:center;height:100%;top:0;right:0;bottom:0;left:0;padding:0;margin:0}md-grid-tile md-grid-tile-footer,md-grid-tile md-grid-tile-header{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;font-size:16px;position:absolute;left:0;right:0}md-grid-tile md-grid-tile-footer [md-line],md-grid-tile md-grid-tile-header [md-line]{white-space:nowrap;overflow-x:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}md-grid-tile md-grid-tile-footer [md-line]:nth-child(n+2),md-grid-tile md-grid-tile-header [md-line]:nth-child(n+2){font-size:12px}md-grid-tile .md-grid-list-text>*,md-grid-tile md-grid-tile-footer>*,md-grid-tile md-grid-tile-header>*{margin:0;padding:0;font-weight:400;font-size:inherit}md-grid-tile md-grid-tile-footer.md-2-line,md-grid-tile md-grid-tile-header.md-2-line{height:68px}md-grid-tile .md-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}md-grid-tile .md-grid-list-text:empty,md-grid-tile [md-grid-avatar]:empty{display:none}md-grid-tile md-grid-tile-header{top:0}md-grid-tile md-grid-tile-footer{bottom:0}md-grid-tile [md-grid-avatar]{padding-right:16px}[dir=rtl] md-grid-tile [md-grid-avatar]{padding-right:0;padding-left:16px}"],
	            encapsulation: _angular_core.ViewEncapsulation.None,
	        }), 
	        __metadata$37('design:paramtypes', [_angular_core.Renderer, _angular_core.ElementRef])
	    ], MdGridTile);
	    return MdGridTile;
	}());
	var MdGridTileText = (function () {
	    function MdGridTileText(_renderer, _element) {
	        this._renderer = _renderer;
	        this._element = _element;
	    }
	    MdGridTileText.prototype.ngAfterContentInit = function () {
	        this._lineSetter = new MdLineSetter(this._lines, this._renderer, this._element);
	    };
	    __decorate$37([
	        _angular_core.ContentChildren(MdLine), 
	        __metadata$37('design:type', _angular_core.QueryList)
	    ], MdGridTileText.prototype, "_lines", void 0);
	    MdGridTileText = __decorate$37([
	        _angular_core.Component({selector: 'md-grid-tile-header, mat-grid-tile-header, md-grid-tile-footer, mat-grid-tile-footer',
	            template: "<ng-content select=\"[md-grid-avatar], [mat-grid-avatar]\"></ng-content><div class=\"md-grid-list-text\"><ng-content select=\"[md-line], [mat-line]\"></ng-content></div><ng-content></ng-content>"
	        }), 
	        __metadata$37('design:paramtypes', [_angular_core.Renderer, _angular_core.ElementRef])
	    ], MdGridTileText);
	    return MdGridTileText;
	}());
	
	var __extends$8 = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * Exception thrown when cols property is missing from grid-list
	 * @docs-private
	 */
	var MdGridListColsError = (function (_super) {
	    __extends$8(MdGridListColsError, _super);
	    function MdGridListColsError() {
	        _super.call(this, "md-grid-list: must pass in number of columns. Example: <md-grid-list cols=\"3\">");
	    }
	    return MdGridListColsError;
	}(MdError));
	/**
	 * Exception thrown when a tile's colspan is longer than the number of cols in list
	 * @docs-private
	 */
	var MdGridTileTooWideError = (function (_super) {
	    __extends$8(MdGridTileTooWideError, _super);
	    function MdGridTileTooWideError(cols, listLength) {
	        _super.call(this, "md-grid-list: tile with colspan " + cols + " is wider than grid with cols=\"" + listLength + "\".");
	    }
	    return MdGridTileTooWideError;
	}(MdError));
	/**
	 * Exception thrown when an invalid ratio is passed in as a rowHeight
	 * @docs-private
	 */
	var MdGridListBadRatioError = (function (_super) {
	    __extends$8(MdGridListBadRatioError, _super);
	    function MdGridListBadRatioError(value) {
	        _super.call(this, "md-grid-list: invalid ratio given for row-height: \"" + value + "\"");
	    }
	    return MdGridListBadRatioError;
	}(MdError));
	
	/**
	 * Class for determining, from a list of tiles, the (row, col) position of each of those tiles
	 * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)
	 * because the tiles can have a rowspan.
	 *
	 * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid
	 * large enough to accommodate it so that the tiles still render in the same order in which they
	 * are given.
	 *
	 * The basis of the algorithm is the use of an array to track the already placed tiles. Each
	 * element of the array corresponds to a column, and the value indicates how many cells in that
	 * column are already occupied; zero indicates an empty cell. Moving "down" to the next row
	 * decrements each value in the tracking array (indicating that the column is one cell closer to
	 * being free).
	 *
	 * @docs-private
	 */
	var TileCoordinator = (function () {
	    function TileCoordinator(numColumns, tiles) {
	        var _this = this;
	        /** Index at which the search for the next gap will start. */
	        this.columnIndex = 0;
	        /** The current row index. */
	        this.rowIndex = 0;
	        this.tracker = new Array(numColumns);
	        this.tracker.fill(0, 0, this.tracker.length);
	        this.positions = tiles.map(function (tile) { return _this._trackTile(tile); });
	    }
	    Object.defineProperty(TileCoordinator.prototype, "rowCount", {
	        /** Gets the total number of rows occupied by tiles */
	        get: function () { return this.rowIndex + 1; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TileCoordinator.prototype, "rowspan", {
	        /** Gets the total span of rows occupied by tiles.
	         * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2. */
	        get: function () {
	            var lastRowMax = Math.max.apply(Math, this.tracker);
	            // if any of the tiles has a rowspan that pushes it beyond the total row count,
	            // add the difference to the rowcount
	            return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /** Calculates the row and col position of a tile. */
	    TileCoordinator.prototype._trackTile = function (tile) {
	        // Find a gap large enough for this tile.
	        var gapStartIndex = this._findMatchingGap(tile.colspan);
	        // Place tile in the resulting gap.
	        this._markTilePosition(gapStartIndex, tile);
	        // The next time we look for a gap, the search will start at columnIndex, which should be
	        // immediately after the tile that has just been placed.
	        this.columnIndex = gapStartIndex + tile.colspan;
	        return new TilePosition(this.rowIndex, gapStartIndex);
	    };
	    /** Finds the next available space large enough to fit the tile. */
	    TileCoordinator.prototype._findMatchingGap = function (tileCols) {
	        if (tileCols > this.tracker.length) {
	            throw new MdGridTileTooWideError(tileCols, this.tracker.length);
	        }
	        // Start index is inclusive, end index is exclusive.
	        var gapStartIndex = -1;
	        var gapEndIndex = -1;
	        // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.
	        do {
	            // If we've reached the end of the row, go to the next row.
	            if (this.columnIndex + tileCols > this.tracker.length) {
	                this._nextRow();
	                continue;
	            }
	            gapStartIndex = this.tracker.indexOf(0, this.columnIndex);
	            // If there are no more empty spaces in this row at all, move on to the next row.
	            if (gapStartIndex == -1) {
	                this._nextRow();
	                continue;
	            }
	            gapEndIndex = this._findGapEndIndex(gapStartIndex);
	            // If a gap large enough isn't found, we want to start looking immediately after the current
	            // gap on the next iteration.
	            this.columnIndex = gapStartIndex + 1;
	        } while (gapEndIndex - gapStartIndex < tileCols);
	        return gapStartIndex;
	    };
	    /** Move "down" to the next row. */
	    TileCoordinator.prototype._nextRow = function () {
	        this.columnIndex = 0;
	        this.rowIndex++;
	        // Decrement all spaces by one to reflect moving down one row.
	        for (var i = 0; i < this.tracker.length; i++) {
	            this.tracker[i] = Math.max(0, this.tracker[i] - 1);
	        }
	    };
	    /**
	     * Finds the end index (exclusive) of a gap given the index from which to start looking.
	     * The gap ends when a non-zero value is found.
	     */
	    TileCoordinator.prototype._findGapEndIndex = function (gapStartIndex) {
	        for (var i = gapStartIndex + 1; i < this.tracker.length; i++) {
	            if (this.tracker[i] != 0) {
	                return i;
	            }
	        }
	        // The gap ends with the end of the row.
	        return this.tracker.length;
	    };
	    /** Update the tile tracker to account for the given tile in the given space. */
	    TileCoordinator.prototype._markTilePosition = function (start, tile) {
	        for (var i = 0; i < tile.colspan; i++) {
	            this.tracker[start + i] = tile.rowspan;
	        }
	    };
	    return TileCoordinator;
	}());
	/**
	 * Simple data structure for tile position (row, col).
	 * @docs-private
	 */
	var TilePosition = (function () {
	    function TilePosition(row, col) {
	        this.row = row;
	        this.col = col;
	    }
	    return TilePosition;
	}());
	
	var __extends$9 = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * Sets the style properties for an individual tile, given the position calculated by the
	 * Tile Coordinator.
	 * @docs-private
	 */
	var TileStyler = (function () {
	    function TileStyler() {
	        this._rows = 0;
	        this._rowspan = 0;
	    }
	    /**
	     * Adds grid-list layout info once it is available. Cannot be processed in the constructor
	     * because these properties haven't been calculated by that point.
	     *
	     * @param gutterSize Size of the grid's gutter.
	     * @param tracker Instance of the TileCoordinator.
	     * @param cols Amount of columns in the grid.
	     * @param direction Layout direction of the grid.
	     */
	    TileStyler.prototype.init = function (gutterSize, tracker, cols, direction) {
	        this._gutterSize = normalizeUnits(gutterSize);
	        this._rows = tracker.rowCount;
	        this._rowspan = tracker.rowspan;
	        this._cols = cols;
	        this._direction = direction;
	    };
	    /**
	     * Computes the amount of space a single 1x1 tile would take up (width or height).
	     * Used as a basis for other calculations.
	     * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.
	     * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.
	     * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().
	     */
	    TileStyler.prototype.getBaseTileSize = function (sizePercent, gutterFraction) {
	        // Take the base size percent (as would be if evenly dividing the size between cells),
	        // and then subtracting the size of one gutter. However, since there are no gutters on the
	        // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter
	        // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the
	        // edge evenly among the cells).
	        return "(" + sizePercent + "% - ( " + this._gutterSize + " * " + gutterFraction + " ))";
	    };
	    /**
	     * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.
	     * @param offset Number of tiles that have already been rendered in the row/column.
	     * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).
	     * @return Position of the tile as a CSS calc() expression.
	     */
	    TileStyler.prototype.getTilePosition = function (baseSize, offset) {
	        // The position comes the size of a 1x1 tile plus gutter for each previous tile in the
	        // row/column (offset).
	        return calc("(" + baseSize + " + " + this._gutterSize + ") * " + offset);
	    };
	    /**
	     * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.
	     * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).
	     * @param span The tile's rowspan or colspan.
	     * @return Size of the tile as a CSS calc() expression.
	     */
	    TileStyler.prototype.getTileSize = function (baseSize, span) {
	        return "(" + baseSize + " * " + span + ") + (" + (span - 1) + " * " + this._gutterSize + ")";
	    };
	    /**
	     * Sets the style properties to be applied to a tile for the given row and column index.
	     * @param tile Tile to which to apply the styling.
	     * @param rowIndex Index of the tile's row.
	     * @param colIndex Index of the tile's column.
	     */
	    TileStyler.prototype.setStyle = function (tile, rowIndex, colIndex) {
	        // Percent of the available horizontal space that one column takes up.
	        var percentWidthPerTile = 100 / this._cols;
	        // Fraction of the vertical gutter size that each column takes up.
	        // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.
	        var gutterWidthFractionPerTile = (this._cols - 1) / this._cols;
	        this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);
	        this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);
	    };
	    /** Sets the horizontal placement of the tile in the list. */
	    TileStyler.prototype.setColStyles = function (tile, colIndex, percentWidth, gutterWidth) {
	        // Base horizontal size of a column.
	        var baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);
	        // The width and horizontal position of each tile is always calculated the same way, but the
	        // height and vertical position depends on the rowMode.
	        var side = this._direction === 'ltr' ? 'left' : 'right';
	        tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));
	        tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));
	    };
	    /**
	     * Calculates the total size taken up by gutters across one axis of a list.
	     */
	    TileStyler.prototype.getGutterSpan = function () {
	        return this._gutterSize + " * (" + this._rowspan + " - 1)";
	    };
	    /**
	     * Calculates the total size taken up by tiles across one axis of a list.
	     * @param tileHeight Height of the tile.
	     */
	    TileStyler.prototype.getTileSpan = function (tileHeight) {
	        return this._rowspan + " * " + this.getTileSize(tileHeight, 1);
	    };
	    /**
	     * Sets the vertical placement of the tile in the list.
	     * This method will be implemented by each type of TileStyler.
	     * @docs-private
	     */
	    TileStyler.prototype.setRowStyles = function (tile, rowIndex, percentWidth, gutterWidth) { };
	    /**
	     * Calculates the computed height and returns the correct style property to set.
	     * This method will be implemented by each type of TileStyler.
	     * @docs-private
	     */
	    TileStyler.prototype.getComputedHeight = function () { return null; };
	    return TileStyler;
	}());
	/**
	 * This type of styler is instantiated when the user passes in a fixed row height.
	 * Example <md-grid-list cols="3" rowHeight="100px">
	 * @docs-private
	 */
	var FixedTileStyler = (function (_super) {
	    __extends$9(FixedTileStyler, _super);
	    function FixedTileStyler(fixedRowHeight) {
	        _super.call(this);
	        this.fixedRowHeight = fixedRowHeight;
	    }
	    FixedTileStyler.prototype.init = function (gutterSize, tracker, cols, direction) {
	        _super.prototype.init.call(this, gutterSize, tracker, cols, direction);
	        this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);
	    };
	    FixedTileStyler.prototype.setRowStyles = function (tile, rowIndex, percentWidth, gutterWidth) {
	        tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));
	        tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));
	    };
	    FixedTileStyler.prototype.getComputedHeight = function () {
	        return [
	            'height', calc(this.getTileSpan(this.fixedRowHeight) + " + " + this.getGutterSpan())
	        ];
	    };
	    return FixedTileStyler;
	}(TileStyler));
	/**
	 * This type of styler is instantiated when the user passes in a width:height ratio
	 * for the row height.  Example <md-grid-list cols="3" rowHeight="3:1">
	 * @docs-private
	 */
	var RatioTileStyler = (function (_super) {
	    __extends$9(RatioTileStyler, _super);
	    function RatioTileStyler(value) {
	        _super.call(this);
	        this._parseRatio(value);
	    }
	    RatioTileStyler.prototype.setRowStyles = function (tile, rowIndex, percentWidth, gutterWidth) {
	        var percentHeightPerTile = percentWidth / this.rowHeightRatio;
	        this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);
	        // Use paddingTop and marginTop to maintain the given aspect ratio, as
	        // a percentage-based value for these properties is applied versus the *width* of the
	        // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties
	        tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));
	        tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));
	    };
	    RatioTileStyler.prototype.getComputedHeight = function () {
	        return [
	            'paddingBottom', calc(this.getTileSpan(this.baseTileHeight) + " + " + this.getGutterSpan())
	        ];
	    };
	    RatioTileStyler.prototype._parseRatio = function (value) {
	        var ratioParts = value.split(':');
	        if (ratioParts.length !== 2) {
	            throw new MdGridListBadRatioError(value);
	        }
	        this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);
	    };
	    return RatioTileStyler;
	}(TileStyler));
	/**
	 * This type of styler is instantiated when the user selects a "fit" row height mode.
	 * In other words, the row height will reflect the total height of the container divided
	 * by the number of rows.  Example <md-grid-list cols="3" rowHeight="fit">
	 *
	 * @docs-private
	 */
	var FitTileStyler = (function (_super) {
	    __extends$9(FitTileStyler, _super);
	    function FitTileStyler() {
	        _super.apply(this, arguments);
	    }
	    FitTileStyler.prototype.setRowStyles = function (tile, rowIndex, percentWidth, gutterWidth) {
	        // Percent of the available vertical space that one row takes up.
	        var percentHeightPerTile = 100 / this._rowspan;
	        // Fraction of the horizontal gutter size that each column takes up.
	        var gutterHeightPerTile = (this._rows - 1) / this._rows;
	        // Base vertical size of a column.
	        var baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);
	        tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));
	        tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));
	    };
	    return FitTileStyler;
	}(TileStyler));
	/** Wraps a CSS string in a calc function */
	function calc(exp) { return "calc(" + exp + ")"; }
	/** Appends pixels to a CSS string if no units are given. */
	function normalizeUnits(value) {
	    return (value.match(/px|em|rem/)) ? value : value + 'px';
	}
	
	var __decorate$36 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$36 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param$9 = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	// TODO(kara): Conditional (responsive) column count / row size.
	// TODO(kara): Re-layout on window resize / media change (debounced).
	// TODO(kara): gridTileHeader and gridTileFooter.
	var MD_FIT_MODE = 'fit';
	var MdGridList = (function () {
	    function MdGridList(_renderer, _element, _dir) {
	        this._renderer = _renderer;
	        this._element = _element;
	        this._dir = _dir;
	        /** The amount of space between tiles. This will be something like '5px' or '2em'. */
	        this._gutter = '1px';
	    }
	    Object.defineProperty(MdGridList.prototype, "cols", {
	        /** Amount of columns in the grid list. */
	        get: function () { return this._cols; },
	        set: function (value) { this._cols = coerceToNumber(value); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdGridList.prototype, "gutterSize", {
	        /** Size of the grid list's gutter in pixels. */
	        get: function () { return this._gutter; },
	        set: function (value) { this._gutter = coerceToString(value); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdGridList.prototype, "rowHeight", {
	        /** Set internal representation of row height from the user-provided value. */
	        set: function (value) {
	            this._rowHeight = coerceToString(value);
	            this._setTileStyler();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MdGridList.prototype.ngOnInit = function () {
	        this._checkCols();
	        this._checkRowHeight();
	    };
	    /**
	     * The layout calculation is fairly cheap if nothing changes, so there's little cost
	     * to run it frequently.
	     */
	    MdGridList.prototype.ngAfterContentChecked = function () {
	        this._layoutTiles();
	    };
	    /** Throw a friendly error if cols property is missing */
	    MdGridList.prototype._checkCols = function () {
	        if (!this.cols) {
	            throw new MdGridListColsError();
	        }
	    };
	    /** Default to equal width:height if rowHeight property is missing */
	    MdGridList.prototype._checkRowHeight = function () {
	        if (!this._rowHeight) {
	            this._tileStyler = new RatioTileStyler('1:1');
	        }
	    };
	    /** Creates correct Tile Styler subtype based on rowHeight passed in by user */
	    MdGridList.prototype._setTileStyler = function () {
	        if (this._rowHeight === MD_FIT_MODE) {
	            this._tileStyler = new FitTileStyler();
	        }
	        else if (this._rowHeight && this._rowHeight.match(/:/g)) {
	            this._tileStyler = new RatioTileStyler(this._rowHeight);
	        }
	        else {
	            this._tileStyler = new FixedTileStyler(this._rowHeight);
	        }
	    };
	    /** Computes and applies the size and position for all children grid tiles. */
	    MdGridList.prototype._layoutTiles = function () {
	        var tiles = this._tiles.toArray();
	        var tracker = new TileCoordinator(this.cols, tiles);
	        var direction = this._dir ? this._dir.value : 'ltr';
	        this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);
	        for (var i = 0; i < tiles.length; i++) {
	            var pos = tracker.positions[i];
	            var tile = tiles[i];
	            this._tileStyler.setStyle(tile, pos.row, pos.col);
	        }
	        this._setListStyle(this._tileStyler.getComputedHeight());
	    };
	    /** Sets style on the main grid-list element, given the style name and value. */
	    MdGridList.prototype._setListStyle = function (style$$1) {
	        if (style$$1) {
	            this._renderer.setElementStyle(this._element.nativeElement, style$$1[0], style$$1[1]);
	        }
	    };
	    __decorate$36([
	        _angular_core.ContentChildren(MdGridTile), 
	        __metadata$36('design:type', _angular_core.QueryList)
	    ], MdGridList.prototype, "_tiles", void 0);
	    __decorate$36([
	        _angular_core.Input(), 
	        __metadata$36('design:type', Object)
	    ], MdGridList.prototype, "cols", null);
	    __decorate$36([
	        _angular_core.Input(), 
	        __metadata$36('design:type', Object)
	    ], MdGridList.prototype, "gutterSize", null);
	    __decorate$36([
	        _angular_core.Input(), 
	        __metadata$36('design:type', Object), 
	        __metadata$36('design:paramtypes', [Object])
	    ], MdGridList.prototype, "rowHeight", null);
	    MdGridList = __decorate$36([
	        _angular_core.Component({selector: 'md-grid-list, mat-grid-list',
	            template: "<div class=\"md-grid-list\"><ng-content></ng-content></div>",
	            styles: ["md-grid-list{display:block;position:relative}md-grid-tile{display:block;position:absolute;overflow:hidden}md-grid-tile figure{display:flex;position:absolute;align-items:center;justify-content:center;height:100%;top:0;right:0;bottom:0;left:0;padding:0;margin:0}md-grid-tile md-grid-tile-footer,md-grid-tile md-grid-tile-header{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;font-size:16px;position:absolute;left:0;right:0}md-grid-tile md-grid-tile-footer [md-line],md-grid-tile md-grid-tile-header [md-line]{white-space:nowrap;overflow-x:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}md-grid-tile md-grid-tile-footer [md-line]:nth-child(n+2),md-grid-tile md-grid-tile-header [md-line]:nth-child(n+2){font-size:12px}md-grid-tile .md-grid-list-text>*,md-grid-tile md-grid-tile-footer>*,md-grid-tile md-grid-tile-header>*{margin:0;padding:0;font-weight:400;font-size:inherit}md-grid-tile md-grid-tile-footer.md-2-line,md-grid-tile md-grid-tile-header.md-2-line{height:68px}md-grid-tile .md-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}md-grid-tile .md-grid-list-text:empty,md-grid-tile [md-grid-avatar]:empty{display:none}md-grid-tile md-grid-tile-header{top:0}md-grid-tile md-grid-tile-footer{bottom:0}md-grid-tile [md-grid-avatar]{padding-right:16px}[dir=rtl] md-grid-tile [md-grid-avatar]{padding-right:0;padding-left:16px}"],
	            host: {
	                'role': 'list'
	            },
	            encapsulation: _angular_core.ViewEncapsulation.None,
	        }),
	        __param$9(2, _angular_core.Optional()), 
	        __metadata$36('design:paramtypes', [_angular_core.Renderer, _angular_core.ElementRef, Dir])
	    ], MdGridList);
	    return MdGridList;
	}());
	var MdGridListModule = (function () {
	    function MdGridListModule() {
	    }
	    MdGridListModule.forRoot = function () {
	        return {
	            ngModule: MdGridListModule,
	            providers: []
	        };
	    };
	    MdGridListModule = __decorate$36([
	        _angular_core.NgModule({
	            imports: [MdLineModule, DefaultStyleCompatibilityModeModule],
	            exports: [
	                MdGridList,
	                MdGridTile,
	                MdGridTileText,
	                MdLineModule,
	                DefaultStyleCompatibilityModeModule,
	            ],
	            declarations: [MdGridList, MdGridTile, MdGridTileText],
	        }), 
	        __metadata$36('design:paramtypes', [])
	    ], MdGridListModule);
	    return MdGridListModule;
	}());
	
	var __decorate$38 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$38 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/**
	 * Content of a card, needed as it's used as a selector in the API.
	 */
	var MdCardContent = (function () {
	    function MdCardContent() {
	    }
	    MdCardContent = __decorate$38([
	        _angular_core.Directive({
	            selector: 'md-card-content, mat-card-content'
	        }), 
	        __metadata$38('design:paramtypes', [])
	    ], MdCardContent);
	    return MdCardContent;
	}());
	/**
	 * Title of a card, needed as it's used as a selector in the API.
	 */
	var MdCardTitle = (function () {
	    function MdCardTitle() {
	    }
	    MdCardTitle = __decorate$38([
	        _angular_core.Directive({
	            selector: 'md-card-title, mat-card-title'
	        }), 
	        __metadata$38('design:paramtypes', [])
	    ], MdCardTitle);
	    return MdCardTitle;
	}());
	/**
	 * Sub-title of a card, needed as it's used as a selector in the API.
	 */
	var MdCardSubtitle = (function () {
	    function MdCardSubtitle() {
	    }
	    MdCardSubtitle = __decorate$38([
	        _angular_core.Directive({
	            selector: 'md-card-subtitle, mat-card-subtitle'
	        }), 
	        __metadata$38('design:paramtypes', [])
	    ], MdCardSubtitle);
	    return MdCardSubtitle;
	}());
	/**
	 * Action section of a card, needed as it's used as a selector in the API.
	 */
	var MdCardActions = (function () {
	    function MdCardActions() {
	    }
	    MdCardActions = __decorate$38([
	        _angular_core.Directive({
	            selector: 'md-card-actions, mat-card-actions'
	        }), 
	        __metadata$38('design:paramtypes', [])
	    ], MdCardActions);
	    return MdCardActions;
	}());
	/**
	 * Footer of a card, needed as it's used as a selector in the API.
	 */
	var MdCardFooter = (function () {
	    function MdCardFooter() {
	    }
	    MdCardFooter = __decorate$38([
	        _angular_core.Directive({
	            selector: 'md-card-footer, mat-card-footer'
	        }), 
	        __metadata$38('design:paramtypes', [])
	    ], MdCardFooter);
	    return MdCardFooter;
	}());
	/**
	 * A basic content container component that adds the styles of a Material design card.
	 *
	 * While this component can be used alone, it also provides a number
	 * of preset styles for common card sections, including:
	 * - md-card-title
	 * - md-card-subtitle
	 * - md-card-content
	 * - md-card-actions
	 * - md-card-footer
	 */
	var MdCard = (function () {
	    function MdCard() {
	    }
	    MdCard = __decorate$38([
	        _angular_core.Component({selector: 'md-card, mat-card',
	            template: "<ng-content></ng-content>",
	            styles: ["md-card{box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12);transition:box-shadow 280ms cubic-bezier(.4,0,.2,1);will-change:box-shadow;display:block;position:relative;padding:24px;border-radius:2px;font-family:Roboto,\"Helvetica Neue\",sans-serif}@media screen and (-ms-high-contrast:active){md-card{outline:solid 1px}}.md-card-flat{box-shadow:none}md-card-actions,md-card-content,md-card-subtitle,md-card-title{display:block;margin-bottom:16px}md-card-title{font-size:24px;font-weight:400}md-card-content,md-card-header md-card-title,md-card-subtitle{font-size:14px}md-card-actions{margin-left:-16px;margin-right:-16px;padding:8px 0}md-card-actions[align=end]{display:flex;justify-content:flex-end}[md-card-image]{width:calc(100% + 48px);margin:0 -24px 16px}[md-card-xl-image]{width:240px;height:240px;margin:-8px}md-card-footer{position:absolute;width:100%;min-height:5px;bottom:0;left:0}md-card-actions [md-button],md-card-actions [md-raised-button]{margin:0 4px}md-card-header{display:flex;flex-direction:row;height:40px;margin:-8px 0 16px}.md-card-header-text{height:40px;margin:0 8px}[md-card-avatar]{height:40px;width:40px;border-radius:50%}[md-card-lg-image],[md-card-md-image],[md-card-sm-image]{margin:-8px 0}md-card-title-group{display:flex;justify-content:space-between;margin:0 -8px}[md-card-sm-image]{width:80px;height:80px}[md-card-md-image]{width:112px;height:112px}[md-card-lg-image]{width:152px;height:152px}@media (max-width:600px){md-card{padding:24px 16px}[md-card-image]{width:calc(100% + 32px);margin:16px -16px}md-card-title-group{margin:0}[md-card-xl-image]{margin-left:0;margin-right:0}md-card-header{margin:-8px 0 0}}md-card-content>:first-child,md-card>:first-child{margin-top:0}md-card-content>:last-child,md-card>:last-child{margin-bottom:0}[md-card-image]:first-child{margin-top:-24px}md-card>md-card-actions:last-child{margin-bottom:-16px;padding-bottom:0}md-card-actions [md-button]:first-child,md-card-actions [md-raised-button]:first-child{margin-left:0;margin-right:0}md-card-subtitle:not(:first-child),md-card-title:not(:first-child){margin-top:-4px}md-card-header md-card-subtitle:not(:first-child),md-card>[md-card-xl-image]:first-child{margin-top:-8px}md-card>[md-card-xl-image]:last-child{margin-bottom:-8px}"],
	            encapsulation: _angular_core.ViewEncapsulation.None,
	            changeDetection: _angular_core.ChangeDetectionStrategy.OnPush,
	        }), 
	        __metadata$38('design:paramtypes', [])
	    ], MdCard);
	    return MdCard;
	}());
	/**
	 * Component intended to be used within the `<md-card>` component. It adds styles for a
	 * preset header section (i.e. a title, subtitle, and avatar layout).
	 */
	var MdCardHeader = (function () {
	    function MdCardHeader() {
	    }
	    MdCardHeader = __decorate$38([
	        _angular_core.Component({selector: 'md-card-header, mat-card-header',
	            template: "<ng-content select=\"[md-card-avatar], [mat-card-avatar]\"></ng-content><div class=\"md-card-header-text\"><ng-content select=\"md-card-title, mat-card-title, md-card-subtitle, mat-card-subtitle\"></ng-content></div><ng-content></ng-content>",
	            encapsulation: _angular_core.ViewEncapsulation.None,
	            changeDetection: _angular_core.ChangeDetectionStrategy.OnPush,
	        }), 
	        __metadata$38('design:paramtypes', [])
	    ], MdCardHeader);
	    return MdCardHeader;
	}());
	/**
	 * Component intended to be used within the <md-card> component. It adds styles for a preset
	 * layout that groups an image with a title section.
	 */
	var MdCardTitleGroup = (function () {
	    function MdCardTitleGroup() {
	    }
	    MdCardTitleGroup = __decorate$38([
	        _angular_core.Component({selector: 'md-card-title-group, mat-card-title-group',
	            template: "<div><ng-content select=\"md-card-title, mat-card-title, md-card-subtitle, mat-card-subtitle\"></ng-content></div><ng-content select=\"img\"></ng-content><ng-content></ng-content>",
	            encapsulation: _angular_core.ViewEncapsulation.None,
	            changeDetection: _angular_core.ChangeDetectionStrategy.OnPush,
	        }), 
	        __metadata$38('design:paramtypes', [])
	    ], MdCardTitleGroup);
	    return MdCardTitleGroup;
	}());
	var MdCardModule = (function () {
	    function MdCardModule() {
	    }
	    MdCardModule.forRoot = function () {
	        return {
	            ngModule: MdCardModule,
	            providers: []
	        };
	    };
	    MdCardModule = __decorate$38([
	        _angular_core.NgModule({
	            imports: [DefaultStyleCompatibilityModeModule],
	            exports: [
	                MdCard,
	                MdCardHeader,
	                MdCardTitleGroup,
	                MdCardContent,
	                MdCardTitle,
	                MdCardSubtitle,
	                MdCardActions,
	                MdCardFooter,
	                DefaultStyleCompatibilityModeModule,
	            ],
	            declarations: [
	                MdCard, MdCardHeader, MdCardTitleGroup, MdCardContent, MdCardTitle, MdCardSubtitle,
	                MdCardActions, MdCardFooter
	            ],
	        }), 
	        __metadata$38('design:paramtypes', [])
	    ], MdCardModule);
	    return MdCardModule;
	}());
	
	var __decorate$40 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$40 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/**
	 * Material design styled Chip component. Used inside the MdChipList component.
	 */
	var MdChip = (function () {
	    function MdChip(_renderer, _elementRef) {
	        this._renderer = _renderer;
	        this._elementRef = _elementRef;
	        /** Whether or not the chip is disabled. Disabled chips cannot be focused. */
	        this._disabled = null;
	        /** Whether or not the chip is selected. */
	        this._selected = false;
	        /** The palette color of selected chips. */
	        this._color = 'primary';
	        /** Emitted when the chip is focused. */
	        this.onFocus = new _angular_core.EventEmitter();
	        /** Emitted when the chip is selected. */
	        this.select = new _angular_core.EventEmitter();
	        /** Emitted when the chip is deselected. */
	        this.deselect = new _angular_core.EventEmitter();
	        /** Emitted when the chip is destroyed. */
	        this.destroy = new _angular_core.EventEmitter();
	    }
	    MdChip.prototype.ngOnInit = function () {
	        this._addDefaultCSSClass();
	        this._updateColor(this._color);
	    };
	    MdChip.prototype.ngOnDestroy = function () {
	        this.destroy.emit({ chip: this });
	    };
	    Object.defineProperty(MdChip.prototype, "disabled", {
	        /** Whether or not the chip is disabled. */
	        get: function () {
	            return this._disabled;
	        },
	        /** Sets the disabled state of the chip. */
	        set: function (value) {
	            this._disabled = coerceBooleanProperty(value) ? true : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdChip.prototype, "_isAriaDisabled", {
	        /** A String representation of the current disabled state. */
	        get: function () {
	            return String(coerceBooleanProperty(this.disabled));
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdChip.prototype, "selected", {
	        /** Whether or not this chip is selected. */
	        get: function () {
	            return this._selected;
	        },
	        set: function (value) {
	            this._selected = coerceBooleanProperty(value);
	            if (this._selected) {
	                this.select.emit({ chip: this });
	            }
	            else {
	                this.deselect.emit({ chip: this });
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Toggles the current selected state of this chip.
	     * @return Whether the chip is selected.
	     */
	    MdChip.prototype.toggleSelected = function () {
	        this.selected = !this.selected;
	        return this.selected;
	    };
	    Object.defineProperty(MdChip.prototype, "color", {
	        /** The color of the chip. Can be `primary`, `accent`, or `warn`. */
	        get: function () {
	            return this._color;
	        },
	        set: function (value) {
	            this._updateColor(value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /** Allows for programmatic focusing of the chip. */
	    MdChip.prototype.focus = function () {
	        this._renderer.invokeElementMethod(this._elementRef.nativeElement, 'focus');
	        this.onFocus.emit({ chip: this });
	    };
	    /** Ensures events fire properly upon click. */
	    MdChip.prototype._handleClick = function (event) {
	        // Check disabled
	        if (this.disabled) {
	            event.preventDefault();
	            event.stopPropagation();
	        }
	        else {
	            this.focus();
	        }
	    };
	    /** Initializes the appropriate CSS classes based on the chip type (basic or standard). */
	    MdChip.prototype._addDefaultCSSClass = function () {
	        var el = this._elementRef.nativeElement;
	        // Always add the `md-chip` class
	        el.classList.add('md-chip');
	        // If we are a basic chip, also add the `md-basic-chip` class for :not() targeting
	        if (el.nodeName.toLowerCase() == 'md-basic-chip' || el.hasAttribute('md-basic-chip')) {
	            el.classList.add('md-basic-chip');
	        }
	    };
	    /** Updates the private _color variable and the native element. */
	    MdChip.prototype._updateColor = function (newColor) {
	        this._setElementColor(this._color, false);
	        this._setElementColor(newColor, true);
	        this._color = newColor;
	    };
	    /** Sets the md-color on the native element. */
	    MdChip.prototype._setElementColor = function (color, isAdd) {
	        if (color != null && color != '') {
	            this._renderer.setElementClass(this._elementRef.nativeElement, "md-" + color, isAdd);
	        }
	    };
	    __decorate$40([
	        _angular_core.Output(), 
	        __metadata$40('design:type', Object)
	    ], MdChip.prototype, "select", void 0);
	    __decorate$40([
	        _angular_core.Output(), 
	        __metadata$40('design:type', Object)
	    ], MdChip.prototype, "deselect", void 0);
	    __decorate$40([
	        _angular_core.Output(), 
	        __metadata$40('design:type', Object)
	    ], MdChip.prototype, "destroy", void 0);
	    __decorate$40([
	        _angular_core.Input(), 
	        __metadata$40('design:type', Boolean)
	    ], MdChip.prototype, "disabled", null);
	    __decorate$40([
	        _angular_core.Input(), 
	        __metadata$40('design:type', Boolean)
	    ], MdChip.prototype, "selected", null);
	    __decorate$40([
	        _angular_core.Input(), 
	        __metadata$40('design:type', String)
	    ], MdChip.prototype, "color", null);
	    MdChip = __decorate$40([
	        _angular_core.Component({
	            selector: 'md-basic-chip, [md-basic-chip], md-chip, [md-chip]',
	            template: "<ng-content></ng-content>",
	            host: {
	                'tabindex': '-1',
	                'role': 'option',
	                '[class.md-chip-selected]': 'selected',
	                '[attr.disabled]': 'disabled',
	                '[attr.aria-disabled]': '_isAriaDisabled',
	                '(click)': '_handleClick($event)'
	            }
	        }), 
	        __metadata$40('design:paramtypes', [_angular_core.Renderer, _angular_core.ElementRef])
	    ], MdChip);
	    return MdChip;
	}());
	
	var __decorate$39 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$39 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/**
	 * A material design chips component (named ChipList for it's similarity to the List component).
	 *
	 * Example:
	 *
	 *     <md-chip-list>
	 *       <md-chip>Chip 1<md-chip>
	 *       <md-chip>Chip 2<md-chip>
	 *     </md-chip-list>
	 */
	var MdChipList = (function () {
	    function MdChipList(_elementRef) {
	        this._elementRef = _elementRef;
	        /** Track which chips we're listening to for focus/destruction. */
	        this._subscribed = new WeakMap();
	        /** Whether or not the chip is selectable. */
	        this._selectable = true;
	    }
	    MdChipList.prototype.ngAfterContentInit = function () {
	        var _this = this;
	        this._keyManager = new ListKeyManager(this.chips).withFocusWrap();
	        // Go ahead and subscribe all of the initial chips
	        this._subscribeChips(this.chips);
	        // When the list changes, re-subscribe
	        this.chips.changes.subscribe(function (chips) {
	            _this._subscribeChips(chips);
	        });
	    };
	    Object.defineProperty(MdChipList.prototype, "selectable", {
	        /**
	         * Whether or not this chip is selectable. When a chip is not selectable,
	         * it's selected state is always ignored.
	         */
	        get: function () {
	            return this._selectable;
	        },
	        set: function (value) {
	            this._selectable = coerceBooleanProperty(value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Programmatically focus the chip list. This in turn focuses the first
	     * non-disabled chip in this chip list.
	     */
	    MdChipList.prototype.focus = function () {
	        // TODO: ARIA says this should focus the first `selected` chip.
	        this._keyManager.focusFirstItem();
	    };
	    /** Passes relevant key presses to our key manager. */
	    MdChipList.prototype._keydown = function (event) {
	        var target = event.target;
	        // If they are on a chip, check for space/left/right, otherwise pass to our key manager
	        if (target && target.classList.contains('md-chip')) {
	            switch (event.keyCode) {
	                case SPACE:
	                    // If we are selectable, toggle the focused chip
	                    if (this.selectable) {
	                        this._toggleSelectOnFocusedChip();
	                    }
	                    // Always prevent space from scrolling the page since the list has focus
	                    event.preventDefault();
	                    break;
	                case LEFT_ARROW:
	                    this._keyManager.focusPreviousItem();
	                    event.preventDefault();
	                    break;
	                case RIGHT_ARROW:
	                    this._keyManager.focusNextItem();
	                    event.preventDefault();
	                    break;
	                default:
	                    this._keyManager.onKeydown(event);
	            }
	        }
	    };
	    /** Toggles the selected state of the currently focused chip. */
	    MdChipList.prototype._toggleSelectOnFocusedChip = function () {
	        // Allow disabling of chip selection
	        if (!this.selectable) {
	            return;
	        }
	        var focusedIndex = this._keyManager.focusedItemIndex;
	        if (this._isValidIndex(focusedIndex)) {
	            var focusedChip = this.chips.toArray()[focusedIndex];
	            if (focusedChip) {
	                focusedChip.toggleSelected();
	            }
	        }
	    };
	    /**
	     * Iterate through the list of chips and add them to our list of
	     * subscribed chips.
	     *
	     * @param chips The list of chips to be subscribed.
	     */
	    MdChipList.prototype._subscribeChips = function (chips) {
	        var _this = this;
	        chips.forEach(function (chip) { return _this._addChip(chip); });
	    };
	    /**
	     * Add a specific chip to our subscribed list. If the chip has
	     * already been subscribed, this ensures it is only subscribed
	     * once.
	     *
	     * @param chip The chip to be subscribed (or checked for existing
	     * subscription).
	     */
	    MdChipList.prototype._addChip = function (chip) {
	        var _this = this;
	        // If we've already been subscribed to a parent, do nothing
	        if (this._subscribed.has(chip)) {
	            return;
	        }
	        // Watch for focus events outside of the keyboard navigation
	        chip.onFocus.subscribe(function () {
	            var chipIndex = _this.chips.toArray().indexOf(chip);
	            if (_this._isValidIndex(chipIndex)) {
	                _this._keyManager.updateFocusedItemIndex(chipIndex);
	            }
	        });
	        // On destroy, remove the item from our list, and check focus
	        chip.destroy.subscribe(function () {
	            var chipIndex = _this.chips.toArray().indexOf(chip);
	            if (_this._isValidIndex(chipIndex)) {
	                // Check whether the chip is the last item
	                if (chipIndex < _this.chips.length - 1) {
	                    _this._keyManager.setFocus(chipIndex);
	                }
	                else if (chipIndex - 1 >= 0) {
	                    _this._keyManager.setFocus(chipIndex - 1);
	                }
	            }
	            _this._subscribed.delete(chip);
	            chip.destroy.unsubscribe();
	        });
	        this._subscribed.set(chip, true);
	    };
	    /**
	     * Utility to ensure all indexes are valid.
	     *
	     * @param index The index to be checked.
	     * @returns True if the index is valid for our list of chips.
	     */
	    MdChipList.prototype._isValidIndex = function (index) {
	        return index >= 0 && index < this.chips.length;
	    };
	    __decorate$39([
	        _angular_core.Input(), 
	        __metadata$39('design:type', Boolean)
	    ], MdChipList.prototype, "selectable", null);
	    MdChipList = __decorate$39([
	        _angular_core.Component({selector: 'md-chip-list',
	            template: "<div class=\"md-chip-list-wrapper\"><ng-content></ng-content></div>",
	            host: {
	                // Properties
	                'tabindex': '0',
	                'role': 'listbox',
	                'class': 'md-chip-list',
	                // Events
	                '(focus)': 'focus()',
	                '(keydown)': '_keydown($event)'
	            },
	            queries: {
	                chips: new _angular_core.ContentChildren(MdChip)
	            },
	            styles: [".md-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:flex-start}.md-chip-list-wrapper .md-chip:not(.md-basic-chip){margin:0 3px}.md-chip-list-wrapper .md-chip:not(.md-basic-chip):first-child{margin-left:0;margin-right:3px}.md-chip-list-wrapper .md-chip:not(.md-basic-chip):last-child,[dir=rtl] .md-chip-list-wrapper .md-chip:not(.md-basic-chip):first-child{margin-left:3px;margin-right:0}[dir=rtl] .md-chip-list-wrapper .md-chip:not(.md-basic-chip):last-child{margin-left:0;margin-right:3px}.md-chip:not(.md-basic-chip){display:inline-block;padding:8px 12px;border-radius:24px;font-size:13px;line-height:16px}.md-chip-list-stacked .md-chip-list-wrapper{display:block}.md-chip-list-stacked .md-chip-list-wrapper .md-chip:not(.md-basic-chip){display:block;margin:0 0 8px}[dir=rtl] .md-chip-list-stacked .md-chip-list-wrapper .md-chip:not(.md-basic-chip){margin:0 0 8px}.md-chip-list-stacked .md-chip-list-wrapper .md-chip:not(.md-basic-chip):last-child,[dir=rtl] .md-chip-list-stacked .md-chip-list-wrapper .md-chip:not(.md-basic-chip):last-child{margin-bottom:0}"],
	            encapsulation: _angular_core.ViewEncapsulation.None,
	            changeDetection: _angular_core.ChangeDetectionStrategy.OnPush
	        }), 
	        __metadata$39('design:paramtypes', [_angular_core.ElementRef])
	    ], MdChipList);
	    return MdChipList;
	}());
	var MdChipsModule = (function () {
	    function MdChipsModule() {
	    }
	    MdChipsModule.forRoot = function () {
	        return {
	            ngModule: MdChipsModule,
	            providers: []
	        };
	    };
	    MdChipsModule = __decorate$39([
	        _angular_core.NgModule({
	            imports: [],
	            exports: [MdChipList, MdChip],
	            declarations: [MdChipList, MdChip]
	        }), 
	        __metadata$39('design:paramtypes', [])
	    ], MdChipsModule);
	    return MdChipsModule;
	}());
	
	var __extends$11 = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate$42 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$42 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/**
	 * Exception thrown when attempting to load an icon with a name that cannot be found.
	 * @docs-private
	 */
	var MdIconNameNotFoundError = (function (_super) {
	    __extends$11(MdIconNameNotFoundError, _super);
	    function MdIconNameNotFoundError(iconName) {
	        _super.call(this, "Unable to find icon with the name \"" + iconName + "\"");
	    }
	    return MdIconNameNotFoundError;
	}(MdError));
	/**
	 * Exception thrown when attempting to load SVG content that does not contain the expected
	 * <svg> tag.
	 * @docs-private
	 */
	var MdIconSvgTagNotFoundError = (function (_super) {
	    __extends$11(MdIconSvgTagNotFoundError, _super);
	    function MdIconSvgTagNotFoundError() {
	        _super.call(this, '<svg> tag not found');
	    }
	    return MdIconSvgTagNotFoundError;
	}(MdError));
	/**
	 * Configuration for an icon, including the URL and possibly the cached SVG element.
	 * @docs-private
	 */
	var SvgIconConfig = (function () {
	    function SvgIconConfig(url) {
	        this.url = url;
	        this.svgElement = null;
	    }
	    return SvgIconConfig;
	}());
	/** Returns the cache key to use for an icon namespace and name. */
	var iconKey = function (namespace, name) { return namespace + ':' + name; };
	/**
	 * Service to register and display icons used by the <md-icon> component.
	 * - Registers icon URLs by namespace and name.
	 * - Registers icon set URLs by namespace.
	 * - Registers aliases for CSS classes, for use with icon fonts.
	 * - Loads icons from URLs and extracts individual icons from icon sets.
	 */
	var MdIconRegistry = (function () {
	    function MdIconRegistry(_http, _sanitizer) {
	        this._http = _http;
	        this._sanitizer = _sanitizer;
	        /**
	         * URLs and cached SVG elements for individual icons. Keys are of the format "[namespace]:[icon]".
	         */
	        this._svgIconConfigs = new Map();
	        /**
	         * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.
	         * Multiple icon sets can be registered under the same namespace.
	         */
	        this._iconSetConfigs = new Map();
	        /** Cache for icons loaded by direct URLs. */
	        this._cachedIconsByUrl = new Map();
	        /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */
	        this._inProgressUrlFetches = new Map();
	        /** Map from font identifiers to their CSS class names. Used for icon fonts. */
	        this._fontCssClassesByAlias = new Map();
	        /**
	         * The CSS class to apply when an <md-icon> component has no icon name, url, or font specified.
	         * The default 'material-icons' value assumes that the material icon font has been loaded as
	         * described at http://google.github.io/material-design-icons/#icon-font-for-the-web
	         */
	        this._defaultFontSetClass = 'material-icons';
	    }
	    /**
	     * Registers an icon by URL in the default namespace.
	     * @param iconName Name under which the icon should be registered.
	     * @param url
	     */
	    MdIconRegistry.prototype.addSvgIcon = function (iconName, url) {
	        return this.addSvgIconInNamespace('', iconName, url);
	    };
	    /**
	     * Registers an icon by URL in the specified namespace.
	     * @param namespace Namespace in which the icon should be registered.
	     * @param iconName Name under which the icon should be registered.
	     * @param url
	     */
	    MdIconRegistry.prototype.addSvgIconInNamespace = function (namespace, iconName, url) {
	        var key = iconKey(namespace, iconName);
	        this._svgIconConfigs.set(key, new SvgIconConfig(url));
	        return this;
	    };
	    /**
	     * Registers an icon set by URL in the default namespace.
	     * @param url
	     */
	    MdIconRegistry.prototype.addSvgIconSet = function (url) {
	        return this.addSvgIconSetInNamespace('', url);
	    };
	    /**
	     * Registers an icon set by URL in the specified namespace.
	     * @param namespace Namespace in which to register the icon set.
	     * @param url
	     */
	    MdIconRegistry.prototype.addSvgIconSetInNamespace = function (namespace, url) {
	        var config = new SvgIconConfig(url);
	        if (this._iconSetConfigs.has(namespace)) {
	            this._iconSetConfigs.get(namespace).push(config);
	        }
	        else {
	            this._iconSetConfigs.set(namespace, [config]);
	        }
	        return this;
	    };
	    /**
	     * Defines an alias for a CSS class name to be used for icon fonts. Creating an mdIcon
	     * component with the alias as the fontSet input will cause the class name to be applied
	     * to the <md-icon> element.
	     *
	     * @param alias Alias for the font.
	     * @param className Class name override to be used instead of the alias.
	     */
	    MdIconRegistry.prototype.registerFontClassAlias = function (alias, className) {
	        if (className === void 0) { className = alias; }
	        this._fontCssClassesByAlias.set(alias, className);
	        return this;
	    };
	    /**
	     * Returns the CSS class name associated with the alias by a previous call to
	     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.
	     */
	    MdIconRegistry.prototype.classNameForFontAlias = function (alias) {
	        return this._fontCssClassesByAlias.get(alias) || alias;
	    };
	    /**
	     * Sets the CSS class name to be used for icon fonts when an <md-icon> component does not
	     * have a fontSet input value, and is not loading an icon by name or URL.
	     *
	     * @param className
	     */
	    MdIconRegistry.prototype.setDefaultFontSetClass = function (className) {
	        this._defaultFontSetClass = className;
	        return this;
	    };
	    /**
	     * Returns the CSS class name to be used for icon fonts when an <md-icon> component does not
	     * have a fontSet input value, and is not loading an icon by name or URL.
	     */
	    MdIconRegistry.prototype.getDefaultFontSetClass = function () {
	        return this._defaultFontSetClass;
	    };
	    /**
	     * Returns an Observable that produces the icon (as an <svg> DOM element) from the given URL.
	     * The response from the URL may be cached so this will not always cause an HTTP request, but
	     * the produced element will always be a new copy of the originally fetched icon. (That is,
	     * it will not contain any modifications made to elements previously returned).
	     *
	     * @param safeUrl URL from which to fetch the SVG icon.
	     */
	    MdIconRegistry.prototype.getSvgIconFromUrl = function (safeUrl) {
	        var _this = this;
	        var url = this._sanitizer.sanitize(_angular_core.SecurityContext.RESOURCE_URL, safeUrl);
	        if (this._cachedIconsByUrl.has(url)) {
	            return rxjs_Observable.Observable.of(cloneSvg(this._cachedIconsByUrl.get(url)));
	        }
	        return this._loadSvgIconFromConfig(new SvgIconConfig(url))
	            .do(function (svg) { return _this._cachedIconsByUrl.set(url, svg); })
	            .map(function (svg) { return cloneSvg(svg); });
	    };
	    /**
	     * Returns an Observable that produces the icon (as an <svg> DOM element) with the given name
	     * and namespace. The icon must have been previously registered with addIcon or addIconSet;
	     * if not, the Observable will throw an MdIconNameNotFoundError.
	     *
	     * @param name Name of the icon to be retrieved.
	     * @param namespace Namespace in which to look for the icon.
	     */
	    MdIconRegistry.prototype.getNamedSvgIcon = function (name, namespace) {
	        if (namespace === void 0) { namespace = ''; }
	        // Return (copy of) cached icon if possible.
	        var key = iconKey(namespace, name);
	        if (this._svgIconConfigs.has(key)) {
	            return this._getSvgFromConfig(this._svgIconConfigs.get(key));
	        }
	        // See if we have any icon sets registered for the namespace.
	        var iconSetConfigs = this._iconSetConfigs.get(namespace);
	        if (iconSetConfigs) {
	            return this._getSvgFromIconSetConfigs(name, iconSetConfigs);
	        }
	        return rxjs_Observable.Observable.throw(new MdIconNameNotFoundError(key));
	    };
	    /**
	     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.
	     */
	    MdIconRegistry.prototype._getSvgFromConfig = function (config) {
	        if (config.svgElement) {
	            // We already have the SVG element for this icon, return a copy.
	            return rxjs_Observable.Observable.of(cloneSvg(config.svgElement));
	        }
	        else {
	            // Fetch the icon from the config's URL, cache it, and return a copy.
	            return this._loadSvgIconFromConfig(config)
	                .do(function (svg) { return config.svgElement = svg; })
	                .map(function (svg) { return cloneSvg(svg); });
	        }
	    };
	    /**
	     * Attempts to find an icon with the specified name in any of the SVG icon sets.
	     * First searches the available cached icons for a nested element with a matching name, and
	     * if found copies the element to a new <svg> element. If not found, fetches all icon sets
	     * that have not been cached, and searches again after all fetches are completed.
	     * The returned Observable produces the SVG element if possible, and throws
	     * MdIconNameNotFoundError if no icon with the specified name can be found.
	     */
	    MdIconRegistry.prototype._getSvgFromIconSetConfigs = function (name, iconSetConfigs) {
	        var _this = this;
	        // For all the icon set SVG elements we've fetched, see if any contain an icon with the
	        // requested name.
	        var namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);
	        if (namedIcon) {
	            // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every
	            // time anyway, there's probably not much advantage compared to just always extracting
	            // it from the icon set.
	            return rxjs_Observable.Observable.of(namedIcon);
	        }
	        // Not found in any cached icon sets. If there are icon sets with URLs that we haven't
	        // fetched, fetch them now and look for iconName in the results.
	        var iconSetFetchRequests = iconSetConfigs
	            .filter(function (iconSetConfig) { return !iconSetConfig.svgElement; })
	            .map(function (iconSetConfig) {
	            return _this._loadSvgIconSetFromConfig(iconSetConfig)
	                .catch(function (err, caught) {
	                var url = _this._sanitizer.sanitize(_angular_core.SecurityContext.RESOURCE_URL, iconSetConfig.url);
	                // Swallow errors fetching individual URLs so the combined Observable won't
	                // necessarily fail.
	                console.log("Loading icon set URL: " + url + " failed: " + err);
	                return rxjs_Observable.Observable.of(null);
	            })
	                .do(function (svg) {
	                // Cache SVG element.
	                if (svg) {
	                    iconSetConfig.svgElement = svg;
	                }
	            });
	        });
	        // Fetch all the icon set URLs. When the requests complete, every IconSet should have a
	        // cached SVG element (unless the request failed), and we can check again for the icon.
	        return rxjs_Observable.Observable.forkJoin(iconSetFetchRequests)
	            .map(function (ignoredResults) {
	            var foundIcon = _this._extractIconWithNameFromAnySet(name, iconSetConfigs);
	            if (!foundIcon) {
	                throw new MdIconNameNotFoundError(name);
	            }
	            return foundIcon;
	        });
	    };
	    /**
	     * Searches the cached SVG elements for the given icon sets for a nested icon element whose "id"
	     * tag matches the specified name. If found, copies the nested element to a new SVG element and
	     * returns it. Returns null if no matching element is found.
	     */
	    MdIconRegistry.prototype._extractIconWithNameFromAnySet = function (iconName, iconSetConfigs) {
	        // Iterate backwards, so icon sets added later have precedence.
	        for (var i = iconSetConfigs.length - 1; i >= 0; i--) {
	            var config = iconSetConfigs[i];
	            if (config.svgElement) {
	                var foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName, config);
	                if (foundIcon) {
	                    return foundIcon;
	                }
	            }
	        }
	        return null;
	    };
	    /**
	     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element
	     * from it.
	     */
	    MdIconRegistry.prototype._loadSvgIconFromConfig = function (config) {
	        var _this = this;
	        return this._fetchUrl(config.url)
	            .map(function (svgText) { return _this._createSvgElementForSingleIcon(svgText, config); });
	    };
	    /**
	     * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element
	     * from it.
	     */
	    MdIconRegistry.prototype._loadSvgIconSetFromConfig = function (config) {
	        var _this = this;
	        // TODO: Document that icons should only be loaded from trusted sources.
	        return this._fetchUrl(config.url)
	            .map(function (svgText) { return _this._svgElementFromString(svgText); });
	    };
	    /**
	     * Creates a DOM element from the given SVG string, and adds default attributes.
	     */
	    MdIconRegistry.prototype._createSvgElementForSingleIcon = function (responseText, config) {
	        var svg = this._svgElementFromString(responseText);
	        this._setSvgAttributes(svg, config);
	        return svg;
	    };
	    /**
	     * Searches the cached element of the given SvgIconConfig for a nested icon element whose "id"
	     * tag matches the specified name. If found, copies the nested element to a new SVG element and
	     * returns it. Returns null if no matching element is found.
	     */
	    MdIconRegistry.prototype._extractSvgIconFromSet = function (iconSet, iconName, config) {
	        var iconNode = iconSet.querySelector('#' + iconName);
	        if (!iconNode) {
	            return null;
	        }
	        // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as
	        // the content of a new <svg> node.
	        if (iconNode.tagName.toLowerCase() == 'svg') {
	            return this._setSvgAttributes(iconNode.cloneNode(true), config);
	        }
	        // createElement('SVG') doesn't work as expected; the DOM ends up with
	        // the correct nodes, but the SVG content doesn't render. Instead we
	        // have to create an empty SVG node using innerHTML and append its content.
	        // Elements created using DOMParser.parseFromString have the same problem.
	        // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display
	        var svg = this._svgElementFromString('<svg></svg>');
	        // Clone the node so we don't remove it from the parent icon set element.
	        svg.appendChild(iconNode.cloneNode(true));
	        return this._setSvgAttributes(svg, config);
	    };
	    /**
	     * Creates a DOM element from the given SVG string.
	     */
	    MdIconRegistry.prototype._svgElementFromString = function (str) {
	        // TODO: Is there a better way than innerHTML? Renderer doesn't appear to have a method for
	        // creating an element from an HTML string.
	        var div = document.createElement('DIV');
	        div.innerHTML = str;
	        var svg = div.querySelector('svg');
	        if (!svg) {
	            throw new MdIconSvgTagNotFoundError();
	        }
	        return svg;
	    };
	    /**
	     * Sets the default attributes for an SVG element to be used as an icon.
	     */
	    MdIconRegistry.prototype._setSvgAttributes = function (svg, config) {
	        if (!svg.getAttribute('xmlns')) {
	            svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');
	        }
	        svg.setAttribute('fit', '');
	        svg.setAttribute('height', '100%');
	        svg.setAttribute('width', '100%');
	        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');
	        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.
	        return svg;
	    };
	    /**
	     * Returns an Observable which produces the string contents of the given URL. Results may be
	     * cached, so future calls with the same URL may not cause another HTTP request.
	     */
	    MdIconRegistry.prototype._fetchUrl = function (safeUrl) {
	        var _this = this;
	        var url = this._sanitizer.sanitize(_angular_core.SecurityContext.RESOURCE_URL, safeUrl);
	        // Store in-progress fetches to avoid sending a duplicate request for a URL when there is
	        // already a request in progress for that URL. It's necessary to call share() on the
	        // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.
	        if (this._inProgressUrlFetches.has(url)) {
	            return this._inProgressUrlFetches.get(url);
	        }
	        // TODO(jelbourn): for some reason, the `finally` operator "loses" the generic type on the
	        // Observable. Figure out why and fix it.
	        var req = this._http.get(url)
	            .map(function (response) { return response.text(); })
	            .finally(function () {
	            _this._inProgressUrlFetches.delete(url);
	        })
	            .share();
	        this._inProgressUrlFetches.set(url, req);
	        return req;
	    };
	    MdIconRegistry = __decorate$42([
	        _angular_core.Injectable(), 
	        __metadata$42('design:paramtypes', [_angular_http.Http, _angular_platformBrowser.DomSanitizer])
	    ], MdIconRegistry);
	    return MdIconRegistry;
	}());
	/** Clones an SVGElement while preserving type information. */
	function cloneSvg(svg) {
	    return svg.cloneNode(true);
	}
	
	var __extends$10 = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate$41 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$41 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/** Exception thrown when an invalid icon name is passed to an md-icon component. */
	var MdIconInvalidNameError = (function (_super) {
	    __extends$10(MdIconInvalidNameError, _super);
	    function MdIconInvalidNameError(iconName) {
	        _super.call(this, "Invalid icon name: \"" + iconName + "\"");
	    }
	    return MdIconInvalidNameError;
	}(MdError));
	/**
	 * Component to display an icon. It can be used in the following ways:
	 * - Specify the svgSrc input to load an SVG icon from a URL. The SVG content is directly inlined
	 *   as a child of the <md-icon> component, so that CSS styles can easily be applied to it.
	 *   The URL is loaded via an XMLHttpRequest, so it must be on the same domain as the page or its
	 *   server must be configured to allow cross-domain requests.
	 *   Example:
	 *     <md-icon svgSrc="assets/arrow.svg"></md-icon>
	 *
	 * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the
	 *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of
	 *   MdIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format
	 *   "[namespace]:[name]", if not the value will be the name of an icon in the default namespace.
	 *   Examples:
	 *     <md-icon svgIcon="left-arrow"></md-icon>
	 *     <md-icon svgIcon="animals:cat"></md-icon>
	 *
	 * - Use a font ligature as an icon by putting the ligature text in the content of the <md-icon>
	 *   component. By default the Material icons font is used as described at
	 *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an
	 *   alternate font by setting the fontSet input to either the CSS class to apply to use the
	 *   desired font, or to an alias previously registered with MdIconRegistry.registerFontClassAlias.
	 *   Examples:
	 *     <md-icon>home</md-icon>
	 *     <md-icon fontSet="myfont">sun</md-icon>
	 *
	 * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the
	 *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a
	 *   CSS class which causes the glyph to be displayed via a :before selector, as in
	 *   https://fortawesome.github.io/Font-Awesome/examples/
	 *   Example:
	 *     <md-icon fontSet="fa" fontIcon="alarm"></md-icon>
	 */
	var MdIcon = (function () {
	    function MdIcon(_elementRef, _renderer, _mdIconRegistry) {
	        this._elementRef = _elementRef;
	        this._renderer = _renderer;
	        this._mdIconRegistry = _mdIconRegistry;
	        /** Screenreader label for the icon. */
	        this.hostAriaLabel = '';
	    }
	    Object.defineProperty(MdIcon.prototype, "color", {
	        /** Color of the icon. */
	        get: function () { return this._color; },
	        set: function (value) { this._updateColor(value); },
	        enumerable: true,
	        configurable: true
	    });
	    MdIcon.prototype._updateColor = function (newColor) {
	        this._setElementColor(this._color, false);
	        this._setElementColor(newColor, true);
	        this._color = newColor;
	    };
	    MdIcon.prototype._setElementColor = function (color, isAdd) {
	        if (color != null && color != '') {
	            this._renderer.setElementClass(this._elementRef.nativeElement, "md-" + color, isAdd);
	        }
	    };
	    /**
	     * Splits an svgIcon binding value into its icon set and icon name components.
	     * Returns a 2-element array of [(icon set), (icon name)].
	     * The separator for the two fields is ':'. If there is no separator, an empty
	     * string is returned for the icon set and the entire value is returned for
	     * the icon name. If the argument is falsy, returns an array of two empty strings.
	     * Throws a MdIconInvalidNameError if the name contains two or more ':' separators.
	     * Examples:
	     *   'social:cake' -> ['social', 'cake']
	     *   'penguin' -> ['', 'penguin']
	     *   null -> ['', '']
	     *   'a:b:c' -> (throws MdIconInvalidNameError)
	     */
	    MdIcon.prototype._splitIconName = function (iconName) {
	        if (!iconName) {
	            return ['', ''];
	        }
	        var parts = iconName.split(':');
	        switch (parts.length) {
	            case 1:
	                // Use default namespace.
	                return ['', parts[0]];
	            case 2:
	                return parts;
	            default:
	                throw new MdIconInvalidNameError(iconName);
	        }
	    };
	    MdIcon.prototype.ngOnChanges = function (changes) {
	        var _this = this;
	        var changedInputs = Object.keys(changes);
	        // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.
	        if (changedInputs.indexOf('svgIcon') != -1 || changedInputs.indexOf('svgSrc') != -1) {
	            if (this.svgIcon) {
	                var _a = this._splitIconName(this.svgIcon), namespace = _a[0], iconName = _a[1];
	                this._mdIconRegistry.getNamedSvgIcon(iconName, namespace).first().subscribe(function (svg) { return _this._setSvgElement(svg); }, function (err) { return console.log("Error retrieving icon: " + err); });
	            }
	        }
	        if (this._usingFontIcon()) {
	            this._updateFontIconClasses();
	        }
	        this._updateAriaLabel();
	    };
	    MdIcon.prototype.ngOnInit = function () {
	        // Update font classes because ngOnChanges won't be called if none of the inputs are present,
	        // e.g. <md-icon>arrow</md-icon>. In this case we need to add a CSS class for the default font.
	        if (this._usingFontIcon()) {
	            this._updateFontIconClasses();
	        }
	    };
	    MdIcon.prototype.ngAfterViewChecked = function () {
	        // Update aria label here because it may depend on the projected text content.
	        // (e.g. <md-icon>home</md-icon> should use 'home').
	        this._updateAriaLabel();
	    };
	    MdIcon.prototype._updateAriaLabel = function () {
	        var ariaLabel = this._getAriaLabel();
	        if (ariaLabel) {
	            this._renderer.setElementAttribute(this._elementRef.nativeElement, 'aria-label', ariaLabel);
	        }
	    };
	    MdIcon.prototype._getAriaLabel = function () {
	        // If the parent provided an aria-label attribute value, use it as-is. Otherwise look for a
	        // reasonable value from the alt attribute, font icon name, SVG icon name, or (for ligatures)
	        // the text content of the directive.
	        var label = this.hostAriaLabel ||
	            this.alt ||
	            this.fontIcon ||
	            this._splitIconName(this.svgIcon)[1];
	        if (label) {
	            return label;
	        }
	        // The "content" of an SVG icon is not a useful label.
	        if (this._usingFontIcon()) {
	            var text = this._elementRef.nativeElement.textContent;
	            if (text) {
	                return text;
	            }
	        }
	        // TODO: Warn here in dev mode.
	        return null;
	    };
	    MdIcon.prototype._usingFontIcon = function () {
	        return !this.svgIcon;
	    };
	    MdIcon.prototype._setSvgElement = function (svg) {
	        var layoutElement = this._elementRef.nativeElement;
	        // Remove existing child nodes and add the new SVG element.
	        // We would use renderer.detachView(Array.from(layoutElement.childNodes)) here,
	        // but it fails in IE11: https://github.com/angular/angular/issues/6327
	        layoutElement.innerHTML = '';
	        this._renderer.projectNodes(layoutElement, [svg]);
	    };
	    MdIcon.prototype._updateFontIconClasses = function () {
	        if (!this._usingFontIcon()) {
	            return;
	        }
	        var elem = this._elementRef.nativeElement;
	        var fontSetClass = this.fontSet ?
	            this._mdIconRegistry.classNameForFontAlias(this.fontSet) :
	            this._mdIconRegistry.getDefaultFontSetClass();
	        if (fontSetClass != this._previousFontSetClass) {
	            if (this._previousFontSetClass) {
	                this._renderer.setElementClass(elem, this._previousFontSetClass, false);
	            }
	            if (fontSetClass) {
	                this._renderer.setElementClass(elem, fontSetClass, true);
	            }
	            this._previousFontSetClass = fontSetClass;
	        }
	        if (this.fontIcon != this._previousFontIconClass) {
	            if (this._previousFontIconClass) {
	                this._renderer.setElementClass(elem, this._previousFontIconClass, false);
	            }
	            if (this.fontIcon) {
	                this._renderer.setElementClass(elem, this.fontIcon, true);
	            }
	            this._previousFontIconClass = this.fontIcon;
	        }
	    };
	    __decorate$41([
	        _angular_core.Input(), 
	        __metadata$41('design:type', String)
	    ], MdIcon.prototype, "svgIcon", void 0);
	    __decorate$41([
	        _angular_core.Input(), 
	        __metadata$41('design:type', String)
	    ], MdIcon.prototype, "fontSet", void 0);
	    __decorate$41([
	        _angular_core.Input(), 
	        __metadata$41('design:type', String)
	    ], MdIcon.prototype, "fontIcon", void 0);
	    __decorate$41([
	        _angular_core.Input(), 
	        __metadata$41('design:type', String)
	    ], MdIcon.prototype, "alt", void 0);
	    __decorate$41([
	        _angular_core.Input('aria-label'), 
	        __metadata$41('design:type', String)
	    ], MdIcon.prototype, "hostAriaLabel", void 0);
	    __decorate$41([
	        _angular_core.Input(), 
	        __metadata$41('design:type', String)
	    ], MdIcon.prototype, "color", null);
	    MdIcon = __decorate$41([
	        _angular_core.Component({template: '<ng-content></ng-content>',
	            selector: 'md-icon, mat-icon',
	            styles: ["md-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}"],
	            host: {
	                'role': 'img',
	            },
	            encapsulation: _angular_core.ViewEncapsulation.None,
	            changeDetection: _angular_core.ChangeDetectionStrategy.OnPush,
	        }), 
	        __metadata$41('design:paramtypes', [_angular_core.ElementRef, _angular_core.Renderer, MdIconRegistry])
	    ], MdIcon);
	    return MdIcon;
	}());
	var MdIconModule = (function () {
	    function MdIconModule() {
	    }
	    MdIconModule.forRoot = function () {
	        return {
	            ngModule: MdIconModule,
	            providers: [MdIconRegistry],
	        };
	    };
	    MdIconModule = __decorate$41([
	        _angular_core.NgModule({
	            imports: [_angular_http.HttpModule, DefaultStyleCompatibilityModeModule],
	            exports: [MdIcon, DefaultStyleCompatibilityModeModule],
	            declarations: [MdIcon],
	        }), 
	        __metadata$41('design:paramtypes', [])
	    ], MdIconModule);
	    return MdIconModule;
	}());
	
	var __extends$12 = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate$43 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$43 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	// TODO(josephperrott): Benchpress tests.
	/** A single degree in radians. */
	var DEGREE_IN_RADIANS = Math.PI / 180;
	/** Duration of the indeterminate animation. */
	var DURATION_INDETERMINATE = 667;
	/** Duration of the indeterminate animation. */
	var DURATION_DETERMINATE = 225;
	/** Start animation value of the indeterminate animation */
	var startIndeterminate = 3;
	/** End animation value of the indeterminate animation */
	var endIndeterminate = 80;
	/* Maximum angle for the arc. The angle can't be exactly 360, because the arc becomes hidden. */
	var MAX_ANGLE = 359.99 / 100;
	/**
	 * <md-progress-spinner> component.
	 */
	var MdProgressSpinner = (function () {
	    function MdProgressSpinner(_changeDetectorRef, _ngZone, _elementRef) {
	        this._changeDetectorRef = _changeDetectorRef;
	        this._ngZone = _ngZone;
	        this._elementRef = _elementRef;
	        /** The id of the last requested animation. */
	        this._lastAnimationId = 0;
	        this._mode = 'determinate';
	        this.color = 'primary';
	    }
	    Object.defineProperty(MdProgressSpinner.prototype, "_ariaValueMin", {
	        /**
	         * Values for aria max and min are only defined as numbers when in a determinate mode.  We do this
	         * because voiceover does not report the progress indicator as indeterminate if the aria min
	         * and/or max value are number values.
	         */
	        get: function () {
	            return this.mode == 'determinate' ? 0 : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdProgressSpinner.prototype, "_ariaValueMax", {
	        get: function () {
	            return this.mode == 'determinate' ? 100 : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdProgressSpinner.prototype, "interdeterminateInterval", {
	        /** @docs-private */
	        get: function () {
	            return this._interdeterminateInterval;
	        },
	        /** @docs-private */
	        set: function (interval) {
	            clearInterval(this._interdeterminateInterval);
	            this._interdeterminateInterval = interval;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Clean up any animations that were running.
	     */
	    MdProgressSpinner.prototype.ngOnDestroy = function () {
	        this._cleanupIndeterminateAnimation();
	    };
	    Object.defineProperty(MdProgressSpinner.prototype, "value", {
	        get: function () {
	            if (this.mode == 'determinate') {
	                return this._value;
	            }
	        },
	        set: function (v) {
	            if (v != null && this.mode == 'determinate') {
	                var newValue = clamp(v);
	                this._animateCircle((this.value || 0), newValue, linearEase, DURATION_DETERMINATE, 0);
	                this._value = newValue;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdProgressSpinner.prototype, "mode", {
	        /**
	         * Mode of the progress circle
	         *
	         * Input must be one of the values from ProgressMode, defaults to 'determinate'.
	         * mode is bound to the host as the attribute host.
	         */
	        get: function () {
	            return this._mode;
	        },
	        set: function (m) {
	            if (m == 'indeterminate') {
	                this._startIndeterminateAnimation();
	            }
	            else {
	                this._cleanupIndeterminateAnimation();
	            }
	            this._mode = m;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Animates the circle from one percentage value to another.
	     *
	     * @param animateFrom The percentage of the circle filled starting the animation.
	     * @param animateTo The percentage of the circle filled ending the animation.
	     * @param ease The easing function to manage the pace of change in the animation.
	     * @param duration The length of time to show the animation, in milliseconds.
	     * @param rotation The starting angle of the circle fill, with 0° represented at the top center
	     *    of the circle.
	     */
	    MdProgressSpinner.prototype._animateCircle = function (animateFrom, animateTo, ease, duration, rotation) {
	        var _this = this;
	        var id = ++this._lastAnimationId;
	        var startTime = Date.now();
	        var changeInValue = animateTo - animateFrom;
	        // No need to animate it if the values are the same
	        if (animateTo === animateFrom) {
	            this._renderArc(animateTo, rotation);
	        }
	        else {
	            var animation_1 = function () {
	                var elapsedTime = Math.max(0, Math.min(Date.now() - startTime, duration));
	                _this._renderArc(ease(elapsedTime, animateFrom, changeInValue, duration), rotation);
	                // Prevent overlapping animations by checking if a new animation has been called for and
	                // if the animation has lasted longer than the animation duration.
	                if (id === _this._lastAnimationId && elapsedTime < duration) {
	                    requestAnimationFrame(animation_1);
	                }
	            };
	            // Run the animation outside of Angular's zone, in order to avoid
	            // hitting ZoneJS and change detection on each frame.
	            this._ngZone.runOutsideAngular(animation_1);
	        }
	    };
	    /**
	     * Starts the indeterminate animation interval, if it is not already running.
	     */
	    MdProgressSpinner.prototype._startIndeterminateAnimation = function () {
	        var _this = this;
	        var rotationStartPoint = 0;
	        var start = startIndeterminate;
	        var end = endIndeterminate;
	        var duration = DURATION_INDETERMINATE;
	        var animate$$1 = function () {
	            _this._animateCircle(start, end, materialEase, duration, rotationStartPoint);
	            // Prevent rotation from reaching Number.MAX_SAFE_INTEGER.
	            rotationStartPoint = (rotationStartPoint + end) % 100;
	            var temp = start;
	            start = -end;
	            end = -temp;
	        };
	        if (!this.interdeterminateInterval) {
	            this._ngZone.runOutsideAngular(function () {
	                _this.interdeterminateInterval = setInterval(animate$$1, duration + 50, 0, false);
	                animate$$1();
	            });
	        }
	    };
	    /**
	     * Removes interval, ending the animation.
	     */
	    MdProgressSpinner.prototype._cleanupIndeterminateAnimation = function () {
	        this.interdeterminateInterval = null;
	    };
	    /**
	     * Renders the arc onto the SVG element. Proxies `getArc` while setting the proper
	     * DOM attribute on the `<path>`.
	     */
	    MdProgressSpinner.prototype._renderArc = function (currentValue, rotation) {
	        // Caches the path reference so it doesn't have to be looked up every time.
	        var path = this._path = this._path || this._elementRef.nativeElement.querySelector('path');
	        // Ensure that the path was found. This may not be the case if the
	        // animation function fires too early.
	        if (path) {
	            path.setAttribute('d', getSvgArc(currentValue, rotation));
	        }
	    };
	    __decorate$43([
	        _angular_core.Input(),
	        _angular_core.HostBinding('attr.aria-valuenow'), 
	        __metadata$43('design:type', Object)
	    ], MdProgressSpinner.prototype, "value", null);
	    __decorate$43([
	        _angular_core.HostBinding('attr.mode'),
	        _angular_core.Input(), 
	        __metadata$43('design:type', Object)
	    ], MdProgressSpinner.prototype, "mode", null);
	    __decorate$43([
	        _angular_core.Input(), 
	        __metadata$43('design:type', Object)
	    ], MdProgressSpinner.prototype, "color", void 0);
	    MdProgressSpinner = __decorate$43([
	        _angular_core.Component({selector: 'md-progress-spinner, mat-progress-spinner, md-progress-circle, mat-progress-circle',
	            host: {
	                'role': 'progressbar',
	                '[attr.aria-valuemin]': '_ariaValueMin',
	                '[attr.aria-valuemax]': '_ariaValueMax',
	                '[class.md-primary]': 'color == "primary"',
	                '[class.md-accent]': 'color == "accent"',
	                '[class.md-warn]': 'color == "warn"',
	            },
	            template: "<svg viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMidYMid meet\"><path></path></svg>",
	            styles: [":host{display:block;height:100px;width:100px;overflow:hidden}:host svg{height:100%;width:100%;transform-origin:center}:host path{fill:transparent;stroke-width:10px}:host[mode=indeterminate] svg{animation-duration:5.25s,2.887s;animation-name:md-progress-spinner-sporadic-rotate,md-progress-spinner-linear-rotate;animation-timing-function:cubic-bezier(.35,0,.25,1),linear;animation-iteration-count:infinite;transition:none}@keyframes md-progress-spinner-linear-rotate{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes md-progress-spinner-sporadic-rotate{12.5%{transform:rotate(135deg)}25%{transform:rotate(270deg)}37.5%{transform:rotate(405deg)}50%{transform:rotate(540deg)}62.5%{transform:rotate(675deg)}75%{transform:rotate(810deg)}87.5%{transform:rotate(945deg)}100%{transform:rotate(1080deg)}}"],
	            changeDetection: _angular_core.ChangeDetectionStrategy.OnPush,
	        }), 
	        __metadata$43('design:paramtypes', [_angular_core.ChangeDetectorRef, _angular_core.NgZone, _angular_core.ElementRef])
	    ], MdProgressSpinner);
	    return MdProgressSpinner;
	}());
	/**
	 * <md-spinner> component.
	 *
	 * This is a component definition to be used as a convenience reference to create an
	 * indeterminate <md-progress-spinner> instance.
	 */
	var MdSpinner = (function (_super) {
	    __extends$12(MdSpinner, _super);
	    function MdSpinner(changeDetectorRef, elementRef, ngZone) {
	        _super.call(this, changeDetectorRef, ngZone, elementRef);
	        this.mode = 'indeterminate';
	    }
	    MdSpinner.prototype.ngOnDestroy = function () {
	        // The `ngOnDestroy` from `MdProgressSpinner` should be called explicitly, because
	        // in certain cases Angular won't call it (e.g. when using AoT and in unit tests).
	        _super.prototype.ngOnDestroy.call(this);
	    };
	    MdSpinner = __decorate$43([
	        _angular_core.Component({selector: 'md-spinner, mat-spinner',
	            host: {
	                'role': 'progressbar',
	                'mode': 'indeterminate',
	            },
	            template: "<svg viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMidYMid meet\"><path></path></svg>",
	            styles: [":host{display:block;height:100px;width:100px;overflow:hidden}:host svg{height:100%;width:100%;transform-origin:center}:host path{fill:transparent;stroke-width:10px}:host[mode=indeterminate] svg{animation-duration:5.25s,2.887s;animation-name:md-progress-spinner-sporadic-rotate,md-progress-spinner-linear-rotate;animation-timing-function:cubic-bezier(.35,0,.25,1),linear;animation-iteration-count:infinite;transition:none}@keyframes md-progress-spinner-linear-rotate{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes md-progress-spinner-sporadic-rotate{12.5%{transform:rotate(135deg)}25%{transform:rotate(270deg)}37.5%{transform:rotate(405deg)}50%{transform:rotate(540deg)}62.5%{transform:rotate(675deg)}75%{transform:rotate(810deg)}87.5%{transform:rotate(945deg)}100%{transform:rotate(1080deg)}}"],
	        }), 
	        __metadata$43('design:paramtypes', [_angular_core.ChangeDetectorRef, _angular_core.ElementRef, _angular_core.NgZone])
	    ], MdSpinner);
	    return MdSpinner;
	}(MdProgressSpinner));
	/**
	 * Module functions.
	 */
	/** Clamps a value to be between 0 and 100. */
	function clamp(v) {
	    return Math.max(0, Math.min(100, v));
	}
	/**
	 * Converts Polar coordinates to Cartesian.
	 */
	function polarToCartesian(radius, pathRadius, angleInDegrees) {
	    var angleInRadians = (angleInDegrees - 90) * DEGREE_IN_RADIANS;
	    return (radius + (pathRadius * Math.cos(angleInRadians))) +
	        ',' + (radius + (pathRadius * Math.sin(angleInRadians)));
	}
	/**
	 * Easing function for linear animation.
	 */
	function linearEase(currentTime, startValue, changeInValue, duration) {
	    return changeInValue * currentTime / duration + startValue;
	}
	/**
	 * Easing function to match material design indeterminate animation.
	 */
	function materialEase(currentTime, startValue, changeInValue, duration) {
	    var time = currentTime / duration;
	    var timeCubed = Math.pow(time, 3);
	    var timeQuad = Math.pow(time, 4);
	    var timeQuint = Math.pow(time, 5);
	    return startValue + changeInValue * ((6 * timeQuint) + (-15 * timeQuad) + (10 * timeCubed));
	}
	/**
	 * Determines the path value to define the arc.  Converting percentage values to to polar
	 * coordinates on the circle, and then to cartesian coordinates in the viewport.
	 *
	 * @param currentValue The current percentage value of the progress circle, the percentage of the
	 *    circle to fill.
	 * @param rotation The starting point of the circle with 0 being the 0 degree point.
	 * @return A string for an SVG path representing a circle filled from the starting point to the
	 *    percentage value provided.
	 */
	function getSvgArc(currentValue, rotation) {
	    var startPoint = rotation || 0;
	    var radius = 50;
	    var pathRadius = 40;
	    var startAngle = startPoint * MAX_ANGLE;
	    var endAngle = currentValue * MAX_ANGLE;
	    var start = polarToCartesian(radius, pathRadius, startAngle);
	    var end = polarToCartesian(radius, pathRadius, endAngle + startAngle);
	    var arcSweep = endAngle < 0 ? 0 : 1;
	    var largeArcFlag;
	    if (endAngle < 0) {
	        largeArcFlag = endAngle >= -180 ? 0 : 1;
	    }
	    else {
	        largeArcFlag = endAngle <= 180 ? 0 : 1;
	    }
	    return "M" + start + "A" + pathRadius + "," + pathRadius + " 0 " + largeArcFlag + "," + arcSweep + " " + end;
	}
	var MdProgressSpinnerModule = (function () {
	    function MdProgressSpinnerModule() {
	    }
	    MdProgressSpinnerModule.forRoot = function () {
	        return {
	            ngModule: MdProgressSpinnerModule,
	            providers: []
	        };
	    };
	    MdProgressSpinnerModule = __decorate$43([
	        _angular_core.NgModule({
	            imports: [DefaultStyleCompatibilityModeModule],
	            exports: [MdProgressSpinner, MdSpinner, DefaultStyleCompatibilityModeModule],
	            declarations: [MdProgressSpinner, MdSpinner],
	        }), 
	        __metadata$43('design:paramtypes', [])
	    ], MdProgressSpinnerModule);
	    return MdProgressSpinnerModule;
	}());
	
	/** @deprecated */
	
	var __decorate$44 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$44 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	// TODO(josephperrott): Benchpress tests.
	// TODO(josephperrott): Add ARIA attributes for progressbar "for".
	/**
	 * <md-progress-bar> component.
	 */
	var MdProgressBar = (function () {
	    function MdProgressBar() {
	        /** Color of the progress bar. */
	        this.color = 'primary';
	        this._value = 0;
	        this._bufferValue = 0;
	        /**
	         * Mode of the progress bar.
	         *
	         * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to
	         * 'determinate'.
	         * Mirrored to mode attribute.
	         */
	        this.mode = 'determinate';
	    }
	    Object.defineProperty(MdProgressBar.prototype, "value", {
	        /** Value of the progressbar. Defaults to zero. Mirrored to aria-valuenow. */
	        get: function () { return this._value; },
	        set: function (v) { this._value = clamp$1(v || 0); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdProgressBar.prototype, "bufferValue", {
	        /** Buffer value of the progress bar. Defaults to zero. */
	        get: function () { return this._bufferValue; },
	        set: function (v) { this._bufferValue = clamp$1(v || 0); },
	        enumerable: true,
	        configurable: true
	    });
	    /** Gets the current transform value for the progress bar's primary indicator. */
	    MdProgressBar.prototype._primaryTransform = function () {
	        var scale = this.value / 100;
	        return { transform: "scaleX(" + scale + ")" };
	    };
	    /**
	     * Gets the current transform value for the progress bar's buffer indicator.  Only used if the
	     * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.
	     */
	    MdProgressBar.prototype._bufferTransform = function () {
	        if (this.mode == 'buffer') {
	            var scale = this.bufferValue / 100;
	            return { transform: "scaleX(" + scale + ")" };
	        }
	    };
	    __decorate$44([
	        _angular_core.Input(), 
	        __metadata$44('design:type', Object)
	    ], MdProgressBar.prototype, "color", void 0);
	    __decorate$44([
	        _angular_core.Input(),
	        _angular_core.HostBinding('attr.aria-valuenow'), 
	        __metadata$44('design:type', Object)
	    ], MdProgressBar.prototype, "value", null);
	    __decorate$44([
	        _angular_core.Input(), 
	        __metadata$44('design:type', Object)
	    ], MdProgressBar.prototype, "bufferValue", null);
	    __decorate$44([
	        _angular_core.Input(),
	        _angular_core.HostBinding('attr.mode'), 
	        __metadata$44('design:type', Object)
	    ], MdProgressBar.prototype, "mode", void 0);
	    MdProgressBar = __decorate$44([
	        _angular_core.Component({selector: 'md-progress-bar, mat-progress-bar',
	            host: {
	                'role': 'progressbar',
	                'aria-valuemin': '0',
	                'aria-valuemax': '100',
	                '[class.md-primary]': 'color == "primary"',
	                '[class.md-accent]': 'color == "accent"',
	                '[class.md-warn]': 'color == "warn"',
	            },
	            template: "<div class=\"md-progress-bar-background\"></div><div class=\"md-progress-bar-buffer\" [ngStyle]=\"_bufferTransform()\"></div><div class=\"md-progress-bar-primary md-progress-bar-fill\" [ngStyle]=\"_primaryTransform()\"></div><div class=\"md-progress-bar-secondary md-progress-bar-fill\"></div>",
	            styles: [":host{display:block;height:5px;overflow:hidden;position:relative;transform:translateZ(0);transition:opacity 250ms linear;width:100%}:host .md-progress-bar-background{background-repeat:repeat-x;background-size:10px 4px;height:100%;position:absolute;visibility:hidden;width:100%}:host .md-progress-bar-buffer{height:100%;position:absolute;transform-origin:top left;transition:transform 250ms ease;width:100%}:host .md-progress-bar-secondary{visibility:hidden}:host .md-progress-bar-fill{animation:none;height:100%;position:absolute;transform-origin:top left;transition:transform 250ms ease;width:100%}:host .md-progress-bar-fill::after{animation:none;content:'';display:inline-block;height:100%;position:absolute;width:100%;left:0}:host[mode=query]{transform:rotateZ(180deg)}:host[mode=query] .md-progress-bar-fill,:host[mode=indeterminate] .md-progress-bar-fill{transition:none}:host[mode=query] .md-progress-bar-primary,:host[mode=indeterminate] .md-progress-bar-primary{animation:md-progress-bar-primary-indeterminate-translate 2s infinite linear;left:-145.166611%}:host[mode=query] .md-progress-bar-primary.md-progress-bar-fill::after,:host[mode=indeterminate] .md-progress-bar-primary.md-progress-bar-fill::after{animation:md-progress-bar-primary-indeterminate-scale 2s infinite linear}:host[mode=query] .md-progress-bar-secondary,:host[mode=indeterminate] .md-progress-bar-secondary{animation:md-progress-bar-secondary-indeterminate-translate 2s infinite linear;left:-54.888891%;visibility:visible}:host[mode=query] .md-progress-bar-secondary.md-progress-bar-fill::after,:host[mode=indeterminate] .md-progress-bar-secondary.md-progress-bar-fill::after{animation:md-progress-bar-secondary-indeterminate-scale 2s infinite linear}:host[mode=buffer] .md-progress-bar-background{animation:md-progress-bar-background-scroll 250ms infinite linear;visibility:visible}:host-context([dir=rtl]){transform:rotateY(180deg)}@keyframes md-progress-bar-primary-indeterminate-translate{0%{transform:translateX(0)}20%{animation-timing-function:cubic-bezier(.5,0,.70173,.49582);transform:translateX(0)}59.15%{animation-timing-function:cubic-bezier(.30244,.38135,.55,.95635);transform:translateX(83.67142%)}100%{transform:translateX(200.61106%)}}@keyframes md-progress-bar-primary-indeterminate-scale{0%{transform:scaleX(.08)}36.65%{animation-timing-function:cubic-bezier(.33473,.12482,.78584,1);transform:scaleX(.08)}69.15%{animation-timing-function:cubic-bezier(.06,.11,.6,1);transform:scaleX(.66148)}100%{transform:scaleX(.08)}}@keyframes md-progress-bar-secondary-indeterminate-translate{0%{animation-timing-function:cubic-bezier(.15,0,.51506,.40969);transform:translateX(0)}25%{animation-timing-function:cubic-bezier(.31033,.28406,.8,.73371);transform:translateX(37.65191%)}48.35%{animation-timing-function:cubic-bezier(.4,.62704,.6,.90203);transform:translateX(84.38617%)}100%{transform:translateX(160.27778%)}}@keyframes md-progress-bar-secondary-indeterminate-scale{0%{animation-timing-function:cubic-bezier(.15,0,.51506,.40969);transform:scaleX(.08)}19.15%{animation-timing-function:cubic-bezier(.31033,.28406,.8,.73371);transform:scaleX(.4571)}44.15%{animation-timing-function:cubic-bezier(.4,.62704,.6,.90203);transform:scaleX(.72796)}100%{transform:scaleX(.08)}}@keyframes md-progress-bar-background-scroll{to{transform:translateX(-10px)}}"],
	            changeDetection: _angular_core.ChangeDetectionStrategy.OnPush,
	        }), 
	        __metadata$44('design:paramtypes', [])
	    ], MdProgressBar);
	    return MdProgressBar;
	}());
	/** Clamps a value to be between two numbers, by default 0 and 100. */
	function clamp$1(v, min, max) {
	    if (min === void 0) { min = 0; }
	    if (max === void 0) { max = 100; }
	    return Math.max(min, Math.min(max, v));
	}
	var MdProgressBarModule = (function () {
	    function MdProgressBarModule() {
	    }
	    MdProgressBarModule.forRoot = function () {
	        return {
	            ngModule: MdProgressBarModule,
	            providers: []
	        };
	    };
	    MdProgressBarModule = __decorate$44([
	        _angular_core.NgModule({
	            imports: [_angular_common.CommonModule, DefaultStyleCompatibilityModeModule],
	            exports: [MdProgressBar, DefaultStyleCompatibilityModeModule],
	            declarations: [MdProgressBar],
	        }), 
	        __metadata$44('design:paramtypes', [])
	    ], MdProgressBarModule);
	    return MdProgressBarModule;
	}());
	
	var __decorate$45 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$45 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/**
	 * Directive to automatically resize a textarea to fit its content.
	 */
	var MdTextareaAutosize = (function () {
	    function MdTextareaAutosize(_elementRef) {
	        this._elementRef = _elementRef;
	    }
	    Object.defineProperty(MdTextareaAutosize.prototype, "_minHeight", {
	        /** The minimum height of the textarea as determined by minRows. */
	        get: function () {
	            return this.minRows ? this.minRows * this._cachedLineHeight + "px" : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdTextareaAutosize.prototype, "_maxHeight", {
	        /** The maximum height of the textarea as determined by maxRows. */
	        get: function () {
	            return this.maxRows ? this.maxRows * this._cachedLineHeight + "px" : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MdTextareaAutosize.prototype.ngOnInit = function () {
	        this._cacheTextareaLineHeight();
	        this.resizeToFitContent();
	    };
	    /**
	     * Cache the height of a single-row textarea.
	     *
	     * We need to know how large a single "row" of a textarea is in order to apply minRows and
	     * maxRows. For the initial version, we will assume that the height of a single line in the
	     * textarea does not ever change.
	     */
	    MdTextareaAutosize.prototype._cacheTextareaLineHeight = function () {
	        var textarea = this._elementRef.nativeElement;
	        // Use a clone element because we have to override some styles.
	        var textareaClone = textarea.cloneNode(false);
	        textareaClone.rows = 1;
	        // Use `position: absolute` so that this doesn't cause a browser layout and use
	        // `visibility: hidden` so that nothing is rendered. Clear any other styles that
	        // would affect the height.
	        textareaClone.style.position = 'absolute';
	        textareaClone.style.visibility = 'hidden';
	        textareaClone.style.border = 'none';
	        textareaClone.style.padding = '';
	        textareaClone.style.height = '';
	        textareaClone.style.minHeight = '';
	        textareaClone.style.maxHeight = '';
	        textarea.parentNode.appendChild(textareaClone);
	        this._cachedLineHeight = textareaClone.offsetHeight;
	        textarea.parentNode.removeChild(textareaClone);
	    };
	    /** Resize the textarea to fit its content. */
	    MdTextareaAutosize.prototype.resizeToFitContent = function () {
	        var textarea = this._elementRef.nativeElement;
	        // Reset the textarea height to auto in order to shrink back to its default size.
	        textarea.style.height = 'auto';
	        // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.
	        textarea.style.height = textarea.scrollHeight + "px";
	    };
	    __decorate$45([
	        _angular_core.Input(), 
	        __metadata$45('design:type', Number)
	    ], MdTextareaAutosize.prototype, "minRows", void 0);
	    __decorate$45([
	        _angular_core.Input(), 
	        __metadata$45('design:type', Number)
	    ], MdTextareaAutosize.prototype, "maxRows", void 0);
	    MdTextareaAutosize = __decorate$45([
	        _angular_core.Directive({
	            selector: 'textarea[md-autosize], textarea[mat-autosize]',
	            host: {
	                '(input)': 'resizeToFitContent()',
	                '[style.min-height]': '_minHeight',
	                '[style.max-height]': '_maxHeight',
	            },
	        }), 
	        __metadata$45('design:paramtypes', [_angular_core.ElementRef])
	    ], MdTextareaAutosize);
	    return MdTextareaAutosize;
	}());
	
	var __extends$14 = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/** @docs-private */
	var MdInputContainerPlaceholderConflictError = (function (_super) {
	    __extends$14(MdInputContainerPlaceholderConflictError, _super);
	    function MdInputContainerPlaceholderConflictError() {
	        _super.call(this, 'Placeholder attribute and child element were both specified.');
	    }
	    return MdInputContainerPlaceholderConflictError;
	}(MdError));
	/** @docs-private */
	var MdInputContainerUnsupportedTypeError = (function (_super) {
	    __extends$14(MdInputContainerUnsupportedTypeError, _super);
	    function MdInputContainerUnsupportedTypeError(type) {
	        _super.call(this, "Input type \"" + type + "\" isn't supported by md-input-container.");
	    }
	    return MdInputContainerUnsupportedTypeError;
	}(MdError));
	/** @docs-private */
	var MdInputContainerDuplicatedHintError = (function (_super) {
	    __extends$14(MdInputContainerDuplicatedHintError, _super);
	    function MdInputContainerDuplicatedHintError(align) {
	        _super.call(this, "A hint was already declared for 'align=\"" + align + "\"'.");
	    }
	    return MdInputContainerDuplicatedHintError;
	}(MdError));
	/** @docs-private */
	var MdInputContainerMissingMdInputError = (function (_super) {
	    __extends$14(MdInputContainerMissingMdInputError, _super);
	    function MdInputContainerMissingMdInputError() {
	        _super.call(this, 'md-input-container must contain an md-input directive. Did you forget to add md-input ' +
	            'to the native input or textarea element?');
	    }
	    return MdInputContainerMissingMdInputError;
	}(MdError));
	
	var __decorate$47 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$47 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param$10 = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	// Invalid input type. Using one of these will throw an MdInputContainerUnsupportedTypeError.
	var MD_INPUT_INVALID_TYPES = [
	    'button',
	    'checkbox',
	    'color',
	    'file',
	    'hidden',
	    'image',
	    'radio',
	    'range',
	    'reset',
	    'submit'
	];
	var nextUniqueId$2 = 0;
	/**
	 * The placeholder directive. The content can declare this to implement more
	 * complex placeholders.
	 */
	var MdPlaceholder = (function () {
	    function MdPlaceholder() {
	    }
	    MdPlaceholder = __decorate$47([
	        _angular_core.Directive({
	            selector: 'md-placeholder, mat-placeholder'
	        }), 
	        __metadata$47('design:paramtypes', [])
	    ], MdPlaceholder);
	    return MdPlaceholder;
	}());
	/** The hint directive, used to tag content as hint labels (going under the input). */
	var MdHint = (function () {
	    function MdHint() {
	        // Whether to align the hint label at the start or end of the line.
	        this.align = 'start';
	    }
	    __decorate$47([
	        _angular_core.Input(), 
	        __metadata$47('design:type', Object)
	    ], MdHint.prototype, "align", void 0);
	    MdHint = __decorate$47([
	        _angular_core.Directive({
	            selector: 'md-hint, mat-hint',
	            host: {
	                'class': 'md-hint',
	                '[class.md-right]': 'align == "end"',
	            }
	        }), 
	        __metadata$47('design:paramtypes', [])
	    ], MdHint);
	    return MdHint;
	}());
	/** The input directive, used to mark the input that `MdInputContainer` is wrapping. */
	var MdInputDirective = (function () {
	    function MdInputDirective(_elementRef, _renderer, _ngControl) {
	        var _this = this;
	        this._elementRef = _elementRef;
	        this._renderer = _renderer;
	        this._ngControl = _ngControl;
	        this._disabled = false;
	        this._placeholder = '';
	        this._required = false;
	        this._type = 'text';
	        /**
	         * Emits an event when the placeholder changes so that the `md-input-container` can re-validate.
	         */
	        this._placeholderChange = new _angular_core.EventEmitter();
	        this.focused = false;
	        this._neverEmptyInputTypes = [
	            'date',
	            'datetime',
	            'datetime-local',
	            'month',
	            'time',
	            'week'
	        ].filter(function (t) { return getSupportedInputTypes().has(t); });
	        // Force setter to be called in case id was not specified.
	        this.id = this.id;
	        if (this._ngControl && this._ngControl.valueChanges) {
	            this._ngControl.valueChanges.subscribe(function (value) {
	                _this.value = value;
	            });
	        }
	    }
	    Object.defineProperty(MdInputDirective.prototype, "disabled", {
	        /** Whether the element is disabled. */
	        get: function () { return this._disabled; },
	        set: function (value) { this._disabled = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdInputDirective.prototype, "id", {
	        /** Unique id of the element. */
	        get: function () { return this._id; },
	        set: function (value) { this._id = value || this._uid; },
	        enumerable: true,
	        configurable: true
	    });
	    
	    Object.defineProperty(MdInputDirective.prototype, "placeholder", {
	        /** Placeholder attribute of the element. */
	        get: function () { return this._placeholder; },
	        set: function (value) {
	            if (this._placeholder != value) {
	                this._placeholder = value;
	                this._placeholderChange.emit(this._placeholder);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdInputDirective.prototype, "required", {
	        /** Whether the element is required. */
	        get: function () { return this._required; },
	        set: function (value) { this._required = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdInputDirective.prototype, "type", {
	        /** Input type of the element. */
	        get: function () { return this._type; },
	        set: function (value) {
	            this._type = value || 'text';
	            this._validateType();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdInputDirective.prototype, "empty", {
	        get: function () { return (this.value == null || this.value === '') && !this._isNeverEmpty(); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdInputDirective.prototype, "_uid", {
	        get: function () { return this._cachedUid = this._cachedUid || "md-input-" + nextUniqueId$2++; },
	        enumerable: true,
	        configurable: true
	    });
	    MdInputDirective.prototype.ngAfterContentInit = function () {
	        this.value = this._elementRef.nativeElement.value;
	    };
	    /** Focuses the input element. */
	    MdInputDirective.prototype.focus = function () { this._renderer.invokeElementMethod(this._elementRef.nativeElement, 'focus'); };
	    MdInputDirective.prototype._onFocus = function () { this.focused = true; };
	    MdInputDirective.prototype._onBlur = function () { this.focused = false; };
	    MdInputDirective.prototype._onInput = function () { this.value = this._elementRef.nativeElement.value; };
	    /** Make sure the input is a supported type. */
	    MdInputDirective.prototype._validateType = function () {
	        if (MD_INPUT_INVALID_TYPES.indexOf(this._type) != -1) {
	            throw new MdInputContainerUnsupportedTypeError(this._type);
	        }
	    };
	    MdInputDirective.prototype._isNeverEmpty = function () { return this._neverEmptyInputTypes.indexOf(this._type) != -1; };
	    __decorate$47([
	        _angular_core.Input(), 
	        __metadata$47('design:type', Object)
	    ], MdInputDirective.prototype, "disabled", null);
	    __decorate$47([
	        _angular_core.Input(), 
	        __metadata$47('design:type', Object)
	    ], MdInputDirective.prototype, "id", null);
	    __decorate$47([
	        _angular_core.Input(), 
	        __metadata$47('design:type', Object)
	    ], MdInputDirective.prototype, "placeholder", null);
	    __decorate$47([
	        _angular_core.Input(), 
	        __metadata$47('design:type', Object)
	    ], MdInputDirective.prototype, "required", null);
	    __decorate$47([
	        _angular_core.Input(), 
	        __metadata$47('design:type', Object)
	    ], MdInputDirective.prototype, "type", null);
	    __decorate$47([
	        _angular_core.Output(), 
	        __metadata$47('design:type', Object)
	    ], MdInputDirective.prototype, "_placeholderChange", void 0);
	    MdInputDirective = __decorate$47([
	        _angular_core.Directive({
	            selector: 'input[md-input], textarea[md-input], input[mat-input], textarea[mat-input]',
	            host: {
	                'class': 'md-input-element',
	                '[id]': 'id',
	                '(blur)': '_onBlur()',
	                '(focus)': '_onFocus()',
	                '(input)': '_onInput()',
	            }
	        }),
	        __param$10(2, _angular_core.Optional()), 
	        __metadata$47('design:paramtypes', [_angular_core.ElementRef, _angular_core.Renderer, _angular_forms.NgControl])
	    ], MdInputDirective);
	    return MdInputDirective;
	}());
	/**
	 * Component that represents a text input. It encapsulates the <input> HTMLElement and
	 * improve on its behaviour, along with styling it according to the Material Design.
	 */
	var MdInputContainer = (function () {
	    function MdInputContainer() {
	        /** Alignment of the input container's content. */
	        this.align = 'start';
	        /** Color of the input divider, based on the theme. */
	        this.dividerColor = 'primary';
	        this._hintLabel = '';
	        this._floatingPlaceholder = true;
	    }
	    Object.defineProperty(MdInputContainer.prototype, "hintLabel", {
	        /** Text for the input hint. */
	        get: function () { return this._hintLabel; },
	        set: function (value) {
	            this._hintLabel = value;
	            this._validateHints();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdInputContainer.prototype, "floatingPlaceholder", {
	        /** Text or the floating placeholder. */
	        get: function () { return this._floatingPlaceholder; },
	        set: function (value) { this._floatingPlaceholder = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    MdInputContainer.prototype.ngAfterContentInit = function () {
	        var _this = this;
	        if (!this._mdInputChild) {
	            throw new MdInputContainerMissingMdInputError();
	        }
	        this._validateHints();
	        this._validatePlaceholders();
	        // Re-validate when things change.
	        this._hintChildren.changes.subscribe(function () {
	            _this._validateHints();
	        });
	        this._mdInputChild._placeholderChange.subscribe(function () {
	            _this._validatePlaceholders();
	        });
	    };
	    MdInputContainer.prototype._isUntouched = function () { return this._hasNgControl() && this._mdInputChild._ngControl.untouched; };
	    MdInputContainer.prototype._isTouched = function () { return this._hasNgControl() && this._mdInputChild._ngControl.touched; };
	    MdInputContainer.prototype._isPristine = function () { return this._hasNgControl() && this._mdInputChild._ngControl.pristine; };
	    MdInputContainer.prototype._isDirty = function () { return this._hasNgControl() && this._mdInputChild._ngControl.dirty; };
	    MdInputContainer.prototype._isValid = function () { return this._hasNgControl() && this._mdInputChild._ngControl.valid; };
	    MdInputContainer.prototype._isInvalid = function () { return this._hasNgControl() && this._mdInputChild._ngControl.invalid; };
	    MdInputContainer.prototype._isPending = function () { return this._hasNgControl() && this._mdInputChild._ngControl.pending; };
	    /** Whether the input has a placeholder. */
	    MdInputContainer.prototype._hasPlaceholder = function () { return !!(this._mdInputChild.placeholder || this._placeholderChild); };
	    MdInputContainer.prototype._focusInput = function () { this._mdInputChild.focus(); };
	    MdInputContainer.prototype._hasNgControl = function () { return !!(this._mdInputChild && this._mdInputChild._ngControl); };
	    /**
	     * Ensure that there is only one placeholder (either `input` attribute or child element with the
	     * `md-placeholder` attribute.
	     */
	    MdInputContainer.prototype._validatePlaceholders = function () {
	        if (this._mdInputChild.placeholder && this._placeholderChild) {
	            throw new MdInputContainerPlaceholderConflictError();
	        }
	    };
	    /**
	     * Ensure that there is a maximum of one of each `<md-hint>` alignment specified, with the
	     * attribute being considered as `align="start"`.
	     */
	    MdInputContainer.prototype._validateHints = function () {
	        var _this = this;
	        if (this._hintChildren) {
	            var startHint_1 = null;
	            var endHint_1 = null;
	            this._hintChildren.forEach(function (hint) {
	                if (hint.align == 'start') {
	                    if (startHint_1 || _this.hintLabel) {
	                        throw new MdInputContainerDuplicatedHintError('start');
	                    }
	                    startHint_1 = hint;
	                }
	                else if (hint.align == 'end') {
	                    if (endHint_1) {
	                        throw new MdInputContainerDuplicatedHintError('end');
	                    }
	                    endHint_1 = hint;
	                }
	            });
	        }
	    };
	    __decorate$47([
	        _angular_core.Input(), 
	        __metadata$47('design:type', Object)
	    ], MdInputContainer.prototype, "align", void 0);
	    __decorate$47([
	        _angular_core.Input(), 
	        __metadata$47('design:type', Object)
	    ], MdInputContainer.prototype, "dividerColor", void 0);
	    __decorate$47([
	        _angular_core.Input(), 
	        __metadata$47('design:type', Object)
	    ], MdInputContainer.prototype, "hintLabel", null);
	    __decorate$47([
	        _angular_core.Input(), 
	        __metadata$47('design:type', Boolean)
	    ], MdInputContainer.prototype, "floatingPlaceholder", null);
	    __decorate$47([
	        _angular_core.ContentChild(MdInputDirective), 
	        __metadata$47('design:type', MdInputDirective)
	    ], MdInputContainer.prototype, "_mdInputChild", void 0);
	    __decorate$47([
	        _angular_core.ContentChild(MdPlaceholder), 
	        __metadata$47('design:type', MdPlaceholder)
	    ], MdInputContainer.prototype, "_placeholderChild", void 0);
	    __decorate$47([
	        _angular_core.ContentChildren(MdHint), 
	        __metadata$47('design:type', _angular_core.QueryList)
	    ], MdInputContainer.prototype, "_hintChildren", void 0);
	    MdInputContainer = __decorate$47([
	        _angular_core.Component({selector: 'md-input-container, mat-input-container',
	            template: "<div class=\"md-input-wrapper\"><div class=\"md-input-table\"><div class=\"md-input-prefix\"><ng-content select=\"[md-prefix]\"></ng-content></div><div class=\"md-input-infix\" [class.md-end]=\"align == 'end'\"><ng-content selector=\"input, textarea\"></ng-content><label class=\"md-input-placeholder\" [attr.for]=\"_mdInputChild.id\" [class.md-empty]=\"_mdInputChild.empty\" [class.md-focused]=\"_mdInputChild.focused\" [class.md-float]=\"floatingPlaceholder\" [class.md-accent]=\"dividerColor == 'accent'\" [class.md-warn]=\"dividerColor == 'warn'\" *ngIf=\"_hasPlaceholder()\"><ng-content select=\"md-placeholder\"></ng-content>{{_mdInputChild.placeholder}} <span class=\"md-placeholder-required\" *ngIf=\"_mdInputChild.required\">*</span></label></div><div class=\"md-input-suffix\"><ng-content select=\"[md-suffix]\"></ng-content></div></div><div class=\"md-input-underline\" [class.md-disabled]=\"_mdInputChild.disabled\"><span class=\"md-input-ripple\" [class.md-focused]=\"_mdInputChild.focused\" [class.md-accent]=\"dividerColor == 'accent'\" [class.md-warn]=\"dividerColor == 'warn'\"></span></div><div *ngIf=\"hintLabel != ''\" class=\"md-hint\">{{hintLabel}}</div><ng-content select=\"md-hint\"></ng-content></div>",
	            styles: ["md-input,md-textarea{display:inline-block;position:relative;font-family:Roboto,\"Helvetica Neue\",sans-serif;line-height:normal;text-align:left}.md-input-element.md-end,[dir=rtl] md-input,[dir=rtl] md-textarea{text-align:right}.md-input-wrapper{margin:16px 0}.md-input-table{display:inline-table;flex-flow:column;vertical-align:bottom;width:100%}.md-input-table>*{display:table-cell}.md-input-infix{position:relative}.md-input-element{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;width:100%}[dir=rtl] .md-input-element.md-end{text-align:left}.md-input-element:-moz-ui-invalid{box-shadow:none}.md-input-element:-webkit-autofill+.md-input-placeholder.md-float{display:block;padding-bottom:5px;transform:translateY(-100%) scale(.75);width:133.33333%}.md-input-placeholder{position:absolute;left:0;top:0;font-size:100%;pointer-events:none;z-index:1;width:100%;display:none;white-space:nowrap;text-overflow:ellipsis;overflow-x:hidden;transform:translateY(0);transform-origin:bottom left;transition:transform .4s cubic-bezier(.25,.8,.25,1),scale .4s cubic-bezier(.25,.8,.25,1),color .4s cubic-bezier(.25,.8,.25,1),width .4s cubic-bezier(.25,.8,.25,1)}.md-input-placeholder.md-empty{display:block;cursor:text}.md-input-placeholder.md-float.md-focused,.md-input-placeholder.md-float:not(.md-empty){display:block;padding-bottom:5px;transform:translateY(-100%) scale(.75);width:133.33333%}[dir=rtl] .md-input-placeholder{transform-origin:bottom right;left:auto;right:0}.md-input-underline{position:absolute;height:1px;width:100%;margin-top:4px;border-top-width:1px;border-top-style:solid}.md-input-underline.md-disabled{background-image:linear-gradient(to right,rgba(0,0,0,.26) 0,rgba(0,0,0,.26) 33%,transparent 0);background-size:4px 1px;background-repeat:repeat-x;border-top:0;background-position:0}.md-input-underline .md-input-ripple{position:absolute;height:2px;z-index:1;top:-1px;width:100%;transform-origin:top;opacity:0;transform:scaleY(0);transition:transform .4s cubic-bezier(.25,.8,.25,1),opacity .4s cubic-bezier(.25,.8,.25,1)}.md-input-underline .md-input-ripple.md-focused{opacity:1;transform:scaleY(1)}.md-hint{display:block;position:absolute;font-size:75%;bottom:-.5em}.md-hint.md-right{right:0}[dir=rtl] .md-hint{right:0;left:auto}[dir=rtl] .md-hint.md-right{right:auto;left:0}",
	"md-input-container{display:inline-block;position:relative;font-family:Roboto,\"Helvetica Neue\",sans-serif;line-height:normal;text-align:left}.md-end .md-input-element,[dir=rtl] md-input-container{text-align:right}.md-input-element::-webkit-input-placeholder{color:transparent}.md-input-element::-moz-placeholder{color:transparent}.md-input-element:-ms-input-placeholder{color:transparent}.md-input-element::placeholder{color:transparent}[dir=rtl] .md-end .md-input-element{text-align:left}"],
	            host: {
	                // Remove align attribute to prevent it from interfering with layout.
	                '[attr.align]': 'null',
	                '[class.ng-untouched]': '_isUntouched()',
	                '[class.ng-touched]': '_isTouched()',
	                '[class.ng-pristine]': '_isPristine()',
	                '[class.ng-dirty]': '_isDirty()',
	                '[class.ng-valid]': '_isValid()',
	                '[class.ng-invalid]': '_isInvalid()',
	                '[class.ng-pending]': '_isPending()',
	                '(click)': '_focusInput()',
	            },
	            encapsulation: _angular_core.ViewEncapsulation.None,
	        }), 
	        __metadata$47('design:paramtypes', [])
	    ], MdInputContainer);
	    return MdInputContainer;
	}());
	
	var __extends$13 = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate$46 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$46 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var noop = function () { };
	var MD_INPUT_CONTROL_VALUE_ACCESSOR = {
	    provide: _angular_forms.NG_VALUE_ACCESSOR,
	    useExisting: _angular_core.forwardRef(function () { return MdInput; }),
	    multi: true
	};
	// Invalid input type. Using one of these will throw an MdInputUnsupportedTypeError.
	var MD_INPUT_INVALID_INPUT_TYPE = [
	    'file',
	    'radio',
	    'checkbox',
	];
	var nextUniqueId$1 = 0;
	/** @docs-private */
	var MdInputPlaceholderConflictError = (function (_super) {
	    __extends$13(MdInputPlaceholderConflictError, _super);
	    function MdInputPlaceholderConflictError() {
	        _super.call(this, 'Placeholder attribute and child element were both specified.');
	    }
	    return MdInputPlaceholderConflictError;
	}(MdError));
	/** @docs-private */
	var MdInputUnsupportedTypeError = (function (_super) {
	    __extends$13(MdInputUnsupportedTypeError, _super);
	    function MdInputUnsupportedTypeError(type) {
	        _super.call(this, "Input type \"" + type + "\" isn't supported by md-input.");
	    }
	    return MdInputUnsupportedTypeError;
	}(MdError));
	/** @docs-private */
	var MdInputDuplicatedHintError = (function (_super) {
	    __extends$13(MdInputDuplicatedHintError, _super);
	    function MdInputDuplicatedHintError(align) {
	        _super.call(this, "A hint was already declared for 'align=\"" + align + "\"'.");
	    }
	    return MdInputDuplicatedHintError;
	}(MdError));
	/**
	 * Component that represents a text input. It encapsulates the <input> HTMLElement and
	 * improve on its behaviour, along with styling it according to the Material Design.
	 * @deprecated
	 * @docs-private
	 */
	var MdInput = (function () {
	    function MdInput(elementRef, _renderer) {
	        this._renderer = _renderer;
	        this._focused = false;
	        this._value = '';
	        /** Callback registered via registerOnTouched (ControlValueAccessor) */
	        this._onTouchedCallback = noop;
	        /** Callback registered via registerOnChange (ControlValueAccessor) */
	        this._onChangeCallback = noop;
	        /** Alignment of the input container's content. */
	        this.align = 'start';
	        /** Color of the input divider, based on the theme. */
	        this.dividerColor = 'primary';
	        /** Text for the input hint. */
	        this.hintLabel = '';
	        /** Unique id for the input element. */
	        this.id = "md-input-" + nextUniqueId$1++;
	        /** Mirrors the native `list` attribute. */
	        this.list = null;
	        /** Mirrors the native `max` attribute. */
	        this.max = null;
	        /** Mirrors the native `maxlength` attribute. */
	        this.maxlength = null;
	        /** Mirrors the native `min` attribute. */
	        this.min = null;
	        /** Mirrors the native `minlength` attribute. */
	        this.minlength = null;
	        /** Mirrors the native `placeholder` attribute. */
	        this.placeholder = null;
	        /** Mirrors the native `step` attribute. */
	        this.step = null;
	        /** Mirrors the native `tabindex` attribute. */
	        this.tabindex = null;
	        /** Mirrors the native `type` attribute. */
	        this.type = 'text';
	        /** Mirrors the native `name` attribute. */
	        this.name = null;
	        // textarea-specific
	        /** Mirrors the native `rows` attribute. */
	        this.rows = null;
	        /** Mirrors the native `cols` attribute. */
	        this.cols = null;
	        /** Whether to do a soft or hard wrap of the text.. */
	        this.wrap = null;
	        this._floatingPlaceholder = true;
	        this._autofocus = false;
	        this._disabled = false;
	        this._readonly = false;
	        this._required = false;
	        this._spellcheck = false;
	        this._blurEmitter = new _angular_core.EventEmitter();
	        this._focusEmitter = new _angular_core.EventEmitter();
	        // Set the element type depending on normalized selector used(md-input / md-textarea)
	        this._elementType = elementRef.nativeElement.nodeName.toLowerCase() === 'md-input' ?
	            'input' :
	            'textarea';
	    }
	    Object.defineProperty(MdInput.prototype, "ariaDisabled", {
	        /** Mirrors the native `aria-disabled` attribute. */
	        get: function () { return this._ariaDisabled; },
	        set: function (value) { this._ariaDisabled = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdInput.prototype, "ariaRequired", {
	        /** Mirrors the native `aria-required` attribute. */
	        get: function () { return this._ariaRequired; },
	        set: function (value) { this._ariaRequired = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdInput.prototype, "ariaInvalid", {
	        /** Mirrors the native `aria-invalid` attribute. */
	        get: function () { return this._ariaInvalid; },
	        set: function (value) { this._ariaInvalid = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdInput.prototype, "focused", {
	        /** Readonly properties. */
	        /** Whether the element is focused. */
	        get: function () { return this._focused; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdInput.prototype, "empty", {
	        /** Whether the element is empty. */
	        get: function () { return (this._value == null || this._value === '') && this.type !== 'date'; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdInput.prototype, "characterCount", {
	        /** Amount of characters inside the element. */
	        get: function () {
	            return this.empty ? 0 : ('' + this._value).length;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdInput.prototype, "inputId", {
	        /** Unique element id. */
	        get: function () { return this.id + "-input"; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdInput.prototype, "floatingPlaceholder", {
	        /** Text for the floating placeholder. */
	        get: function () { return this._floatingPlaceholder; },
	        set: function (value) { this._floatingPlaceholder = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdInput.prototype, "autofocus", {
	        /** Whether to automatically focus the input. */
	        get: function () { return this._autofocus; },
	        set: function (value) { this._autofocus = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdInput.prototype, "disabled", {
	        /** Whether the input is disabled. */
	        get: function () { return this._disabled; },
	        set: function (value) { this._disabled = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdInput.prototype, "readonly", {
	        /** Whether the input is readonly. */
	        get: function () { return this._readonly; },
	        set: function (value) { this._readonly = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdInput.prototype, "required", {
	        /** Whether the input is required. */
	        get: function () { return this._required; },
	        set: function (value) { this._required = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdInput.prototype, "spellcheck", {
	        /** Whether spellchecking is enable on the input. */
	        get: function () { return this._spellcheck; },
	        set: function (value) { this._spellcheck = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdInput.prototype, "onBlur", {
	        /** Event emitted when the input is blurred. */
	        get: function () {
	            return this._blurEmitter.asObservable();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdInput.prototype, "onFocus", {
	        /** Event emitted when the input is focused. */
	        get: function () {
	            return this._focusEmitter.asObservable();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdInput.prototype, "value", {
	        /** Value of the input. */
	        get: function () { return this._value; },
	        set: function (v) {
	            v = this._convertValueForInputType(v);
	            if (v !== this._value) {
	                this._value = v;
	                this._onChangeCallback(v);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    
	    Object.defineProperty(MdInput.prototype, "_align", {
	        // This is to remove the `align` property of the `md-input` itself. Otherwise HTML5
	        // might place it as RTL when we don't want to. We still want to use `align` as an
	        // Input though, so we use HostBinding.
	        get: function () { return null; },
	        enumerable: true,
	        configurable: true
	    });
	    /** Set focus on input */
	    MdInput.prototype.focus = function () {
	        this._renderer.invokeElementMethod(this._inputElement.nativeElement, 'focus');
	    };
	    MdInput.prototype._handleFocus = function (event) {
	        this._focused = true;
	        this._focusEmitter.emit(event);
	    };
	    MdInput.prototype._handleBlur = function (event) {
	        this._focused = false;
	        this._onTouchedCallback();
	        this._blurEmitter.emit(event);
	    };
	    MdInput.prototype._handleChange = function (event) {
	        this.value = event.target.value;
	        this._onTouchedCallback();
	    };
	    MdInput.prototype._hasPlaceholder = function () {
	        return !!this.placeholder || this._placeholderChild != null;
	    };
	    /**
	     * Sets the model value of the input. Implemented as part of ControlValueAccessor.
	     * @param value Value to be set.
	     */
	    MdInput.prototype.writeValue = function (value) {
	        this._value = value;
	    };
	    /**
	     * Registers a callback to be triggered when the input value has changed.
	     * Implemented as part of ControlValueAccessor.
	     * @param fn Callback to be registered.
	     */
	    MdInput.prototype.registerOnChange = function (fn) {
	        this._onChangeCallback = fn;
	    };
	    /**
	     * Registers a callback to be triggered when the input has been touched.
	     * Implemented as part of ControlValueAccessor.
	     * @param fn Callback to be registered.
	     */
	    MdInput.prototype.registerOnTouched = function (fn) {
	        this._onTouchedCallback = fn;
	    };
	    /**
	     * Sets whether the input is disabled.
	     * Implemented as a part of ControlValueAccessor.
	     * @param isDisabled Whether the input should be disabled.
	     */
	    MdInput.prototype.setDisabledState = function (isDisabled) {
	        this.disabled = isDisabled;
	    };
	    MdInput.prototype.ngAfterContentInit = function () {
	        var _this = this;
	        this._validateConstraints();
	        // Trigger validation when the hint children change.
	        this._hintChildren.changes.subscribe(function () {
	            _this._validateConstraints();
	        });
	    };
	    MdInput.prototype.ngOnChanges = function (changes) {
	        this._validateConstraints();
	    };
	    /**
	     * Convert the value passed in to a value that is expected from the type of the md-input.
	     * This is normally performed by the *_VALUE_ACCESSOR in forms, but since the type is bound
	     * on our internal input it won't work locally.
	     * @private
	     */
	    MdInput.prototype._convertValueForInputType = function (v) {
	        switch (this.type) {
	            case 'number': return parseFloat(v);
	            default: return v;
	        }
	    };
	    /**
	     * Ensure that all constraints defined by the API are validated, or throw errors otherwise.
	     * Constraints for now:
	     *   - placeholder attribute and <md-placeholder> are mutually exclusive.
	     *   - type attribute is not one of the forbidden types (see constant at the top).
	     *   - Maximum one of each `<md-hint>` alignment specified, with the attribute being
	     *     considered as align="start".
	     * @private
	     */
	    MdInput.prototype._validateConstraints = function () {
	        var _this = this;
	        if (this.placeholder != '' && this.placeholder != null && this._placeholderChild != null) {
	            throw new MdInputPlaceholderConflictError();
	        }
	        if (MD_INPUT_INVALID_INPUT_TYPE.indexOf(this.type) != -1) {
	            throw new MdInputUnsupportedTypeError(this.type);
	        }
	        if (this._hintChildren) {
	            // Validate the hint labels.
	            var startHint_1 = null;
	            var endHint_1 = null;
	            this._hintChildren.forEach(function (hint) {
	                if (hint.align == 'start') {
	                    if (startHint_1 || _this.hintLabel) {
	                        throw new MdInputDuplicatedHintError('start');
	                    }
	                    startHint_1 = hint;
	                }
	                else if (hint.align == 'end') {
	                    if (endHint_1) {
	                        throw new MdInputDuplicatedHintError('end');
	                    }
	                    endHint_1 = hint;
	                }
	            });
	        }
	    };
	    __decorate$46([
	        _angular_core.Input('aria-label'), 
	        __metadata$46('design:type', String)
	    ], MdInput.prototype, "ariaLabel", void 0);
	    __decorate$46([
	        _angular_core.Input('aria-labelledby'), 
	        __metadata$46('design:type', String)
	    ], MdInput.prototype, "ariaLabelledBy", void 0);
	    __decorate$46([
	        _angular_core.Input('aria-disabled'), 
	        __metadata$46('design:type', Boolean)
	    ], MdInput.prototype, "ariaDisabled", null);
	    __decorate$46([
	        _angular_core.Input('aria-required'), 
	        __metadata$46('design:type', Boolean)
	    ], MdInput.prototype, "ariaRequired", null);
	    __decorate$46([
	        _angular_core.Input('aria-invalid'), 
	        __metadata$46('design:type', Boolean)
	    ], MdInput.prototype, "ariaInvalid", null);
	    __decorate$46([
	        _angular_core.ContentChild(MdPlaceholder), 
	        __metadata$46('design:type', MdPlaceholder)
	    ], MdInput.prototype, "_placeholderChild", void 0);
	    __decorate$46([
	        _angular_core.ContentChildren(MdHint), 
	        __metadata$46('design:type', _angular_core.QueryList)
	    ], MdInput.prototype, "_hintChildren", void 0);
	    __decorate$46([
	        _angular_core.Input(), 
	        __metadata$46('design:type', Object)
	    ], MdInput.prototype, "align", void 0);
	    __decorate$46([
	        _angular_core.Input(), 
	        __metadata$46('design:type', Object)
	    ], MdInput.prototype, "dividerColor", void 0);
	    __decorate$46([
	        _angular_core.Input(), 
	        __metadata$46('design:type', String)
	    ], MdInput.prototype, "hintLabel", void 0);
	    __decorate$46([
	        _angular_core.Input(), 
	        __metadata$46('design:type', String)
	    ], MdInput.prototype, "autocomplete", void 0);
	    __decorate$46([
	        _angular_core.Input(), 
	        __metadata$46('design:type', String)
	    ], MdInput.prototype, "autocorrect", void 0);
	    __decorate$46([
	        _angular_core.Input(), 
	        __metadata$46('design:type', String)
	    ], MdInput.prototype, "autocapitalize", void 0);
	    __decorate$46([
	        _angular_core.Input(), 
	        __metadata$46('design:type', String)
	    ], MdInput.prototype, "id", void 0);
	    __decorate$46([
	        _angular_core.Input(), 
	        __metadata$46('design:type', String)
	    ], MdInput.prototype, "list", void 0);
	    __decorate$46([
	        _angular_core.Input(), 
	        __metadata$46('design:type', Object)
	    ], MdInput.prototype, "max", void 0);
	    __decorate$46([
	        _angular_core.Input(), 
	        __metadata$46('design:type', Number)
	    ], MdInput.prototype, "maxlength", void 0);
	    __decorate$46([
	        _angular_core.Input(), 
	        __metadata$46('design:type', Object)
	    ], MdInput.prototype, "min", void 0);
	    __decorate$46([
	        _angular_core.Input(), 
	        __metadata$46('design:type', Number)
	    ], MdInput.prototype, "minlength", void 0);
	    __decorate$46([
	        _angular_core.Input(), 
	        __metadata$46('design:type', String)
	    ], MdInput.prototype, "placeholder", void 0);
	    __decorate$46([
	        _angular_core.Input(), 
	        __metadata$46('design:type', Number)
	    ], MdInput.prototype, "step", void 0);
	    __decorate$46([
	        _angular_core.Input(), 
	        __metadata$46('design:type', Number)
	    ], MdInput.prototype, "tabindex", void 0);
	    __decorate$46([
	        _angular_core.Input(), 
	        __metadata$46('design:type', String)
	    ], MdInput.prototype, "type", void 0);
	    __decorate$46([
	        _angular_core.Input(), 
	        __metadata$46('design:type', String)
	    ], MdInput.prototype, "name", void 0);
	    __decorate$46([
	        _angular_core.Input(), 
	        __metadata$46('design:type', Number)
	    ], MdInput.prototype, "rows", void 0);
	    __decorate$46([
	        _angular_core.Input(), 
	        __metadata$46('design:type', Number)
	    ], MdInput.prototype, "cols", void 0);
	    __decorate$46([
	        _angular_core.Input(), 
	        __metadata$46('design:type', Object)
	    ], MdInput.prototype, "wrap", void 0);
	    __decorate$46([
	        _angular_core.Input(), 
	        __metadata$46('design:type', Boolean)
	    ], MdInput.prototype, "floatingPlaceholder", null);
	    __decorate$46([
	        _angular_core.Input(), 
	        __metadata$46('design:type', Boolean)
	    ], MdInput.prototype, "autofocus", null);
	    __decorate$46([
	        _angular_core.Input(), 
	        __metadata$46('design:type', Boolean)
	    ], MdInput.prototype, "disabled", null);
	    __decorate$46([
	        _angular_core.Input(), 
	        __metadata$46('design:type', Boolean)
	    ], MdInput.prototype, "readonly", null);
	    __decorate$46([
	        _angular_core.Input(), 
	        __metadata$46('design:type', Boolean)
	    ], MdInput.prototype, "required", null);
	    __decorate$46([
	        _angular_core.Input(), 
	        __metadata$46('design:type', Boolean)
	    ], MdInput.prototype, "spellcheck", null);
	    __decorate$46([
	        _angular_core.Output('blur'), 
	        __metadata$46('design:type', rxjs_Observable.Observable)
	    ], MdInput.prototype, "onBlur", null);
	    __decorate$46([
	        _angular_core.Output('focus'), 
	        __metadata$46('design:type', rxjs_Observable.Observable)
	    ], MdInput.prototype, "onFocus", null);
	    __decorate$46([
	        _angular_core.Input(), 
	        __metadata$46('design:type', Object)
	    ], MdInput.prototype, "value", null);
	    __decorate$46([
	        _angular_core.HostBinding('attr.align'), 
	        __metadata$46('design:type', Object)
	    ], MdInput.prototype, "_align", null);
	    __decorate$46([
	        _angular_core.ViewChild('input'), 
	        __metadata$46('design:type', _angular_core.ElementRef)
	    ], MdInput.prototype, "_inputElement", void 0);
	    MdInput = __decorate$46([
	        _angular_core.Component({selector: 'md-input, md-textarea',
	            template: "<div class=\"md-input-wrapper\"><div class=\"md-input-table\"><div class=\"md-input-prefix\"><ng-content select=\"[md-prefix]\"></ng-content></div><div class=\"md-input-infix\"><input #input *ngIf=\"_elementType === 'input'\" class=\"md-input-element\" [class.md-end]=\"align == 'end'\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledBy\" [attr.aria-disabled]=\"ariaDisabled\" [attr.aria-required]=\"ariaRequired\" [attr.aria-invalid]=\"ariaInvalid\" [attr.autocomplete]=\"autocomplete\" [attr.autocorrect]=\"autocorrect\" [attr.autocapitalize]=\"autocapitalize\" [autofocus]=\"autofocus\" [disabled]=\"disabled\" [id]=\"inputId\" [attr.list]=\"list\" [attr.max]=\"max\" [attr.maxlength]=\"maxlength\" [attr.min]=\"min\" [attr.minlength]=\"minlength\" [readonly]=\"readonly\" [required]=\"required\" [spellcheck]=\"spellcheck\" [attr.step]=\"step\" [attr.tabindex]=\"tabindex\" [type]=\"type\" [attr.name]=\"name\" (focus)=\"_handleFocus($event)\" (blur)=\"_handleBlur($event)\" [(ngModel)]=\"value\" (change)=\"_handleChange($event)\"><textarea #input *ngIf=\"_elementType === 'textarea'\" class=\"md-input-element md-input-element-textarea\" [class.md-end]=\"align == 'end'\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledBy\" [attr.aria-disabled]=\"ariaDisabled\" [attr.aria-required]=\"ariaRequired\" [attr.aria-invalid]=\"ariaInvalid\" [attr.autocomplete]=\"autocomplete\" [attr.autocapitalize]=\"autocapitalize\" [attr.cols]=\"cols\" [attr.rows]=\"rows\" [attr.wrap]=\"wrap\" [autofocus]=\"autofocus\" [disabled]=\"disabled\" [id]=\"inputId\" [attr.maxlength]=\"maxlength\" [attr.minlength]=\"minlength\" [readonly]=\"readonly\" [required]=\"required\" [spellcheck]=\"spellcheck\" [attr.tabindex]=\"tabindex\" [attr.name]=\"name\" (focus)=\"_handleFocus($event)\" (blur)=\"_handleBlur($event)\" [(ngModel)]=\"value\" (change)=\"_handleChange($event)\"></textarea><label class=\"md-input-placeholder\" [attr.for]=\"inputId\" [class.md-empty]=\"empty\" [class.md-focused]=\"focused\" [class.md-float]=\"floatingPlaceholder\" [class.md-accent]=\"dividerColor == 'accent'\" [class.md-warn]=\"dividerColor == 'warn'\" *ngIf=\"_hasPlaceholder()\"><ng-content select=\"md-placeholder\"></ng-content>{{placeholder}} <span class=\"md-placeholder-required\" *ngIf=\"required\">*</span></label></div><div class=\"md-input-suffix\"><ng-content select=\"[md-suffix]\"></ng-content></div></div><div class=\"md-input-underline\" [class.md-disabled]=\"disabled\"><span class=\"md-input-ripple\" [class.md-focused]=\"focused\" [class.md-accent]=\"dividerColor == 'accent'\" [class.md-warn]=\"dividerColor == 'warn'\"></span></div><div *ngIf=\"hintLabel != ''\" class=\"md-hint\">{{hintLabel}}</div><ng-content select=\"md-hint\"></ng-content></div>",
	            styles: ["md-input,md-textarea{display:inline-block;position:relative;font-family:Roboto,\"Helvetica Neue\",sans-serif;line-height:normal;text-align:left}.md-input-element.md-end,[dir=rtl] md-input,[dir=rtl] md-textarea{text-align:right}.md-input-wrapper{margin:16px 0}.md-input-table{display:inline-table;flex-flow:column;vertical-align:bottom;width:100%}.md-input-table>*{display:table-cell}.md-input-infix{position:relative}.md-input-element{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;width:100%}[dir=rtl] .md-input-element.md-end{text-align:left}.md-input-element:-moz-ui-invalid{box-shadow:none}.md-input-element:-webkit-autofill+.md-input-placeholder.md-float{display:block;padding-bottom:5px;transform:translateY(-100%) scale(.75);width:133.33333%}.md-input-placeholder{position:absolute;left:0;top:0;font-size:100%;pointer-events:none;z-index:1;width:100%;display:none;white-space:nowrap;text-overflow:ellipsis;overflow-x:hidden;transform:translateY(0);transform-origin:bottom left;transition:transform .4s cubic-bezier(.25,.8,.25,1),scale .4s cubic-bezier(.25,.8,.25,1),color .4s cubic-bezier(.25,.8,.25,1),width .4s cubic-bezier(.25,.8,.25,1)}.md-input-placeholder.md-empty{display:block;cursor:text}.md-input-placeholder.md-float.md-focused,.md-input-placeholder.md-float:not(.md-empty){display:block;padding-bottom:5px;transform:translateY(-100%) scale(.75);width:133.33333%}[dir=rtl] .md-input-placeholder{transform-origin:bottom right;left:auto;right:0}.md-input-underline{position:absolute;height:1px;width:100%;margin-top:4px;border-top-width:1px;border-top-style:solid}.md-input-underline.md-disabled{background-image:linear-gradient(to right,rgba(0,0,0,.26) 0,rgba(0,0,0,.26) 33%,transparent 0);background-size:4px 1px;background-repeat:repeat-x;border-top:0;background-position:0}.md-input-underline .md-input-ripple{position:absolute;height:2px;z-index:1;top:-1px;width:100%;transform-origin:top;opacity:0;transform:scaleY(0);transition:transform .4s cubic-bezier(.25,.8,.25,1),opacity .4s cubic-bezier(.25,.8,.25,1)}.md-input-underline .md-input-ripple.md-focused{opacity:1;transform:scaleY(1)}.md-hint{display:block;position:absolute;font-size:75%;bottom:-.5em}.md-hint.md-right{right:0}[dir=rtl] .md-hint{right:0;left:auto}[dir=rtl] .md-hint.md-right{right:auto;left:0}"],
	            providers: [MD_INPUT_CONTROL_VALUE_ACCESSOR],
	            host: { '(click)': 'focus()' },
	            encapsulation: _angular_core.ViewEncapsulation.None,
	        }), 
	        __metadata$46('design:paramtypes', [_angular_core.ElementRef, _angular_core.Renderer])
	    ], MdInput);
	    return MdInput;
	}());
	var MdInputModule = (function () {
	    function MdInputModule() {
	    }
	    MdInputModule.forRoot = function () {
	        return {
	            ngModule: MdInputModule,
	            providers: PlatformModule.forRoot().providers,
	        };
	    };
	    MdInputModule = __decorate$46([
	        _angular_core.NgModule({
	            declarations: [
	                MdInput,
	                MdPlaceholder,
	                MdInputContainer,
	                MdHint,
	                MdTextareaAutosize,
	                MdInputDirective
	            ],
	            imports: [
	                _angular_common.CommonModule,
	                _angular_forms.FormsModule,
	                PlatformModule,
	            ],
	            exports: [
	                MdInput,
	                MdPlaceholder,
	                MdInputContainer,
	                MdHint,
	                MdTextareaAutosize,
	                MdInputDirective
	            ],
	        }), 
	        __metadata$46('design:paramtypes', [])
	    ], MdInputModule);
	    return MdInputModule;
	}());
	
	/**
	 * Configuration used when opening a snack-bar.
	 */
	var MdSnackBarConfig = (function () {
	    function MdSnackBarConfig() {
	        /** The politeness level for the MdAriaLiveAnnouncer announcement. */
	        this.politeness = 'assertive';
	        /** Message to be announced by the MdAriaLiveAnnouncer */
	        this.announcementMessage = '';
	        /** The view container to place the overlay for the snack bar into. */
	        this.viewContainerRef = null;
	        /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */
	        this.duration = 0;
	    }
	    return MdSnackBarConfig;
	}());
	
	// TODO(josephperrott): Implement onAction observable.
	/**
	 * Reference to a snack bar dispatched from the snack bar service.
	 */
	var MdSnackBarRef = (function () {
	    function MdSnackBarRef(instance, containerInstance, _overlayRef) {
	        var _this = this;
	        this._overlayRef = _overlayRef;
	        /** Subject for notifying the user that the snack bar has closed. */
	        this._afterClosed = new rxjs_Subject.Subject();
	        /** Subject for notifying the user that the snack bar action was called. */
	        this._onAction = new rxjs_Subject.Subject();
	        // Sets the readonly instance of the snack bar content component.
	        this._instance = instance;
	        this.containerInstance = containerInstance;
	        // Dismiss snackbar on action.
	        this.onAction().subscribe(function () { return _this.dismiss(); });
	        containerInstance._onExit().subscribe(function () { return _this._finishDismiss(); });
	    }
	    Object.defineProperty(MdSnackBarRef.prototype, "instance", {
	        /** The instance of the component making up the content of the snack bar. */
	        get: function () {
	            return this._instance;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /** Dismisses the snack bar. */
	    MdSnackBarRef.prototype.dismiss = function () {
	        if (!this._afterClosed.closed) {
	            this.containerInstance.exit();
	        }
	    };
	    /** Marks the snackbar action clicked. */
	    MdSnackBarRef.prototype._action = function () {
	        if (!this._onAction.closed) {
	            this._onAction.next();
	            this._onAction.complete();
	        }
	    };
	    /** Marks the snackbar as opened */
	    MdSnackBarRef.prototype._open = function () {
	        if (!this._afterOpened.closed) {
	            this._afterOpened.next();
	            this._afterOpened.complete();
	        }
	    };
	    /** Cleans up the DOM after closing. */
	    MdSnackBarRef.prototype._finishDismiss = function () {
	        this._overlayRef.dispose();
	        this._afterClosed.next();
	        this._afterClosed.complete();
	    };
	    /** Gets an observable that is notified when the snack bar is finished closing. */
	    MdSnackBarRef.prototype.afterDismissed = function () {
	        return this._afterClosed.asObservable();
	    };
	    /** Gets an observable that is notified when the snack bar has opened and appeared. */
	    MdSnackBarRef.prototype.afterOpened = function () {
	        return this.containerInstance._onEnter();
	    };
	    /** Gets an observable that is notified when the snack bar action is called. */
	    MdSnackBarRef.prototype.onAction = function () {
	        return this._onAction.asObservable();
	    };
	    return MdSnackBarRef;
	}());
	
	var __extends$16 = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * Error that is thrown when attempting to attach a snack bar that is already attached.
	 * @docs-private
	 */
	var MdSnackBarContentAlreadyAttached = (function (_super) {
	    __extends$16(MdSnackBarContentAlreadyAttached, _super);
	    function MdSnackBarContentAlreadyAttached() {
	        _super.call(this, 'Attempting to attach snack bar content after content is already attached');
	    }
	    return MdSnackBarContentAlreadyAttached;
	}(MdError));
	
	var __extends$15 = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate$49 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$49 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	// TODO(jelbourn): we can't use constants from animation.ts here because you can't use
	// a text interpolation in anything that is analyzed statically with ngc (for AoT compile).
	var SHOW_ANIMATION = '225ms cubic-bezier(0.4,0.0,1,1)';
	var HIDE_ANIMATION = '195ms cubic-bezier(0.0,0.0,0.2,1)';
	/**
	 * Internal component that wraps user-provided snack bar content.
	 * @docs-private
	 */
	var MdSnackBarContainer = (function (_super) {
	    __extends$15(MdSnackBarContainer, _super);
	    function MdSnackBarContainer(_ngZone) {
	        _super.call(this);
	        this._ngZone = _ngZone;
	        /** Subject for notifying that the snack bar has exited from view. */
	        this.onExit = new rxjs_Subject.Subject();
	        /** Subject for notifying that the snack bar has finished entering the view. */
	        this.onEnter = new rxjs_Subject.Subject();
	        /** The state of the snack bar animations. */
	        this.animationState = 'initial';
	    }
	    /** Attach a component portal as content to this snack bar container. */
	    MdSnackBarContainer.prototype.attachComponentPortal = function (portal) {
	        if (this._portalHost.hasAttached()) {
	            throw new MdSnackBarContentAlreadyAttached();
	        }
	        return this._portalHost.attachComponentPortal(portal);
	    };
	    /** Attach a template portal as content to this snack bar container. */
	    MdSnackBarContainer.prototype.attachTemplatePortal = function (portal) {
	        throw Error('Not yet implemented');
	    };
	    /** Handle end of animations, updating the state of the snackbar. */
	    MdSnackBarContainer.prototype.onAnimationEnd = function (event) {
	        var _this = this;
	        if (event.toState === 'void' || event.toState === 'complete') {
	            this._ngZone.run(function () {
	                _this.onExit.next();
	                _this.onExit.complete();
	            });
	        }
	        if (event.toState === 'visible') {
	            this._ngZone.run(function () {
	                _this.onEnter.next();
	                _this.onEnter.complete();
	            });
	        }
	    };
	    /** Begin animation of snack bar entrance into view. */
	    MdSnackBarContainer.prototype.enter = function () {
	        this.animationState = 'visible';
	    };
	    /** Returns an observable resolving when the enter animation completes.  */
	    MdSnackBarContainer.prototype._onEnter = function () {
	        this.animationState = 'visible';
	        return this.onEnter.asObservable();
	    };
	    /** Begin animation of the snack bar exiting from view. */
	    MdSnackBarContainer.prototype.exit = function () {
	        this.animationState = 'complete';
	        return this._onExit();
	    };
	    /** Returns an observable that completes after the closing animation is done. */
	    MdSnackBarContainer.prototype._onExit = function () {
	        return this.onExit.asObservable();
	    };
	    /**
	     * Makes sure the exit callbacks have been invoked when the element is destroyed.
	     */
	    MdSnackBarContainer.prototype.ngOnDestroy = function () {
	        var _this = this;
	        // Wait for the zone to settle before removing the element. Helps prevent
	        // errors where we end up removing an element which is in the middle of an animation.
	        this._ngZone.onMicrotaskEmpty.first().subscribe(function () {
	            _this.onExit.next();
	            _this.onExit.complete();
	        });
	    };
	    __decorate$49([
	        _angular_core.ViewChild(PortalHostDirective), 
	        __metadata$49('design:type', PortalHostDirective)
	    ], MdSnackBarContainer.prototype, "_portalHost", void 0);
	    MdSnackBarContainer = __decorate$49([
	        _angular_core.Component({selector: 'snack-bar-container',
	            template: "<template cdkPortalHost></template>",
	            styles: [":host{box-shadow:0 3px 5px -1px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12);background:#323232;border-radius:2px;box-sizing:content-box;display:block;height:20px;max-width:568px;min-width:288px;overflow:hidden;padding:14px 24px;transform:translateY(100%)}@media screen and (-ms-high-contrast:active){:host{border:1px solid}}"],
	            host: {
	                'role': 'alert',
	                '[@state]': 'animationState',
	                '(@state.done)': 'onAnimationEnd($event)'
	            },
	            animations: [
	                _angular_core.trigger('state', [
	                    _angular_core.state('initial', _angular_core.style({ transform: 'translateY(100%)' })),
	                    _angular_core.state('visible', _angular_core.style({ transform: 'translateY(0%)' })),
	                    _angular_core.state('complete', _angular_core.style({ transform: 'translateY(100%)' })),
	                    _angular_core.transition('visible => complete', _angular_core.animate(HIDE_ANIMATION)),
	                    _angular_core.transition('initial => visible, void => visible', _angular_core.animate(SHOW_ANIMATION)),
	                ])
	            ],
	        }), 
	        __metadata$49('design:paramtypes', [_angular_core.NgZone])
	    ], MdSnackBarContainer);
	    return MdSnackBarContainer;
	}(BasePortalHost));
	
	var __decorate$50 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$50 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/**
	 * A component used to open as the default snack bar, matching material spec.
	 * This should only be used internally by the snack bar service.
	 */
	var SimpleSnackBar = (function () {
	    function SimpleSnackBar() {
	    }
	    /** Dismisses the snack bar. */
	    SimpleSnackBar.prototype.dismiss = function () {
	        this.snackBarRef._action();
	    };
	    Object.defineProperty(SimpleSnackBar.prototype, "hasAction", {
	        /** If the action button should be shown. */
	        get: function () { return !!this.action; },
	        enumerable: true,
	        configurable: true
	    });
	    SimpleSnackBar = __decorate$50([
	        _angular_core.Component({selector: 'simple-snack-bar',
	            template: "<span class=\"md-simple-snackbar-message\">{{message}}</span> <button md-button class=\"md-simple-snackbar-action\" *ngIf=\"hasAction\" (click)=\"dismiss()\">{{action}}</button>",
	            styles: ["md-simple-snackbar{display:flex;justify-content:space-between}.md-simple-snackbar-message{box-sizing:border-box;border:none;color:#fff;font-family:Roboto,'Helvetica Neue',sans-serif;font-size:14px;line-height:20px;outline:0;text-decoration:none;word-break:break-all}.md-simple-snackbar-action{box-sizing:border-box;color:#fff;float:right;font-weight:600;line-height:20px;margin:-5px 0 0 48px;min-width:initial;padding:5px;text-transform:uppercase}"],
	        }), 
	        __metadata$50('design:paramtypes', [])
	    ], SimpleSnackBar);
	    return SimpleSnackBar;
	}());
	
	/**
	 * Extends an object with the *enumerable* and *own* properties of one or more source objects,
	 * similar to Object.assign.
	 *
	 * @param dest The object which will have properties copied to it.
	 * @param sources The source objects from which properties will be copied.
	 */
	function extendObject(dest) {
	    var sources = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        sources[_i - 1] = arguments[_i];
	    }
	    if (dest == null) {
	        throw TypeError('Cannot convert undefined or null to object');
	    }
	    for (var _a = 0, sources_1 = sources; _a < sources_1.length; _a++) {
	        var source = sources_1[_a];
	        if (source != null) {
	            for (var key in source) {
	                if (source.hasOwnProperty(key)) {
	                    dest[key] = source[key];
	                }
	            }
	        }
	    }
	    return dest;
	}
	
	var __decorate$48 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$48 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/**
	 * Service to dispatch Material Design snack bar messages.
	 */
	var MdSnackBar = (function () {
	    function MdSnackBar(_overlay, _live) {
	        this._overlay = _overlay;
	        this._live = _live;
	    }
	    /**
	     * Creates and dispatches a snack bar with a custom component for the content, removing any
	     * currently opened snack bars.
	     *
	     * @param component Component to be instantiated.
	     * @param config Extra configuration for the snack bar.
	     */
	    MdSnackBar.prototype.openFromComponent = function (component, config) {
	        var _this = this;
	        config = _applyConfigDefaults(config);
	        var overlayRef = this._createOverlay();
	        var snackBarContainer = this._attachSnackBarContainer(overlayRef, config);
	        var snackBarRef = this._attachSnackbarContent(component, snackBarContainer, overlayRef);
	        // When the snackbar is dismissed, clear the reference to it.
	        snackBarRef.afterDismissed().subscribe(function () {
	            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.
	            if (_this._snackBarRef == snackBarRef) {
	                _this._snackBarRef = null;
	            }
	        });
	        // If a snack bar is already in view, dismiss it and enter the new snack bar after exit
	        // animation is complete.
	        if (this._snackBarRef) {
	            this._snackBarRef.afterDismissed().subscribe(function () {
	                snackBarRef.containerInstance.enter();
	            });
	            this._snackBarRef.dismiss();
	        }
	        else {
	            snackBarRef.containerInstance.enter();
	        }
	        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.
	        if (config.duration > 0) {
	            snackBarRef.afterOpened().subscribe(function () {
	                setTimeout(function () { return snackBarRef.dismiss(); }, config.duration);
	            });
	        }
	        this._live.announce(config.announcementMessage, config.politeness);
	        this._snackBarRef = snackBarRef;
	        return this._snackBarRef;
	    };
	    /**
	     * Opens a snackbar with a message and an optional action.
	     * @param message The message to show in the snackbar.
	     * @param action The label for the snackbar action.
	     * @param config Additional configuration options for the snackbar.
	     */
	    MdSnackBar.prototype.open = function (message, action, config) {
	        if (action === void 0) { action = ''; }
	        if (config === void 0) { config = {}; }
	        config.announcementMessage = message;
	        var simpleSnackBarRef = this.openFromComponent(SimpleSnackBar, config);
	        simpleSnackBarRef.instance.snackBarRef = simpleSnackBarRef;
	        simpleSnackBarRef.instance.message = message;
	        simpleSnackBarRef.instance.action = action;
	        return simpleSnackBarRef;
	    };
	    /**
	     * Attaches the snack bar container component to the overlay.
	     */
	    MdSnackBar.prototype._attachSnackBarContainer = function (overlayRef, config) {
	        var containerPortal = new ComponentPortal(MdSnackBarContainer, config.viewContainerRef);
	        var containerRef = overlayRef.attach(containerPortal);
	        containerRef.instance.snackBarConfig = config;
	        return containerRef.instance;
	    };
	    /**
	     * Places a new component as the content of the snack bar container.
	     */
	    MdSnackBar.prototype._attachSnackbarContent = function (component, container, overlayRef) {
	        var portal = new ComponentPortal(component);
	        var contentRef = container.attachComponentPortal(portal);
	        return new MdSnackBarRef(contentRef.instance, container, overlayRef);
	    };
	    /**
	     * Creates a new overlay and places it in the correct location.
	     */
	    MdSnackBar.prototype._createOverlay = function () {
	        var state$$1 = new OverlayState();
	        state$$1.positionStrategy = this._overlay.position().global()
	            .centerHorizontally()
	            .bottom('0');
	        return this._overlay.create(state$$1);
	    };
	    MdSnackBar = __decorate$48([
	        _angular_core.Injectable(), 
	        __metadata$48('design:paramtypes', [Overlay, LiveAnnouncer])
	    ], MdSnackBar);
	    return MdSnackBar;
	}());
	/**
	 * Applies default options to the snackbar config.
	 * @param config The configuration to which the defaults will be applied.
	 * @returns The new configuration object with defaults applied.
	 */
	function _applyConfigDefaults(config) {
	    return extendObject(new MdSnackBarConfig(), config);
	}
	var MdSnackBarModule = (function () {
	    function MdSnackBarModule() {
	    }
	    MdSnackBarModule.forRoot = function () {
	        return {
	            ngModule: MdSnackBarModule,
	            providers: [MdSnackBar, OVERLAY_PROVIDERS, LiveAnnouncer]
	        };
	    };
	    MdSnackBarModule = __decorate$48([
	        _angular_core.NgModule({
	            imports: [OverlayModule, PortalModule, _angular_common.CommonModule, DefaultStyleCompatibilityModeModule],
	            exports: [MdSnackBarContainer, DefaultStyleCompatibilityModeModule],
	            declarations: [MdSnackBarContainer, SimpleSnackBar],
	            entryComponents: [MdSnackBarContainer, SimpleSnackBar],
	        }), 
	        __metadata$48('design:paramtypes', [])
	    ], MdSnackBarModule);
	    return MdSnackBarModule;
	}());
	
	var __extends$17 = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate$52 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$52 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/** Used to flag tab labels for use with the portal directive */
	var MdTabLabel = (function (_super) {
	    __extends$17(MdTabLabel, _super);
	    function MdTabLabel(templateRef, viewContainerRef) {
	        _super.call(this, templateRef, viewContainerRef);
	    }
	    MdTabLabel = __decorate$52([
	        _angular_core.Directive({
	            selector: '[md-tab-label], [mat-tab-label]',
	        }), 
	        __metadata$52('design:paramtypes', [_angular_core.TemplateRef, _angular_core.ViewContainerRef])
	    ], MdTabLabel);
	    return MdTabLabel;
	}(TemplatePortalDirective));
	
	var __decorate$53 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$53 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/** Used in the `md-tab-group` view to display tab labels */
	var MdTabLabelWrapper = (function () {
	    function MdTabLabelWrapper(elementRef, _renderer) {
	        this.elementRef = elementRef;
	        this._renderer = _renderer;
	        /** Whether the tab label is disabled.  */
	        this._disabled = false;
	    }
	    Object.defineProperty(MdTabLabelWrapper.prototype, "disabled", {
	        /** Whether the element is disabled. */
	        get: function () { return this._disabled; },
	        set: function (value) { this._disabled = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    /** Sets focus on the wrapper element */
	    MdTabLabelWrapper.prototype.focus = function () {
	        this._renderer.invokeElementMethod(this.elementRef.nativeElement, 'focus');
	    };
	    MdTabLabelWrapper.prototype.getOffsetLeft = function () {
	        return this.elementRef.nativeElement.offsetLeft;
	    };
	    MdTabLabelWrapper.prototype.getOffsetWidth = function () {
	        return this.elementRef.nativeElement.offsetWidth;
	    };
	    __decorate$53([
	        _angular_core.Input(), 
	        __metadata$53('design:type', Object)
	    ], MdTabLabelWrapper.prototype, "disabled", null);
	    MdTabLabelWrapper = __decorate$53([
	        _angular_core.Directive({
	            selector: '[md-tab-label-wrapper], [mat-tab-label-wrapper]',
	            host: {
	                '[class.md-tab-disabled]': 'disabled'
	            }
	        }), 
	        __metadata$53('design:paramtypes', [_angular_core.ElementRef, _angular_core.Renderer])
	    ], MdTabLabelWrapper);
	    return MdTabLabelWrapper;
	}());
	
	var __decorate$55 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$55 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/** The ink-bar is used to display and animate the line underneath the current active tab label. */
	var MdInkBar = (function () {
	    function MdInkBar(_renderer, _elementRef) {
	        this._renderer = _renderer;
	        this._elementRef = _elementRef;
	    }
	    /**
	     * Calculates the styles from the provided element in order to align the ink-bar to that element.
	     * Shows the ink bar if previously set as hidden.
	     * @param element
	     */
	    MdInkBar.prototype.alignToElement = function (element) {
	        this.show();
	        this._renderer.setElementStyle(this._elementRef.nativeElement, 'left', this._getLeftPosition(element));
	        this._renderer.setElementStyle(this._elementRef.nativeElement, 'width', this._getElementWidth(element));
	    };
	    /** Shows the ink bar. */
	    MdInkBar.prototype.show = function () {
	        this._renderer.setElementStyle(this._elementRef.nativeElement, 'visibility', 'visible');
	    };
	    /** Hides the ink bar. */
	    MdInkBar.prototype.hide = function () {
	        this._renderer.setElementStyle(this._elementRef.nativeElement, 'visibility', 'hidden');
	    };
	    /**
	     * Generates the pixel distance from the left based on the provided element in string format.
	     * @param element
	     */
	    MdInkBar.prototype._getLeftPosition = function (element) {
	        return element ? element.offsetLeft + 'px' : '0';
	    };
	    /**
	     * Generates the pixel width from the provided element in string format.
	     * @param element
	     */
	    MdInkBar.prototype._getElementWidth = function (element) {
	        return element ? element.offsetWidth + 'px' : '0';
	    };
	    MdInkBar = __decorate$55([
	        _angular_core.Directive({
	            selector: 'md-ink-bar, mat-ink-bar',
	        }), 
	        __metadata$55('design:paramtypes', [_angular_core.Renderer, _angular_core.ElementRef])
	    ], MdInkBar);
	    return MdInkBar;
	}());
	
	var __extends$18 = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate$54 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$54 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/**
	 * Navigation component matching the styles of the tab group header.
	 * Provides anchored navigation with animated ink bar.
	 */
	var MdTabNavBar = (function () {
	    function MdTabNavBar() {
	    }
	    /** Animates the ink bar to the position of the active link element. */
	    MdTabNavBar.prototype.updateActiveLink = function (element) {
	        this._inkBar.alignToElement(element);
	    };
	    __decorate$54([
	        _angular_core.ViewChild(MdInkBar), 
	        __metadata$54('design:type', MdInkBar)
	    ], MdTabNavBar.prototype, "_inkBar", void 0);
	    MdTabNavBar = __decorate$54([
	        _angular_core.Component({selector: '[md-tab-nav-bar], [mat-tab-nav-bar]',
	            template: "<ng-content></ng-content><md-ink-bar></md-ink-bar>",
	            styles: ["[md-tab-link],[md-tab-nav-bar]{position:relative;overflow:hidden}[md-tab-nav-bar]{display:flex;flex-direction:row;flex-shrink:0}[md-tab-link]{line-height:48px;height:48px;padding:0 12px;font-size:14px;font-family:Roboto,\"Helvetica Neue\",sans-serif;font-weight:500;cursor:pointer;box-sizing:border-box;color:currentColor;opacity:.6;min-width:160px;text-align:center;text-decoration:none}[md-tab-link]:focus{outline:0;opacity:1}@media (max-width:600px){[md-tab-link]{min-width:72px}}md-ink-bar{position:absolute;bottom:0;height:2px;transition:.5s cubic-bezier(.35,0,.25,1)}"],
	            encapsulation: _angular_core.ViewEncapsulation.None,
	        }), 
	        __metadata$54('design:paramtypes', [])
	    ], MdTabNavBar);
	    return MdTabNavBar;
	}());
	/**
	 * Link inside of a `md-tab-nav-bar`.
	 */
	var MdTabLink = (function () {
	    function MdTabLink(_mdTabNavBar, _element) {
	        this._mdTabNavBar = _mdTabNavBar;
	        this._element = _element;
	        this._isActive = false;
	    }
	    Object.defineProperty(MdTabLink.prototype, "active", {
	        /** Whether the link is active. */
	        get: function () { return this._isActive; },
	        set: function (value) {
	            this._isActive = value;
	            if (value) {
	                this._mdTabNavBar.updateActiveLink(this._element.nativeElement);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    __decorate$54([
	        _angular_core.Input(), 
	        __metadata$54('design:type', Boolean)
	    ], MdTabLink.prototype, "active", null);
	    MdTabLink = __decorate$54([
	        _angular_core.Directive({
	            selector: '[md-tab-link], [mat-tab-link]',
	        }), 
	        __metadata$54('design:paramtypes', [MdTabNavBar, _angular_core.ElementRef])
	    ], MdTabLink);
	    return MdTabLink;
	}());
	/**
	 * Simple directive that extends the ripple and matches the selector of the MdTabLink. This
	 * adds the ripple behavior to nav bar labels.
	 */
	var MdTabLinkRipple = (function (_super) {
	    __extends$18(MdTabLinkRipple, _super);
	    function MdTabLinkRipple(_element, _ngZone, _ruler) {
	        _super.call(this, _element, _ngZone, _ruler);
	        this._element = _element;
	        this._ngZone = _ngZone;
	    }
	    /**
	     * In certain cases the parent destroy handler may not get called. See Angular issue #11606.
	     */
	    MdTabLinkRipple.prototype.ngOnDestroy = function () {
	        _super.prototype.ngOnDestroy.call(this);
	    };
	    MdTabLinkRipple = __decorate$54([
	        _angular_core.Directive({
	            selector: '[md-tab-link], [mat-tab-link]',
	        }), 
	        __metadata$54('design:paramtypes', [_angular_core.ElementRef, _angular_core.NgZone, ViewportRuler])
	    ], MdTabLinkRipple);
	    return MdTabLinkRipple;
	}(MdRipple));
	
	var __decorate$56 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$56 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var MdTab = (function () {
	    function MdTab(_viewContainerRef) {
	        this._viewContainerRef = _viewContainerRef;
	        /** The plain text label for the tab, used when there is no template label. */
	        this.textLabel = '';
	        /** The portal that will be the hosted content of the tab */
	        this._contentPortal = null;
	        /**
	         * The relatively indexed position where 0 represents the center, negative is left, and positive
	         * represents the right.
	         */
	        this.position = null;
	        /**
	         * The initial relatively index origin of the tab if it was created and selected after there
	         * was already a selected tab. Provides context of what position the tab should originate from.
	         */
	        this.origin = null;
	        this._disabled = false;
	    }
	    Object.defineProperty(MdTab.prototype, "content", {
	        get: function () { return this._contentPortal; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdTab.prototype, "disabled", {
	        get: function () { return this._disabled; },
	        /** Whether the tab is disabled */
	        set: function (value) { this._disabled = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    MdTab.prototype.ngOnInit = function () {
	        this._contentPortal = new TemplatePortal(this._content, this._viewContainerRef);
	    };
	    __decorate$56([
	        _angular_core.ContentChild(MdTabLabel), 
	        __metadata$56('design:type', MdTabLabel)
	    ], MdTab.prototype, "templateLabel", void 0);
	    __decorate$56([
	        _angular_core.ViewChild(_angular_core.TemplateRef), 
	        __metadata$56('design:type', _angular_core.TemplateRef)
	    ], MdTab.prototype, "_content", void 0);
	    __decorate$56([
	        _angular_core.Input('label'), 
	        __metadata$56('design:type', String)
	    ], MdTab.prototype, "textLabel", void 0);
	    __decorate$56([
	        _angular_core.Input(), 
	        __metadata$56('design:type', Boolean), 
	        __metadata$56('design:paramtypes', [Boolean])
	    ], MdTab.prototype, "disabled", null);
	    MdTab = __decorate$56([
	        _angular_core.Component({selector: 'md-tab',
	            template: "<template><ng-content></ng-content></template>",
	        }), 
	        __metadata$56('design:paramtypes', [_angular_core.ViewContainerRef])
	    ], MdTab);
	    return MdTab;
	}());
	
	var __decorate$57 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$57 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param$11 = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	/**
	 * Wrapper for the contents of a tab.
	 */
	var MdTabBody = (function () {
	    function MdTabBody(_elementRef, _dir) {
	        this._elementRef = _elementRef;
	        this._dir = _dir;
	        /** Event emitted when the tab begins to animate towards the center as the active tab. */
	        this.onCentering = new _angular_core.EventEmitter();
	        /** Event emitted when the tab completes its animation towards the center. */
	        this.onCentered = new _angular_core.EventEmitter(true);
	    }
	    Object.defineProperty(MdTabBody.prototype, "position", {
	        set: function (position) {
	            if (position < 0) {
	                this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';
	            }
	            else if (position > 0) {
	                this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';
	            }
	            else {
	                this._position = 'center';
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdTabBody.prototype, "origin", {
	        /** The origin position from which this tab should appear when it is centered into view. */
	        set: function (origin) {
	            if (origin == null) {
	                return;
	            }
	            var dir = this._getLayoutDirection();
	            if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {
	                this._origin = 'left';
	            }
	            else {
	                this._origin = 'right';
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * After initialized, check if the content is centered and has an origin. If so, set the
	     * special position states that transition the tab from the left or right before centering.
	     */
	    MdTabBody.prototype.ngOnInit = function () {
	        if (this._position == 'center' && this._origin) {
	            this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';
	        }
	    };
	    /**
	     * After the view has been set, check if the tab content is set to the center and attach the
	     * content if it is not already attached.
	     */
	    MdTabBody.prototype.ngAfterViewChecked = function () {
	        if (this._isCenterPosition(this._position) && !this._portalHost.hasAttached()) {
	            this._portalHost.attach(this._content);
	        }
	    };
	    MdTabBody.prototype._onTranslateTabStarted = function (e) {
	        if (this._isCenterPosition(e.toState)) {
	            this.onCentering.emit(this._elementRef.nativeElement.clientHeight);
	        }
	    };
	    MdTabBody.prototype._onTranslateTabComplete = function (e) {
	        // If the end state is that the tab is not centered, then detach the content.
	        if (!this._isCenterPosition(e.toState) && !this._isCenterPosition(this._position)) {
	            this._portalHost.detach();
	        }
	        // If the transition to the center is complete, emit an event.
	        if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {
	            this.onCentered.emit();
	        }
	    };
	    /** The text direction of the containing app. */
	    MdTabBody.prototype._getLayoutDirection = function () {
	        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';
	    };
	    /** Whether the provided position state is considered center, regardless of origin. */
	    MdTabBody.prototype._isCenterPosition = function (position) {
	        return position == 'center' ||
	            position == 'left-origin-center' ||
	            position == 'right-origin-center';
	    };
	    __decorate$57([
	        _angular_core.ViewChild(PortalHostDirective), 
	        __metadata$57('design:type', PortalHostDirective)
	    ], MdTabBody.prototype, "_portalHost", void 0);
	    __decorate$57([
	        _angular_core.Output(), 
	        __metadata$57('design:type', _angular_core.EventEmitter)
	    ], MdTabBody.prototype, "onCentering", void 0);
	    __decorate$57([
	        _angular_core.Output(), 
	        __metadata$57('design:type', _angular_core.EventEmitter)
	    ], MdTabBody.prototype, "onCentered", void 0);
	    __decorate$57([
	        _angular_core.Input('content'), 
	        __metadata$57('design:type', TemplatePortal)
	    ], MdTabBody.prototype, "_content", void 0);
	    __decorate$57([
	        _angular_core.Input('position'), 
	        __metadata$57('design:type', Number), 
	        __metadata$57('design:paramtypes', [Number])
	    ], MdTabBody.prototype, "position", null);
	    __decorate$57([
	        _angular_core.Input('origin'), 
	        __metadata$57('design:type', Number), 
	        __metadata$57('design:paramtypes', [Number])
	    ], MdTabBody.prototype, "origin", null);
	    MdTabBody = __decorate$57([
	        _angular_core.Component({selector: 'md-tab-body',
	            template: "<div class=\"md-tab-body-content\" #content [@translateTab]=\"_position\" (@translateTab.start)=\"_onTranslateTabStarted($event)\" (@translateTab.done)=\"_onTranslateTabComplete($event)\"><template cdkPortalHost></template></div>",
	            animations: [
	                _angular_core.trigger('translateTab', [
	                    _angular_core.state('left', _angular_core.style({ transform: 'translate3d(-100%, 0, 0)' })),
	                    _angular_core.state('left-origin-center', _angular_core.style({ transform: 'translate3d(0, 0, 0)' })),
	                    _angular_core.state('right-origin-center', _angular_core.style({ transform: 'translate3d(0, 0, 0)' })),
	                    _angular_core.state('center', _angular_core.style({ transform: 'translate3d(0, 0, 0)' })),
	                    _angular_core.state('right', _angular_core.style({ transform: 'translate3d(100%, 0, 0)' })),
	                    _angular_core.transition('* => left, * => right, left => center, right => center', _angular_core.animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),
	                    _angular_core.transition('void => left-origin-center', [
	                        _angular_core.style({ transform: 'translate3d(-100%, 0, 0)' }),
	                        _angular_core.animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')
	                    ]),
	                    _angular_core.transition('void => right-origin-center', [
	                        _angular_core.style({ transform: 'translate3d(100%, 0, 0)' }),
	                        _angular_core.animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')
	                    ])
	                ])
	            ]
	        }),
	        __param$11(1, _angular_core.Optional()), 
	        __metadata$57('design:paramtypes', [_angular_core.ElementRef, Dir])
	    ], MdTabBody);
	    return MdTabBody;
	}());
	
	var __decorate$58 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$58 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param$12 = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	/**
	 * The distance in pixels that will be overshot when scrolling a tab label into view. This helps
	 * provide a small affordance to the label next to it.
	 */
	var EXAGGERATED_OVERSCROLL = 60;
	/**
	 * The header of the tab group which displays a list of all the tabs in the tab group. Includes
	 * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the
	 * width of the header container, then arrows will be displayed to allow the user to scroll
	 * left and right across the header.
	 */
	var MdTabHeader = (function () {
	    function MdTabHeader(_zone, _elementRef, _dir) {
	        this._zone = _zone;
	        this._elementRef = _elementRef;
	        this._dir = _dir;
	        /** The tab index that is focused. */
	        this._focusIndex = 0;
	        /** The distance in pixels that the tab labels should be translated to the left. */
	        this._scrollDistance = 0;
	        /** Whether the header should scroll to the selected index after the view has been checked. */
	        this._selectedIndexChanged = false;
	        /** Whether the controls for pagination should be displayed */
	        this._showPaginationControls = false;
	        /** Whether the tab list can be scrolled more towards the end of the tab label list. */
	        this._disableScrollAfter = true;
	        /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */
	        this._disableScrollBefore = true;
	        this._selectedIndex = 0;
	        /** Event emitted when the option is selected. */
	        this.selectFocusedIndex = new _angular_core.EventEmitter();
	        /** Event emitted when a label is focused. */
	        this.indexFocused = new _angular_core.EventEmitter();
	    }
	    Object.defineProperty(MdTabHeader.prototype, "selectedIndex", {
	        get: function () { return this._selectedIndex; },
	        /** The index of the active tab. */
	        set: function (value) {
	            this._selectedIndexChanged = this._selectedIndex != value;
	            this._selectedIndex = value;
	            this._focusIndex = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MdTabHeader.prototype.ngAfterContentChecked = function () {
	        // If the number of tab labels have changed, check if scrolling should be enabled
	        if (this._tabLabelCount != this._labelWrappers.length) {
	            this._updatePagination();
	            this._tabLabelCount = this._labelWrappers.length;
	        }
	        // If the selected index has changed, scroll to the label and check if the scrolling controls
	        // should be disabled.
	        if (this._selectedIndexChanged) {
	            this._scrollToLabel(this._selectedIndex);
	            this._checkScrollingControls();
	            this._selectedIndexChanged = false;
	        }
	        // If the scroll distance has been changed (tab selected, focused, scroll controls activated),
	        // then translate the header to reflect this.
	        if (this._scrollDistanceChanged) {
	            this._updateTabScrollPosition();
	            this._scrollDistanceChanged = false;
	        }
	    };
	    /**
	     * Waits one frame for the view to update, then updates the ink bar and scroll.
	     * Note: This must be run outside of the zone or it will create an infinite change detection loop.
	     */
	    MdTabHeader.prototype.ngAfterViewChecked = function () {
	        var _this = this;
	        this._zone.runOutsideAngular(function () {
	            window.requestAnimationFrame(function () {
	                _this._alignInkBarToSelectedTab();
	            });
	        });
	    };
	    MdTabHeader.prototype._handleKeydown = function (event) {
	        switch (event.keyCode) {
	            case RIGHT_ARROW:
	                this._focusNextTab();
	                break;
	            case LEFT_ARROW:
	                this._focusPreviousTab();
	                break;
	            case ENTER:
	                this.selectFocusedIndex.emit(this.focusIndex);
	                break;
	        }
	    };
	    /**
	     * Updating the view whether pagination should be enabled or not
	     */
	    MdTabHeader.prototype._updatePagination = function () {
	        this._checkPaginationEnabled();
	        this._checkScrollingControls();
	        this._updateTabScrollPosition();
	    };
	    Object.defineProperty(MdTabHeader.prototype, "focusIndex", {
	        /** Tracks which element has focus; used for keyboard navigation */
	        get: function () { return this._focusIndex; },
	        /** When the focus index is set, we must manually send focus to the correct label */
	        set: function (value) {
	            if (!this._isValidIndex(value) || this._focusIndex == value) {
	                return;
	            }
	            this._focusIndex = value;
	            this.indexFocused.emit(value);
	            this._setTabFocus(value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is
	     * providing a valid index and return true.
	     */
	    MdTabHeader.prototype._isValidIndex = function (index) {
	        if (!this._labelWrappers) {
	            return true;
	        }
	        var tab = this._labelWrappers.toArray()[index];
	        return tab && !tab.disabled;
	    };
	    /**
	     * Sets focus on the HTML element for the label wrapper and scrolls it into the view if
	     * scrolling is enabled.
	     */
	    MdTabHeader.prototype._setTabFocus = function (tabIndex) {
	        if (this._showPaginationControls) {
	            this._scrollToLabel(tabIndex);
	        }
	        if (this._labelWrappers && this._labelWrappers.length) {
	            this._labelWrappers.toArray()[tabIndex].focus();
	            // Do not let the browser manage scrolling to focus the element, this will be handled
	            // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width
	            // should be the full width minus the offset width.
	            var containerEl = this._tabListContainer.nativeElement;
	            var dir = this._getLayoutDirection();
	            if (dir == 'ltr') {
	                containerEl.scrollLeft = 0;
	            }
	            else {
	                containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;
	            }
	        }
	    };
	    /**
	     * Moves the focus towards the beginning or the end of the list depending on the offset provided.
	     * Valid offsets are 1 and -1.
	     */
	    MdTabHeader.prototype._moveFocus = function (offset) {
	        if (this._labelWrappers) {
	            var tabs = this._labelWrappers.toArray();
	            for (var i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {
	                if (this._isValidIndex(i)) {
	                    this.focusIndex = i;
	                    return;
	                }
	            }
	        }
	    };
	    /** Increment the focus index by 1 until a valid tab is found. */
	    MdTabHeader.prototype._focusNextTab = function () {
	        this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);
	    };
	    /** Decrement the focus index by 1 until a valid tab is found. */
	    MdTabHeader.prototype._focusPreviousTab = function () {
	        this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);
	    };
	    /** The layout direction of the containing app. */
	    MdTabHeader.prototype._getLayoutDirection = function () {
	        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';
	    };
	    /** Performs the CSS transformation on the tab list that will cause the list to scroll. */
	    MdTabHeader.prototype._updateTabScrollPosition = function () {
	        var translateX = this.scrollDistance + 'px';
	        if (this._getLayoutDirection() == 'ltr') {
	            translateX = '-' + translateX;
	        }
	        applyCssTransform(this._tabList.nativeElement, "translate3d(" + translateX + ", 0, 0)");
	    };
	    Object.defineProperty(MdTabHeader.prototype, "scrollDistance", {
	        get: function () { return this._scrollDistance; },
	        /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */
	        set: function (v) {
	            this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));
	            // Mark that the scroll distance has changed so that after the view is checked, the CSS
	            // transformation can move the header.
	            this._scrollDistanceChanged = true;
	            this._checkScrollingControls();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or
	     * the end of the list, respectively). The distance to scroll is computed to be a third of the
	     * length of the tab list view window.
	     *
	     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
	     * should be called sparingly.
	     */
	    MdTabHeader.prototype._scrollHeader = function (scrollDir) {
	        var viewLength = this._tabListContainer.nativeElement.offsetWidth;
	        // Move the scroll distance one-third the length of the tab list's viewport.
	        this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;
	    };
	    /**
	     * Moves the tab list such that the desired tab label (marked by index) is moved into view.
	     *
	     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
	     * should be called sparingly.
	     */
	    MdTabHeader.prototype._scrollToLabel = function (labelIndex) {
	        var selectedLabel = this._labelWrappers.toArray()[labelIndex];
	        if (!selectedLabel) {
	            return;
	        }
	        // The view length is the visible width of the tab labels.
	        var viewLength = this._tabListContainer.nativeElement.offsetWidth;
	        var labelBeforePos, labelAfterPos;
	        if (this._getLayoutDirection() == 'ltr') {
	            labelBeforePos = selectedLabel.getOffsetLeft();
	            labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();
	        }
	        else {
	            labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();
	            labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();
	        }
	        var beforeVisiblePos = this.scrollDistance;
	        var afterVisiblePos = this.scrollDistance + viewLength;
	        if (labelBeforePos < beforeVisiblePos) {
	            // Scroll header to move label to the before direction
	            this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;
	        }
	        else if (labelAfterPos > afterVisiblePos) {
	            // Scroll header to move label to the after direction
	            this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;
	        }
	    };
	    /**
	     * Evaluate whether the pagination controls should be displayed. If the scroll width of the
	     * tab list is wider than the size of the header container, then the pagination controls should
	     * be shown.
	     *
	     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
	     * should be called sparingly.
	     */
	    MdTabHeader.prototype._checkPaginationEnabled = function () {
	        this._showPaginationControls =
	            this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;
	        if (!this._showPaginationControls) {
	            this.scrollDistance = 0;
	        }
	    };
	    /**
	     * Evaluate whether the before and after controls should be enabled or disabled.
	     * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the
	     * before button. If the header is at the end of the list (scroll distance is equal to the
	     * maximum distance we can scroll), then disable the after button.
	     *
	     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
	     * should be called sparingly.
	     */
	    MdTabHeader.prototype._checkScrollingControls = function () {
	        // Check if the pagination arrows should be activated.
	        this._disableScrollBefore = this.scrollDistance == 0;
	        this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();
	    };
	    /**
	     * Determines what is the maximum length in pixels that can be set for the scroll distance. This
	     * is equal to the difference in width between the tab list container and tab header container.
	     *
	     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
	     * should be called sparingly.
	     */
	    MdTabHeader.prototype._getMaxScrollDistance = function () {
	        var lengthOfTabList = this._tabList.nativeElement.scrollWidth;
	        var viewLength = this._tabListContainer.nativeElement.offsetWidth;
	        return lengthOfTabList - viewLength;
	    };
	    /** Tells the ink-bar to align itself to the current label wrapper */
	    MdTabHeader.prototype._alignInkBarToSelectedTab = function () {
	        var selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length
	            ? this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement
	            : null;
	        this._inkBar.alignToElement(selectedLabelWrapper);
	    };
	    __decorate$58([
	        _angular_core.ContentChildren(MdTabLabelWrapper), 
	        __metadata$58('design:type', _angular_core.QueryList)
	    ], MdTabHeader.prototype, "_labelWrappers", void 0);
	    __decorate$58([
	        _angular_core.ViewChild(MdInkBar), 
	        __metadata$58('design:type', MdInkBar)
	    ], MdTabHeader.prototype, "_inkBar", void 0);
	    __decorate$58([
	        _angular_core.ViewChild('tabListContainer'), 
	        __metadata$58('design:type', _angular_core.ElementRef)
	    ], MdTabHeader.prototype, "_tabListContainer", void 0);
	    __decorate$58([
	        _angular_core.ViewChild('tabList'), 
	        __metadata$58('design:type', _angular_core.ElementRef)
	    ], MdTabHeader.prototype, "_tabList", void 0);
	    __decorate$58([
	        _angular_core.Input(), 
	        __metadata$58('design:type', Number), 
	        __metadata$58('design:paramtypes', [Number])
	    ], MdTabHeader.prototype, "selectedIndex", null);
	    __decorate$58([
	        _angular_core.Output(), 
	        __metadata$58('design:type', Object)
	    ], MdTabHeader.prototype, "selectFocusedIndex", void 0);
	    __decorate$58([
	        _angular_core.Output(), 
	        __metadata$58('design:type', Object)
	    ], MdTabHeader.prototype, "indexFocused", void 0);
	    MdTabHeader = __decorate$58([
	        _angular_core.Component({selector: 'md-tab-header',
	            template: "<div class=\"md-tab-header-pagination md-tab-header-pagination-before md-elevation-z4\" aria-hidden=\"true\" md-ripple [mdRippleDisabled]=\"_disableScrollBefore\" [class.md-tab-header-pagination-disabled]=\"_disableScrollBefore\" (click)=\"_scrollHeader('before')\"><div class=\"md-tab-header-pagination-chevron\"></div></div><div class=\"md-tab-label-container\" #tabListContainer (keydown)=\"_handleKeydown($event)\"><div class=\"md-tab-list\" #tabList role=\"tablist\" (cdkObserveContent)=\"_updatePagination()\"><ng-content></ng-content><md-ink-bar></md-ink-bar></div></div><div class=\"md-tab-header-pagination md-tab-header-pagination-after md-elevation-z4\" aria-hidden=\"true\" md-ripple [mdRippleDisabled]=\"_disableScrollAfter\" [class.md-tab-header-pagination-disabled]=\"_disableScrollAfter\" (click)=\"_scrollHeader('after')\"><div class=\"md-tab-header-pagination-chevron\"></div></div>",
	            styles: [".md-tab-header{overflow:hidden;position:relative;display:flex;flex-direction:row;flex-shrink:0}.md-tab-label{line-height:48px;height:48px;padding:0 12px;font-size:14px;font-family:Roboto,\"Helvetica Neue\",sans-serif;font-weight:500;cursor:pointer;box-sizing:border-box;color:currentColor;opacity:.6;min-width:160px;text-align:center;position:relative}.md-tab-label:focus{outline:0;opacity:1}@media (max-width:600px){.md-tab-label{min-width:72px}}md-ink-bar{position:absolute;bottom:0;height:2px;transition:.5s cubic-bezier(.35,0,.25,1)}.md-tab-header-pagination{position:relative;display:none;justify-content:center;align-items:center;min-width:32px;cursor:pointer;z-index:2}.md-tab-header-pagination-controls-enabled .md-tab-header-pagination,.md-tab-list{display:flex}.md-tab-header-pagination-before,.md-tab-header-rtl .md-tab-header-pagination-after{padding-left:4px}.md-tab-header-pagination-before .md-tab-header-pagination-chevron,.md-tab-header-rtl .md-tab-header-pagination-after .md-tab-header-pagination-chevron{transform:rotate(-135deg)}.md-tab-header-pagination-after,.md-tab-header-rtl .md-tab-header-pagination-before{padding-right:4px}.md-tab-header-pagination-after .md-tab-header-pagination-chevron,.md-tab-header-rtl .md-tab-header-pagination-before .md-tab-header-pagination-chevron{transform:rotate(45deg)}.md-tab-header-pagination-chevron{border-style:solid;border-width:2px 2px 0 0;content:'';height:8px;width:8px}.md-tab-header-pagination-disabled{box-shadow:none;cursor:default}.md-tab-header-pagination-disabled .md-tab-header-pagination-chevron{border-color:#ccc}.md-tab-label-container{display:flex;flex-grow:1;overflow:hidden;z-index:1}.md-tab-list{flex-grow:1;position:relative;transition:transform .5s cubic-bezier(.35,0,.25,1)}"],
	            encapsulation: _angular_core.ViewEncapsulation.None,
	            host: {
	                'class': 'md-tab-header',
	                '[class.md-tab-header-pagination-controls-enabled]': '_showPaginationControls',
	                '[class.md-tab-header-rtl]': "_getLayoutDirection() == 'rtl'",
	            }
	        }),
	        __param$12(2, _angular_core.Optional()), 
	        __metadata$58('design:paramtypes', [_angular_core.NgZone, _angular_core.ElementRef, Dir])
	    ], MdTabHeader);
	    return MdTabHeader;
	}());
	
	var __decorate$51 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$51 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/** Used to generate unique ID's for each tab component */
	var nextId$2 = 0;
	/** A simple change event emitted on focus or selection changes. */
	var MdTabChangeEvent = (function () {
	    function MdTabChangeEvent() {
	    }
	    return MdTabChangeEvent;
	}());
	/**
	 * Material design tab-group component.  Supports basic tab pairs (label + content) and includes
	 * animated ink-bar, keyboard navigation, and screen reader.
	 * See: https://www.google.com/design/spec/components/tabs.html
	 */
	var MdTabGroup = (function () {
	    function MdTabGroup(_renderer) {
	        this._renderer = _renderer;
	        /** Whether this component has been initialized. */
	        this._isInitialized = false;
	        /** The tab index that should be selected after the content has been checked. */
	        this._indexToSelect = 0;
	        /** Snapshot of the height of the tab body wrapper before another tab is activated. */
	        this._tabBodyWrapperHeight = null;
	        /** Whether the tab group should grow to the size of the active tab */
	        this._dynamicHeight = false;
	        this._selectedIndex = null;
	        this._onFocusChange = new _angular_core.EventEmitter();
	        this._onSelectChange = new _angular_core.EventEmitter(true);
	        this._groupId = nextId$2++;
	    }
	    Object.defineProperty(MdTabGroup.prototype, "dynamicHeight", {
	        get: function () { return this._dynamicHeight; },
	        set: function (value) { this._dynamicHeight = coerceBooleanProperty(value); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdTabGroup.prototype, "_dynamicHeightDeprecated", {
	        /** @deprecated */
	        get: function () { return this._dynamicHeight; },
	        set: function (value) { this._dynamicHeight = value; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdTabGroup.prototype, "selectedIndex", {
	        get: function () { return this._selectedIndex; },
	        /** The index of the active tab. */
	        set: function (value) { this._indexToSelect = value; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdTabGroup.prototype, "selectedIndexChange", {
	        /** Output to enable support for two-way binding on `selectedIndex`. */
	        get: function () {
	            return this.selectChange.map(function (event) { return event.index; });
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdTabGroup.prototype, "focusChange", {
	        /** Event emitted when focus has changed within a tab group. */
	        get: function () {
	            return this._onFocusChange.asObservable();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdTabGroup.prototype, "selectChange", {
	        /** Event emitted when the tab selection has changed. */
	        get: function () {
	            return this._onSelectChange.asObservable();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * After the content is checked, this component knows what tabs have been defined
	     * and what the selected index should be. This is where we can know exactly what position
	     * each tab should be in according to the new selected index, and additionally we know how
	     * a new selected tab should transition in (from the left or right).
	     */
	    MdTabGroup.prototype.ngAfterContentChecked = function () {
	        var _this = this;
	        // Clamp the next selected index to the bounds of 0 and the tabs length.
	        this._indexToSelect =
	            Math.min(this._tabs.length - 1, Math.max(this._indexToSelect, 0));
	        // If there is a change in selected index, emit a change event. Should not trigger if
	        // the selected index has not yet been initialized.
	        if (this._selectedIndex != this._indexToSelect && this._selectedIndex != null) {
	            this._onSelectChange.emit(this._createChangeEvent(this._indexToSelect));
	        }
	        // Setup the position for each tab and optionally setup an origin on the next selected tab.
	        this._tabs.forEach(function (tab, index) {
	            tab.position = index - _this._indexToSelect;
	            // If there is already a selected tab, then set up an origin for the next selected tab
	            // if it doesn't have one already.
	            if (_this._selectedIndex != null && tab.position == 0 && !tab.origin) {
	                tab.origin = _this._indexToSelect - _this._selectedIndex;
	            }
	        });
	        this._selectedIndex = this._indexToSelect;
	    };
	    /**
	     * Waits one frame for the view to update, then updates the ink bar
	     * Note: This must be run outside of the zone or it will create an infinite change detection loop.
	     */
	    MdTabGroup.prototype.ngAfterViewChecked = function () {
	        this._isInitialized = true;
	    };
	    MdTabGroup.prototype._focusChanged = function (index) {
	        this._onFocusChange.emit(this._createChangeEvent(index));
	    };
	    MdTabGroup.prototype._createChangeEvent = function (index) {
	        var event = new MdTabChangeEvent;
	        event.index = index;
	        if (this._tabs && this._tabs.length) {
	            event.tab = this._tabs.toArray()[index];
	        }
	        return event;
	    };
	    /** Returns a unique id for each tab label element */
	    MdTabGroup.prototype._getTabLabelId = function (i) {
	        return "md-tab-label-" + this._groupId + "-" + i;
	    };
	    /** Returns a unique id for each tab content element */
	    MdTabGroup.prototype._getTabContentId = function (i) {
	        return "md-tab-content-" + this._groupId + "-" + i;
	    };
	    /**
	     * Sets the height of the body wrapper to the height of the activating tab if dynamic
	     * height property is true.
	     */
	    MdTabGroup.prototype._setTabBodyWrapperHeight = function (tabHeight) {
	        if (!this._dynamicHeight || !this._tabBodyWrapperHeight) {
	            return;
	        }
	        this._renderer.setElementStyle(this._tabBodyWrapper.nativeElement, 'height', this._tabBodyWrapperHeight + 'px');
	        // This conditional forces the browser to paint the height so that
	        // the animation to the new height can have an origin.
	        if (this._tabBodyWrapper.nativeElement.offsetHeight) {
	            this._renderer.setElementStyle(this._tabBodyWrapper.nativeElement, 'height', tabHeight + 'px');
	        }
	    };
	    /** Removes the height of the tab body wrapper. */
	    MdTabGroup.prototype._removeTabBodyWrapperHeight = function () {
	        this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;
	        this._renderer.setElementStyle(this._tabBodyWrapper.nativeElement, 'height', '');
	    };
	    __decorate$51([
	        _angular_core.ContentChildren(MdTab), 
	        __metadata$51('design:type', _angular_core.QueryList)
	    ], MdTabGroup.prototype, "_tabs", void 0);
	    __decorate$51([
	        _angular_core.ViewChild('tabBodyWrapper'), 
	        __metadata$51('design:type', _angular_core.ElementRef)
	    ], MdTabGroup.prototype, "_tabBodyWrapper", void 0);
	    __decorate$51([
	        _angular_core.Input(), 
	        __metadata$51('design:type', Boolean)
	    ], MdTabGroup.prototype, "dynamicHeight", null);
	    __decorate$51([
	        _angular_core.Input('md-dynamic-height'), 
	        __metadata$51('design:type', Boolean)
	    ], MdTabGroup.prototype, "_dynamicHeightDeprecated", null);
	    __decorate$51([
	        _angular_core.Input(), 
	        __metadata$51('design:type', Number), 
	        __metadata$51('design:paramtypes', [Number])
	    ], MdTabGroup.prototype, "selectedIndex", null);
	    __decorate$51([
	        _angular_core.Output(), 
	        __metadata$51('design:type', rxjs_Observable.Observable)
	    ], MdTabGroup.prototype, "selectedIndexChange", null);
	    __decorate$51([
	        _angular_core.Output(), 
	        __metadata$51('design:type', rxjs_Observable.Observable)
	    ], MdTabGroup.prototype, "focusChange", null);
	    __decorate$51([
	        _angular_core.Output(), 
	        __metadata$51('design:type', rxjs_Observable.Observable)
	    ], MdTabGroup.prototype, "selectChange", null);
	    MdTabGroup = __decorate$51([
	        _angular_core.Component({selector: 'md-tab-group',
	            template: "<md-tab-header [selectedIndex]=\"selectedIndex\" #tabHeader (indexFocused)=\"_focusChanged($event)\" (selectFocusedIndex)=\"selectedIndex = $event\"><div class=\"md-tab-label\" role=\"tab\" md-tab-label-wrapper md-ripple *ngFor=\"let tab of _tabs; let i = index\" [id]=\"_getTabLabelId(i)\" [tabIndex]=\"selectedIndex == i ? 0 : -1\" [attr.aria-controls]=\"_getTabContentId(i)\" [attr.aria-selected]=\"selectedIndex == i\" [class.md-tab-label-active]=\"selectedIndex == i\" [disabled]=\"tab.disabled\" (click)=\"tabHeader.focusIndex = selectedIndex = i\"><template [ngIf]=\"tab.templateLabel\"><template [cdkPortalHost]=\"tab.templateLabel\"></template></template><template [ngIf]=\"!tab.templateLabel\">{{tab.textLabel}}</template></div></md-tab-header><div class=\"md-tab-body-wrapper\" #tabBodyWrapper><md-tab-body role=\"tabpanel\" *ngFor=\"let tab of _tabs; let i = index\" [id]=\"_getTabContentId(i)\" [attr.aria-labelledby]=\"_getTabLabelId(i)\" [class.md-tab-body-active]=\"selectedIndex == i\" [content]=\"tab.content\" [position]=\"tab.position\" [origin]=\"tab.origin\" (onCentered)=\"_removeTabBodyWrapperHeight()\" (onCentering)=\"_setTabBodyWrapperHeight($event)\"></md-tab-body></div>",
	            styles: [":host{display:flex;flex-direction:column;font-family:Roboto,\"Helvetica Neue\",sans-serif}.md-tab-label{line-height:48px;height:48px;padding:0 12px;font-size:14px;font-family:Roboto,\"Helvetica Neue\",sans-serif;font-weight:500;cursor:pointer;box-sizing:border-box;color:currentColor;opacity:.6;min-width:160px;text-align:center;position:relative}.md-tab-label:focus{outline:0;opacity:1}@media (max-width:600px){.md-tab-label{min-width:72px}}:host[md-stretch-tabs] .md-tab-label{flex-basis:0;flex-grow:1}.md-tab-body-wrapper{position:relative;overflow:hidden;display:flex;transition:height .5s cubic-bezier(.35,0,.25,1)}md-tab-body{position:absolute;top:0;left:0;right:0;bottom:0;display:block;overflow:hidden}md-tab-body.md-tab-body-active{position:relative;overflow-x:hidden;overflow-y:auto;z-index:1;flex-grow:1}:host.md-tab-group-dynamic-height md-tab-body.md-tab-body-active{overflow-y:hidden}.md-tab-disabled{cursor:default;pointer-events:none}"],
	            host: { '[class.md-tab-group-dynamic-height]': 'dynamicHeight' }
	        }), 
	        __metadata$51('design:paramtypes', [_angular_core.Renderer])
	    ], MdTabGroup);
	    return MdTabGroup;
	}());
	var MdTabsModule = (function () {
	    function MdTabsModule() {
	    }
	    MdTabsModule.forRoot = function () {
	        return {
	            ngModule: MdTabsModule,
	            providers: [ViewportRuler]
	        };
	    };
	    MdTabsModule = __decorate$51([
	        _angular_core.NgModule({
	            imports: [_angular_common.CommonModule, PortalModule, MdRippleModule, ObserveContentModule],
	            // Don't export all components because some are only to be used internally.
	            exports: [MdTabGroup, MdTabLabel, MdTab, MdTabNavBar, MdTabLink, MdTabLinkRipple],
	            declarations: [MdTabGroup, MdTabLabel, MdTab, MdInkBar, MdTabLabelWrapper,
	                MdTabNavBar, MdTabLink, MdTabBody, MdTabLinkRipple, MdTabHeader],
	        }), 
	        __metadata$51('design:paramtypes', [])
	    ], MdTabsModule);
	    return MdTabsModule;
	}());
	
	var __decorate$59 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$59 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var MdToolbarRow = (function () {
	    function MdToolbarRow() {
	    }
	    MdToolbarRow = __decorate$59([
	        _angular_core.Directive({
	            selector: 'md-toolbar-row, mat-toolbar-row'
	        }), 
	        __metadata$59('design:paramtypes', [])
	    ], MdToolbarRow);
	    return MdToolbarRow;
	}());
	var MdToolbar = (function () {
	    function MdToolbar(elementRef, renderer) {
	        this.elementRef = elementRef;
	        this.renderer = renderer;
	    }
	    Object.defineProperty(MdToolbar.prototype, "color", {
	        /** The color of the toolbar. Can be primary, accent, or warn. */
	        get: function () {
	            return this._color;
	        },
	        set: function (value) {
	            this._updateColor(value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MdToolbar.prototype._updateColor = function (newColor) {
	        this._setElementColor(this._color, false);
	        this._setElementColor(newColor, true);
	        this._color = newColor;
	    };
	    MdToolbar.prototype._setElementColor = function (color, isAdd) {
	        if (color != null && color != '') {
	            this.renderer.setElementClass(this.elementRef.nativeElement, "md-" + color, isAdd);
	        }
	    };
	    __decorate$59([
	        _angular_core.Input(), 
	        __metadata$59('design:type', String)
	    ], MdToolbar.prototype, "color", null);
	    MdToolbar = __decorate$59([
	        _angular_core.Component({selector: 'md-toolbar, mat-toolbar',
	            template: "<div class=\"md-toolbar-layout\"><md-toolbar-row><ng-content></ng-content></md-toolbar-row><ng-content select=\"md-toolbar-row, mat-toolbar-row\"></ng-content></div>",
	            styles: ["md-toolbar,md-toolbar md-toolbar-row{display:flex;box-sizing:border-box;width:100%}md-toolbar{font-size:20px;font-weight:400;font-family:Roboto,\"Helvetica Neue\",sans-serif;padding:0 16px;flex-direction:column;min-height:64px}md-toolbar md-toolbar-row{flex-direction:row;align-items:center}md-toolbar-row{height:64px}@media (max-width:600px) and (orientation:portrait){md-toolbar{min-height:56px}md-toolbar-row{height:56px}}@media (max-width:960px) and (orientation:landscape){md-toolbar{min-height:48px}md-toolbar-row{height:48px}}"],
	            changeDetection: _angular_core.ChangeDetectionStrategy.OnPush,
	            encapsulation: _angular_core.ViewEncapsulation.None
	        }), 
	        __metadata$59('design:paramtypes', [_angular_core.ElementRef, _angular_core.Renderer])
	    ], MdToolbar);
	    return MdToolbar;
	}());
	var MdToolbarModule = (function () {
	    function MdToolbarModule() {
	    }
	    MdToolbarModule.forRoot = function () {
	        return {
	            ngModule: MdToolbarModule,
	            providers: []
	        };
	    };
	    MdToolbarModule = __decorate$59([
	        _angular_core.NgModule({
	            imports: [DefaultStyleCompatibilityModeModule],
	            exports: [MdToolbar, MdToolbarRow, DefaultStyleCompatibilityModeModule],
	            declarations: [MdToolbar, MdToolbarRow],
	        }), 
	        __metadata$59('design:paramtypes', [])
	    ], MdToolbarModule);
	    return MdToolbarModule;
	}());
	
	var __extends$19 = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * Exception thrown when a tooltip has an invalid position.
	 * @docs-private
	 */
	var MdTooltipInvalidPositionError = (function (_super) {
	    __extends$19(MdTooltipInvalidPositionError, _super);
	    function MdTooltipInvalidPositionError(position) {
	        _super.call(this, "Tooltip position \"" + position + "\" is invalid.");
	    }
	    return MdTooltipInvalidPositionError;
	}(MdError));
	
	var __decorate$60 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$60 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param$13 = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	/** Time in ms to delay before changing the tooltip visibility to hidden */
	var TOUCHEND_HIDE_DELAY = 1500;
	/**
	 * Directive that attaches a material design tooltip to the host element. Animates the showing and
	 * hiding of a tooltip provided position (defaults to below the element).
	 *
	 * https://material.google.com/components/tooltips.html
	 */
	var MdTooltip = (function () {
	    function MdTooltip(_overlay, _elementRef, _viewContainerRef, _ngZone, _dir) {
	        this._overlay = _overlay;
	        this._elementRef = _elementRef;
	        this._viewContainerRef = _viewContainerRef;
	        this._ngZone = _ngZone;
	        this._dir = _dir;
	        this._position = 'below';
	        /** The default delay in ms before showing the tooltip after show is called */
	        this.showDelay = 0;
	        /** The default delay in ms before hiding the tooltip after hide is called */
	        this.hideDelay = 0;
	    }
	    Object.defineProperty(MdTooltip.prototype, "position", {
	        /** Allows the user to define the position of the tooltip relative to the parent element */
	        get: function () { return this._position; },
	        set: function (value) {
	            if (value !== this._position) {
	                this._position = value;
	                // TODO(andrewjs): When the overlay's position can be dynamically changed, do not destroy
	                // the tooltip.
	                if (this._tooltipInstance) {
	                    this._disposeTooltip();
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdTooltip.prototype, "_positionDeprecated", {
	        /** @deprecated */
	        get: function () { return this._position; },
	        set: function (value) { this._position = value; },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdTooltip.prototype, "message", {
	        /** The message to be displayed in the tooltip */
	        get: function () { return this._message; },
	        set: function (value) {
	            this._message = value;
	            if (this._tooltipInstance) {
	                this._setTooltipMessage(this._message);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdTooltip.prototype, "_deprecatedMessage", {
	        /** @deprecated */
	        get: function () { return this.message; },
	        set: function (v) { this.message = v; },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Dispose the tooltip when destroyed.
	     */
	    MdTooltip.prototype.ngOnDestroy = function () {
	        if (this._tooltipInstance) {
	            this._disposeTooltip();
	        }
	    };
	    /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */
	    MdTooltip.prototype.show = function (delay) {
	        if (delay === void 0) { delay = this.showDelay; }
	        if (!this._message || !this._message.trim()) {
	            return;
	        }
	        if (!this._tooltipInstance) {
	            this._createTooltip();
	        }
	        this._setTooltipMessage(this._message);
	        this._tooltipInstance.show(this._position, delay);
	    };
	    /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */
	    MdTooltip.prototype.hide = function (delay) {
	        if (delay === void 0) { delay = this.hideDelay; }
	        if (this._tooltipInstance) {
	            this._tooltipInstance.hide(delay);
	        }
	    };
	    /** Shows/hides the tooltip */
	    MdTooltip.prototype.toggle = function () {
	        this._isTooltipVisible() ? this.hide() : this.show();
	    };
	    /** Returns true if the tooltip is currently visible to the user */
	    MdTooltip.prototype._isTooltipVisible = function () {
	        return this._tooltipInstance && this._tooltipInstance.isVisible();
	    };
	    /** Create the tooltip to display */
	    MdTooltip.prototype._createTooltip = function () {
	        var _this = this;
	        this._createOverlay();
	        var portal = new ComponentPortal(TooltipComponent, this._viewContainerRef);
	        this._tooltipInstance = this._overlayRef.attach(portal).instance;
	        // Dispose the overlay when finished the shown tooltip.
	        this._tooltipInstance.afterHidden().subscribe(function () {
	            // Check first if the tooltip has already been removed through this components destroy.
	            if (_this._tooltipInstance) {
	                _this._disposeTooltip();
	            }
	        });
	    };
	    /** Create the overlay config and position strategy */
	    MdTooltip.prototype._createOverlay = function () {
	        var origin = this._getOrigin();
	        var position = this._getOverlayPosition();
	        var strategy = this._overlay.position().connectedTo(this._elementRef, origin, position);
	        var config = new OverlayState();
	        config.positionStrategy = strategy;
	        this._overlayRef = this._overlay.create(config);
	    };
	    /** Disposes the current tooltip and the overlay it is attached to */
	    MdTooltip.prototype._disposeTooltip = function () {
	        this._overlayRef.dispose();
	        this._overlayRef = null;
	        this._tooltipInstance = null;
	    };
	    /** Returns the origin position based on the user's position preference */
	    MdTooltip.prototype._getOrigin = function () {
	        if (this.position == 'above' || this.position == 'below') {
	            return { originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom' };
	        }
	        var isDirectionLtr = !this._dir || this._dir.value == 'ltr';
	        if (this.position == 'left' ||
	            this.position == 'before' && isDirectionLtr ||
	            this.position == 'after' && !isDirectionLtr) {
	            return { originX: 'start', originY: 'center' };
	        }
	        if (this.position == 'right' ||
	            this.position == 'after' && isDirectionLtr ||
	            this.position == 'before' && !isDirectionLtr) {
	            return { originX: 'end', originY: 'center' };
	        }
	        throw new MdTooltipInvalidPositionError(this.position);
	    };
	    /** Returns the overlay position based on the user's preference */
	    MdTooltip.prototype._getOverlayPosition = function () {
	        if (this.position == 'above') {
	            return { overlayX: 'center', overlayY: 'bottom' };
	        }
	        if (this.position == 'below') {
	            return { overlayX: 'center', overlayY: 'top' };
	        }
	        var isLtr = !this._dir || this._dir.value == 'ltr';
	        if (this.position == 'left' ||
	            this.position == 'before' && isLtr ||
	            this.position == 'after' && !isLtr) {
	            return { overlayX: 'end', overlayY: 'center' };
	        }
	        if (this.position == 'right' ||
	            this.position == 'after' && isLtr ||
	            this.position == 'before' && !isLtr) {
	            return { overlayX: 'start', overlayY: 'center' };
	        }
	        throw new MdTooltipInvalidPositionError(this.position);
	    };
	    /** Updates the tooltip message and repositions the overlay according to the new message length */
	    MdTooltip.prototype._setTooltipMessage = function (message) {
	        var _this = this;
	        // Must wait for the message to be painted to the tooltip so that the overlay can properly
	        // calculate the correct positioning based on the size of the text.
	        this._tooltipInstance.message = message;
	        this._ngZone.onMicrotaskEmpty.first().subscribe(function () {
	            if (_this._tooltipInstance) {
	                _this._overlayRef.updatePosition();
	            }
	        });
	    };
	    __decorate$60([
	        _angular_core.Input('mdTooltipPosition'), 
	        __metadata$60('design:type', String)
	    ], MdTooltip.prototype, "position", null);
	    __decorate$60([
	        _angular_core.Input('tooltip-position'), 
	        __metadata$60('design:type', String)
	    ], MdTooltip.prototype, "_positionDeprecated", null);
	    __decorate$60([
	        _angular_core.Input('mdTooltipShowDelay'), 
	        __metadata$60('design:type', Object)
	    ], MdTooltip.prototype, "showDelay", void 0);
	    __decorate$60([
	        _angular_core.Input('mdTooltipHideDelay'), 
	        __metadata$60('design:type', Object)
	    ], MdTooltip.prototype, "hideDelay", void 0);
	    __decorate$60([
	        _angular_core.Input('mdTooltip'), 
	        __metadata$60('design:type', Object)
	    ], MdTooltip.prototype, "message", null);
	    __decorate$60([
	        _angular_core.Input('md-tooltip'), 
	        __metadata$60('design:type', String)
	    ], MdTooltip.prototype, "_deprecatedMessage", null);
	    MdTooltip = __decorate$60([
	        _angular_core.Directive({
	            selector: '[md-tooltip], [mat-tooltip], [mdTooltip]',
	            host: {
	                '(longpress)': 'show()',
	                '(touchend)': 'hide(' + TOUCHEND_HIDE_DELAY + ')',
	                '(mouseenter)': 'show()',
	                '(mouseleave)': 'hide()',
	            },
	            exportAs: 'mdTooltip',
	        }),
	        __param$13(4, _angular_core.Optional()), 
	        __metadata$60('design:paramtypes', [Overlay, _angular_core.ElementRef, _angular_core.ViewContainerRef, _angular_core.NgZone, Dir])
	    ], MdTooltip);
	    return MdTooltip;
	}());
	/**
	 * Internal component that wraps the tooltip's content.
	 * @docs-private
	 */
	var TooltipComponent = (function () {
	    function TooltipComponent(_dir) {
	        this._dir = _dir;
	        /** Property watched by the animation framework to show or hide the tooltip */
	        this._visibility = 'initial';
	        /** Whether interactions on the page should close the tooltip */
	        this._closeOnInteraction = false;
	        /** The transform origin used in the animation for showing and hiding the tooltip */
	        this._transformOrigin = 'bottom';
	        /** Subject for notifying that the tooltip has been hidden from the view */
	        this._onHide = new rxjs_Subject.Subject();
	    }
	    /**
	     * Shows the tooltip with an animation originating from the provided origin
	     * @param position Position of the tooltip.
	     * @param delay Amount of milliseconds to the delay showing the tooltip.
	     */
	    TooltipComponent.prototype.show = function (position, delay) {
	        var _this = this;
	        // Cancel the delayed hide if it is scheduled
	        if (this._hideTimeoutId) {
	            clearTimeout(this._hideTimeoutId);
	        }
	        // Body interactions should cancel the tooltip if there is a delay in showing.
	        this._closeOnInteraction = true;
	        this._setTransformOrigin(position);
	        this._showTimeoutId = setTimeout(function () {
	            _this._visibility = 'visible';
	            // If this was set to true immediately, then a body click that triggers show() would
	            // trigger interaction and close the tooltip right after it was displayed.
	            _this._closeOnInteraction = false;
	            setTimeout(function () { _this._closeOnInteraction = true; }, 0);
	        }, delay);
	    };
	    /**
	     * Begins the animation to hide the tooltip after the provided delay in ms.
	     * @param delay Amount of milliseconds to delay showing the tooltip.
	     */
	    TooltipComponent.prototype.hide = function (delay) {
	        var _this = this;
	        // Cancel the delayed show if it is scheduled
	        if (this._showTimeoutId) {
	            clearTimeout(this._showTimeoutId);
	        }
	        this._hideTimeoutId = setTimeout(function () {
	            _this._visibility = 'hidden';
	            _this._closeOnInteraction = false;
	        }, delay);
	    };
	    /**
	     * Returns an observable that notifies when the tooltip has been hidden from view
	     */
	    TooltipComponent.prototype.afterHidden = function () {
	        return this._onHide.asObservable();
	    };
	    /**
	     * Whether the tooltip is being displayed
	     */
	    TooltipComponent.prototype.isVisible = function () {
	        return this._visibility === 'visible';
	    };
	    /** Sets the tooltip transform origin according to the tooltip position */
	    TooltipComponent.prototype._setTransformOrigin = function (value) {
	        var isLtr = !this._dir || this._dir.value == 'ltr';
	        switch (value) {
	            case 'before':
	                this._transformOrigin = isLtr ? 'right' : 'left';
	                break;
	            case 'after':
	                this._transformOrigin = isLtr ? 'left' : 'right';
	                break;
	            case 'left':
	                this._transformOrigin = 'right';
	                break;
	            case 'right':
	                this._transformOrigin = 'left';
	                break;
	            case 'above':
	                this._transformOrigin = 'bottom';
	                break;
	            case 'below':
	                this._transformOrigin = 'top';
	                break;
	            default: throw new MdTooltipInvalidPositionError(value);
	        }
	    };
	    TooltipComponent.prototype._afterVisibilityAnimation = function (e) {
	        if (e.toState === 'hidden' && !this.isVisible()) {
	            this._onHide.next();
	        }
	    };
	    /**
	     * Interactions on the HTML body should close the tooltip immediately as defined in the
	     * material design spec.
	     * https://material.google.com/components/tooltips.html#tooltips-interaction
	     */
	    TooltipComponent.prototype._handleBodyInteraction = function () {
	        if (this._closeOnInteraction) {
	            this.hide(0);
	        }
	    };
	    TooltipComponent = __decorate$60([
	        _angular_core.Component({selector: 'md-tooltip-component, mat-tooltip-component',
	            template: "<div class=\"md-tooltip\" [style.transform-origin]=\"_transformOrigin\" [@state]=\"_visibility\" (@state.done)=\"_afterVisibilityAnimation($event)\">{{message}}</div>",
	            styles: [":host{pointer-events:none}.md-tooltip{color:#fff;padding:0 8px;border-radius:2px;font-family:Roboto,\"Helvetica Neue\",sans-serif;font-size:10px;margin:14px;height:22px;line-height:22px}@media screen and (-ms-high-contrast:active){.md-tooltip{outline:solid 1px}}"],
	            animations: [
	                _angular_core.trigger('state', [
	                    _angular_core.state('void', _angular_core.style({ transform: 'scale(0)' })),
	                    _angular_core.state('initial', _angular_core.style({ transform: 'scale(0)' })),
	                    _angular_core.state('visible', _angular_core.style({ transform: 'scale(1)' })),
	                    _angular_core.state('hidden', _angular_core.style({ transform: 'scale(0)' })),
	                    _angular_core.transition('* => visible', _angular_core.animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),
	                    _angular_core.transition('* => hidden', _angular_core.animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),
	                ])
	            ],
	            host: {
	                '(body:click)': 'this._handleBodyInteraction()'
	            }
	        }),
	        __param$13(0, _angular_core.Optional()), 
	        __metadata$60('design:paramtypes', [Dir])
	    ], TooltipComponent);
	    return TooltipComponent;
	}());
	var MdTooltipModule = (function () {
	    function MdTooltipModule() {
	    }
	    MdTooltipModule.forRoot = function () {
	        return {
	            ngModule: MdTooltipModule,
	            providers: [OVERLAY_PROVIDERS]
	        };
	    };
	    MdTooltipModule = __decorate$60([
	        _angular_core.NgModule({
	            imports: [OverlayModule, DefaultStyleCompatibilityModeModule],
	            exports: [MdTooltip, TooltipComponent, DefaultStyleCompatibilityModeModule],
	            declarations: [MdTooltip, TooltipComponent],
	            entryComponents: [TooltipComponent],
	        }), 
	        __metadata$60('design:paramtypes', [])
	    ], MdTooltipModule);
	    return MdTooltipModule;
	}());
	
	var __extends$20 = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * Exception thrown when menu trigger doesn't have a valid md-menu instance
	 * @docs-private
	 */
	var MdMenuMissingError = (function (_super) {
	    __extends$20(MdMenuMissingError, _super);
	    function MdMenuMissingError() {
	        _super.call(this, "md-menu-trigger: must pass in an md-menu instance.\n\n    Example:\n      <md-menu #menu=\"mdMenu\"></md-menu>\n      <button [mdMenuTriggerFor]=\"menu\"></button>\n    ");
	    }
	    return MdMenuMissingError;
	}(MdError));
	/**
	 * Exception thrown when menu's x-position value isn't valid.
	 * In other words, it doesn't match 'before' or 'after'.
	 * @docs-private
	 */
	var MdMenuInvalidPositionX = (function (_super) {
	    __extends$20(MdMenuInvalidPositionX, _super);
	    function MdMenuInvalidPositionX() {
	        _super.call(this, "x-position value must be either 'before' or after'.\n      Example: <md-menu x-position=\"before\" #menu=\"mdMenu\"></md-menu>\n    ");
	    }
	    return MdMenuInvalidPositionX;
	}(MdError));
	/**
	 * Exception thrown when menu's y-position value isn't valid.
	 * In other words, it doesn't match 'above' or 'below'.
	 * @docs-private
	 */
	var MdMenuInvalidPositionY = (function (_super) {
	    __extends$20(MdMenuInvalidPositionY, _super);
	    function MdMenuInvalidPositionY() {
	        _super.call(this, "y-position value must be either 'above' or below'.\n      Example: <md-menu y-position=\"above\" #menu=\"mdMenu\"></md-menu>\n    ");
	    }
	    return MdMenuInvalidPositionY;
	}(MdError));
	
	var __decorate$63 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$63 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/**
	 * This directive is intended to be used inside an md-menu tag.
	 * It exists mostly to set the role attribute.
	 */
	var MdMenuItem = (function () {
	    function MdMenuItem(_renderer, _elementRef) {
	        this._renderer = _renderer;
	        this._elementRef = _elementRef;
	    }
	    MdMenuItem.prototype.focus = function () {
	        this._renderer.invokeElementMethod(this._elementRef.nativeElement, 'focus');
	    };
	    Object.defineProperty(MdMenuItem.prototype, "disabled", {
	        // this is necessary to support anchors
	        /** Whether the menu item is disabled. */
	        get: function () { return this._disabled; },
	        set: function (value) {
	            this._disabled = (value === false || value === undefined) ? null : true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdMenuItem.prototype, "isAriaDisabled", {
	        /** Sets the aria-disabled property on the menu item. */
	        get: function () { return String(!!this.disabled); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MdMenuItem.prototype, "_tabindex", {
	        get: function () { return this.disabled ? '-1' : '0'; },
	        enumerable: true,
	        configurable: true
	    });
	    MdMenuItem.prototype._getHostElement = function () {
	        return this._elementRef.nativeElement;
	    };
	    MdMenuItem.prototype._checkDisabled = function (event) {
	        if (this.disabled) {
	            event.preventDefault();
	            event.stopPropagation();
	        }
	    };
	    __decorate$63([
	        _angular_core.HostBinding('attr.disabled'),
	        _angular_core.Input(), 
	        __metadata$63('design:type', Boolean)
	    ], MdMenuItem.prototype, "disabled", null);
	    __decorate$63([
	        _angular_core.HostBinding('attr.aria-disabled'), 
	        __metadata$63('design:type', String)
	    ], MdMenuItem.prototype, "isAriaDisabled", null);
	    MdMenuItem = __decorate$63([
	        _angular_core.Component({selector: '[md-menu-item], [mat-menu-item]',
	            host: {
	                'role': 'menuitem',
	                '(click)': '_checkDisabled($event)',
	                '[attr.tabindex]': '_tabindex'
	            },
	            template: "<ng-content></ng-content><div class=\"md-menu-ripple\" *ngIf=\"!disabled\" md-ripple mdRippleBackgroundColor=\"rgba(0,0,0,0)\" [mdRippleTrigger]=\"_getHostElement()\"></div>",
	            exportAs: 'mdMenuItem'
	        }), 
	        __metadata$63('design:paramtypes', [_angular_core.Renderer, _angular_core.ElementRef])
	    ], MdMenuItem);
	    return MdMenuItem;
	}());
	
	/**
	 * Below are all the animations for the md-menu component.
	 * Animation duration and timing values are based on Material 1.
	 */
	/**
	 * This animation controls the menu panel's entry and exit from the page.
	 *
	 * When the menu panel is added to the DOM, it scales in and fades in its border.
	 *
	 * When the menu panel is removed from the DOM, it simply fades out after a brief
	 * delay to display the ripple.
	 */
	// TODO(kara): switch to :enter and :leave once Mobile Safari is sorted out.
	var transformMenu = _angular_core.trigger('transformMenu', [
	    _angular_core.state('showing', _angular_core.style({
	        opacity: 1,
	        transform: "scale(1)"
	    })),
	    _angular_core.transition('void => *', [
	        _angular_core.style({
	            opacity: 0,
	            transform: "scale(0)"
	        }),
	        _angular_core.animate("200ms cubic-bezier(0.25, 0.8, 0.25, 1)")
	    ]),
	    _angular_core.transition('* => void', [
	        _angular_core.animate('50ms 100ms linear', _angular_core.style({ opacity: 0 }))
	    ])
	]);
	/**
	 * This animation fades in the background color and content of the menu panel
	 * after its containing element is scaled in.
	 */
	var fadeInItems = _angular_core.trigger('fadeInItems', [
	    _angular_core.state('showing', _angular_core.style({ opacity: 1 })),
	    _angular_core.transition('void => *', [
	        _angular_core.style({ opacity: 0 }),
	        _angular_core.animate("200ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)")
	    ])
	]);
	
	// TODO(kara): prevent-close functionality
	var __decorate$62 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$62 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param$14 = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var MdMenu = (function () {
	    function MdMenu(posX, posY) {
	        /** Config object to be passed into the menu's ngClass */
	        this._classList = {};
	        /** Position of the menu in the X axis. */
	        this.positionX = 'after';
	        /** Position of the menu in the Y axis. */
	        this.positionY = 'below';
	        /** Event emitted when the menu is closed. */
	        this.close = new _angular_core.EventEmitter();
	        if (posX) {
	            this._setPositionX(posX);
	        }
	        if (posY) {
	            this._setPositionY(posY);
	        }
	        this.setPositionClasses(this.positionX, this.positionY);
	    }
	    MdMenu.prototype.ngAfterContentInit = function () {
	        var _this = this;
	        this._keyManager = new ListKeyManager(this.items).withFocusWrap();
	        this._tabSubscription = this._keyManager.tabOut.subscribe(function () {
	            _this._emitCloseEvent();
	        });
	    };
	    MdMenu.prototype.ngOnDestroy = function () {
	        this._tabSubscription.unsubscribe();
	    };
	    Object.defineProperty(MdMenu.prototype, "classList", {
	        /**
	         * This method takes classes set on the host md-menu element and applies them on the
	         * menu template that displays in the overlay container.  Otherwise, it's difficult
	         * to style the containing menu from outside the component.
	         * @param classes list of class names
	         */
	        set: function (classes) {
	            this._classList = classes.split(' ').reduce(function (obj, className) {
	                obj[className] = true;
	                return obj;
	            }, {});
	            this.setPositionClasses(this.positionX, this.positionY);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Focus the first item in the menu. This method is used by the menu trigger
	     * to focus the first item when the menu is opened by the ENTER key.
	     */
	    MdMenu.prototype.focusFirstItem = function () {
	        this._keyManager.focusFirstItem();
	    };
	    /**
	     * This emits a close event to which the trigger is subscribed. When emitted, the
	     * trigger will close the menu.
	     */
	    MdMenu.prototype._emitCloseEvent = function () {
	        this.close.emit();
	    };
	    MdMenu.prototype._setPositionX = function (pos) {
	        if (pos !== 'before' && pos !== 'after') {
	            throw new MdMenuInvalidPositionX();
	        }
	        this.positionX = pos;
	    };
	    MdMenu.prototype._setPositionY = function (pos) {
	        if (pos !== 'above' && pos !== 'below') {
	            throw new MdMenuInvalidPositionY();
	        }
	        this.positionY = pos;
	    };
	    /**
	     * It's necessary to set position-based classes to ensure the menu panel animation
	     * folds out from the correct direction.
	     */
	    MdMenu.prototype.setPositionClasses = function (posX, posY) {
	        this._classList['md-menu-before'] = posX == 'before';
	        this._classList['md-menu-after'] = posX == 'after';
	        this._classList['md-menu-above'] = posY == 'above';
	        this._classList['md-menu-below'] = posY == 'below';
	    };
	    __decorate$62([
	        _angular_core.ViewChild(_angular_core.TemplateRef), 
	        __metadata$62('design:type', _angular_core.TemplateRef)
	    ], MdMenu.prototype, "templateRef", void 0);
	    __decorate$62([
	        _angular_core.ContentChildren(MdMenuItem), 
	        __metadata$62('design:type', _angular_core.QueryList)
	    ], MdMenu.prototype, "items", void 0);
	    __decorate$62([
	        _angular_core.Input('class'), 
	        __metadata$62('design:type', String), 
	        __metadata$62('design:paramtypes', [String])
	    ], MdMenu.prototype, "classList", null);
	    __decorate$62([
	        _angular_core.Output(), 
	        __metadata$62('design:type', Object)
	    ], MdMenu.prototype, "close", void 0);
	    MdMenu = __decorate$62([
	        _angular_core.Component({selector: 'md-menu, mat-menu',
	            host: { 'role': 'menu' },
	            template: "<template><div class=\"md-menu-panel\" [ngClass]=\"_classList\" (keydown)=\"_keyManager.onKeydown($event)\" (click)=\"_emitCloseEvent()\" [@transformMenu]=\"'showing'\"><div class=\"md-menu-content\" [@fadeInItems]=\"'showing'\"><ng-content></ng-content></div></div></template>",
	            styles: [".md-menu-panel{box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12);min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh + 48px)}.md-menu-panel.md-menu-after.md-menu-below{transform-origin:left top}.md-menu-panel.md-menu-after.md-menu-above{transform-origin:left bottom}.md-menu-panel.md-menu-before.md-menu-below{transform-origin:right top}.md-menu-panel.md-menu-before.md-menu-above{transform-origin:right bottom}[dir=rtl] .md-menu-panel.md-menu-after.md-menu-below{transform-origin:right top}[dir=rtl] .md-menu-panel.md-menu-after.md-menu-above{transform-origin:right bottom}[dir=rtl] .md-menu-panel.md-menu-before.md-menu-below{transform-origin:left top}[dir=rtl] .md-menu-panel.md-menu-before.md-menu-above{transform-origin:left bottom}@media screen and (-ms-high-contrast:active){.md-menu-panel{outline:solid 1px}}.md-menu-content{padding-top:8px;padding-bottom:8px}[md-menu-item]{cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;outline:0;border:none;white-space:nowrap;overflow-x:hidden;text-overflow:ellipsis;display:flex;flex-direction:row;align-items:center;height:48px;padding:0 16px;font-size:16px;font-family:Roboto,\"Helvetica Neue\",sans-serif;text-align:start;text-decoration:none;position:relative}[md-menu-item][disabled]{cursor:default}[md-menu-item] md-icon{margin-right:16px}[dir=rtl] [md-menu-item] md-icon{margin-left:16px}button[md-menu-item]{width:100%}.md-menu-ripple{position:absolute;top:0;left:0;bottom:0;right:0}"],
	            encapsulation: _angular_core.ViewEncapsulation.None,
	            animations: [
	                transformMenu,
	                fadeInItems
	            ],
	            exportAs: 'mdMenu'
	        }),
	        __param$14(0, _angular_core.Attribute('x-position')),
	        __param$14(1, _angular_core.Attribute('y-position')), 
	        __metadata$62('design:paramtypes', [String, String])
	    ], MdMenu);
	    return MdMenu;
	}());
	
	var __decorate$64 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$64 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param$15 = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	/**
	 * This directive is intended to be used in conjunction with an md-menu tag.  It is
	 * responsible for toggling the display of the provided menu instance.
	 */
	var MdMenuTrigger = (function () {
	    function MdMenuTrigger(_overlay, _element, _viewContainerRef, _renderer, _dir) {
	        this._overlay = _overlay;
	        this._element = _element;
	        this._viewContainerRef = _viewContainerRef;
	        this._renderer = _renderer;
	        this._dir = _dir;
	        this._menuOpen = false;
	        // tracking input type is necessary so it's possible to only auto-focus
	        // the first item of the list when the menu is opened via the keyboard
	        this._openedByMouse = false;
	        /** Event emitted when the associated menu is opened. */
	        this.onMenuOpen = new _angular_core.EventEmitter();
	        /** Event emitted when the associated menu is closed. */
	        this.onMenuClose = new _angular_core.EventEmitter();
	    }
	    Object.defineProperty(MdMenuTrigger.prototype, "_deprecatedMenuTriggerFor", {
	        /** @deprecated */
	        get: function () { return this.menu; },
	        set: function (v) { this.menu = v; },
	        enumerable: true,
	        configurable: true
	    });
	    MdMenuTrigger.prototype.ngAfterViewInit = function () {
	        var _this = this;
	        this._checkMenu();
	        this.menu.close.subscribe(function () { return _this.closeMenu(); });
	    };
	    MdMenuTrigger.prototype.ngOnDestroy = function () { this.destroyMenu(); };
	    Object.defineProperty(MdMenuTrigger.prototype, "menuOpen", {
	        /** Whether the menu is open. */
	        get: function () { return this._menuOpen; },
	        enumerable: true,
	        configurable: true
	    });
	    /** Toggles the menu between the open and closed states. */
	    MdMenuTrigger.prototype.toggleMenu = function () {
	        return this._menuOpen ? this.closeMenu() : this.openMenu();
	    };
	    /** Opens the menu. */
	    MdMenuTrigger.prototype.openMenu = function () {
	        if (!this._menuOpen) {
	            this._createOverlay();
	            this._overlayRef.attach(this._portal);
	            this._subscribeToBackdrop();
	            this._initMenu();
	        }
	    };
	    /** Closes the menu. */
	    MdMenuTrigger.prototype.closeMenu = function () {
	        if (this._overlayRef) {
	            this._overlayRef.detach();
	            this._backdropSubscription.unsubscribe();
	            this._resetMenu();
	        }
	    };
	    /** Removes the menu from the DOM. */
	    MdMenuTrigger.prototype.destroyMenu = function () {
	        if (this._overlayRef) {
	            this._overlayRef.dispose();
	            this._overlayRef = null;
	            this._cleanUpSubscriptions();
	        }
	    };
	    /** Focuses the menu trigger. */
	    MdMenuTrigger.prototype.focus = function () {
	        this._renderer.invokeElementMethod(this._element.nativeElement, 'focus');
	    };
	    Object.defineProperty(MdMenuTrigger.prototype, "dir", {
	        /** The text direction of the containing app. */
	        get: function () {
	            return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * This method ensures that the menu closes when the overlay backdrop is clicked.
	     * We do not use first() here because doing so would not catch clicks from within
	     * the menu, and it would fail to unsubscribe properly. Instead, we unsubscribe
	     * explicitly when the menu is closed or destroyed.
	     */
	    MdMenuTrigger.prototype._subscribeToBackdrop = function () {
	        var _this = this;
	        this._backdropSubscription = this._overlayRef.backdropClick().subscribe(function () {
	            _this.closeMenu();
	        });
	    };
	    /**
	     * This method sets the menu state to open and focuses the first item if
	     * the menu was opened via the keyboard.
	     */
	    MdMenuTrigger.prototype._initMenu = function () {
	        this._setIsMenuOpen(true);
	        // Should only set focus if opened via the keyboard, so keyboard users can
	        // can easily navigate menu items. According to spec, mouse users should not
	        // see the focus style.
	        if (!this._openedByMouse) {
	            this.menu.focusFirstItem();
	        }
	    };
	    
	    /**
	     * This method resets the menu when it's closed, most importantly restoring
	     * focus to the menu trigger if the menu was opened via the keyboard.
	     */
	    MdMenuTrigger.prototype._resetMenu = function () {
	        this._setIsMenuOpen(false);
	        // Focus only needs to be reset to the host element if the menu was opened
	        // by the keyboard and manually shifted to the first menu item.
	        if (!this._openedByMouse) {
	            this.focus();
	        }
	        this._openedByMouse = false;
	    };
	    // set state rather than toggle to support triggers sharing a menu
	    MdMenuTrigger.prototype._setIsMenuOpen = function (isOpen) {
	        this._menuOpen = isOpen;
	        this._menuOpen ? this.onMenuOpen.emit() : this.onMenuClose.emit();
	    };
	    /**
	     *  This method checks that a valid instance of MdMenu has been passed into
	     *  mdMenuTriggerFor. If not, an exception is thrown.
	     */
	    MdMenuTrigger.prototype._checkMenu = function () {
	        if (!this.menu) {
	            throw new MdMenuMissingError();
	        }
	    };
	    /**
	     *  This method creates the overlay from the provided menu's template and saves its
	     *  OverlayRef so that it can be attached to the DOM when openMenu is called.
	     */
	    MdMenuTrigger.prototype._createOverlay = function () {
	        if (!this._overlayRef) {
	            this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);
	            var config = this._getOverlayConfig();
	            this._subscribeToPositions(config.positionStrategy);
	            this._overlayRef = this._overlay.create(config);
	        }
	    };
	    /**
	     * This method builds the configuration object needed to create the overlay, the OverlayState.
	     * @returns OverlayState
	     */
	    MdMenuTrigger.prototype._getOverlayConfig = function () {
	        var overlayState = new OverlayState();
	        overlayState.positionStrategy = this._getPosition()
	            .withDirection(this.dir);
	        overlayState.hasBackdrop = true;
	        overlayState.backdropClass = 'cdk-overlay-transparent-backdrop';
	        overlayState.direction = this.dir;
	        return overlayState;
	    };
	    /**
	     * Listens to changes in the position of the overlay and sets the correct classes
	     * on the menu based on the new position. This ensures the animation origin is always
	     * correct, even if a fallback position is used for the overlay.
	     */
	    MdMenuTrigger.prototype._subscribeToPositions = function (position) {
	        var _this = this;
	        this._positionSubscription = position.onPositionChange.subscribe(function (change) {
	            var posX = change.connectionPair.originX === 'start' ? 'after' : 'before';
	            var posY = change.connectionPair.originY === 'top' ? 'below' : 'above';
	            _this.menu.setPositionClasses(posX, posY);
	        });
	    };
	    /**
	     * This method builds the position strategy for the overlay, so the menu is properly connected
	     * to the trigger.
	     * @returns ConnectedPositionStrategy
	     */
	    MdMenuTrigger.prototype._getPosition = function () {
	        var _a = this.menu.positionX === 'before' ? ['end', 'start'] : ['start', 'end'], posX = _a[0], fallbackX = _a[1];
	        var _b = this.menu.positionY === 'above' ? ['bottom', 'top'] : ['top', 'bottom'], posY = _b[0], fallbackY = _b[1];
	        return this._overlay.position()
	            .connectedTo(this._element, { originX: posX, originY: posY }, { overlayX: posX, overlayY: posY })
	            .withFallbackPosition({ originX: fallbackX, originY: posY }, { overlayX: fallbackX, overlayY: posY })
	            .withFallbackPosition({ originX: posX, originY: fallbackY }, { overlayX: posX, overlayY: fallbackY })
	            .withFallbackPosition({ originX: fallbackX, originY: fallbackY }, { overlayX: fallbackX, overlayY: fallbackY });
	    };
	    MdMenuTrigger.prototype._cleanUpSubscriptions = function () {
	        if (this._backdropSubscription) {
	            this._backdropSubscription.unsubscribe();
	        }
	        if (this._positionSubscription) {
	            this._positionSubscription.unsubscribe();
	        }
	    };
	    MdMenuTrigger.prototype._handleMousedown = function (event) {
	        if (!isFakeMousedownFromScreenReader(event)) {
	            this._openedByMouse = true;
	        }
	    };
	    __decorate$64([
	        _angular_core.Input('md-menu-trigger-for'), 
	        __metadata$64('design:type', Object)
	    ], MdMenuTrigger.prototype, "_deprecatedMenuTriggerFor", null);
	    __decorate$64([
	        _angular_core.Input('mdMenuTriggerFor'), 
	        __metadata$64('design:type', Object)
	    ], MdMenuTrigger.prototype, "menu", void 0);
	    __decorate$64([
	        _angular_core.Output(), 
	        __metadata$64('design:type', Object)
	    ], MdMenuTrigger.prototype, "onMenuOpen", void 0);
	    __decorate$64([
	        _angular_core.Output(), 
	        __metadata$64('design:type', Object)
	    ], MdMenuTrigger.prototype, "onMenuClose", void 0);
	    MdMenuTrigger = __decorate$64([
	        _angular_core.Directive({
	            selector: '[md-menu-trigger-for], [mat-menu-trigger-for], [mdMenuTriggerFor]',
	            host: {
	                'aria-haspopup': 'true',
	                '(mousedown)': '_handleMousedown($event)',
	                '(click)': 'toggleMenu()',
	            },
	            exportAs: 'mdMenuTrigger'
	        }),
	        __param$15(4, _angular_core.Optional()), 
	        __metadata$64('design:paramtypes', [Overlay, _angular_core.ElementRef, _angular_core.ViewContainerRef, _angular_core.Renderer, Dir])
	    ], MdMenuTrigger);
	    return MdMenuTrigger;
	}());
	
	var __decorate$61 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$61 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var MdMenuModule = (function () {
	    function MdMenuModule() {
	    }
	    MdMenuModule.forRoot = function () {
	        return {
	            ngModule: MdMenuModule,
	            providers: OVERLAY_PROVIDERS,
	        };
	    };
	    MdMenuModule = __decorate$61([
	        _angular_core.NgModule({
	            imports: [OverlayModule, _angular_common.CommonModule, MdRippleModule, DefaultStyleCompatibilityModeModule],
	            exports: [MdMenu, MdMenuItem, MdMenuTrigger, DefaultStyleCompatibilityModeModule],
	            declarations: [MdMenu, MdMenuItem, MdMenuTrigger],
	        }), 
	        __metadata$61('design:paramtypes', [])
	    ], MdMenuModule);
	    return MdMenuModule;
	}());
	
	// TODO(jelbourn): resizing
	// TODO(jelbourn): afterOpen and beforeClose
	/**
	 * Reference to a dialog opened via the MdDialog service.
	 */
	var MdDialogRef = (function () {
	    function MdDialogRef(_overlayRef) {
	        this._overlayRef = _overlayRef;
	        /** Subject for notifying the user that the dialog has finished closing. */
	        this._afterClosed = new rxjs_Subject.Subject();
	    }
	    /**
	     * Close the dialog.
	     * @param dialogResult Optional result to return to the dialog opener.
	     */
	    MdDialogRef.prototype.close = function (dialogResult) {
	        this._overlayRef.dispose();
	        this._afterClosed.next(dialogResult);
	        this._afterClosed.complete();
	    };
	    /**
	     * Gets an observable that is notified when the dialog is finished closing.
	     */
	    MdDialogRef.prototype.afterClosed = function () {
	        return this._afterClosed.asObservable();
	    };
	    return MdDialogRef;
	}());
	
	/** Custom injector type specifically for instantiating components with a dialog. */
	var DialogInjector = (function () {
	    function DialogInjector(_dialogRef, _parentInjector) {
	        this._dialogRef = _dialogRef;
	        this._parentInjector = _parentInjector;
	    }
	    DialogInjector.prototype.get = function (token, notFoundValue) {
	        if (token === MdDialogRef) {
	            return this._dialogRef;
	        }
	        return this._parentInjector.get(token, notFoundValue);
	    };
	    return DialogInjector;
	}());
	
	/**
	 * Configuration for opening a modal dialog with the MdDialog service.
	 */
	var MdDialogConfig = (function () {
	    function MdDialogConfig() {
	        /** The ARIA role of the dialog element. */
	        this.role = 'dialog';
	        /** Whether the user can use escape or clicking outside to close a modal. */
	        this.disableClose = false;
	        /** Width of the dialog. */
	        this.width = '';
	        /** Height of the dialog. */
	        this.height = '';
	    }
	    return MdDialogConfig;
	}());
	
	var __extends$22 = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * Exception thrown when a ComponentPortal is attached to a DomPortalHost without an origin.
	 * @docs-private
	 */
	var MdDialogContentAlreadyAttachedError = (function (_super) {
	    __extends$22(MdDialogContentAlreadyAttachedError, _super);
	    function MdDialogContentAlreadyAttachedError() {
	        _super.call(this, 'Attempting to attach dialog content after content is already attached');
	    }
	    return MdDialogContentAlreadyAttachedError;
	}(MdError));
	
	var __extends$21 = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate$67 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$67 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/**
	 * Internal component that wraps user-provided dialog content.
	 * @docs-private
	 */
	var MdDialogContainer = (function (_super) {
	    __extends$21(MdDialogContainer, _super);
	    function MdDialogContainer(_ngZone) {
	        _super.call(this);
	        this._ngZone = _ngZone;
	        /** Element that was focused before the dialog was opened. Save this to restore upon close. */
	        this._elementFocusedBeforeDialogWasOpened = null;
	    }
	    /**
	     * Attach a portal as content to this dialog container.
	     * @param portal Portal to be attached as the dialog content.
	     */
	    MdDialogContainer.prototype.attachComponentPortal = function (portal) {
	        var _this = this;
	        if (this._portalHost.hasAttached()) {
	            throw new MdDialogContentAlreadyAttachedError();
	        }
	        var attachResult = this._portalHost.attachComponentPortal(portal);
	        // If were to attempt to focus immediately, then the content of the dialog would not yet be
	        // ready in instances where change detection has to run first. To deal with this, we simply
	        // wait for the microtask queue to be empty.
	        this._ngZone.onMicrotaskEmpty.first().subscribe(function () {
	            _this._elementFocusedBeforeDialogWasOpened = document.activeElement;
	            _this._focusTrap.focusFirstTabbableElement();
	        });
	        return attachResult;
	    };
	    /** @docs-private */
	    MdDialogContainer.prototype.attachTemplatePortal = function (portal) {
	        throw Error('Not yet implemented');
	    };
	    /**
	     * Handles the user pressing the Escape key.
	     * @docs-private
	     */
	    MdDialogContainer.prototype.handleEscapeKey = function () {
	        if (!this.dialogConfig.disableClose) {
	            this.dialogRef.close();
	        }
	    };
	    MdDialogContainer.prototype.ngOnDestroy = function () {
	        var _this = this;
	        // When the dialog is destroyed, return focus to the element that originally had it before
	        // the dialog was opened. Wait for the DOM to finish settling before changing the focus so
	        // that it doesn't end up back on the <body>.
	        this._ngZone.onMicrotaskEmpty.first().subscribe(function () {
	            _this._elementFocusedBeforeDialogWasOpened.focus();
	        });
	    };
	    __decorate$67([
	        _angular_core.ViewChild(PortalHostDirective), 
	        __metadata$67('design:type', PortalHostDirective)
	    ], MdDialogContainer.prototype, "_portalHost", void 0);
	    __decorate$67([
	        _angular_core.ViewChild(FocusTrap), 
	        __metadata$67('design:type', FocusTrap)
	    ], MdDialogContainer.prototype, "_focusTrap", void 0);
	    MdDialogContainer = __decorate$67([
	        _angular_core.Component({selector: 'md-dialog-container, mat-dialog-container',
	            template: "<cdk-focus-trap><template cdkPortalHost></template></cdk-focus-trap>",
	            styles: ["md-dialog-container{box-shadow:0 11px 15px -7px rgba(0,0,0,.2),0 24px 38px 3px rgba(0,0,0,.14),0 9px 46px 8px rgba(0,0,0,.12);display:block;padding:24px;border-radius:2px;box-sizing:border-box;overflow:auto;max-width:80vw;width:100%;height:100%}@media screen and (-ms-high-contrast:active){md-dialog-container{outline:solid 1px}}[mat-dialog-content],[md-dialog-content],mat-dialog-content,md-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto}[mat-dialog-title],[md-dialog-title]{font-size:20px;font-weight:700;margin:0 0 20px;display:block}[mat-dialog-actions],[md-dialog-actions],mat-dialog-actions,md-dialog-actions{padding:12px 0;display:block}[mat-dialog-actions]:last-child,[md-dialog-actions]:last-child,mat-dialog-actions:last-child,md-dialog-actions:last-child{margin-bottom:-24px}"],
	            host: {
	                'class': 'md-dialog-container',
	                '[attr.role]': 'dialogConfig?.role',
	                '(keydown.escape)': 'handleEscapeKey()',
	            },
	            encapsulation: _angular_core.ViewEncapsulation.None,
	        }), 
	        __metadata$67('design:paramtypes', [_angular_core.NgZone])
	    ], MdDialogContainer);
	    return MdDialogContainer;
	}(BasePortalHost));
	
	var __decorate$66 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$66 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	// TODO(jelbourn): add support for opening with a TemplateRef
	// TODO(jelbourn): animations
	/**
	 * Service to open Material Design modal dialogs.
	 */
	var MdDialog = (function () {
	    function MdDialog(_overlay, _injector) {
	        this._overlay = _overlay;
	        this._injector = _injector;
	        /** Keeps track of the currently-open dialogs. */
	        this._openDialogs = [];
	    }
	    /**
	     * Opens a modal dialog containing the given component.
	     * @param component Type of the component to load into the load.
	     * @param config Extra configuration options.
	     * @returns Reference to the newly-opened dialog.
	     */
	    MdDialog.prototype.open = function (component, config) {
	        var _this = this;
	        config = _applyConfigDefaults$1(config);
	        var overlayRef = this._createOverlay(config);
	        var dialogContainer = this._attachDialogContainer(overlayRef, config);
	        var dialogRef = this._attachDialogContent(component, dialogContainer, overlayRef);
	        this._openDialogs.push(dialogRef);
	        dialogRef.afterClosed().subscribe(function () { return _this._removeOpenDialog(dialogRef); });
	        return dialogRef;
	    };
	    /**
	     * Closes all of the currently-open dialogs.
	     */
	    MdDialog.prototype.closeAll = function () {
	        var i = this._openDialogs.length;
	        while (i--) {
	            // The `_openDialogs` property isn't updated after close until the rxjs subscription
	            // runs on the next microtask, in addition to modifying the array as we're going
	            // through it. We loop through all of them and call close without assuming that
	            // they'll be removed from the list instantaneously.
	            this._openDialogs[i].close();
	        }
	    };
	    /**
	     * Creates the overlay into which the dialog will be loaded.
	     * @param dialogConfig The dialog configuration.
	     * @returns A promise resolving to the OverlayRef for the created overlay.
	     */
	    MdDialog.prototype._createOverlay = function (dialogConfig) {
	        var overlayState = this._getOverlayState(dialogConfig);
	        return this._overlay.create(overlayState);
	    };
	    /**
	     * Attaches an MdDialogContainer to a dialog's already-created overlay.
	     * @param overlay Reference to the dialog's underlying overlay.
	     * @param config The dialog configuration.
	     * @returns A promise resolving to a ComponentRef for the attached container.
	     */
	    MdDialog.prototype._attachDialogContainer = function (overlay, config) {
	        var viewContainer = config ? config.viewContainerRef : null;
	        var containerPortal = new ComponentPortal(MdDialogContainer, viewContainer);
	        var containerRef = overlay.attach(containerPortal);
	        containerRef.instance.dialogConfig = config;
	        return containerRef.instance;
	    };
	    /**
	     * Attaches the user-provided component to the already-created MdDialogContainer.
	     * @param component The type of component being loaded into the dialog.
	     * @param dialogContainer Reference to the wrapping MdDialogContainer.
	     * @param overlayRef Reference to the overlay in which the dialog resides.
	     * @returns A promise resolving to the MdDialogRef that should be returned to the user.
	     */
	    MdDialog.prototype._attachDialogContent = function (component, dialogContainer, overlayRef) {
	        // Create a reference to the dialog we're creating in order to give the user a handle
	        // to modify and close it.
	        var dialogRef = new MdDialogRef(overlayRef);
	        if (!dialogContainer.dialogConfig.disableClose) {
	            // When the dialog backdrop is clicked, we want to close it.
	            overlayRef.backdropClick().first().subscribe(function () { return dialogRef.close(); });
	        }
	        // Set the dialogRef to the container so that it can use the ref to close the dialog.
	        dialogContainer.dialogRef = dialogRef;
	        // We create an injector specifically for the component we're instantiating so that it can
	        // inject the MdDialogRef. This allows a component loaded inside of a dialog to close itself
	        // and, optionally, to return a value.
	        var dialogInjector = new DialogInjector(dialogRef, this._injector);
	        var contentPortal = new ComponentPortal(component, null, dialogInjector);
	        var contentRef = dialogContainer.attachComponentPortal(contentPortal);
	        dialogRef.componentInstance = contentRef.instance;
	        return dialogRef;
	    };
	    /**
	     * Creates an overlay state from a dialog config.
	     * @param dialogConfig The dialog configuration.
	     * @returns The overlay configuration.
	     */
	    MdDialog.prototype._getOverlayState = function (dialogConfig) {
	        var state$$1 = new OverlayState();
	        var strategy = this._overlay.position().global();
	        var position = dialogConfig.position;
	        state$$1.hasBackdrop = true;
	        state$$1.positionStrategy = strategy;
	        if (position && (position.left || position.right)) {
	            position.left ? strategy.left(position.left) : strategy.right(position.right);
	        }
	        else {
	            strategy.centerHorizontally();
	        }
	        if (position && (position.top || position.bottom)) {
	            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);
	        }
	        else {
	            strategy.centerVertically();
	        }
	        strategy.width(dialogConfig.width).height(dialogConfig.height);
	        return state$$1;
	    };
	    /**
	     * Removes a dialog from the array of open dialogs.
	     * @param dialogRef Dialog to be removed.
	     */
	    MdDialog.prototype._removeOpenDialog = function (dialogRef) {
	        var index = this._openDialogs.indexOf(dialogRef);
	        if (index > -1) {
	            this._openDialogs.splice(index, 1);
	        }
	    };
	    MdDialog = __decorate$66([
	        _angular_core.Injectable(), 
	        __metadata$66('design:paramtypes', [Overlay, _angular_core.Injector])
	    ], MdDialog);
	    return MdDialog;
	}());
	/**
	 * Applies default options to the dialog config.
	 * @param dialogConfig Config to be modified.
	 * @returns The new configuration object.
	 */
	function _applyConfigDefaults$1(dialogConfig) {
	    return extendObject(new MdDialogConfig(), dialogConfig);
	}
	
	var __decorate$68 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$68 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	/**
	 * Button that will close the current dialog.
	 */
	var MdDialogClose = (function () {
	    function MdDialogClose(dialogRef) {
	        this.dialogRef = dialogRef;
	        /** Screenreader label for the button. */
	        this.ariaLabel = 'Close dialog';
	    }
	    __decorate$68([
	        _angular_core.Input('aria-label'), 
	        __metadata$68('design:type', String)
	    ], MdDialogClose.prototype, "ariaLabel", void 0);
	    MdDialogClose = __decorate$68([
	        _angular_core.Directive({
	            selector: 'button[md-dialog-close], button[mat-dialog-close]',
	            host: {
	                '(click)': 'dialogRef.close()',
	                '[attr.aria-label]': 'ariaLabel'
	            }
	        }), 
	        __metadata$68('design:paramtypes', [MdDialogRef])
	    ], MdDialogClose);
	    return MdDialogClose;
	}());
	/**
	 * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.
	 */
	var MdDialogTitle = (function () {
	    function MdDialogTitle() {
	    }
	    MdDialogTitle = __decorate$68([
	        _angular_core.Directive({
	            selector: '[md-dialog-title], [mat-dialog-title]'
	        }), 
	        __metadata$68('design:paramtypes', [])
	    ], MdDialogTitle);
	    return MdDialogTitle;
	}());
	/**
	 * Scrollable content container of a dialog.
	 */
	var MdDialogContent = (function () {
	    function MdDialogContent() {
	    }
	    MdDialogContent = __decorate$68([
	        _angular_core.Directive({
	            selector: '[md-dialog-content], md-dialog-content, [mat-dialog-content], mat-dialog-content'
	        }), 
	        __metadata$68('design:paramtypes', [])
	    ], MdDialogContent);
	    return MdDialogContent;
	}());
	/**
	 * Container for the bottom action buttons in a dialog.
	 * Stays fixed to the bottom when scrolling.
	 */
	var MdDialogActions = (function () {
	    function MdDialogActions() {
	    }
	    MdDialogActions = __decorate$68([
	        _angular_core.Directive({
	            selector: '[md-dialog-actions], md-dialog-actions, [mat-dialog-actions], mat-dialog-actions'
	        }), 
	        __metadata$68('design:paramtypes', [])
	    ], MdDialogActions);
	    return MdDialogActions;
	}());
	
	var __decorate$65 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$65 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var MdDialogModule = (function () {
	    function MdDialogModule() {
	    }
	    MdDialogModule.forRoot = function () {
	        return {
	            ngModule: MdDialogModule,
	            providers: [MdDialog, OVERLAY_PROVIDERS, InteractivityChecker, Platform],
	        };
	    };
	    MdDialogModule = __decorate$65([
	        _angular_core.NgModule({
	            imports: [
	                OverlayModule,
	                PortalModule,
	                A11yModule,
	                DefaultStyleCompatibilityModeModule
	            ],
	            exports: [
	                MdDialogContainer,
	                MdDialogClose,
	                MdDialogTitle,
	                MdDialogContent,
	                MdDialogActions,
	                DefaultStyleCompatibilityModeModule
	            ],
	            declarations: [
	                MdDialogContainer,
	                MdDialogClose,
	                MdDialogTitle,
	                MdDialogActions,
	                MdDialogContent
	            ],
	            entryComponents: [MdDialogContainer],
	        }), 
	        __metadata$65('design:paramtypes', [])
	    ], MdDialogModule);
	    return MdDialogModule;
	}());
	
	var __decorate$24 = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata$24 = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var MATERIAL_MODULES = [
	    MdButtonModule,
	    MdButtonToggleModule,
	    MdCardModule,
	    MdChipsModule,
	    MdCheckboxModule,
	    MdDialogModule,
	    MdGridListModule,
	    MdIconModule,
	    MdInputModule,
	    MdListModule,
	    MdMenuModule,
	    MdProgressBarModule,
	    MdProgressSpinnerModule,
	    MdRadioModule,
	    MdRippleModule,
	    MdSelectModule,
	    MdSidenavModule,
	    MdSliderModule,
	    MdSlideToggleModule,
	    MdSnackBarModule,
	    MdTabsModule,
	    MdToolbarModule,
	    MdTooltipModule,
	    OverlayModule,
	    PortalModule,
	    RtlModule,
	    A11yModule,
	    PlatformModule,
	    ProjectionModule,
	    DefaultStyleCompatibilityModeModule,
	    ObserveContentModule
	];
	var MaterialRootModule = (function () {
	    function MaterialRootModule() {
	    }
	    MaterialRootModule = __decorate$24([
	        _angular_core.NgModule({
	            imports: [
	                MdButtonModule.forRoot(),
	                MdCardModule.forRoot(),
	                MdChipsModule.forRoot(),
	                MdCheckboxModule.forRoot(),
	                MdGridListModule.forRoot(),
	                MdInputModule.forRoot(),
	                MdListModule.forRoot(),
	                MdProgressBarModule.forRoot(),
	                MdProgressSpinnerModule.forRoot(),
	                MdRippleModule.forRoot(),
	                MdSelectModule.forRoot(),
	                MdSidenavModule.forRoot(),
	                MdTabsModule.forRoot(),
	                MdToolbarModule.forRoot(),
	                PortalModule.forRoot(),
	                ProjectionModule.forRoot(),
	                RtlModule.forRoot(),
	                ObserveContentModule.forRoot(),
	                // These modules include providers.
	                A11yModule.forRoot(),
	                MdButtonToggleModule.forRoot(),
	                MdDialogModule.forRoot(),
	                MdIconModule.forRoot(),
	                MdMenuModule.forRoot(),
	                MdRadioModule.forRoot(),
	                MdSliderModule.forRoot(),
	                MdSlideToggleModule.forRoot(),
	                MdSnackBarModule.forRoot(),
	                MdTooltipModule.forRoot(),
	                PlatformModule.forRoot(),
	                OverlayModule.forRoot(),
	                DefaultStyleCompatibilityModeModule.forRoot(),
	            ],
	            exports: MATERIAL_MODULES,
	        }), 
	        __metadata$24('design:paramtypes', [])
	    ], MaterialRootModule);
	    return MaterialRootModule;
	}());
	var MaterialModule = (function () {
	    function MaterialModule() {
	    }
	    MaterialModule.forRoot = function () {
	        return { ngModule: MaterialRootModule };
	    };
	    MaterialModule = __decorate$24([
	        _angular_core.NgModule({
	            imports: MATERIAL_MODULES,
	            exports: MATERIAL_MODULES,
	        }), 
	        __metadata$24('design:paramtypes', [])
	    ], MaterialModule);
	    return MaterialModule;
	}());
	
	exports.MdCoreModule = MdCoreModule;
	exports.Dir = Dir;
	exports.RtlModule = RtlModule;
	exports.ObserveContentModule = ObserveContentModule;
	exports.ObserveContent = ObserveContent;
	exports.Portal = Portal;
	exports.BasePortalHost = BasePortalHost;
	exports.ComponentPortal = ComponentPortal;
	exports.TemplatePortal = TemplatePortal;
	exports.PortalHostDirective = PortalHostDirective;
	exports.TemplatePortalDirective = TemplatePortalDirective;
	exports.PortalModule = PortalModule;
	exports.DomPortalHost = DomPortalHost;
	exports.MdPlatform = Platform;
	exports.Overlay = Overlay;
	exports.OVERLAY_PROVIDERS = OVERLAY_PROVIDERS;
	exports.OverlayContainer = OverlayContainer;
	exports.OverlayRef = OverlayRef;
	exports.OverlayState = OverlayState;
	exports.ConnectedOverlayDirective = ConnectedOverlayDirective;
	exports.OverlayOrigin = OverlayOrigin;
	exports.OverlayModule = OverlayModule;
	exports.ScrollDispatcher = ScrollDispatcher;
	exports.GestureConfig = GestureConfig;
	exports.MdRipple = MdRipple;
	exports.MdRippleModule = MdRippleModule;
	exports.LiveAnnouncer = LiveAnnouncer;
	exports.LIVE_ANNOUNCER_ELEMENT_TOKEN = LIVE_ANNOUNCER_ELEMENT_TOKEN;
	exports.MdLiveAnnouncer = LiveAnnouncer;
	exports.FocusTrap = FocusTrap;
	exports.InteractivityChecker = InteractivityChecker;
	exports.isFakeMousedownFromScreenReader = isFakeMousedownFromScreenReader;
	exports.A11yModule = A11yModule;
	exports.UniqueSelectionDispatcher = UniqueSelectionDispatcher;
	exports.MdUniqueSelectionDispatcher = UniqueSelectionDispatcher;
	exports.MdLineModule = MdLineModule;
	exports.MdLine = MdLine;
	exports.MdLineSetter = MdLineSetter;
	exports.applyCssTransform = applyCssTransform;
	exports.MdError = MdError;
	exports.coerceBooleanProperty = coerceBooleanProperty;
	exports.coerceNumberProperty = coerceNumberProperty;
	exports.DefaultStyleCompatibilityModeModule = DefaultStyleCompatibilityModeModule;
	exports.NoConflictStyleCompatibilityMode = NoConflictStyleCompatibilityMode;
	exports.DomProjectionHost = DomProjectionHost;
	exports.DomProjection = DomProjection;
	exports.ProjectionModule = ProjectionModule;
	exports.PlatformModule = PlatformModule;
	exports.Platform = Platform;
	exports.getSupportedInputTypes = getSupportedInputTypes;
	exports.ConnectedPositionStrategy = ConnectedPositionStrategy;
	exports.ConnectionPositionPair = ConnectionPositionPair;
	exports.ScrollableViewProperties = ScrollableViewProperties;
	exports.ConnectedOverlayPositionChange = ConnectedOverlayPositionChange;
	exports.UP_ARROW = UP_ARROW;
	exports.DOWN_ARROW = DOWN_ARROW;
	exports.RIGHT_ARROW = RIGHT_ARROW;
	exports.LEFT_ARROW = LEFT_ARROW;
	exports.PAGE_UP = PAGE_UP;
	exports.PAGE_DOWN = PAGE_DOWN;
	exports.HOME = HOME;
	exports.END = END;
	exports.ENTER = ENTER;
	exports.SPACE = SPACE;
	exports.TAB = TAB;
	exports.ESCAPE = ESCAPE;
	exports.BACKSPACE = BACKSPACE;
	exports.DELETE = DELETE;
	exports.MATERIAL_COMPATIBILITY_MODE = MATERIAL_COMPATIBILITY_MODE;
	exports.MAT_ELEMENTS_SELECTOR = MAT_ELEMENTS_SELECTOR;
	exports.MatPrefixEnforcer = MatPrefixEnforcer;
	exports.AnimationCurves = AnimationCurves;
	exports.AnimationDurations = AnimationDurations;
	exports.MaterialRootModule = MaterialRootModule;
	exports.MaterialModule = MaterialModule;
	exports.MdButton = MdButton;
	exports.MdAnchor = MdAnchor;
	exports.MdButtonModule = MdButtonModule;
	exports.MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR;
	exports.MdButtonToggleChange = MdButtonToggleChange;
	exports.MdButtonToggleGroup = MdButtonToggleGroup;
	exports.MdButtonToggleGroupMultiple = MdButtonToggleGroupMultiple;
	exports.MdButtonToggle = MdButtonToggle;
	exports.MdButtonToggleModule = MdButtonToggleModule;
	exports.MdCardContent = MdCardContent;
	exports.MdCardTitle = MdCardTitle;
	exports.MdCardSubtitle = MdCardSubtitle;
	exports.MdCardActions = MdCardActions;
	exports.MdCardFooter = MdCardFooter;
	exports.MdCard = MdCard;
	exports.MdCardHeader = MdCardHeader;
	exports.MdCardTitleGroup = MdCardTitleGroup;
	exports.MdCardModule = MdCardModule;
	exports.MdChipList = MdChipList;
	exports.MdChipsModule = MdChipsModule;
	exports.MdChip = MdChip;
	exports.MD_CHECKBOX_CONTROL_VALUE_ACCESSOR = MD_CHECKBOX_CONTROL_VALUE_ACCESSOR;
	exports.MdCheckboxChange = MdCheckboxChange;
	exports.MdCheckbox = MdCheckbox;
	exports.MdCheckboxModule = MdCheckboxModule;
	exports.MdDialogModule = MdDialogModule;
	exports.MdDialog = MdDialog;
	exports.MdDialogContainer = MdDialogContainer;
	exports.MdDialogClose = MdDialogClose;
	exports.MdDialogTitle = MdDialogTitle;
	exports.MdDialogContent = MdDialogContent;
	exports.MdDialogActions = MdDialogActions;
	exports.MdDialogConfig = MdDialogConfig;
	exports.MdDialogRef = MdDialogRef;
	exports.MdGridList = MdGridList;
	exports.MdGridListModule = MdGridListModule;
	exports.MdIconInvalidNameError = MdIconInvalidNameError;
	exports.MdIcon = MdIcon;
	exports.MdIconModule = MdIconModule;
	exports.MdIconRegistry = MdIconRegistry;
	exports.MdTextareaAutosize = MdTextareaAutosize;
	exports.MD_INPUT_CONTROL_VALUE_ACCESSOR = MD_INPUT_CONTROL_VALUE_ACCESSOR;
	exports.MdInputPlaceholderConflictError = MdInputPlaceholderConflictError;
	exports.MdInputUnsupportedTypeError = MdInputUnsupportedTypeError;
	exports.MdInputDuplicatedHintError = MdInputDuplicatedHintError;
	exports.MdInput = MdInput;
	exports.MdInputModule = MdInputModule;
	exports.MdPlaceholder = MdPlaceholder;
	exports.MdHint = MdHint;
	exports.MdInputDirective = MdInputDirective;
	exports.MdInputContainer = MdInputContainer;
	exports.MdInputContainerPlaceholderConflictError = MdInputContainerPlaceholderConflictError;
	exports.MdInputContainerUnsupportedTypeError = MdInputContainerUnsupportedTypeError;
	exports.MdInputContainerDuplicatedHintError = MdInputContainerDuplicatedHintError;
	exports.MdInputContainerMissingMdInputError = MdInputContainerMissingMdInputError;
	exports.MdListDivider = MdListDivider;
	exports.MdList = MdList;
	exports.MdListAvatar = MdListAvatar;
	exports.MdListItem = MdListItem;
	exports.MdListModule = MdListModule;
	exports.MdMenuTrigger = MdMenuTrigger;
	exports.fadeInItems = fadeInItems;
	exports.transformMenu = transformMenu;
	exports.MdMenu = MdMenu;
	exports.MdMenuItem = MdMenuItem;
	exports.MdMenuModule = MdMenuModule;
	exports.MdProgressBar = MdProgressBar;
	exports.MdProgressBarModule = MdProgressBarModule;
	exports.MdProgressCircle = MdProgressSpinner;
	exports.MdProgressCircleModule = MdProgressSpinnerModule;
	exports.MdProgressSpinner = MdProgressSpinner;
	exports.MdSpinner = MdSpinner;
	exports.MdProgressSpinnerModule = MdProgressSpinnerModule;
	exports.MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = MD_RADIO_GROUP_CONTROL_VALUE_ACCESSOR;
	exports.MdRadioChange = MdRadioChange;
	exports.MdRadioGroup = MdRadioGroup;
	exports.MdRadioButton = MdRadioButton;
	exports.MdRadioModule = MdRadioModule;
	exports.MdSelectModule = MdSelectModule;
	exports.MdOption = MdOption;
	exports.fadeInContent = fadeInContent;
	exports.transformPanel = transformPanel;
	exports.transformPlaceholder = transformPlaceholder;
	exports.SELECT_OPTION_HEIGHT = SELECT_OPTION_HEIGHT;
	exports.SELECT_PANEL_MAX_HEIGHT = SELECT_PANEL_MAX_HEIGHT;
	exports.SELECT_MAX_OPTIONS_DISPLAYED = SELECT_MAX_OPTIONS_DISPLAYED;
	exports.SELECT_TRIGGER_HEIGHT = SELECT_TRIGGER_HEIGHT;
	exports.SELECT_OPTION_HEIGHT_ADJUSTMENT = SELECT_OPTION_HEIGHT_ADJUSTMENT;
	exports.SELECT_PANEL_PADDING_X = SELECT_PANEL_PADDING_X;
	exports.SELECT_PANEL_PADDING_Y = SELECT_PANEL_PADDING_Y;
	exports.SELECT_PANEL_VIEWPORT_PADDING = SELECT_PANEL_VIEWPORT_PADDING;
	exports.MdSelect = MdSelect;
	exports.MdDuplicatedSidenavError = MdDuplicatedSidenavError;
	exports.MdSidenavToggleResult = MdSidenavToggleResult;
	exports.MdSidenav = MdSidenav;
	exports.MdSidenavContainer = MdSidenavContainer;
	exports.MdSidenavModule = MdSidenavModule;
	exports.MD_SLIDER_VALUE_ACCESSOR = MD_SLIDER_VALUE_ACCESSOR;
	exports.MdSliderChange = MdSliderChange;
	exports.MdSlider = MdSlider;
	exports.SliderRenderer = SliderRenderer;
	exports.MdSliderModule = MdSliderModule;
	exports.MD_SLIDE_TOGGLE_VALUE_ACCESSOR = MD_SLIDE_TOGGLE_VALUE_ACCESSOR;
	exports.MdSlideToggleChange = MdSlideToggleChange;
	exports.MdSlideToggle = MdSlideToggle;
	exports.MdSlideToggleModule = MdSlideToggleModule;
	exports.MdSnackBar = MdSnackBar;
	exports.MdSnackBarModule = MdSnackBarModule;
	exports.SHOW_ANIMATION = SHOW_ANIMATION;
	exports.HIDE_ANIMATION = HIDE_ANIMATION;
	exports.MdSnackBarContainer = MdSnackBarContainer;
	exports.MdSnackBarConfig = MdSnackBarConfig;
	exports.MdSnackBarRef = MdSnackBarRef;
	exports.MdInkBar = MdInkBar;
	exports.MdTabBody = MdTabBody;
	exports.MdTabHeader = MdTabHeader;
	exports.MdTabLabelWrapper = MdTabLabelWrapper;
	exports.MdTab = MdTab;
	exports.MdTabLabel = MdTabLabel;
	exports.MdTabChangeEvent = MdTabChangeEvent;
	exports.MdTabGroup = MdTabGroup;
	exports.MdTabsModule = MdTabsModule;
	exports.MdTabNavBar = MdTabNavBar;
	exports.MdTabLink = MdTabLink;
	exports.MdTabLinkRipple = MdTabLinkRipple;
	exports.MdToolbarRow = MdToolbarRow;
	exports.MdToolbar = MdToolbar;
	exports.MdToolbarModule = MdToolbarModule;
	exports.TOUCHEND_HIDE_DELAY = TOUCHEND_HIDE_DELAY;
	exports.MdTooltip = MdTooltip;
	exports.TooltipComponent = TooltipComponent;
	exports.MdTooltipModule = MdTooltipModule;
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	})));


/***/ },
/* 334 */
/***/ function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory(__webpack_require__(3), __webpack_require__(51), __webpack_require__(68), __webpack_require__(315), __webpack_require__(319), __webpack_require__(322));
		else if(typeof define === 'function' && define.amd)
			define(["@angular/core", "@angular/common", "@angular/forms", "rxjs/observable/fromEvent", "rxjs/operator/do", "rxjs/operator/let"], factory);
		else if(typeof exports === 'object')
			exports["ngb"] = factory(require("@angular/core"), require("@angular/common"), require("@angular/forms"), require("rxjs/observable/fromEvent"), require("rxjs/operator/do"), require("rxjs/operator/let"));
		else
			root["ngb"] = factory(root["ng"]["core"], root["ng"]["common"], root["ng"]["forms"], root["Rx"], root["Rx"], root["Rx"]);
	})(this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_72__, __WEBPACK_EXTERNAL_MODULE_73__, __WEBPACK_EXTERNAL_MODULE_74__) {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;
	/******/
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// identity function for calling harmony imports with the correct context
	/******/ 	__webpack_require__.i = function(value) { return value; };
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, {
	/******/ 				configurable: false,
	/******/ 				enumerable: true,
	/******/ 				get: getter
	/******/ 			});
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 75);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ (function(module, exports) {
	
	module.exports = __WEBPACK_EXTERNAL_MODULE_0__;
	
	/***/ }),
	/* 1 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	function toInteger(value) {
	    return parseInt("" + value, 10);
	}
	exports.toInteger = toInteger;
	function toString(value) {
	    return (value !== undefined && value !== null) ? "" + value : '';
	}
	exports.toString = toString;
	function getValueInRange(value, max, min) {
	    if (min === void 0) { min = 0; }
	    return Math.max(Math.min(value, max), min);
	}
	exports.getValueInRange = getValueInRange;
	function isString(value) {
	    return typeof value === 'string';
	}
	exports.isString = isString;
	function isNumber(value) {
	    return !isNaN(toInteger(value));
	}
	exports.isNumber = isNumber;
	function isDefined(value) {
	    return value !== undefined && value !== null;
	}
	exports.isDefined = isDefined;
	function padNumber(value) {
	    if (isNumber(value)) {
	        return ("0" + value).slice(-2);
	    }
	    else {
	        return '';
	    }
	}
	exports.padNumber = padNumber;
	function regExpEscape(text) {
	    return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
	}
	exports.regExpEscape = regExpEscape;
	//# sourceMappingURL=util.js.map
	
	/***/ }),
	/* 2 */
	/***/ (function(module, exports) {
	
	module.exports = __WEBPACK_EXTERNAL_MODULE_2__;
	
	/***/ }),
	/* 3 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var NgbDate = (function () {
	    function NgbDate(year, month, day) {
	        this.year = year;
	        this.month = month;
	        this.day = day;
	    }
	    NgbDate.from = function (date) {
	        return date ? new NgbDate(date.year, date.month, date.day ? date.day : 1) : null;
	    };
	    NgbDate.prototype.equals = function (other) {
	        return other && this.year === other.year && this.month === other.month && this.day === other.day;
	    };
	    NgbDate.prototype.before = function (other) {
	        if (!other) {
	            return false;
	        }
	        if (this.year === other.year) {
	            if (this.month === other.month) {
	                return this.day === other.day ? false : this.day < other.day;
	            }
	            else {
	                return this.month < other.month;
	            }
	        }
	        else {
	            return this.year < other.year;
	        }
	    };
	    NgbDate.prototype.after = function (other) {
	        if (!other) {
	            return false;
	        }
	        if (this.year === other.year) {
	            if (this.month === other.month) {
	                return this.day === other.day ? false : this.day > other.day;
	            }
	            else {
	                return this.month > other.month;
	            }
	        }
	        else {
	            return this.year > other.year;
	        }
	    };
	    NgbDate.prototype.toString = function () { return this.year + "-" + this.month + "-" + this.day; };
	    return NgbDate;
	}());
	exports.NgbDate = NgbDate;
	//# sourceMappingURL=ngb-date.js.map
	
	/***/ }),
	/* 4 */
	/***/ (function(module, exports) {
	
	module.exports = __WEBPACK_EXTERNAL_MODULE_4__;
	
	/***/ }),
	/* 5 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var WEEKDAYS_SHORT = ['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su'];
	var MONTHS_SHORT = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
	var MONTHS_FULL = [
	    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November',
	    'December'
	];
	/**
	 * Type of the service supplying month and weekday names to to NgbDatepicker component.
	 * See the i18n demo for how to extend this class and define a custom provider for i18n.
	 */
	var NgbDatepickerI18n = (function () {
	    function NgbDatepickerI18n() {
	    }
	    NgbDatepickerI18n = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], NgbDatepickerI18n);
	    return NgbDatepickerI18n;
	}());
	exports.NgbDatepickerI18n = NgbDatepickerI18n;
	var NgbDatepickerI18nDefault = (function (_super) {
	    __extends(NgbDatepickerI18nDefault, _super);
	    function NgbDatepickerI18nDefault() {
	        _super.apply(this, arguments);
	    }
	    NgbDatepickerI18nDefault.prototype.getWeekdayShortName = function (weekday) { return WEEKDAYS_SHORT[weekday - 1]; };
	    NgbDatepickerI18nDefault.prototype.getMonthShortName = function (month) { return MONTHS_SHORT[month - 1]; };
	    NgbDatepickerI18nDefault.prototype.getMonthFullName = function (month) { return MONTHS_FULL[month - 1]; };
	    NgbDatepickerI18nDefault = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], NgbDatepickerI18nDefault);
	    return NgbDatepickerI18nDefault;
	}(NgbDatepickerI18n));
	exports.NgbDatepickerI18nDefault = NgbDatepickerI18nDefault;
	//# sourceMappingURL=datepicker-i18n.js.map
	
	/***/ }),
	/* 6 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var ngb_date_1 = __webpack_require__(3);
	var core_1 = __webpack_require__(0);
	var util_1 = __webpack_require__(1);
	function fromJSDate(jsDate) {
	    return new ngb_date_1.NgbDate(jsDate.getFullYear(), jsDate.getMonth() + 1, jsDate.getDate());
	}
	function toJSDate(date) {
	    var jsDate = new Date(date.year, date.month - 1, date.day);
	    // this is done avoid 30 -> 1930 conversion
	    if (!isNaN(jsDate.getTime())) {
	        jsDate.setFullYear(date.year);
	    }
	    return jsDate;
	}
	var NgbCalendar = (function () {
	    function NgbCalendar() {
	    }
	    NgbCalendar = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], NgbCalendar);
	    return NgbCalendar;
	}());
	exports.NgbCalendar = NgbCalendar;
	var NgbCalendarGregorian = (function (_super) {
	    __extends(NgbCalendarGregorian, _super);
	    function NgbCalendarGregorian() {
	        _super.apply(this, arguments);
	    }
	    NgbCalendarGregorian.prototype.getDaysPerWeek = function () { return 7; };
	    NgbCalendarGregorian.prototype.getMonths = function () { return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]; };
	    NgbCalendarGregorian.prototype.getWeeksPerMonth = function () { return 6; };
	    NgbCalendarGregorian.prototype.getNext = function (date, period, number) {
	        if (period === void 0) { period = 'd'; }
	        if (number === void 0) { number = 1; }
	        var jsDate = toJSDate(date);
	        switch (period) {
	            case 'y':
	                return new ngb_date_1.NgbDate(date.year + number, 1, 1);
	            case 'm':
	                jsDate = new Date(date.year, date.month + number - 1, 1);
	                break;
	            case 'd':
	                jsDate.setDate(jsDate.getDate() + number);
	                break;
	            default:
	                return date;
	        }
	        return fromJSDate(jsDate);
	    };
	    NgbCalendarGregorian.prototype.getPrev = function (date, period, number) {
	        if (period === void 0) { period = 'd'; }
	        if (number === void 0) { number = 1; }
	        return this.getNext(date, period, -number);
	    };
	    NgbCalendarGregorian.prototype.getWeekday = function (date) {
	        var jsDate = toJSDate(date);
	        var day = jsDate.getDay();
	        // in JS Date Sun=0, in ISO 8601 Sun=7
	        return day === 0 ? 7 : day;
	    };
	    NgbCalendarGregorian.prototype.getWeekNumber = function (week, firstDayOfWeek) {
	        // in JS Date Sun=0, in ISO 8601 Sun=7
	        if (firstDayOfWeek === 7) {
	            firstDayOfWeek = 0;
	        }
	        var thursdayIndex = (4 + 7 - firstDayOfWeek) % 7;
	        var date = week[thursdayIndex];
	        var jsDate = toJSDate(date);
	        jsDate.setDate(jsDate.getDate() + 4 - (jsDate.getDay() || 7)); // Thursday
	        var time = jsDate.getTime();
	        jsDate.setMonth(0); // Compare with Jan 1
	        jsDate.setDate(1);
	        return Math.floor(Math.round((time - jsDate.getTime()) / 86400000) / 7) + 1;
	    };
	    NgbCalendarGregorian.prototype.getToday = function () { return fromJSDate(new Date()); };
	    NgbCalendarGregorian.prototype.isValid = function (date) {
	        return date && util_1.isNumber(date.year) && util_1.isNumber(date.month) && util_1.isNumber(date.day) &&
	            !isNaN(toJSDate(date).getTime());
	    };
	    NgbCalendarGregorian = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], NgbCalendarGregorian);
	    return NgbCalendarGregorian;
	}(NgbCalendar));
	exports.NgbCalendarGregorian = NgbCalendarGregorian;
	//# sourceMappingURL=ngb-calendar.js.map
	
	/***/ }),
	/* 7 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var core_1 = __webpack_require__(0);
	var ContentRef = (function () {
	    function ContentRef(nodes, viewRef, componentRef) {
	        this.nodes = nodes;
	        this.viewRef = viewRef;
	        this.componentRef = componentRef;
	    }
	    return ContentRef;
	}());
	exports.ContentRef = ContentRef;
	var PopupService = (function () {
	    function PopupService(type, _injector, _viewContainerRef, _renderer, componentFactoryResolver) {
	        this._injector = _injector;
	        this._viewContainerRef = _viewContainerRef;
	        this._renderer = _renderer;
	        this._windowFactory = componentFactoryResolver.resolveComponentFactory(type);
	    }
	    PopupService.prototype.open = function (content, context) {
	        if (!this._windowRef) {
	            this._contentRef = this._getContentRef(content, context);
	            this._windowRef =
	                this._viewContainerRef.createComponent(this._windowFactory, 0, this._injector, this._contentRef.nodes);
	        }
	        return this._windowRef;
	    };
	    PopupService.prototype.close = function () {
	        if (this._windowRef) {
	            this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._windowRef.hostView));
	            this._windowRef = null;
	            if (this._contentRef.viewRef) {
	                this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._contentRef.viewRef));
	                this._contentRef = null;
	            }
	        }
	    };
	    PopupService.prototype._getContentRef = function (content, context) {
	        if (!content) {
	            return new ContentRef([]);
	        }
	        else if (content instanceof core_1.TemplateRef) {
	            var viewRef = this._viewContainerRef.createEmbeddedView(content, context);
	            return new ContentRef([viewRef.rootNodes], viewRef);
	        }
	        else {
	            return new ContentRef([[this._renderer.createText(null, "" + content)]]);
	        }
	    };
	    return PopupService;
	}());
	exports.PopupService = PopupService;
	//# sourceMappingURL=popup.js.map
	
	/***/ }),
	/* 8 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	// previous version:
	// https://github.com/angular-ui/bootstrap/blob/07c31d0731f7cb068a1932b8e01d2312b796b4ec/src/position/position.js
	var Positioning = (function () {
	    function Positioning() {
	    }
	    Positioning.prototype.getStyle = function (element, prop) { return window.getComputedStyle(element)[prop]; };
	    Positioning.prototype.isStaticPositioned = function (element) {
	        return (this.getStyle(element, 'position') || 'static') === 'static';
	    };
	    Positioning.prototype.offsetParent = function (element) {
	        var offsetParentEl = element.offsetParent || document.documentElement;
	        while (offsetParentEl && offsetParentEl !== document.documentElement && this.isStaticPositioned(offsetParentEl)) {
	            offsetParentEl = offsetParentEl.offsetParent;
	        }
	        return offsetParentEl || document.documentElement;
	    };
	    Positioning.prototype.position = function (element, round) {
	        if (round === void 0) { round = true; }
	        var elPosition;
	        var parentOffset = { width: 0, height: 0, top: 0, bottom: 0, left: 0, right: 0 };
	        if (this.getStyle(element, 'position') === 'fixed') {
	            elPosition = element.getBoundingClientRect();
	        }
	        else {
	            var offsetParentEl = this.offsetParent(element);
	            elPosition = this.offset(element, false);
	            if (offsetParentEl !== document.documentElement) {
	                parentOffset = this.offset(offsetParentEl, false);
	            }
	            parentOffset.top += offsetParentEl.clientTop;
	            parentOffset.left += offsetParentEl.clientLeft;
	        }
	        elPosition.top -= parentOffset.top;
	        elPosition.bottom -= parentOffset.top;
	        elPosition.left -= parentOffset.left;
	        elPosition.right -= parentOffset.left;
	        if (round) {
	            elPosition.top = Math.round(elPosition.top);
	            elPosition.bottom = Math.round(elPosition.bottom);
	            elPosition.left = Math.round(elPosition.left);
	            elPosition.right = Math.round(elPosition.right);
	        }
	        return elPosition;
	    };
	    Positioning.prototype.offset = function (element, round) {
	        if (round === void 0) { round = true; }
	        var elBcr = element.getBoundingClientRect();
	        var viewportOffset = {
	            top: window.pageYOffset - document.documentElement.clientTop,
	            left: window.pageXOffset - document.documentElement.clientLeft
	        };
	        var elOffset = {
	            height: elBcr.height || element.offsetHeight,
	            width: elBcr.width || element.offsetWidth,
	            top: elBcr.top + viewportOffset.top,
	            bottom: elBcr.bottom + viewportOffset.top,
	            left: elBcr.left + viewportOffset.left,
	            right: elBcr.right + viewportOffset.left
	        };
	        if (round) {
	            elOffset.height = Math.round(elOffset.height);
	            elOffset.width = Math.round(elOffset.width);
	            elOffset.top = Math.round(elOffset.top);
	            elOffset.bottom = Math.round(elOffset.bottom);
	            elOffset.left = Math.round(elOffset.left);
	            elOffset.right = Math.round(elOffset.right);
	        }
	        return elOffset;
	    };
	    Positioning.prototype.positionElements = function (hostElement, targetElement, placement, appendToBody) {
	        var hostElPosition = appendToBody ? this.offset(hostElement, false) : this.position(hostElement, false);
	        var shiftWidth = {
	            left: hostElPosition.left,
	            center: hostElPosition.left + hostElPosition.width / 2 - targetElement.offsetWidth / 2,
	            right: hostElPosition.left + hostElPosition.width
	        };
	        var shiftHeight = {
	            top: hostElPosition.top,
	            center: hostElPosition.top + hostElPosition.height / 2 - targetElement.offsetHeight / 2,
	            bottom: hostElPosition.top + hostElPosition.height
	        };
	        var targetElBCR = targetElement.getBoundingClientRect();
	        var placementPrimary = placement.split('-')[0] || 'top';
	        var placementSecondary = placement.split('-')[1] || 'center';
	        var targetElPosition = {
	            height: targetElBCR.height || targetElement.offsetHeight,
	            width: targetElBCR.width || targetElement.offsetWidth,
	            top: 0,
	            bottom: targetElBCR.height || targetElement.offsetHeight,
	            left: 0,
	            right: targetElBCR.width || targetElement.offsetWidth
	        };
	        switch (placementPrimary) {
	            case 'top':
	                targetElPosition.top = hostElPosition.top - targetElement.offsetHeight;
	                targetElPosition.bottom += hostElPosition.top - targetElement.offsetHeight;
	                targetElPosition.left = shiftWidth[placementSecondary];
	                targetElPosition.right += shiftWidth[placementSecondary];
	                break;
	            case 'bottom':
	                targetElPosition.top = shiftHeight[placementPrimary];
	                targetElPosition.bottom += shiftHeight[placementPrimary];
	                targetElPosition.left = shiftWidth[placementSecondary];
	                targetElPosition.right += shiftWidth[placementSecondary];
	                break;
	            case 'left':
	                targetElPosition.top = shiftHeight[placementSecondary];
	                targetElPosition.bottom += shiftHeight[placementSecondary];
	                targetElPosition.left = hostElPosition.left - targetElement.offsetWidth;
	                targetElPosition.right += hostElPosition.left - targetElement.offsetWidth;
	                break;
	            case 'right':
	                targetElPosition.top = shiftHeight[placementSecondary];
	                targetElPosition.bottom += shiftHeight[placementSecondary];
	                targetElPosition.left = shiftWidth[placementPrimary];
	                targetElPosition.right += shiftWidth[placementPrimary];
	                break;
	        }
	        targetElPosition.top = Math.round(targetElPosition.top);
	        targetElPosition.bottom = Math.round(targetElPosition.bottom);
	        targetElPosition.left = Math.round(targetElPosition.left);
	        targetElPosition.right = Math.round(targetElPosition.right);
	        return targetElPosition;
	    };
	    return Positioning;
	}());
	exports.Positioning = Positioning;
	var positionService = new Positioning();
	function positionElements(hostElement, targetElement, placement, appendToBody) {
	    var pos = positionService.positionElements(hostElement, targetElement, placement, appendToBody);
	    targetElement.style.top = pos.top + "px";
	    targetElement.style.left = pos.left + "px";
	}
	exports.positionElements = positionElements;
	//# sourceMappingURL=positioning.js.map
	
	/***/ }),
	/* 9 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var common_1 = __webpack_require__(2);
	var accordion_1 = __webpack_require__(43);
	var accordion_config_1 = __webpack_require__(25);
	var accordion_2 = __webpack_require__(43);
	exports.NgbAccordion = accordion_2.NgbAccordion;
	exports.NgbPanel = accordion_2.NgbPanel;
	exports.NgbPanelTitle = accordion_2.NgbPanelTitle;
	exports.NgbPanelContent = accordion_2.NgbPanelContent;
	var accordion_config_2 = __webpack_require__(25);
	exports.NgbAccordionConfig = accordion_config_2.NgbAccordionConfig;
	var NGB_ACCORDION_DIRECTIVES = [accordion_1.NgbAccordion, accordion_1.NgbPanel, accordion_1.NgbPanelTitle, accordion_1.NgbPanelContent];
	var NgbAccordionModule = (function () {
	    function NgbAccordionModule() {
	    }
	    NgbAccordionModule.forRoot = function () { return { ngModule: NgbAccordionModule, providers: [accordion_config_1.NgbAccordionConfig] }; };
	    NgbAccordionModule = __decorate([
	        core_1.NgModule({ declarations: NGB_ACCORDION_DIRECTIVES, exports: NGB_ACCORDION_DIRECTIVES, imports: [common_1.CommonModule] }), 
	        __metadata('design:paramtypes', [])
	    ], NgbAccordionModule);
	    return NgbAccordionModule;
	}());
	exports.NgbAccordionModule = NgbAccordionModule;
	//# sourceMappingURL=accordion.module.js.map
	
	/***/ }),
	/* 10 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var common_1 = __webpack_require__(2);
	var alert_1 = __webpack_require__(44);
	var alert_config_1 = __webpack_require__(26);
	var alert_2 = __webpack_require__(44);
	exports.NgbAlert = alert_2.NgbAlert;
	var alert_config_2 = __webpack_require__(26);
	exports.NgbAlertConfig = alert_config_2.NgbAlertConfig;
	var NgbAlertModule = (function () {
	    function NgbAlertModule() {
	    }
	    NgbAlertModule.forRoot = function () { return { ngModule: NgbAlertModule, providers: [alert_config_1.NgbAlertConfig] }; };
	    NgbAlertModule = __decorate([
	        core_1.NgModule({ declarations: [alert_1.NgbAlert], exports: [alert_1.NgbAlert], imports: [common_1.CommonModule], entryComponents: [alert_1.NgbAlert] }), 
	        __metadata('design:paramtypes', [])
	    ], NgbAlertModule);
	    return NgbAlertModule;
	}());
	exports.NgbAlertModule = NgbAlertModule;
	//# sourceMappingURL=alert.module.js.map
	
	/***/ }),
	/* 11 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var radio_1 = __webpack_require__(45);
	var radio_2 = __webpack_require__(45);
	exports.NgbRadio = radio_2.NgbRadio;
	exports.NgbActiveLabel = radio_2.NgbActiveLabel;
	exports.NgbRadioGroup = radio_2.NgbRadioGroup;
	var NGB_RADIO_DIRECTIVES = [radio_1.NgbRadio, radio_1.NgbActiveLabel, radio_1.NgbRadioGroup];
	var NgbButtonsModule = (function () {
	    function NgbButtonsModule() {
	    }
	    NgbButtonsModule.forRoot = function () { return { ngModule: NgbButtonsModule, providers: [] }; };
	    NgbButtonsModule = __decorate([
	        core_1.NgModule({ declarations: NGB_RADIO_DIRECTIVES, exports: NGB_RADIO_DIRECTIVES }), 
	        __metadata('design:paramtypes', [])
	    ], NgbButtonsModule);
	    return NgbButtonsModule;
	}());
	exports.NgbButtonsModule = NgbButtonsModule;
	//# sourceMappingURL=radio.module.js.map
	
	/***/ }),
	/* 12 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var common_1 = __webpack_require__(2);
	var carousel_1 = __webpack_require__(46);
	var carousel_config_1 = __webpack_require__(27);
	var carousel_2 = __webpack_require__(46);
	exports.NgbCarousel = carousel_2.NgbCarousel;
	exports.NgbSlide = carousel_2.NgbSlide;
	var carousel_config_2 = __webpack_require__(27);
	exports.NgbCarouselConfig = carousel_config_2.NgbCarouselConfig;
	var NgbCarouselModule = (function () {
	    function NgbCarouselModule() {
	    }
	    NgbCarouselModule.forRoot = function () { return { ngModule: NgbCarouselModule, providers: [carousel_config_1.NgbCarouselConfig] }; };
	    NgbCarouselModule = __decorate([
	        core_1.NgModule({ declarations: carousel_1.NGB_CAROUSEL_DIRECTIVES, exports: carousel_1.NGB_CAROUSEL_DIRECTIVES, imports: [common_1.CommonModule] }), 
	        __metadata('design:paramtypes', [])
	    ], NgbCarouselModule);
	    return NgbCarouselModule;
	}());
	exports.NgbCarouselModule = NgbCarouselModule;
	//# sourceMappingURL=carousel.module.js.map
	
	/***/ }),
	/* 13 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var collapse_1 = __webpack_require__(47);
	var collapse_2 = __webpack_require__(47);
	exports.NgbCollapse = collapse_2.NgbCollapse;
	var NgbCollapseModule = (function () {
	    function NgbCollapseModule() {
	    }
	    NgbCollapseModule.forRoot = function () { return { ngModule: NgbCollapseModule, providers: [] }; };
	    NgbCollapseModule = __decorate([
	        core_1.NgModule({ declarations: [collapse_1.NgbCollapse], exports: [collapse_1.NgbCollapse] }), 
	        __metadata('design:paramtypes', [])
	    ], NgbCollapseModule);
	    return NgbCollapseModule;
	}());
	exports.NgbCollapseModule = NgbCollapseModule;
	//# sourceMappingURL=collapse.module.js.map
	
	/***/ }),
	/* 14 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var common_1 = __webpack_require__(2);
	var datepicker_1 = __webpack_require__(30);
	var datepicker_month_view_1 = __webpack_require__(50);
	var datepicker_navigation_1 = __webpack_require__(52);
	var datepicker_input_1 = __webpack_require__(49);
	var forms_1 = __webpack_require__(4);
	var datepicker_day_view_1 = __webpack_require__(48);
	var datepicker_i18n_1 = __webpack_require__(5);
	var ngb_calendar_1 = __webpack_require__(6);
	var ngb_date_parser_formatter_1 = __webpack_require__(31);
	var datepicker_service_1 = __webpack_require__(29);
	var datepicker_navigation_select_1 = __webpack_require__(51);
	var datepicker_config_1 = __webpack_require__(28);
	var datepicker_2 = __webpack_require__(30);
	exports.NgbDatepicker = datepicker_2.NgbDatepicker;
	var datepicker_input_2 = __webpack_require__(49);
	exports.NgbInputDatepicker = datepicker_input_2.NgbInputDatepicker;
	var datepicker_month_view_2 = __webpack_require__(50);
	exports.NgbDatepickerMonthView = datepicker_month_view_2.NgbDatepickerMonthView;
	var datepicker_day_view_2 = __webpack_require__(48);
	exports.NgbDatepickerDayView = datepicker_day_view_2.NgbDatepickerDayView;
	var datepicker_navigation_2 = __webpack_require__(52);
	exports.NgbDatepickerNavigation = datepicker_navigation_2.NgbDatepickerNavigation;
	var datepicker_navigation_select_2 = __webpack_require__(51);
	exports.NgbDatepickerNavigationSelect = datepicker_navigation_select_2.NgbDatepickerNavigationSelect;
	var datepicker_config_2 = __webpack_require__(28);
	exports.NgbDatepickerConfig = datepicker_config_2.NgbDatepickerConfig;
	var datepicker_i18n_2 = __webpack_require__(5);
	exports.NgbDatepickerI18n = datepicker_i18n_2.NgbDatepickerI18n;
	var ngb_date_parser_formatter_2 = __webpack_require__(31);
	exports.NgbDateParserFormatter = ngb_date_parser_formatter_2.NgbDateParserFormatter;
	var NgbDatepickerModule = (function () {
	    function NgbDatepickerModule() {
	    }
	    NgbDatepickerModule.forRoot = function () {
	        return {
	            ngModule: NgbDatepickerModule,
	            providers: [
	                { provide: ngb_calendar_1.NgbCalendar, useClass: ngb_calendar_1.NgbCalendarGregorian },
	                { provide: datepicker_i18n_1.NgbDatepickerI18n, useClass: datepicker_i18n_1.NgbDatepickerI18nDefault },
	                { provide: ngb_date_parser_formatter_1.NgbDateParserFormatter, useClass: ngb_date_parser_formatter_1.NgbDateISOParserFormatter }, datepicker_service_1.NgbDatepickerService,
	                datepicker_config_1.NgbDatepickerConfig
	            ]
	        };
	    };
	    NgbDatepickerModule = __decorate([
	        core_1.NgModule({
	            declarations: [
	                datepicker_1.NgbDatepicker, datepicker_month_view_1.NgbDatepickerMonthView, datepicker_navigation_1.NgbDatepickerNavigation, datepicker_navigation_select_1.NgbDatepickerNavigationSelect, datepicker_day_view_1.NgbDatepickerDayView,
	                datepicker_input_1.NgbInputDatepicker
	            ],
	            exports: [datepicker_1.NgbDatepicker, datepicker_input_1.NgbInputDatepicker],
	            imports: [common_1.CommonModule, forms_1.FormsModule],
	            entryComponents: [datepicker_1.NgbDatepicker]
	        }), 
	        __metadata('design:paramtypes', [])
	    ], NgbDatepickerModule);
	    return NgbDatepickerModule;
	}());
	exports.NgbDatepickerModule = NgbDatepickerModule;
	//# sourceMappingURL=datepicker.module.js.map
	
	/***/ }),
	/* 15 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var dropdown_1 = __webpack_require__(54);
	var dropdown_config_1 = __webpack_require__(32);
	var dropdown_2 = __webpack_require__(54);
	exports.NgbDropdown = dropdown_2.NgbDropdown;
	exports.NgbDropdownToggle = dropdown_2.NgbDropdownToggle;
	var dropdown_config_2 = __webpack_require__(32);
	exports.NgbDropdownConfig = dropdown_config_2.NgbDropdownConfig;
	var NGB_DROPDOWN_DIRECTIVES = [dropdown_1.NgbDropdownToggle, dropdown_1.NgbDropdown];
	var NgbDropdownModule = (function () {
	    function NgbDropdownModule() {
	    }
	    NgbDropdownModule.forRoot = function () { return { ngModule: NgbDropdownModule, providers: [dropdown_config_1.NgbDropdownConfig] }; };
	    NgbDropdownModule = __decorate([
	        core_1.NgModule({ declarations: NGB_DROPDOWN_DIRECTIVES, exports: NGB_DROPDOWN_DIRECTIVES }), 
	        __metadata('design:paramtypes', [])
	    ], NgbDropdownModule);
	    return NgbDropdownModule;
	}());
	exports.NgbDropdownModule = NgbDropdownModule;
	//# sourceMappingURL=dropdown.module.js.map
	
	/***/ }),
	/* 16 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var modal_container_1 = __webpack_require__(70);
	var modal_backdrop_1 = __webpack_require__(55);
	var modal_window_1 = __webpack_require__(58);
	var modal_stack_1 = __webpack_require__(33);
	var modal_1 = __webpack_require__(59);
	var modal_2 = __webpack_require__(59);
	exports.NgbModal = modal_2.NgbModal;
	var modal_ref_1 = __webpack_require__(57);
	exports.NgbModalRef = modal_ref_1.NgbModalRef;
	exports.NgbActiveModal = modal_ref_1.NgbActiveModal;
	var modal_dismiss_reasons_1 = __webpack_require__(56);
	exports.ModalDismissReasons = modal_dismiss_reasons_1.ModalDismissReasons;
	var NgbModalModule = (function () {
	    function NgbModalModule() {
	    }
	    NgbModalModule.forRoot = function () { return { ngModule: NgbModalModule, providers: [modal_1.NgbModal, modal_stack_1.NgbModalStack] }; };
	    NgbModalModule = __decorate([
	        core_1.NgModule({
	            declarations: [modal_container_1.NgbModalContainer, modal_backdrop_1.NgbModalBackdrop, modal_window_1.NgbModalWindow],
	            entryComponents: [modal_backdrop_1.NgbModalBackdrop, modal_window_1.NgbModalWindow],
	            providers: [modal_1.NgbModal],
	            exports: [modal_container_1.NgbModalContainer]
	        }), 
	        __metadata('design:paramtypes', [])
	    ], NgbModalModule);
	    return NgbModalModule;
	}());
	exports.NgbModalModule = NgbModalModule;
	//# sourceMappingURL=modal.module.js.map
	
	/***/ }),
	/* 17 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var common_1 = __webpack_require__(2);
	var pagination_1 = __webpack_require__(60);
	var pagination_config_1 = __webpack_require__(34);
	var pagination_2 = __webpack_require__(60);
	exports.NgbPagination = pagination_2.NgbPagination;
	var pagination_config_2 = __webpack_require__(34);
	exports.NgbPaginationConfig = pagination_config_2.NgbPaginationConfig;
	var NgbPaginationModule = (function () {
	    function NgbPaginationModule() {
	    }
	    NgbPaginationModule.forRoot = function () { return { ngModule: NgbPaginationModule, providers: [pagination_config_1.NgbPaginationConfig] }; };
	    NgbPaginationModule = __decorate([
	        core_1.NgModule({ declarations: [pagination_1.NgbPagination], exports: [pagination_1.NgbPagination], imports: [common_1.CommonModule] }), 
	        __metadata('design:paramtypes', [])
	    ], NgbPaginationModule);
	    return NgbPaginationModule;
	}());
	exports.NgbPaginationModule = NgbPaginationModule;
	//# sourceMappingURL=pagination.module.js.map
	
	/***/ }),
	/* 18 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var popover_1 = __webpack_require__(61);
	var popover_config_1 = __webpack_require__(35);
	var popover_2 = __webpack_require__(61);
	exports.NgbPopover = popover_2.NgbPopover;
	var popover_config_2 = __webpack_require__(35);
	exports.NgbPopoverConfig = popover_config_2.NgbPopoverConfig;
	var NgbPopoverModule = (function () {
	    function NgbPopoverModule() {
	    }
	    NgbPopoverModule.forRoot = function () { return { ngModule: NgbPopoverModule, providers: [popover_config_1.NgbPopoverConfig] }; };
	    NgbPopoverModule = __decorate([
	        core_1.NgModule({ declarations: [popover_1.NgbPopover, popover_1.NgbPopoverWindow], exports: [popover_1.NgbPopover], entryComponents: [popover_1.NgbPopoverWindow] }), 
	        __metadata('design:paramtypes', [])
	    ], NgbPopoverModule);
	    return NgbPopoverModule;
	}());
	exports.NgbPopoverModule = NgbPopoverModule;
	//# sourceMappingURL=popover.module.js.map
	
	/***/ }),
	/* 19 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var common_1 = __webpack_require__(2);
	var progressbar_1 = __webpack_require__(62);
	var progressbar_config_1 = __webpack_require__(36);
	var progressbar_2 = __webpack_require__(62);
	exports.NgbProgressbar = progressbar_2.NgbProgressbar;
	var progressbar_config_2 = __webpack_require__(36);
	exports.NgbProgressbarConfig = progressbar_config_2.NgbProgressbarConfig;
	var NgbProgressbarModule = (function () {
	    function NgbProgressbarModule() {
	    }
	    NgbProgressbarModule.forRoot = function () { return { ngModule: NgbProgressbarModule, providers: [progressbar_config_1.NgbProgressbarConfig] }; };
	    NgbProgressbarModule = __decorate([
	        core_1.NgModule({ declarations: [progressbar_1.NgbProgressbar], exports: [progressbar_1.NgbProgressbar], imports: [common_1.CommonModule] }), 
	        __metadata('design:paramtypes', [])
	    ], NgbProgressbarModule);
	    return NgbProgressbarModule;
	}());
	exports.NgbProgressbarModule = NgbProgressbarModule;
	//# sourceMappingURL=progressbar.module.js.map
	
	/***/ }),
	/* 20 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var common_1 = __webpack_require__(2);
	var rating_config_1 = __webpack_require__(37);
	var rating_1 = __webpack_require__(63);
	var rating_2 = __webpack_require__(63);
	exports.NgbRating = rating_2.NgbRating;
	var rating_config_2 = __webpack_require__(37);
	exports.NgbRatingConfig = rating_config_2.NgbRatingConfig;
	var NgbRatingModule = (function () {
	    function NgbRatingModule() {
	    }
	    NgbRatingModule.forRoot = function () { return { ngModule: NgbRatingModule, providers: [rating_config_1.NgbRatingConfig] }; };
	    NgbRatingModule = __decorate([
	        core_1.NgModule({ declarations: [rating_1.NgbRating], exports: [rating_1.NgbRating], imports: [common_1.CommonModule] }), 
	        __metadata('design:paramtypes', [])
	    ], NgbRatingModule);
	    return NgbRatingModule;
	}());
	exports.NgbRatingModule = NgbRatingModule;
	//# sourceMappingURL=rating.module.js.map
	
	/***/ }),
	/* 21 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var common_1 = __webpack_require__(2);
	var tabset_1 = __webpack_require__(64);
	var tabset_config_1 = __webpack_require__(38);
	var tabset_2 = __webpack_require__(64);
	exports.NgbTabset = tabset_2.NgbTabset;
	exports.NgbTab = tabset_2.NgbTab;
	exports.NgbTabContent = tabset_2.NgbTabContent;
	exports.NgbTabTitle = tabset_2.NgbTabTitle;
	var tabset_config_2 = __webpack_require__(38);
	exports.NgbTabsetConfig = tabset_config_2.NgbTabsetConfig;
	var NGB_TABSET_DIRECTIVES = [tabset_1.NgbTabset, tabset_1.NgbTab, tabset_1.NgbTabContent, tabset_1.NgbTabTitle];
	var NgbTabsetModule = (function () {
	    function NgbTabsetModule() {
	    }
	    NgbTabsetModule.forRoot = function () { return { ngModule: NgbTabsetModule, providers: [tabset_config_1.NgbTabsetConfig] }; };
	    NgbTabsetModule = __decorate([
	        core_1.NgModule({ declarations: NGB_TABSET_DIRECTIVES, exports: NGB_TABSET_DIRECTIVES, imports: [common_1.CommonModule] }), 
	        __metadata('design:paramtypes', [])
	    ], NgbTabsetModule);
	    return NgbTabsetModule;
	}());
	exports.NgbTabsetModule = NgbTabsetModule;
	//# sourceMappingURL=tabset.module.js.map
	
	/***/ }),
	/* 22 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var common_1 = __webpack_require__(2);
	var timepicker_1 = __webpack_require__(65);
	var timepicker_config_1 = __webpack_require__(39);
	var timepicker_2 = __webpack_require__(65);
	exports.NgbTimepicker = timepicker_2.NgbTimepicker;
	var timepicker_config_2 = __webpack_require__(39);
	exports.NgbTimepickerConfig = timepicker_config_2.NgbTimepickerConfig;
	var NgbTimepickerModule = (function () {
	    function NgbTimepickerModule() {
	    }
	    NgbTimepickerModule.forRoot = function () { return { ngModule: NgbTimepickerModule, providers: [timepicker_config_1.NgbTimepickerConfig] }; };
	    NgbTimepickerModule = __decorate([
	        core_1.NgModule({ declarations: [timepicker_1.NgbTimepicker], exports: [timepicker_1.NgbTimepicker], imports: [common_1.CommonModule] }), 
	        __metadata('design:paramtypes', [])
	    ], NgbTimepickerModule);
	    return NgbTimepickerModule;
	}());
	exports.NgbTimepickerModule = NgbTimepickerModule;
	//# sourceMappingURL=timepicker.module.js.map
	
	/***/ }),
	/* 23 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var tooltip_1 = __webpack_require__(66);
	var tooltip_config_1 = __webpack_require__(40);
	var tooltip_config_2 = __webpack_require__(40);
	exports.NgbTooltipConfig = tooltip_config_2.NgbTooltipConfig;
	var tooltip_2 = __webpack_require__(66);
	exports.NgbTooltip = tooltip_2.NgbTooltip;
	var NgbTooltipModule = (function () {
	    function NgbTooltipModule() {
	    }
	    NgbTooltipModule.forRoot = function () { return { ngModule: NgbTooltipModule, providers: [tooltip_config_1.NgbTooltipConfig] }; };
	    NgbTooltipModule = __decorate([
	        core_1.NgModule({ declarations: [tooltip_1.NgbTooltip, tooltip_1.NgbTooltipWindow], exports: [tooltip_1.NgbTooltip], entryComponents: [tooltip_1.NgbTooltipWindow] }), 
	        __metadata('design:paramtypes', [])
	    ], NgbTooltipModule);
	    return NgbTooltipModule;
	}());
	exports.NgbTooltipModule = NgbTooltipModule;
	//# sourceMappingURL=tooltip.module.js.map
	
	/***/ }),
	/* 24 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var common_1 = __webpack_require__(2);
	var highlight_1 = __webpack_require__(67);
	var typeahead_window_1 = __webpack_require__(42);
	var typeahead_1 = __webpack_require__(68);
	var typeahead_config_1 = __webpack_require__(41);
	var highlight_2 = __webpack_require__(67);
	exports.NgbHighlight = highlight_2.NgbHighlight;
	var typeahead_window_2 = __webpack_require__(42);
	exports.NgbTypeaheadWindow = typeahead_window_2.NgbTypeaheadWindow;
	var typeahead_config_2 = __webpack_require__(41);
	exports.NgbTypeaheadConfig = typeahead_config_2.NgbTypeaheadConfig;
	var typeahead_2 = __webpack_require__(68);
	exports.NgbTypeahead = typeahead_2.NgbTypeahead;
	var NgbTypeaheadModule = (function () {
	    function NgbTypeaheadModule() {
	    }
	    NgbTypeaheadModule.forRoot = function () { return { ngModule: NgbTypeaheadModule, providers: [typeahead_config_1.NgbTypeaheadConfig] }; };
	    NgbTypeaheadModule = __decorate([
	        core_1.NgModule({
	            declarations: [typeahead_1.NgbTypeahead, highlight_1.NgbHighlight, typeahead_window_1.NgbTypeaheadWindow],
	            exports: [typeahead_1.NgbTypeahead],
	            imports: [common_1.CommonModule],
	            entryComponents: [typeahead_window_1.NgbTypeaheadWindow]
	        }), 
	        __metadata('design:paramtypes', [])
	    ], NgbTypeaheadModule);
	    return NgbTypeaheadModule;
	}());
	exports.NgbTypeaheadModule = NgbTypeaheadModule;
	//# sourceMappingURL=typeahead.module.js.map
	
	/***/ }),
	/* 25 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	/**
	 * Configuration service for the NgbAccordion component.
	 * You can inject this service, typically in your root component, and customize the values of its properties in
	 * order to provide default values for all the accordions used in the application.
	 */
	var NgbAccordionConfig = (function () {
	    function NgbAccordionConfig() {
	        this.closeOthers = false;
	    }
	    NgbAccordionConfig = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], NgbAccordionConfig);
	    return NgbAccordionConfig;
	}());
	exports.NgbAccordionConfig = NgbAccordionConfig;
	//# sourceMappingURL=accordion-config.js.map
	
	/***/ }),
	/* 26 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	/**
	 * Configuration service for the NgbAlert component.
	 * You can inject this service, typically in your root component, and customize the values of its properties in
	 * order to provide default values for all the alerts used in the application.
	 */
	var NgbAlertConfig = (function () {
	    function NgbAlertConfig() {
	        this.dismissible = true;
	        this.type = 'warning';
	    }
	    NgbAlertConfig = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], NgbAlertConfig);
	    return NgbAlertConfig;
	}());
	exports.NgbAlertConfig = NgbAlertConfig;
	//# sourceMappingURL=alert-config.js.map
	
	/***/ }),
	/* 27 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	/**
	 * Configuration service for the NgbCarousel component.
	 * You can inject this service, typically in your root component, and customize the values of its properties in
	 * order to provide default values for all the carousels used in the application.
	 */
	var NgbCarouselConfig = (function () {
	    function NgbCarouselConfig() {
	        this.interval = 5000;
	        this.wrap = true;
	        this.keyboard = true;
	    }
	    NgbCarouselConfig = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], NgbCarouselConfig);
	    return NgbCarouselConfig;
	}());
	exports.NgbCarouselConfig = NgbCarouselConfig;
	//# sourceMappingURL=carousel-config.js.map
	
	/***/ }),
	/* 28 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	/**
	 * Configuration service for the NgbDatepicker component.
	 * You can inject this service, typically in your root component, and customize the values of its properties in
	 * order to provide default values for all the datepickers used in the application.
	 */
	var NgbDatepickerConfig = (function () {
	    function NgbDatepickerConfig() {
	        this.displayMonths = 1;
	        this.firstDayOfWeek = 1;
	        this.navigation = 'select';
	        this.outsideDays = 'visible';
	        this.showWeekdays = true;
	        this.showWeekNumbers = false;
	    }
	    NgbDatepickerConfig = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], NgbDatepickerConfig);
	    return NgbDatepickerConfig;
	}());
	exports.NgbDatepickerConfig = NgbDatepickerConfig;
	//# sourceMappingURL=datepicker-config.js.map
	
	/***/ }),
	/* 29 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var ngb_calendar_1 = __webpack_require__(6);
	var ngb_date_1 = __webpack_require__(3);
	var core_1 = __webpack_require__(0);
	var NgbDatepickerService = (function () {
	    function NgbDatepickerService(_calendar) {
	        this._calendar = _calendar;
	    }
	    NgbDatepickerService.prototype.generateMonthViewModel = function (date, minDate, maxDate, firstDayOfWeek, markDisabled) {
	        var month = { firstDate: null, number: date.month, year: date.year, weeks: [], weekdays: [] };
	        date = this._getFirstViewDate(date, firstDayOfWeek);
	        // month has weeks
	        for (var w = 0; w < this._calendar.getWeeksPerMonth(); w++) {
	            var days = [];
	            // week has days
	            for (var d = 0; d < this._calendar.getDaysPerWeek(); d++) {
	                if (w === 0) {
	                    month.weekdays.push(this._calendar.getWeekday(date));
	                }
	                var newDate = new ngb_date_1.NgbDate(date.year, date.month, date.day);
	                var disabled = (minDate && newDate.before(minDate)) || (maxDate && newDate.after(maxDate));
	                if (!disabled && markDisabled) {
	                    disabled = markDisabled(newDate, { month: month.number, year: month.year });
	                }
	                // saving first date of the month
	                if (month.firstDate === null && date.month === month.number) {
	                    month.firstDate = newDate;
	                }
	                days.push({ date: newDate, disabled: disabled });
	                date = this._calendar.getNext(date);
	            }
	            month.weeks.push({ number: this._calendar.getWeekNumber(days.map(function (day) { return ngb_date_1.NgbDate.from(day.date); }), firstDayOfWeek), days: days });
	        }
	        return month;
	    };
	    NgbDatepickerService.prototype.toValidDate = function (date, defaultValue) {
	        var ngbDate = ngb_date_1.NgbDate.from(date);
	        if (defaultValue === undefined) {
	            defaultValue = this._calendar.getToday();
	        }
	        return this._calendar.isValid(ngbDate) ? ngbDate : defaultValue;
	    };
	    NgbDatepickerService.prototype._getFirstViewDate = function (date, firstDayOfWeek) {
	        var _this = this;
	        var currentMonth = date.month;
	        var today = new ngb_date_1.NgbDate(date.year, date.month, date.day);
	        var yesterday = this._calendar.getPrev(today);
	        var firstDayOfCurrentMonthIsAlsoFirstDayOfWeek = function () { return today.month !== yesterday.month && firstDayOfWeek === _this._calendar.getWeekday(today); };
	        var reachedTheFirstDayOfTheLastWeekOfPreviousMonth = function () { return today.month !== currentMonth && firstDayOfWeek === _this._calendar.getWeekday(today); };
	        // going back in time
	        while (!reachedTheFirstDayOfTheLastWeekOfPreviousMonth() && !firstDayOfCurrentMonthIsAlsoFirstDayOfWeek()) {
	            today = new ngb_date_1.NgbDate(yesterday.year, yesterday.month, yesterday.day);
	            yesterday = this._calendar.getPrev(yesterday);
	        }
	        return today;
	    };
	    NgbDatepickerService = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [ngb_calendar_1.NgbCalendar])
	    ], NgbDatepickerService);
	    return NgbDatepickerService;
	}());
	exports.NgbDatepickerService = NgbDatepickerService;
	//# sourceMappingURL=datepicker-service.js.map
	
	/***/ }),
	/* 30 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var forms_1 = __webpack_require__(4);
	var ngb_calendar_1 = __webpack_require__(6);
	var ngb_date_1 = __webpack_require__(3);
	var datepicker_service_1 = __webpack_require__(29);
	var datepicker_view_model_1 = __webpack_require__(53);
	var util_1 = __webpack_require__(1);
	var datepicker_config_1 = __webpack_require__(28);
	var datepicker_i18n_1 = __webpack_require__(5);
	var NGB_DATEPICKER_VALUE_ACCESSOR = {
	    provide: forms_1.NG_VALUE_ACCESSOR,
	    useExisting: core_1.forwardRef(function () { return NgbDatepicker; }),
	    multi: true
	};
	/**
	 * A lightweight and highly configurable datepicker directive
	 */
	var NgbDatepicker = (function () {
	    function NgbDatepicker(_service, _calendar, i18n, config) {
	        this._service = _service;
	        this._calendar = _calendar;
	        this.i18n = i18n;
	        this.months = [];
	        /**
	         * An event fired when navigation happens and currently displayed month changes.
	         * See NgbDatepickerNavigateEvent for the payload info.
	         */
	        this.navigate = new core_1.EventEmitter();
	        this.disabled = false;
	        this.onChange = function (_) { };
	        this.onTouched = function () { };
	        this.dayTemplate = config.dayTemplate;
	        this.displayMonths = config.displayMonths;
	        this.firstDayOfWeek = config.firstDayOfWeek;
	        this.markDisabled = config.markDisabled;
	        this.minDate = config.minDate;
	        this.maxDate = config.maxDate;
	        this.navigation = config.navigation;
	        this.outsideDays = config.outsideDays;
	        this.showWeekdays = config.showWeekdays;
	        this.showWeekNumbers = config.showWeekNumbers;
	        this.startDate = config.startDate;
	    }
	    NgbDatepicker.prototype.getHeaderHeight = function () {
	        var h = this.showWeekdays ? 6.25 : 4.25;
	        return this.displayMonths === 1 || this.navigation !== 'select' ? h - 2 : h;
	    };
	    NgbDatepicker.prototype.getHeaderMargin = function () {
	        var m = this.showWeekdays ? 2 : 0;
	        return this.displayMonths !== 1 || this.navigation !== 'select' ? m + 2 : m;
	    };
	    /**
	     * Navigates current view to provided date.
	     * With default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.
	     * If nothing or invalid date provided calendar will open current month.
	     * Use 'startDate' input as an alternative
	     */
	    NgbDatepicker.prototype.navigateTo = function (date) {
	        this._setViewWithinLimits(this._service.toValidDate(date));
	        this._updateData();
	    };
	    NgbDatepicker.prototype.ngOnInit = function () {
	        this._setDates();
	        this.navigateTo(this._date);
	    };
	    NgbDatepicker.prototype.ngOnChanges = function (changes) {
	        this._setDates();
	        this._setViewWithinLimits(this._date);
	        if (changes['displayMonths']) {
	            this.displayMonths = util_1.toInteger(this.displayMonths);
	        }
	        // we have to force rebuild all months only if any of these inputs changes
	        if (['startDate', 'minDate', 'maxDate', 'navigation', 'firstDayOfWeek', 'markDisabled', 'displayMonths'].some(function (input) { return !!changes[input]; })) {
	            this._updateData(true);
	        }
	    };
	    NgbDatepicker.prototype.onDateSelect = function (date) {
	        this._setViewWithinLimits(date);
	        this.onTouched();
	        this.writeValue(date);
	        this.onChange({ year: date.year, month: date.month, day: date.day });
	        // switch current month
	        if (this._date.month !== this.months[0].number && this.displayMonths === 1) {
	            this._updateData();
	        }
	    };
	    NgbDatepicker.prototype.onNavigateDateSelect = function (date) {
	        this._setViewWithinLimits(date);
	        this._updateData();
	    };
	    NgbDatepicker.prototype.onNavigateEvent = function (event) {
	        switch (event) {
	            case datepicker_view_model_1.NavigationEvent.PREV:
	                this._setViewWithinLimits(this._calendar.getPrev(this.months[0].firstDate, 'm'));
	                break;
	            case datepicker_view_model_1.NavigationEvent.NEXT:
	                this._setViewWithinLimits(this._calendar.getNext(this.months[0].firstDate, 'm'));
	                break;
	        }
	        this._updateData();
	    };
	    NgbDatepicker.prototype.registerOnChange = function (fn) { this.onChange = fn; };
	    NgbDatepicker.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	    NgbDatepicker.prototype.writeValue = function (value) { this.model = this._service.toValidDate(value, null); };
	    NgbDatepicker.prototype.setDisabledState = function (isDisabled) { this.disabled = isDisabled; };
	    NgbDatepicker.prototype._setDates = function () {
	        this._maxDate = ngb_date_1.NgbDate.from(this.maxDate);
	        this._minDate = ngb_date_1.NgbDate.from(this.minDate);
	        this._date = this._service.toValidDate(this.startDate);
	        if (!this._calendar.isValid(this._minDate)) {
	            this._minDate = this._calendar.getPrev(this._date, 'y', 10);
	            this.minDate = { year: this._minDate.year, month: this._minDate.month, day: this._minDate.day };
	        }
	        if (!this._calendar.isValid(this._maxDate)) {
	            this._maxDate = this._calendar.getNext(this._date, 'y', 11);
	            this._maxDate = this._calendar.getPrev(this._maxDate);
	            this.maxDate = { year: this._maxDate.year, month: this._maxDate.month, day: this._maxDate.day };
	        }
	        if (this._minDate && this._maxDate && this._maxDate.before(this._minDate)) {
	            throw new Error("'maxDate' " + this._maxDate + " should be greater than 'minDate' " + this._minDate);
	        }
	    };
	    NgbDatepicker.prototype._setViewWithinLimits = function (date) {
	        if (this._minDate && date.before(this._minDate)) {
	            this._date = new ngb_date_1.NgbDate(this._minDate.year, this._minDate.month, 1);
	        }
	        else if (this._maxDate && date.after(this._maxDate)) {
	            this._date = new ngb_date_1.NgbDate(this._maxDate.year, this._maxDate.month, 1);
	        }
	        else {
	            this._date = new ngb_date_1.NgbDate(date.year, date.month, 1);
	        }
	    };
	    NgbDatepicker.prototype._updateData = function (force) {
	        if (force === void 0) { force = false; }
	        var newMonths = [];
	        var _loop_1 = function(i) {
	            var newDate_1 = this_1._calendar.getNext(this_1._date, 'm', i);
	            var index = this_1.months.findIndex(function (month) { return month.firstDate.equals(newDate_1); });
	            if (force || index === -1) {
	                newMonths.push(this_1._service.generateMonthViewModel(newDate_1, this_1._minDate, this_1._maxDate, util_1.toInteger(this_1.firstDayOfWeek), this_1.markDisabled));
	            }
	            else {
	                newMonths.push(this_1.months[index]);
	            }
	        };
	        var this_1 = this;
	        for (var i = 0; i < this.displayMonths; i++) {
	            _loop_1(i);
	        }
	        var newDate = newMonths[0].firstDate;
	        var oldDate = this.months[0] ? this.months[0].firstDate : null;
	        this.months = newMonths;
	        // emitting navigation event if the first month changes
	        if (!newDate.equals(oldDate)) {
	            this.navigate.emit({
	                current: oldDate ? { year: oldDate.year, month: oldDate.month } : null,
	                next: { year: newDate.year, month: newDate.month }
	            });
	        }
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', core_1.TemplateRef)
	    ], NgbDatepicker.prototype, "dayTemplate", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], NgbDatepicker.prototype, "displayMonths", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], NgbDatepicker.prototype, "firstDayOfWeek", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Function)
	    ], NgbDatepicker.prototype, "markDisabled", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbDatepicker.prototype, "minDate", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbDatepicker.prototype, "maxDate", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbDatepicker.prototype, "navigation", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbDatepicker.prototype, "outsideDays", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbDatepicker.prototype, "showWeekdays", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbDatepicker.prototype, "showWeekNumbers", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbDatepicker.prototype, "startDate", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', Object)
	    ], NgbDatepicker.prototype, "navigate", void 0);
	    NgbDatepicker = __decorate([
	        core_1.Component({
	            exportAs: 'ngbDatepicker',
	            selector: 'ngb-datepicker',
	            host: { 'class': 'd-inline-block rounded' },
	            styles: ["\n    :host {\n      border: 1px solid rgba(0, 0, 0, 0.125);\n    }\n    .ngb-dp-header {\n      border-bottom: 1px solid rgba(0, 0, 0, 0.125);\n    }\n    .ngb-dp-month {\n      pointer-events: none;\n    }\n    ngb-datepicker-month-view {\n      pointer-events: auto;\n    }\n    .ngb-dp-month:first-child {\n      margin-left: 0 !important;\n    }    \n    .ngb-dp-month-name {\n      font-size: larger;\n      height: 2rem;\n      line-height: 2rem;\n    }    \n  "],
	            template: "\n    <template #dt let-date=\"date\" let-currentMonth=\"currentMonth\" let-selected=\"selected\" let-disabled=\"disabled\">\n       <div ngbDatepickerDayView [date]=\"date\" [currentMonth]=\"currentMonth\" [selected]=\"selected\" [disabled]=\"disabled\"></div>\n    </template>\n    \n    <div class=\"ngb-dp-header bg-faded pt-1 rounded-top\" [style.height.rem]=\"getHeaderHeight()\" \n      [style.marginBottom.rem]=\"-getHeaderMargin()\">\n      <ngb-datepicker-navigation *ngIf=\"navigation !== 'none'\"\n        [date]=\"months[0]?.firstDate\"\n        [minDate]=\"_minDate\"\n        [maxDate]=\"_maxDate\"\n        [months]=\"months.length\"\n        [disabled]=\"disabled\"\n        [showWeekNumbers]=\"showWeekNumbers\"\n        [showSelect]=\"navigation === 'select'\"\n        (navigate)=\"onNavigateEvent($event)\"\n        (select)=\"onNavigateDateSelect($event)\">\n      </ngb-datepicker-navigation>\n    </div>\n\n    <div class=\"ngb-dp-months d-flex px-1 pb-1\">\n      <template ngFor let-month [ngForOf]=\"months\" let-i=\"index\">\n        <div class=\"ngb-dp-month d-block ml-3\">            \n          <div *ngIf=\"navigation !== 'select' || displayMonths > 1\" class=\"ngb-dp-month-name text-center\">\n            {{ i18n.getMonthFullName(month.number) }} {{ month.year }}\n          </div>\n          <ngb-datepicker-month-view\n            [month]=\"month\"\n            [selectedDate]=\"model\"\n            [dayTemplate]=\"dayTemplate || dt\"\n            [showWeekdays]=\"showWeekdays\"\n            [showWeekNumbers]=\"showWeekNumbers\"\n            [disabled]=\"disabled\"\n            [outsideDays]=\"displayMonths === 1 ? outsideDays : 'hidden'\"\n            (select)=\"onDateSelect($event)\">\n          </ngb-datepicker-month-view>\n        </div>\n      </template>\n    </div>\n  ",
	            providers: [NGB_DATEPICKER_VALUE_ACCESSOR]
	        }), 
	        __metadata('design:paramtypes', [datepicker_service_1.NgbDatepickerService, ngb_calendar_1.NgbCalendar, datepicker_i18n_1.NgbDatepickerI18n, datepicker_config_1.NgbDatepickerConfig])
	    ], NgbDatepicker);
	    return NgbDatepicker;
	}());
	exports.NgbDatepicker = NgbDatepicker;
	//# sourceMappingURL=datepicker.js.map
	
	/***/ }),
	/* 31 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var util_1 = __webpack_require__(1);
	/**
	 * Abstract type serving as a DI token for the service parsing and formatting dates for the NgbInputDatepicker
	 * directive. A default implementation using the ISO 8601 format is provided, but you can provide another implementation
	 * to use an alternative format.
	 */
	var NgbDateParserFormatter = (function () {
	    function NgbDateParserFormatter() {
	    }
	    return NgbDateParserFormatter;
	}());
	exports.NgbDateParserFormatter = NgbDateParserFormatter;
	var NgbDateISOParserFormatter = (function (_super) {
	    __extends(NgbDateISOParserFormatter, _super);
	    function NgbDateISOParserFormatter() {
	        _super.apply(this, arguments);
	    }
	    NgbDateISOParserFormatter.prototype.parse = function (value) {
	        if (value) {
	            var dateParts = value.trim().split('-');
	            if (dateParts.length === 1 && util_1.isNumber(dateParts[0])) {
	                return { year: util_1.toInteger(dateParts[0]), month: null, day: null };
	            }
	            else if (dateParts.length === 2 && util_1.isNumber(dateParts[0]) && util_1.isNumber(dateParts[1])) {
	                return { year: util_1.toInteger(dateParts[0]), month: util_1.toInteger(dateParts[1]), day: null };
	            }
	            else if (dateParts.length === 3 && util_1.isNumber(dateParts[0]) && util_1.isNumber(dateParts[1]) && util_1.isNumber(dateParts[2])) {
	                return { year: util_1.toInteger(dateParts[0]), month: util_1.toInteger(dateParts[1]), day: util_1.toInteger(dateParts[2]) };
	            }
	        }
	        return null;
	    };
	    NgbDateISOParserFormatter.prototype.format = function (date) {
	        return date ?
	            date.year + "-" + (util_1.isNumber(date.month) ? util_1.padNumber(date.month) : '') + "-" + (util_1.isNumber(date.day) ? util_1.padNumber(date.day) : '') :
	            '';
	    };
	    return NgbDateISOParserFormatter;
	}(NgbDateParserFormatter));
	exports.NgbDateISOParserFormatter = NgbDateISOParserFormatter;
	//# sourceMappingURL=ngb-date-parser-formatter.js.map
	
	/***/ }),
	/* 32 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	/**
	 * Configuration service for the NgbDropdown directive.
	 * You can inject this service, typically in your root component, and customize the values of its properties in
	 * order to provide default values for all the dropdowns used in the application.
	 */
	var NgbDropdownConfig = (function () {
	    function NgbDropdownConfig() {
	        this.up = false;
	        this.autoClose = true;
	    }
	    NgbDropdownConfig = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], NgbDropdownConfig);
	    return NgbDropdownConfig;
	}());
	exports.NgbDropdownConfig = NgbDropdownConfig;
	//# sourceMappingURL=dropdown-config.js.map
	
	/***/ }),
	/* 33 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var NgbModalStack = (function () {
	    function NgbModalStack() {
	    }
	    NgbModalStack.prototype.open = function (moduleCFR, contentInjector, content, options) {
	        if (options === void 0) { options = {}; }
	        if (!this.modalContainer) {
	            throw new Error('Missing modal container, add <template ngbModalContainer></template> to one of your application templates.');
	        }
	        return this.modalContainer.open(moduleCFR, contentInjector, content, options);
	    };
	    NgbModalStack.prototype.registerContainer = function (modalContainer) { this.modalContainer = modalContainer; };
	    NgbModalStack = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], NgbModalStack);
	    return NgbModalStack;
	}());
	exports.NgbModalStack = NgbModalStack;
	//# sourceMappingURL=modal-stack.js.map
	
	/***/ }),
	/* 34 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	/**
	 * Configuration service for the NgbPagination component.
	 * You can inject this service, typically in your root component, and customize the values of its properties in
	 * order to provide default values for all the paginations used in the application.
	 */
	var NgbPaginationConfig = (function () {
	    function NgbPaginationConfig() {
	        this.disabled = false;
	        this.boundaryLinks = false;
	        this.directionLinks = true;
	        this.ellipses = true;
	        this.maxSize = 0;
	        this.pageSize = 10;
	        this.rotate = false;
	    }
	    NgbPaginationConfig = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], NgbPaginationConfig);
	    return NgbPaginationConfig;
	}());
	exports.NgbPaginationConfig = NgbPaginationConfig;
	//# sourceMappingURL=pagination-config.js.map
	
	/***/ }),
	/* 35 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	/**
	 * Configuration service for the NgbPopover directive.
	 * You can inject this service, typically in your root component, and customize the values of its properties in
	 * order to provide default values for all the popovers used in the application.
	 */
	var NgbPopoverConfig = (function () {
	    function NgbPopoverConfig() {
	        this.placement = 'top';
	        this.triggers = 'click';
	    }
	    NgbPopoverConfig = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], NgbPopoverConfig);
	    return NgbPopoverConfig;
	}());
	exports.NgbPopoverConfig = NgbPopoverConfig;
	//# sourceMappingURL=popover-config.js.map
	
	/***/ }),
	/* 36 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	/**
	 * Configuration service for the NgbProgressbar component.
	 * You can inject this service, typically in your root component, and customize the values of its properties in
	 * order to provide default values for all the progress bars used in the application.
	 */
	var NgbProgressbarConfig = (function () {
	    function NgbProgressbarConfig() {
	        this.max = 100;
	        this.animated = false;
	        this.striped = false;
	        this.showValue = false;
	    }
	    NgbProgressbarConfig = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], NgbProgressbarConfig);
	    return NgbProgressbarConfig;
	}());
	exports.NgbProgressbarConfig = NgbProgressbarConfig;
	//# sourceMappingURL=progressbar-config.js.map
	
	/***/ }),
	/* 37 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	/**
	 * Configuration service for the NgbRating component.
	 * You can inject this service, typically in your root component, and customize the values of its properties in
	 * order to provide default values for all the ratings used in the application.
	 */
	var NgbRatingConfig = (function () {
	    function NgbRatingConfig() {
	        this.max = 10;
	        this.readonly = false;
	    }
	    NgbRatingConfig = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], NgbRatingConfig);
	    return NgbRatingConfig;
	}());
	exports.NgbRatingConfig = NgbRatingConfig;
	//# sourceMappingURL=rating-config.js.map
	
	/***/ }),
	/* 38 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	/**
	 * Configuration service for the NgbTabset component.
	 * You can inject this service, typically in your root component, and customize the values of its properties in
	 * order to provide default values for all the tabsets used in the application.
	 */
	var NgbTabsetConfig = (function () {
	    function NgbTabsetConfig() {
	        this.justify = 'start';
	        this.type = 'tabs';
	    }
	    NgbTabsetConfig = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], NgbTabsetConfig);
	    return NgbTabsetConfig;
	}());
	exports.NgbTabsetConfig = NgbTabsetConfig;
	//# sourceMappingURL=tabset-config.js.map
	
	/***/ }),
	/* 39 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	/**
	 * Configuration service for the NgbTimepicker component.
	 * You can inject this service, typically in your root component, and customize the values of its properties in
	 * order to provide default values for all the timepickers used in the application.
	 */
	var NgbTimepickerConfig = (function () {
	    function NgbTimepickerConfig() {
	        this.meridian = false;
	        this.spinners = true;
	        this.seconds = false;
	        this.hourStep = 1;
	        this.minuteStep = 1;
	        this.secondStep = 1;
	        this.disabled = false;
	        this.readonlyInputs = false;
	        this.size = 'medium';
	    }
	    NgbTimepickerConfig = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], NgbTimepickerConfig);
	    return NgbTimepickerConfig;
	}());
	exports.NgbTimepickerConfig = NgbTimepickerConfig;
	//# sourceMappingURL=timepicker-config.js.map
	
	/***/ }),
	/* 40 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	/**
	 * Configuration service for the NgbTooltip directive.
	 * You can inject this service, typically in your root component, and customize the values of its properties in
	 * order to provide default values for all the tooltips used in the application.
	 */
	var NgbTooltipConfig = (function () {
	    function NgbTooltipConfig() {
	        this.placement = 'top';
	        this.triggers = 'hover';
	    }
	    NgbTooltipConfig = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], NgbTooltipConfig);
	    return NgbTooltipConfig;
	}());
	exports.NgbTooltipConfig = NgbTooltipConfig;
	//# sourceMappingURL=tooltip-config.js.map
	
	/***/ }),
	/* 41 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	/**
	 * Configuration service for the NgbTypeahead component.
	 * You can inject this service, typically in your root component, and customize the values of its properties in
	 * order to provide default values for all the typeaheads used in the application.
	 */
	var NgbTypeaheadConfig = (function () {
	    function NgbTypeaheadConfig() {
	        this.editable = true;
	        this.focusFirst = true;
	        this.showHint = false;
	    }
	    NgbTypeaheadConfig = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], NgbTypeaheadConfig);
	    return NgbTypeaheadConfig;
	}());
	exports.NgbTypeaheadConfig = NgbTypeaheadConfig;
	//# sourceMappingURL=typeahead-config.js.map
	
	/***/ }),
	/* 42 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var util_1 = __webpack_require__(1);
	var NgbTypeaheadWindow = (function () {
	    function NgbTypeaheadWindow() {
	        this.activeIdx = 0;
	        /**
	         * Flag indicating if the first row should be active initially
	         */
	        this.focusFirst = true;
	        /**
	         * A function used to format a given result before display. This function should return a formatted string without any
	         * HTML markup
	         */
	        this.formatter = util_1.toString;
	        /**
	         * Event raised when user selects a particular result row
	         */
	        this.selectEvent = new core_1.EventEmitter();
	    }
	    NgbTypeaheadWindow.prototype.getActive = function () { return this.results[this.activeIdx]; };
	    NgbTypeaheadWindow.prototype.markActive = function (activeIdx) { this.activeIdx = activeIdx; };
	    NgbTypeaheadWindow.prototype.next = function () {
	        if (this.activeIdx === this.results.length - 1) {
	            this.activeIdx = this.focusFirst ? (this.activeIdx + 1) % this.results.length : -1;
	        }
	        else {
	            this.activeIdx++;
	        }
	    };
	    NgbTypeaheadWindow.prototype.prev = function () {
	        if (this.activeIdx < 0) {
	            this.activeIdx = this.results.length - 1;
	        }
	        else if (this.activeIdx === 0) {
	            this.activeIdx = this.focusFirst ? this.results.length - 1 : -1;
	        }
	        else {
	            this.activeIdx--;
	        }
	    };
	    NgbTypeaheadWindow.prototype.select = function (item) { this.selectEvent.emit(item); };
	    NgbTypeaheadWindow.prototype.ngOnInit = function () { this.activeIdx = this.focusFirst ? 0 : -1; };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbTypeaheadWindow.prototype, "focusFirst", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbTypeaheadWindow.prototype, "results", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], NgbTypeaheadWindow.prototype, "term", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbTypeaheadWindow.prototype, "formatter", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', core_1.TemplateRef)
	    ], NgbTypeaheadWindow.prototype, "resultTemplate", void 0);
	    __decorate([
	        core_1.Output('select'), 
	        __metadata('design:type', Object)
	    ], NgbTypeaheadWindow.prototype, "selectEvent", void 0);
	    NgbTypeaheadWindow = __decorate([
	        core_1.Component({
	            selector: 'ngb-typeahead-window',
	            exportAs: 'ngbTypeaheadWindow',
	            host: { 'class': 'dropdown-menu', 'style': 'display: block' },
	            template: "\n    <template #rt let-result=\"result\" let-term=\"term\" let-formatter=\"formatter\">\n      <ngb-highlight [result]=\"formatter(result)\" [term]=\"term\"></ngb-highlight>\n    </template>\n    <template ngFor [ngForOf]=\"results\" let-result let-idx=\"index\">\n      <button type=\"button\" class=\"dropdown-item\" [class.active]=\"idx === activeIdx\" \n        (mouseenter)=\"markActive(idx)\" \n        (click)=\"select(result)\">\n          <template [ngTemplateOutlet]=\"resultTemplate || rt\" \n          [ngOutletContext]=\"{result: result, term: term, formatter: formatter}\"></template>\n      </button>\n    </template>\n  "
	        }), 
	        __metadata('design:paramtypes', [])
	    ], NgbTypeaheadWindow);
	    return NgbTypeaheadWindow;
	}());
	exports.NgbTypeaheadWindow = NgbTypeaheadWindow;
	//# sourceMappingURL=typeahead-window.js.map
	
	/***/ }),
	/* 43 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var util_1 = __webpack_require__(1);
	var accordion_config_1 = __webpack_require__(25);
	var nextId = 0;
	/**
	 * This directive should be used to wrap accordion panel titles that need to contain HTML markup or other directives.
	 */
	var NgbPanelTitle = (function () {
	    function NgbPanelTitle(templateRef) {
	        this.templateRef = templateRef;
	    }
	    NgbPanelTitle = __decorate([
	        core_1.Directive({ selector: 'template[ngbPanelTitle]' }), 
	        __metadata('design:paramtypes', [core_1.TemplateRef])
	    ], NgbPanelTitle);
	    return NgbPanelTitle;
	}());
	exports.NgbPanelTitle = NgbPanelTitle;
	/**
	 * This directive must be used to wrap accordion panel content.
	 */
	var NgbPanelContent = (function () {
	    function NgbPanelContent(templateRef) {
	        this.templateRef = templateRef;
	    }
	    NgbPanelContent = __decorate([
	        core_1.Directive({ selector: 'template[ngbPanelContent]' }), 
	        __metadata('design:paramtypes', [core_1.TemplateRef])
	    ], NgbPanelContent);
	    return NgbPanelContent;
	}());
	exports.NgbPanelContent = NgbPanelContent;
	/**
	 * The NgbPanel directive represents an individual panel with the title and collapsible
	 * content
	 */
	var NgbPanel = (function () {
	    function NgbPanel() {
	        /**
	         * Defines if the tab control is focused
	         */
	        this.focused = false;
	        /**
	         *  A flag determining whether the panel is disabled or not.
	         *  When disabled, the panel cannot be toggled.
	         */
	        this.disabled = false;
	        /**
	         *  An optional id for the panel. The id should be unique.
	         *  If not provided, it will be auto-generated.
	         */
	        this.id = "ngb-panel-" + nextId++;
	    }
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbPanel.prototype, "disabled", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbPanel.prototype, "id", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], NgbPanel.prototype, "title", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], NgbPanel.prototype, "type", void 0);
	    __decorate([
	        core_1.ContentChild(NgbPanelContent), 
	        __metadata('design:type', NgbPanelContent)
	    ], NgbPanel.prototype, "contentTpl", void 0);
	    __decorate([
	        core_1.ContentChild(NgbPanelTitle), 
	        __metadata('design:type', NgbPanelTitle)
	    ], NgbPanel.prototype, "titleTpl", void 0);
	    NgbPanel = __decorate([
	        core_1.Directive({ selector: 'ngb-panel' }), 
	        __metadata('design:paramtypes', [])
	    ], NgbPanel);
	    return NgbPanel;
	}());
	exports.NgbPanel = NgbPanel;
	/**
	 * The NgbAccordion directive is a collection of panels.
	 * It can assure that only panel can be opened at a time.
	 */
	var NgbAccordion = (function () {
	    function NgbAccordion(config) {
	        /**
	         * A map that stores each panel state
	         */
	        this._states = new Map();
	        /**
	         * A map that stores references to all panels
	         */
	        this._panelRefs = new Map();
	        /**
	         * An array or comma separated strings of panel identifiers that should be opened
	         */
	        this.activeIds = [];
	        /**
	         * A panel change event fired right before the panel toggle happens. See NgbPanelChangeEvent for payload details
	         */
	        this.panelChange = new core_1.EventEmitter();
	        this.type = config.type;
	        this.closeOtherPanels = config.closeOthers;
	    }
	    /**
	     * Programmatically toggle a panel with a given id.
	     */
	    NgbAccordion.prototype.toggle = function (panelId) {
	        var panel = this._panelRefs.get(panelId);
	        if (panel && !panel.disabled) {
	            var nextState = !this._states.get(panelId);
	            var defaultPrevented_1 = false;
	            this.panelChange.emit({ panelId: panelId, nextState: nextState, preventDefault: function () { defaultPrevented_1 = true; } });
	            if (!defaultPrevented_1) {
	                this._states.set(panelId, nextState);
	                if (this.closeOtherPanels) {
	                    this._closeOthers(panelId);
	                }
	                this._updateActiveIds();
	            }
	        }
	    };
	    NgbAccordion.prototype.ngAfterContentChecked = function () {
	        // active id updates
	        if (util_1.isString(this.activeIds)) {
	            this.activeIds = this.activeIds.split(/\s*,\s*/);
	        }
	        this._updateStates();
	        // closeOthers updates
	        if (this.activeIds.length > 1 && this.closeOtherPanels) {
	            this._closeOthers(this.activeIds[0]);
	            this._updateActiveIds();
	        }
	    };
	    /**
	     * @internal
	     */
	    NgbAccordion.prototype.isOpen = function (panelId) { return this._states.get(panelId); };
	    NgbAccordion.prototype._closeOthers = function (panelId) {
	        var _this = this;
	        this._states.forEach(function (state, id) {
	            if (id !== panelId) {
	                _this._states.set(id, false);
	            }
	        });
	    };
	    NgbAccordion.prototype._updateActiveIds = function () {
	        var _this = this;
	        this.activeIds =
	            this.panels.toArray().filter(function (panel) { return _this.isOpen(panel.id) && !panel.disabled; }).map(function (panel) { return panel.id; });
	    };
	    NgbAccordion.prototype._updateStates = function () {
	        var _this = this;
	        this._states.clear();
	        this._panelRefs.clear();
	        this.panels.toArray().forEach(function (panel) {
	            _this._states.set(panel.id, _this.activeIds.indexOf(panel.id) > -1 && !panel.disabled);
	            _this._panelRefs.set(panel.id, panel);
	        });
	    };
	    __decorate([
	        core_1.ContentChildren(NgbPanel), 
	        __metadata('design:type', core_1.QueryList)
	    ], NgbAccordion.prototype, "panels", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbAccordion.prototype, "activeIds", void 0);
	    __decorate([
	        core_1.Input('closeOthers'), 
	        __metadata('design:type', Boolean)
	    ], NgbAccordion.prototype, "closeOtherPanels", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], NgbAccordion.prototype, "type", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', Object)
	    ], NgbAccordion.prototype, "panelChange", void 0);
	    NgbAccordion = __decorate([
	        core_1.Component({
	            selector: 'ngb-accordion',
	            exportAs: 'ngbAccordion',
	            host: { 'role': 'tablist', '[attr.aria-multiselectable]': '!closeOtherPanels' },
	            template: "\n  <div class=\"card\">\n    <template ngFor let-panel [ngForOf]=\"panels\">\n      <div role=\"tab\" id=\"{{panel.id}}-header\" [attr.aria-selected]=\"panel.focused\"\n        [class]=\"'card-header ' + (panel.type ? 'card-'+panel.type: type ? 'card-'+type : '')\" [class.active]=\"isOpen(panel.id)\">\n        <a href (click)=\"!!toggle(panel.id)\" (focus)=\"panel.focused = true\" \n          (blur)=\"panel.focused = false\" [class.text-muted]=\"panel.disabled\" \n          [attr.aria-expanded]=\"isOpen(panel.id)\" [attr.aria-controls]=\"panel.id\">\n          {{panel.title}}<template [ngTemplateOutlet]=\"panel.titleTpl?.templateRef\"></template>\n        </a>\n      </div>\n      <div id=\"{{panel.id}}\" role=\"tabpanel\" [attr.aria-labelledby]=\"panel.id + '-header'\" class=\"card-block\" *ngIf=\"isOpen(panel.id)\">\n        <template [ngTemplateOutlet]=\"panel.contentTpl.templateRef\"></template>\n      </div>\n    </template>\n  </div>\n"
	        }), 
	        __metadata('design:paramtypes', [accordion_config_1.NgbAccordionConfig])
	    ], NgbAccordion);
	    return NgbAccordion;
	}());
	exports.NgbAccordion = NgbAccordion;
	//# sourceMappingURL=accordion.js.map
	
	/***/ }),
	/* 44 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var alert_config_1 = __webpack_require__(26);
	/**
	 * Alerts can be used to provide feedback messages.
	 */
	var NgbAlert = (function () {
	    function NgbAlert(config) {
	        /**
	         * An event emitted when the close button is clicked. This event has no payload. Only relevant for dismissible alerts.
	         */
	        this.close = new core_1.EventEmitter();
	        this.dismissible = config.dismissible;
	        this.type = config.type;
	    }
	    NgbAlert.prototype.closeHandler = function () { this.close.emit(null); };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbAlert.prototype, "dismissible", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], NgbAlert.prototype, "type", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', Object)
	    ], NgbAlert.prototype, "close", void 0);
	    NgbAlert = __decorate([
	        core_1.Component({
	            selector: 'ngb-alert',
	            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
	            template: "\n    <div [class]=\"'alert alert-' + type + (dismissible ? ' alert-dismissible' : '')\" role=\"alert\">\n      <button *ngIf=\"dismissible\" type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"closeHandler()\">\n            <span aria-hidden=\"true\">&times;</span>\n      </button>\n      <ng-content></ng-content>\n    </div>\n    "
	        }), 
	        __metadata('design:paramtypes', [alert_config_1.NgbAlertConfig])
	    ], NgbAlert);
	    return NgbAlert;
	}());
	exports.NgbAlert = NgbAlert;
	//# sourceMappingURL=alert.js.map
	
	/***/ }),
	/* 45 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(0);
	var forms_1 = __webpack_require__(4);
	var NGB_RADIO_VALUE_ACCESSOR = {
	    provide: forms_1.NG_VALUE_ACCESSOR,
	    useExisting: core_1.forwardRef(function () { return NgbRadioGroup; }),
	    multi: true
	};
	/**
	 * Easily create Bootstrap-style radio buttons. A value of a selected button is bound to a variable
	 * specified via ngModel.
	 */
	var NgbRadioGroup = (function () {
	    function NgbRadioGroup() {
	        this._radios = new Set();
	        this._value = null;
	        this.onChange = function (_) { };
	        this.onTouched = function () { };
	    }
	    Object.defineProperty(NgbRadioGroup.prototype, "disabled", {
	        get: function () { return this._disabled; },
	        set: function (isDisabled) { this.setDisabledState(isDisabled); },
	        enumerable: true,
	        configurable: true
	    });
	    NgbRadioGroup.prototype.onRadioChange = function (radio) {
	        this.writeValue(radio.value);
	        this.onChange(radio.value);
	    };
	    NgbRadioGroup.prototype.onRadioValueUpdate = function () { this._updateRadiosValue(); };
	    NgbRadioGroup.prototype.register = function (radio) { this._radios.add(radio); };
	    NgbRadioGroup.prototype.registerOnChange = function (fn) { this.onChange = fn; };
	    NgbRadioGroup.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	    NgbRadioGroup.prototype.setDisabledState = function (isDisabled) {
	        this._disabled = isDisabled;
	        this._updateRadiosDisabled();
	    };
	    NgbRadioGroup.prototype.unregister = function (radio) { this._radios.delete(radio); };
	    NgbRadioGroup.prototype.writeValue = function (value) {
	        this._value = value;
	        this._updateRadiosValue();
	    };
	    NgbRadioGroup.prototype._updateRadiosValue = function () {
	        var _this = this;
	        this._radios.forEach(function (radio) { return radio.updateValue(_this._value); });
	    };
	    NgbRadioGroup.prototype._updateRadiosDisabled = function () { this._radios.forEach(function (radio) { return radio.updateDisabled(); }); };
	    NgbRadioGroup = __decorate([
	        core_1.Directive({
	            selector: '[ngbRadioGroup]',
	            host: { 'data-toggle': 'buttons', 'class': 'btn-group' },
	            providers: [NGB_RADIO_VALUE_ACCESSOR]
	        }), 
	        __metadata('design:paramtypes', [])
	    ], NgbRadioGroup);
	    return NgbRadioGroup;
	}());
	exports.NgbRadioGroup = NgbRadioGroup;
	var NgbActiveLabel = (function () {
	    function NgbActiveLabel(_renderer, _elRef) {
	        this._renderer = _renderer;
	        this._elRef = _elRef;
	    }
	    Object.defineProperty(NgbActiveLabel.prototype, "active", {
	        set: function (isActive) { this._renderer.setElementClass(this._elRef.nativeElement, 'active', isActive); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgbActiveLabel.prototype, "disabled", {
	        set: function (isDisabled) {
	            this._renderer.setElementClass(this._elRef.nativeElement, 'disabled', isDisabled);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgbActiveLabel.prototype, "focused", {
	        set: function (isFocused) { this._renderer.setElementClass(this._elRef.nativeElement, 'focus', isFocused); },
	        enumerable: true,
	        configurable: true
	    });
	    NgbActiveLabel = __decorate([
	        core_1.Directive({ selector: 'label.btn' }), 
	        __metadata('design:paramtypes', [core_1.Renderer, core_1.ElementRef])
	    ], NgbActiveLabel);
	    return NgbActiveLabel;
	}());
	exports.NgbActiveLabel = NgbActiveLabel;
	/**
	 * Marks an input of type "radio" as part of the NgbRadioGroup.
	 */
	var NgbRadio = (function () {
	    function NgbRadio(_group, _label, _renderer, _element) {
	        this._group = _group;
	        this._label = _label;
	        this._renderer = _renderer;
	        this._element = _element;
	        this._value = null;
	        if (this._group) {
	            this._group.register(this);
	        }
	    }
	    Object.defineProperty(NgbRadio.prototype, "value", {
	        get: function () { return this._value; },
	        /**
	         * You can specify model value of a given radio by binding to the value property.
	        */
	        set: function (value) {
	            this._value = value;
	            var stringValue = value ? value.toString() : '';
	            this._renderer.setElementProperty(this._element.nativeElement, 'value', stringValue);
	            if (this._group) {
	                this._group.onRadioValueUpdate();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgbRadio.prototype, "checked", {
	        get: function () { return this._checked; },
	        set: function (value) {
	            this._checked = this._element.nativeElement.hasAttribute('checked') ? true : value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgbRadio.prototype, "disabled", {
	        get: function () { return (this._group && this._group.disabled) || this._disabled; },
	        set: function (isDisabled) {
	            this._disabled = isDisabled !== false;
	            this.updateDisabled();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgbRadio.prototype, "focused", {
	        set: function (isFocused) {
	            if (this._label) {
	                this._label.focused = isFocused;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    NgbRadio.prototype.ngOnDestroy = function () {
	        if (this._group) {
	            this._group.unregister(this);
	        }
	    };
	    NgbRadio.prototype.onChange = function () {
	        if (this._group) {
	            this._group.onRadioChange(this);
	        }
	    };
	    NgbRadio.prototype.updateValue = function (value) {
	        this._checked = (this.value === value && value !== null);
	        this._label.active = this._checked;
	    };
	    NgbRadio.prototype.updateDisabled = function () {
	        var disabled = (this._group && this._group.disabled) || this._disabled;
	        if (this._label) {
	            this._label.disabled = disabled;
	        }
	    };
	    __decorate([
	        core_1.Input('value'), 
	        __metadata('design:type', Object), 
	        __metadata('design:paramtypes', [Object])
	    ], NgbRadio.prototype, "value", null);
	    __decorate([
	        core_1.Input('checked'), 
	        __metadata('design:type', Object), 
	        __metadata('design:paramtypes', [Object])
	    ], NgbRadio.prototype, "checked", null);
	    __decorate([
	        core_1.Input('disabled'), 
	        __metadata('design:type', Object), 
	        __metadata('design:paramtypes', [Object])
	    ], NgbRadio.prototype, "disabled", null);
	    NgbRadio = __decorate([
	        core_1.Directive({
	            selector: 'input[type=radio]',
	            host: {
	                '[checked]': 'checked',
	                '[disabled]': 'disabled',
	                '(change)': 'onChange()',
	                '(focus)': 'focused = true',
	                '(blur)': 'focused = false'
	            }
	        }),
	        __param(0, core_1.Optional()),
	        __param(1, core_1.Optional()), 
	        __metadata('design:paramtypes', [NgbRadioGroup, NgbActiveLabel, core_1.Renderer, core_1.ElementRef])
	    ], NgbRadio);
	    return NgbRadio;
	}());
	exports.NgbRadio = NgbRadio;
	//# sourceMappingURL=radio.js.map
	
	/***/ }),
	/* 46 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var carousel_config_1 = __webpack_require__(27);
	var nextId = 0;
	/**
	 * Represents an individual slide to be used within a carousel.
	 */
	var NgbSlide = (function () {
	    function NgbSlide(tplRef) {
	        this.tplRef = tplRef;
	        /**
	         * Unique slide identifier. Must be unique for the entire document for proper accessibility support.
	         * Will be auto-generated if not provided.
	         */
	        this.id = "ngb-slide-" + nextId++;
	    }
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbSlide.prototype, "id", void 0);
	    NgbSlide = __decorate([
	        core_1.Directive({ selector: 'template[ngbSlide]' }), 
	        __metadata('design:paramtypes', [core_1.TemplateRef])
	    ], NgbSlide);
	    return NgbSlide;
	}());
	exports.NgbSlide = NgbSlide;
	/**
	 * Directive to easily create carousels based on Bootstrap's markup.
	 */
	var NgbCarousel = (function () {
	    function NgbCarousel(config) {
	        this.interval = config.interval;
	        this.wrap = config.wrap;
	        this.keyboard = config.keyboard;
	    }
	    NgbCarousel.prototype.ngAfterContentChecked = function () {
	        var activeSlide = this._getSlideById(this.activeId);
	        this.activeId = activeSlide ? activeSlide.id : (this.slides.length ? this.slides.first.id : null);
	    };
	    NgbCarousel.prototype.ngOnInit = function () { this._startTimer(); };
	    NgbCarousel.prototype.ngOnDestroy = function () { clearInterval(this._slideChangeInterval); };
	    /**
	     * Navigate to a slide with the specified identifier.
	     */
	    NgbCarousel.prototype.select = function (slideId) {
	        this.cycleToSelected(slideId);
	        this._restartTimer();
	    };
	    /**
	     * Navigate to the next slide.
	     */
	    NgbCarousel.prototype.prev = function () {
	        this.cycleToPrev();
	        this._restartTimer();
	    };
	    /**
	     * Navigate to the next slide.
	     */
	    NgbCarousel.prototype.next = function () {
	        this.cycleToNext();
	        this._restartTimer();
	    };
	    /**
	     * Stops the carousel from cycling through items.
	     */
	    NgbCarousel.prototype.pause = function () { this._stopTimer(); };
	    /**
	     * Restarts cycling through the carousel slides from left to right.
	     */
	    NgbCarousel.prototype.cycle = function () { this._startTimer(); };
	    NgbCarousel.prototype.cycleToNext = function () { this.cycleToSelected(this._getNextSlide(this.activeId)); };
	    NgbCarousel.prototype.cycleToPrev = function () { this.cycleToSelected(this._getPrevSlide(this.activeId)); };
	    NgbCarousel.prototype.cycleToSelected = function (slideIdx) {
	        var selectedSlide = this._getSlideById(slideIdx);
	        if (selectedSlide) {
	            this.activeId = selectedSlide.id;
	        }
	    };
	    NgbCarousel.prototype.keyPrev = function () {
	        if (this.keyboard) {
	            this.prev();
	        }
	    };
	    NgbCarousel.prototype.keyNext = function () {
	        if (this.keyboard) {
	            this.next();
	        }
	    };
	    NgbCarousel.prototype._restartTimer = function () {
	        this._stopTimer();
	        this._startTimer();
	    };
	    NgbCarousel.prototype._startTimer = function () {
	        var _this = this;
	        if (this.interval > 0) {
	            this._slideChangeInterval = setInterval(function () { _this.cycleToNext(); }, this.interval);
	        }
	    };
	    NgbCarousel.prototype._stopTimer = function () { clearInterval(this._slideChangeInterval); };
	    NgbCarousel.prototype._getSlideById = function (slideId) {
	        var slideWithId = this.slides.filter(function (slide) { return slide.id === slideId; });
	        return slideWithId.length ? slideWithId[0] : null;
	    };
	    NgbCarousel.prototype._getSlideIdxById = function (slideId) {
	        return this.slides.toArray().indexOf(this._getSlideById(slideId));
	    };
	    NgbCarousel.prototype._getNextSlide = function (currentSlideId) {
	        var slideArr = this.slides.toArray();
	        var currentSlideIdx = this._getSlideIdxById(currentSlideId);
	        var isLastSlide = currentSlideIdx === slideArr.length - 1;
	        return isLastSlide ? (this.wrap ? slideArr[0].id : slideArr[slideArr.length - 1].id) :
	            slideArr[currentSlideIdx + 1].id;
	    };
	    NgbCarousel.prototype._getPrevSlide = function (currentSlideId) {
	        var slideArr = this.slides.toArray();
	        var currentSlideIdx = this._getSlideIdxById(currentSlideId);
	        var isFirstSlide = currentSlideIdx === 0;
	        return isFirstSlide ? (this.wrap ? slideArr[slideArr.length - 1].id : slideArr[0].id) :
	            slideArr[currentSlideIdx - 1].id;
	    };
	    __decorate([
	        core_1.ContentChildren(NgbSlide), 
	        __metadata('design:type', core_1.QueryList)
	    ], NgbCarousel.prototype, "slides", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], NgbCarousel.prototype, "interval", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbCarousel.prototype, "wrap", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbCarousel.prototype, "keyboard", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], NgbCarousel.prototype, "activeId", void 0);
	    NgbCarousel = __decorate([
	        core_1.Component({
	            selector: 'ngb-carousel',
	            exportAs: 'ngbCarousel',
	            host: {
	                'class': 'carousel slide',
	                '[style.display]': '"block"',
	                'tabIndex': '0',
	                '(mouseenter)': 'pause()',
	                '(mouseleave)': 'cycle()',
	                '(keydown.arrowLeft)': 'keyPrev()',
	                '(keydown.arrowRight)': 'keyNext()'
	            },
	            template: "\n    <ol class=\"carousel-indicators\">\n      <li *ngFor=\"let slide of slides\" [id]=\"slide.id\" [class.active]=\"slide.id === activeId\" (click)=\"cycleToSelected(slide.id)\"></li>\n    </ol>\n    <div class=\"carousel-inner\" role=\"listbox\">\n      <div *ngFor=\"let slide of slides\" class=\"carousel-item\" [class.active]=\"slide.id === activeId\">\n        <template [ngTemplateOutlet]=\"slide.tplRef\"></template>\n      </div>\n    </div>\n    <a class=\"left carousel-control-prev\" role=\"button\" (click)=\"cycleToPrev()\">\n      <span class=\"carousel-control-prev-icon\" aria-hidden=\"true\"></span>\n      <span class=\"sr-only\">Previous</span>\n    </a>\n    <a class=\"right carousel-control-next\" role=\"button\" (click)=\"cycleToNext()\">\n      <span class=\"carousel-control-next-icon\" aria-hidden=\"true\"></span>\n      <span class=\"sr-only\">Next</span>\n    </a>\n    "
	        }), 
	        __metadata('design:paramtypes', [carousel_config_1.NgbCarouselConfig])
	    ], NgbCarousel);
	    return NgbCarousel;
	}());
	exports.NgbCarousel = NgbCarousel;
	exports.NGB_CAROUSEL_DIRECTIVES = [NgbCarousel, NgbSlide];
	//# sourceMappingURL=carousel.js.map
	
	/***/ }),
	/* 47 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	/**
	 * The NgbCollapse directive provides a simple way to hide and show an element with animations.
	 */
	var NgbCollapse = (function () {
	    function NgbCollapse() {
	        /**
	         * A flag indicating collapsed (true) or open (false) state.
	         */
	        this.collapsed = false;
	    }
	    __decorate([
	        core_1.Input('ngbCollapse'), 
	        __metadata('design:type', Object)
	    ], NgbCollapse.prototype, "collapsed", void 0);
	    NgbCollapse = __decorate([
	        core_1.Directive({
	            selector: '[ngbCollapse]',
	            exportAs: 'ngbCollapse',
	            host: { '[class.collapse]': 'true', '[class.show]': '!collapsed', '[attr.aria-expanded]': '!collapsed' }
	        }), 
	        __metadata('design:paramtypes', [])
	    ], NgbCollapse);
	    return NgbCollapse;
	}());
	exports.NgbCollapse = NgbCollapse;
	//# sourceMappingURL=collapse.js.map
	
	/***/ }),
	/* 48 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var NgbDatepickerDayView = (function () {
	    function NgbDatepickerDayView() {
	    }
	    NgbDatepickerDayView.prototype.isMuted = function () { return !this.selected && (this.date.month !== this.currentMonth || this.disabled); };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], NgbDatepickerDayView.prototype, "currentMonth", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbDatepickerDayView.prototype, "date", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbDatepickerDayView.prototype, "disabled", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbDatepickerDayView.prototype, "selected", void 0);
	    NgbDatepickerDayView = __decorate([
	        core_1.Component({
	            selector: '[ngbDatepickerDayView]',
	            styles: ["\n    :host {\n      text-align: center;\n      width: 2rem;\n      height: 2rem;\n      line-height: 2rem;      \n      border-radius: 0.25rem;\n    }\n    :host.outside {\n      opacity: 0.5;\n    }\n  "],
	            host: {
	                '[class.bg-primary]': 'selected',
	                '[class.text-white]': 'selected',
	                '[class.text-muted]': 'isMuted()',
	                '[class.outside]': 'isMuted()',
	                '[class.btn-secondary]': '!disabled'
	            },
	            template: "{{ date.day }}"
	        }), 
	        __metadata('design:paramtypes', [])
	    ], NgbDatepickerDayView);
	    return NgbDatepickerDayView;
	}());
	exports.NgbDatepickerDayView = NgbDatepickerDayView;
	//# sourceMappingURL=datepicker-day-view.js.map
	
	/***/ }),
	/* 49 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var forms_1 = __webpack_require__(4);
	var ngb_date_1 = __webpack_require__(3);
	var datepicker_1 = __webpack_require__(30);
	var ngb_date_parser_formatter_1 = __webpack_require__(31);
	var positioning_1 = __webpack_require__(8);
	var ngb_calendar_1 = __webpack_require__(6);
	var datepicker_service_1 = __webpack_require__(29);
	var NGB_DATEPICKER_VALUE_ACCESSOR = {
	    provide: forms_1.NG_VALUE_ACCESSOR,
	    useExisting: core_1.forwardRef(function () { return NgbInputDatepicker; }),
	    multi: true
	};
	/**
	 * A directive that makes it possible to have datepickers on input fields.
	 * Manages integration with the input field itself (data entry) and ngModel (validation etc.).
	 */
	var NgbInputDatepicker = (function () {
	    function NgbInputDatepicker(_parserFormatter, _elRef, _vcRef, _renderer, _cfr, ngZone, _service, _calendar) {
	        var _this = this;
	        this._parserFormatter = _parserFormatter;
	        this._elRef = _elRef;
	        this._vcRef = _vcRef;
	        this._renderer = _renderer;
	        this._cfr = _cfr;
	        this._service = _service;
	        this._calendar = _calendar;
	        this._cRef = null;
	        /**
	         * An event fired when navigation happens and currently displayed month changes.
	         * See NgbDatepickerNavigateEvent for the payload info.
	         */
	        this.navigate = new core_1.EventEmitter();
	        this._onChange = function (_) { };
	        this._onTouched = function () { };
	        this._zoneSubscription = ngZone.onStable.subscribe(function () {
	            if (_this._cRef) {
	                positioning_1.positionElements(_this._elRef.nativeElement, _this._cRef.location.nativeElement, 'bottom-left');
	            }
	        });
	    }
	    NgbInputDatepicker.prototype.registerOnChange = function (fn) { this._onChange = fn; };
	    NgbInputDatepicker.prototype.registerOnTouched = function (fn) { this._onTouched = fn; };
	    NgbInputDatepicker.prototype.writeValue = function (value) {
	        var ngbDate = value ? new ngb_date_1.NgbDate(value.year, value.month, value.day) : null;
	        this._model = this._calendar.isValid(value) ? ngbDate : null;
	        this._writeModelValue(this._model);
	    };
	    NgbInputDatepicker.prototype.setDisabledState = function (isDisabled) {
	        this._renderer.setElementProperty(this._elRef.nativeElement, 'disabled', isDisabled);
	        if (this.isOpen()) {
	            this._cRef.instance.setDisabledState(isDisabled);
	        }
	    };
	    NgbInputDatepicker.prototype.manualDateChange = function (value) {
	        this._model = this._service.toValidDate(this._parserFormatter.parse(value), null);
	        this._onChange(this._model ? { year: this._model.year, month: this._model.month, day: this._model.day } : null);
	        this._writeModelValue(this._model);
	    };
	    NgbInputDatepicker.prototype.isOpen = function () { return !!this._cRef; };
	    /**
	     * Opens the datepicker with the selected date indicated by the ngModel value.
	     */
	    NgbInputDatepicker.prototype.open = function () {
	        var _this = this;
	        if (!this.isOpen()) {
	            var cf = this._cfr.resolveComponentFactory(datepicker_1.NgbDatepicker);
	            this._cRef = this._vcRef.createComponent(cf);
	            this._applyPopupStyling(this._cRef.location.nativeElement);
	            this._cRef.instance.writeValue(this._model);
	            this._applyDatepickerInputs(this._cRef.instance);
	            this._subscribeForDatepickerOutputs(this._cRef.instance);
	            this._cRef.instance.ngOnInit();
	            // date selection event handling
	            this._cRef.instance.registerOnChange(function (selectedDate) {
	                _this.writeValue(selectedDate);
	                _this._onChange(selectedDate);
	                _this.close();
	            });
	        }
	    };
	    /**
	     * Closes the datepicker popup.
	     */
	    NgbInputDatepicker.prototype.close = function () {
	        if (this.isOpen()) {
	            this._vcRef.remove(this._vcRef.indexOf(this._cRef.hostView));
	            this._cRef = null;
	        }
	    };
	    /**
	     * Toggles the datepicker popup (opens when closed and closes when opened).
	     */
	    NgbInputDatepicker.prototype.toggle = function () {
	        if (this.isOpen()) {
	            this.close();
	        }
	        else {
	            this.open();
	        }
	    };
	    /**
	     * Navigates current view to provided date.
	     * With default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.
	     * If nothing or invalid date provided calendar will open current month.
	     * Use 'startDate' input as an alternative
	     */
	    NgbInputDatepicker.prototype.navigateTo = function (date) {
	        if (this.isOpen()) {
	            this._cRef.instance.navigateTo(date);
	        }
	    };
	    NgbInputDatepicker.prototype.onBlur = function () { this._onTouched(); };
	    NgbInputDatepicker.prototype._applyDatepickerInputs = function (datepickerInstance) {
	        var _this = this;
	        ['dayTemplate', 'displayMonths', 'firstDayOfWeek', 'markDisabled', 'minDate', 'maxDate', 'navigation',
	            'outsideDays', 'showNavigation', 'showWeekdays', 'showWeekNumbers']
	            .forEach(function (optionName) {
	            if (_this[optionName] !== undefined) {
	                datepickerInstance[optionName] = _this[optionName];
	            }
	        });
	        datepickerInstance.startDate = this.startDate || this._model;
	    };
	    NgbInputDatepicker.prototype._applyPopupStyling = function (nativeElement) {
	        this._renderer.setElementClass(nativeElement, 'dropdown-menu', true);
	        this._renderer.setElementStyle(nativeElement, 'padding', '0');
	    };
	    NgbInputDatepicker.prototype._subscribeForDatepickerOutputs = function (datepickerInstance) {
	        var _this = this;
	        datepickerInstance.navigate.subscribe(function (date) { return _this.navigate.emit(date); });
	    };
	    NgbInputDatepicker.prototype._writeModelValue = function (model) {
	        this._renderer.setElementProperty(this._elRef.nativeElement, 'value', this._parserFormatter.format(model));
	        if (this.isOpen()) {
	            this._cRef.instance.writeValue(model);
	            this._onTouched();
	        }
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', core_1.TemplateRef)
	    ], NgbInputDatepicker.prototype, "dayTemplate", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], NgbInputDatepicker.prototype, "displayMonths", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], NgbInputDatepicker.prototype, "firstDayOfWeek", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Function)
	    ], NgbInputDatepicker.prototype, "markDisabled", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbInputDatepicker.prototype, "minDate", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbInputDatepicker.prototype, "maxDate", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbInputDatepicker.prototype, "navigation", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbInputDatepicker.prototype, "outsideDays", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbInputDatepicker.prototype, "showWeekdays", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbInputDatepicker.prototype, "showWeekNumbers", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbInputDatepicker.prototype, "startDate", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', Object)
	    ], NgbInputDatepicker.prototype, "navigate", void 0);
	    NgbInputDatepicker = __decorate([
	        core_1.Directive({
	            selector: 'input[ngbDatepicker]',
	            exportAs: 'ngbDatepicker',
	            host: { '(change)': 'manualDateChange($event.target.value)', '(keyup.esc)': 'close()', '(blur)': 'onBlur()' },
	            providers: [NGB_DATEPICKER_VALUE_ACCESSOR]
	        }), 
	        __metadata('design:paramtypes', [ngb_date_parser_formatter_1.NgbDateParserFormatter, core_1.ElementRef, core_1.ViewContainerRef, core_1.Renderer, core_1.ComponentFactoryResolver, core_1.NgZone, datepicker_service_1.NgbDatepickerService, ngb_calendar_1.NgbCalendar])
	    ], NgbInputDatepicker);
	    return NgbInputDatepicker;
	}());
	exports.NgbInputDatepicker = NgbInputDatepicker;
	//# sourceMappingURL=datepicker-input.js.map
	
	/***/ }),
	/* 50 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var ngb_date_1 = __webpack_require__(3);
	var datepicker_i18n_1 = __webpack_require__(5);
	var NgbDatepickerMonthView = (function () {
	    function NgbDatepickerMonthView(i18n) {
	        this.i18n = i18n;
	        this.select = new core_1.EventEmitter();
	    }
	    NgbDatepickerMonthView.prototype.doSelect = function (day) {
	        if (!this.isDisabled(day) && !this.isCollapsed(day) && !this.isHidden(day)) {
	            this.select.emit(ngb_date_1.NgbDate.from(day.date));
	        }
	    };
	    NgbDatepickerMonthView.prototype.isDisabled = function (day) { return this.disabled || day.disabled; };
	    NgbDatepickerMonthView.prototype.isSelected = function (date) { return this.selectedDate && this.selectedDate.equals(date); };
	    NgbDatepickerMonthView.prototype.isCollapsed = function (day) { return this.outsideDays === 'collapsed' && this.month.number !== day.date.month; };
	    NgbDatepickerMonthView.prototype.isHidden = function (day) { return this.outsideDays === 'hidden' && this.month.number !== day.date.month; };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', core_1.TemplateRef)
	    ], NgbDatepickerMonthView.prototype, "dayTemplate", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbDatepickerMonthView.prototype, "disabled", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbDatepickerMonthView.prototype, "month", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbDatepickerMonthView.prototype, "outsideDays", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', ngb_date_1.NgbDate)
	    ], NgbDatepickerMonthView.prototype, "selectedDate", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbDatepickerMonthView.prototype, "showWeekdays", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbDatepickerMonthView.prototype, "showWeekNumbers", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', Object)
	    ], NgbDatepickerMonthView.prototype, "select", void 0);
	    NgbDatepickerMonthView = __decorate([
	        core_1.Component({
	            selector: 'ngb-datepicker-month-view',
	            host: { 'class': 'd-block' },
	            styles: ["\n    .ngb-dp-weekday, .ngb-dp-week-number {\n      line-height: 2rem;\n    }\n    .ngb-dp-day, .ngb-dp-weekday, .ngb-dp-week-number {\n      width: 2rem;\n      height: 2rem;      \n    }\n    .ngb-dp-day {\n      cursor: pointer;\n    }\n    .ngb-dp-day.disabled, .ngb-dp-day.hidden, .ngb-dp-day.collapsed {\n      cursor: default;\n    }\n    :host/deep/.ngb-dp-day.collapsed > * {\n      display: none;\n    }\n    :host/deep/.ngb-dp-day.hidden > * {\n      visibility: hidden;\n    }\n  "],
	            template: "\n    <div *ngIf=\"showWeekdays\" class=\"ngb-dp-week d-flex\">\n      <div *ngIf=\"showWeekNumbers\" class=\"ngb-dp-weekday\"></div>\n      <div *ngFor=\"let w of month.weekdays\" class=\"ngb-dp-weekday small text-center text-info font-italic\">\n        {{ i18n.getWeekdayShortName(w) }}\n      </div>\n    </div>\n    <div *ngFor=\"let week of month.weeks\" class=\"ngb-dp-week d-flex\">\n      <div *ngIf=\"showWeekNumbers\" class=\"ngb-dp-week-number small text-center font-italic text-muted\">{{ week.number }}</div>\n      <div *ngFor=\"let day of week.days\" (click)=\"doSelect(day)\" class=\"ngb-dp-day\" [class.disabled]=\"isDisabled(day)\"\n      [class.collapsed]=\"isCollapsed(day)\" [class.hidden]=\"isHidden(day)\">\n          <template [ngTemplateOutlet]=\"dayTemplate\"\n          [ngOutletContext]=\"{date: {year: day.date.year, month: day.date.month, day: day.date.day},\n            currentMonth: month.number,\n            disabled: isDisabled(day),\n            selected: isSelected(day.date)}\">\n          </template>\n      </div>\n    </div>\n  "
	        }), 
	        __metadata('design:paramtypes', [datepicker_i18n_1.NgbDatepickerI18n])
	    ], NgbDatepickerMonthView);
	    return NgbDatepickerMonthView;
	}());
	exports.NgbDatepickerMonthView = NgbDatepickerMonthView;
	//# sourceMappingURL=datepicker-month-view.js.map
	
	/***/ }),
	/* 51 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var ngb_date_1 = __webpack_require__(3);
	var util_1 = __webpack_require__(1);
	var datepicker_i18n_1 = __webpack_require__(5);
	var ngb_calendar_1 = __webpack_require__(6);
	var NgbDatepickerNavigationSelect = (function () {
	    function NgbDatepickerNavigationSelect(i18n, calendar) {
	        this.i18n = i18n;
	        this.calendar = calendar;
	        this.years = [];
	        this.select = new core_1.EventEmitter();
	        this.months = calendar.getMonths();
	    }
	    NgbDatepickerNavigationSelect.prototype.ngOnChanges = function (changes) {
	        if (changes['maxDate'] || changes['minDate'] || changes['date']) {
	            this._generateYears();
	            this._generateMonths();
	        }
	    };
	    NgbDatepickerNavigationSelect.prototype.changeMonth = function (month) { this.select.emit(new ngb_date_1.NgbDate(this.date.year, util_1.toInteger(month), 1)); };
	    NgbDatepickerNavigationSelect.prototype.changeYear = function (year) { this.select.emit(new ngb_date_1.NgbDate(util_1.toInteger(year), this.date.month, 1)); };
	    NgbDatepickerNavigationSelect.prototype._generateMonths = function () {
	        var _this = this;
	        this.months = this.calendar.getMonths();
	        if (this.date && this.date.year === this.minDate.year) {
	            var index = this.months.findIndex(function (month) { return month === _this.minDate.month; });
	            this.months = this.months.slice(index);
	        }
	        if (this.date && this.date.year === this.maxDate.year) {
	            var index = this.months.findIndex(function (month) { return month === _this.maxDate.month; });
	            this.months = this.months.slice(0, index + 1);
	        }
	    };
	    NgbDatepickerNavigationSelect.prototype._generateYears = function () {
	        var _this = this;
	        this.years = Array.from({ length: this.maxDate.year - this.minDate.year + 1 }, function (e, i) { return _this.minDate.year + i; });
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', ngb_date_1.NgbDate)
	    ], NgbDatepickerNavigationSelect.prototype, "date", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbDatepickerNavigationSelect.prototype, "disabled", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', ngb_date_1.NgbDate)
	    ], NgbDatepickerNavigationSelect.prototype, "maxDate", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', ngb_date_1.NgbDate)
	    ], NgbDatepickerNavigationSelect.prototype, "minDate", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', Object)
	    ], NgbDatepickerNavigationSelect.prototype, "select", void 0);
	    NgbDatepickerNavigationSelect = __decorate([
	        core_1.Component({
	            selector: 'ngb-datepicker-navigation-select',
	            styles: ["\n    select {\n      /* to align with btn-sm */\n      padding: 0.25rem 0.5rem;\n      font-size: 0.875rem;      \n      line-height: 1.25;\n      /* to cancel the custom height set by custom-select */\n      height: inherit;\n      width: 50%;\n    }\n  "],
	            template: "\n    <select [disabled]=\"disabled\" class=\"custom-select d-inline-block\" [value]=\"date?.month\" (change)=\"changeMonth($event.target.value)\">\n      <option *ngFor=\"let m of months\" [value]=\"m\">{{ i18n.getMonthShortName(m) }}</option>\n    </select>" +
	                "<select [disabled]=\"disabled\" class=\"custom-select d-inline-block\" [value]=\"date?.year\" (change)=\"changeYear($event.target.value)\">\n      <option *ngFor=\"let y of years\" [value]=\"y\">{{ y }}</option>\n    </select> \n  " // template needs to be formatted in a certain way so we don't add empty text nodes
	        }), 
	        __metadata('design:paramtypes', [datepicker_i18n_1.NgbDatepickerI18n, ngb_calendar_1.NgbCalendar])
	    ], NgbDatepickerNavigationSelect);
	    return NgbDatepickerNavigationSelect;
	}());
	exports.NgbDatepickerNavigationSelect = NgbDatepickerNavigationSelect;
	//# sourceMappingURL=datepicker-navigation-select.js.map
	
	/***/ }),
	/* 52 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var datepicker_view_model_1 = __webpack_require__(53);
	var ngb_date_1 = __webpack_require__(3);
	var datepicker_i18n_1 = __webpack_require__(5);
	var ngb_calendar_1 = __webpack_require__(6);
	var NgbDatepickerNavigation = (function () {
	    function NgbDatepickerNavigation(i18n, _calendar) {
	        this.i18n = i18n;
	        this._calendar = _calendar;
	        this.navigation = datepicker_view_model_1.NavigationEvent;
	        this.navigate = new core_1.EventEmitter();
	        this.select = new core_1.EventEmitter();
	    }
	    NgbDatepickerNavigation.prototype.doNavigate = function (event) { this.navigate.emit(event); };
	    NgbDatepickerNavigation.prototype.nextDisabled = function () {
	        return this.disabled || (this.maxDate && this._calendar.getNext(this.date, 'm').after(this.maxDate));
	    };
	    NgbDatepickerNavigation.prototype.prevDisabled = function () {
	        var prevDate = this._calendar.getPrev(this.date, 'm');
	        return this.disabled || (this.minDate && prevDate.year <= this.minDate.year && prevDate.month < this.minDate.month);
	    };
	    NgbDatepickerNavigation.prototype.selectDate = function (date) { this.select.emit(date); };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', ngb_date_1.NgbDate)
	    ], NgbDatepickerNavigation.prototype, "date", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbDatepickerNavigation.prototype, "disabled", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', ngb_date_1.NgbDate)
	    ], NgbDatepickerNavigation.prototype, "maxDate", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', ngb_date_1.NgbDate)
	    ], NgbDatepickerNavigation.prototype, "minDate", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], NgbDatepickerNavigation.prototype, "months", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbDatepickerNavigation.prototype, "showSelect", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbDatepickerNavigation.prototype, "showWeekNumbers", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', Object)
	    ], NgbDatepickerNavigation.prototype, "navigate", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', Object)
	    ], NgbDatepickerNavigation.prototype, "select", void 0);
	    NgbDatepickerNavigation = __decorate([
	        core_1.Component({
	            selector: 'ngb-datepicker-navigation',
	            host: { 'class': 'd-flex justify-content-between', '[class.collapsed]': '!showSelect' },
	            styles: ["\n    :host {\n      height: 2rem;\n      line-height: 1.85rem;\n    }\n    :host.collapsed {\n      margin-bottom: -2rem;        \n    }\n    .ngb-dp-navigation-chevron::before {\n      border-style: solid;\n      border-width: 0.2em 0.2em 0 0;\n      content: '';\n      display: inline-block;\n      height: 0.75em;\n      transform: rotate(-135deg);\n      -webkit-transform: rotate(-135deg);\n      -ms-transform: rotate(-135deg);\n      width: 0.75em;\n      margin: 0 0 0 0.5rem;\n    }    \n    .ngb-dp-navigation-chevron.right:before {\n      -webkit-transform: rotate(45deg);\n      -ms-transform: rotate(45deg);\n      transform: rotate(45deg);\n      margin: 0 0.5rem 0 0;\n    }\n    .btn-link {\n      cursor: pointer;\n      outline: 0;\n    }\n    .btn-link[disabled] {\n      cursor: not-allowed;\n      opacity: .65;\n    }    \n  "],
	            template: "\n    <button type=\"button\" class=\"btn-link\" (click)=\"!!doNavigate(navigation.PREV)\" [disabled]=\"prevDisabled()\">\n      <span class=\"ngb-dp-navigation-chevron\"></span>    \n    </button>\n    \n    <ngb-datepicker-navigation-select *ngIf=\"showSelect\" class=\"d-block\" [style.width.rem]=\"months * 9\"\n      [date]=\"date\"\n      [minDate]=\"minDate\"\n      [maxDate]=\"maxDate\"\n      [disabled] = \"disabled\"\n      (select)=\"selectDate($event)\">\n    </ngb-datepicker-navigation-select>\n    \n    <button type=\"button\" class=\"btn-link\" (click)=\"!!doNavigate(navigation.NEXT)\" [disabled]=\"nextDisabled()\">\n      <span class=\"ngb-dp-navigation-chevron right\"></span>\n    </button>\n  "
	        }), 
	        __metadata('design:paramtypes', [datepicker_i18n_1.NgbDatepickerI18n, ngb_calendar_1.NgbCalendar])
	    ], NgbDatepickerNavigation);
	    return NgbDatepickerNavigation;
	}());
	exports.NgbDatepickerNavigation = NgbDatepickerNavigation;
	//# sourceMappingURL=datepicker-navigation.js.map
	
	/***/ }),
	/* 53 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	(function (NavigationEvent) {
	    NavigationEvent[NavigationEvent["PREV"] = 0] = "PREV";
	    NavigationEvent[NavigationEvent["NEXT"] = 1] = "NEXT";
	})(exports.NavigationEvent || (exports.NavigationEvent = {}));
	var NavigationEvent = exports.NavigationEvent;
	//# sourceMappingURL=datepicker-view-model.js.map
	
	/***/ }),
	/* 54 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var dropdown_config_1 = __webpack_require__(32);
	/**
	 * Transforms a node into a dropdown.
	 */
	var NgbDropdown = (function () {
	    function NgbDropdown(config) {
	        /**
	         *  Defines whether or not the dropdown-menu is open initially.
	         */
	        this._open = false;
	        /**
	         *  An event fired when the dropdown is opened or closed.
	         *  Event's payload equals whether dropdown is open.
	         */
	        this.openChange = new core_1.EventEmitter();
	        this.up = config.up;
	        this.autoClose = config.autoClose;
	    }
	    /**
	     * Checks if the dropdown menu is open or not.
	     */
	    NgbDropdown.prototype.isOpen = function () { return this._open; };
	    /**
	     * Opens the dropdown menu of a given navbar or tabbed navigation.
	     */
	    NgbDropdown.prototype.open = function () {
	        if (!this._open) {
	            this._open = true;
	            this.openChange.emit(true);
	        }
	    };
	    /**
	     * Closes the dropdown menu of a given navbar or tabbed navigation.
	     */
	    NgbDropdown.prototype.close = function () {
	        if (this._open) {
	            this._open = false;
	            this.openChange.emit(false);
	        }
	    };
	    /**
	     * Toggles the dropdown menu of a given navbar or tabbed navigation.
	     */
	    NgbDropdown.prototype.toggle = function () {
	        if (this.isOpen()) {
	            this.close();
	        }
	        else {
	            this.open();
	        }
	    };
	    NgbDropdown.prototype.closeFromOutsideClick = function ($event) {
	        if (this.autoClose && $event.button !== 2 && !this._isEventFromToggle($event)) {
	            this.close();
	        }
	    };
	    NgbDropdown.prototype.closeFromOutsideEsc = function () {
	        if (this.autoClose) {
	            this.close();
	        }
	    };
	    Object.defineProperty(NgbDropdown.prototype, "toggleElement", {
	        /**
	         * @internal
	         */
	        set: function (toggleElement) { this._toggleElement = toggleElement; },
	        enumerable: true,
	        configurable: true
	    });
	    NgbDropdown.prototype._isEventFromToggle = function ($event) { return !!this._toggleElement && this._toggleElement.contains($event.target); };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbDropdown.prototype, "up", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbDropdown.prototype, "autoClose", void 0);
	    __decorate([
	        core_1.Input('open'), 
	        __metadata('design:type', Object)
	    ], NgbDropdown.prototype, "_open", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', Object)
	    ], NgbDropdown.prototype, "openChange", void 0);
	    NgbDropdown = __decorate([
	        core_1.Directive({
	            selector: '[ngbDropdown]',
	            exportAs: 'ngbDropdown',
	            host: {
	                '[class.dropdown]': '!up',
	                '[class.dropup]': 'up',
	                '[class.show]': 'isOpen()',
	                '(keyup.esc)': 'closeFromOutsideEsc()',
	                '(document:click)': 'closeFromOutsideClick($event)'
	            }
	        }), 
	        __metadata('design:paramtypes', [dropdown_config_1.NgbDropdownConfig])
	    ], NgbDropdown);
	    return NgbDropdown;
	}());
	exports.NgbDropdown = NgbDropdown;
	/**
	 * Allows the dropdown to be toggled via click. This directive is optional.
	 */
	var NgbDropdownToggle = (function () {
	    function NgbDropdownToggle(dropdown, elementRef) {
	        this.dropdown = dropdown;
	        dropdown.toggleElement = elementRef.nativeElement;
	    }
	    NgbDropdownToggle.prototype.toggleOpen = function () { this.dropdown.toggle(); };
	    NgbDropdownToggle = __decorate([
	        core_1.Directive({
	            selector: '[ngbDropdownToggle]',
	            host: {
	                'class': 'dropdown-toggle',
	                'aria-haspopup': 'true',
	                '[attr.aria-expanded]': 'dropdown.isOpen()',
	                '(click)': 'toggleOpen()'
	            }
	        }), 
	        __metadata('design:paramtypes', [NgbDropdown, core_1.ElementRef])
	    ], NgbDropdownToggle);
	    return NgbDropdownToggle;
	}());
	exports.NgbDropdownToggle = NgbDropdownToggle;
	//# sourceMappingURL=dropdown.js.map
	
	/***/ }),
	/* 55 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var NgbModalBackdrop = (function () {
	    function NgbModalBackdrop() {
	    }
	    NgbModalBackdrop = __decorate([
	        core_1.Component({ selector: 'ngb-modal-backdrop', template: '', host: { 'class': 'modal-backdrop fade show' } }), 
	        __metadata('design:paramtypes', [])
	    ], NgbModalBackdrop);
	    return NgbModalBackdrop;
	}());
	exports.NgbModalBackdrop = NgbModalBackdrop;
	//# sourceMappingURL=modal-backdrop.js.map
	
	/***/ }),
	/* 56 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	(function (ModalDismissReasons) {
	    ModalDismissReasons[ModalDismissReasons["BACKDROP_CLICK"] = 0] = "BACKDROP_CLICK";
	    ModalDismissReasons[ModalDismissReasons["ESC"] = 1] = "ESC";
	})(exports.ModalDismissReasons || (exports.ModalDismissReasons = {}));
	var ModalDismissReasons = exports.ModalDismissReasons;
	//# sourceMappingURL=modal-dismiss-reasons.js.map
	
	/***/ }),
	/* 57 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var popup_1 = __webpack_require__(7);
	/**
	 * A reference to an active (currently opened) modal. Instances of this class
	 * can be injected into components passed as modal content.
	 */
	var NgbActiveModal = (function () {
	    function NgbActiveModal() {
	    }
	    /**
	     * Can be used to close a modal, passing an optional result.
	     */
	    NgbActiveModal.prototype.close = function (result) { };
	    /**
	     * Can be used to dismiss a modal, passing an optional reason.
	     */
	    NgbActiveModal.prototype.dismiss = function (reason) { };
	    NgbActiveModal = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], NgbActiveModal);
	    return NgbActiveModal;
	}());
	exports.NgbActiveModal = NgbActiveModal;
	/**
	 * A reference to a newly opened modal.
	 */
	var NgbModalRef = (function () {
	    function NgbModalRef(_viewContainerRef, _windowCmptRef, _contentRef, _backdropCmptRef) {
	        var _this = this;
	        this._viewContainerRef = _viewContainerRef;
	        this._windowCmptRef = _windowCmptRef;
	        this._contentRef = _contentRef;
	        this._backdropCmptRef = _backdropCmptRef;
	        _windowCmptRef.instance.dismissEvent.subscribe(function (reason) { _this.dismiss(reason); });
	        this.result = new Promise(function (resolve, reject) {
	            _this._resolve = resolve;
	            _this._reject = reject;
	        });
	        this.result.then(null, function () { });
	    }
	    Object.defineProperty(NgbModalRef.prototype, "componentInstance", {
	        /**
	         * The instance of component used as modal's content.
	         * Undefined when a TemplateRef is used as modal's content.
	         */
	        get: function () {
	            if (this._contentRef.componentRef) {
	                return this._contentRef.componentRef.instance;
	            }
	        },
	        // only needed to keep TS1.8 compatibility
	        set: function (instance) { },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Can be used to close a modal, passing an optional result.
	     */
	    NgbModalRef.prototype.close = function (result) {
	        if (this._windowCmptRef) {
	            this._resolve(result);
	            this._removeModalElements();
	        }
	    };
	    /**
	     * Can be used to dismiss a modal, passing an optional reason.
	     */
	    NgbModalRef.prototype.dismiss = function (reason) {
	        if (this._windowCmptRef) {
	            this._reject(reason);
	            this._removeModalElements();
	        }
	    };
	    NgbModalRef.prototype._removeModalElements = function () {
	        this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._windowCmptRef.hostView));
	        if (this._backdropCmptRef) {
	            this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._backdropCmptRef.hostView));
	        }
	        if (this._contentRef && this._contentRef.viewRef) {
	            this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._contentRef.viewRef));
	        }
	        this._windowCmptRef = null;
	        this._backdropCmptRef = null;
	        this._contentRef = null;
	    };
	    NgbModalRef = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [core_1.ViewContainerRef, core_1.ComponentRef, popup_1.ContentRef, core_1.ComponentRef])
	    ], NgbModalRef);
	    return NgbModalRef;
	}());
	exports.NgbModalRef = NgbModalRef;
	//# sourceMappingURL=modal-ref.js.map
	
	/***/ }),
	/* 58 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var modal_dismiss_reasons_1 = __webpack_require__(56);
	var NgbModalWindow = (function () {
	    function NgbModalWindow(_elRef, _renderer) {
	        this._elRef = _elRef;
	        this._renderer = _renderer;
	        this.backdrop = true;
	        this.keyboard = true;
	        this.dismissEvent = new core_1.EventEmitter();
	    }
	    NgbModalWindow.prototype.backdropClick = function ($event) {
	        if (this.backdrop === true && this._elRef.nativeElement === $event.target) {
	            this.dismiss(modal_dismiss_reasons_1.ModalDismissReasons.BACKDROP_CLICK);
	        }
	    };
	    NgbModalWindow.prototype.escKey = function ($event) {
	        if (this.keyboard && !$event.defaultPrevented) {
	            this.dismiss(modal_dismiss_reasons_1.ModalDismissReasons.ESC);
	        }
	    };
	    NgbModalWindow.prototype.dismiss = function (reason) { this.dismissEvent.emit(reason); };
	    NgbModalWindow.prototype.ngOnInit = function () {
	        this._elWithFocus = document.activeElement;
	        this._renderer.setElementClass(document.body, 'modal-open', true);
	    };
	    NgbModalWindow.prototype.ngAfterViewInit = function () {
	        if (!this._elRef.nativeElement.contains(document.activeElement)) {
	            this._renderer.invokeElementMethod(this._elRef.nativeElement, 'focus', []);
	        }
	    };
	    NgbModalWindow.prototype.ngOnDestroy = function () {
	        if (this._elWithFocus && document.body.contains(this._elWithFocus)) {
	            this._renderer.invokeElementMethod(this._elWithFocus, 'focus', []);
	        }
	        else {
	            this._renderer.invokeElementMethod(document.body, 'focus', []);
	        }
	        this._elWithFocus = null;
	        this._renderer.setElementClass(document.body, 'modal-open', false);
	    };
	    __decorate([
	        // element that is focused prior to modal opening
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbModalWindow.prototype, "backdrop", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbModalWindow.prototype, "keyboard", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], NgbModalWindow.prototype, "size", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], NgbModalWindow.prototype, "windowClass", void 0);
	    __decorate([
	        core_1.Output('dismiss'), 
	        __metadata('design:type', Object)
	    ], NgbModalWindow.prototype, "dismissEvent", void 0);
	    NgbModalWindow = __decorate([
	        core_1.Component({
	            selector: 'ngb-modal-window',
	            host: {
	                '[class]': '"modal fade show" + (windowClass ? " " + windowClass : "")',
	                'role': 'dialog',
	                'tabindex': '-1',
	                'style': 'display: block;',
	                '(keyup.esc)': 'escKey($event)',
	                '(click)': 'backdropClick($event)'
	            },
	            template: "\n    <div [class]=\"'modal-dialog' + (size ? ' modal-' + size : '')\" role=\"document\">\n        <div class=\"modal-content\"><ng-content></ng-content></div>\n    </div>\n    "
	        }), 
	        __metadata('design:paramtypes', [core_1.ElementRef, core_1.Renderer])
	    ], NgbModalWindow);
	    return NgbModalWindow;
	}());
	exports.NgbModalWindow = NgbModalWindow;
	//# sourceMappingURL=modal-window.js.map
	
	/***/ }),
	/* 59 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var modal_stack_1 = __webpack_require__(33);
	/**
	 * A service to open modal windows. Creating a modal is straightforward: create a template and pass it as an argument to
	 * the "open" method!
	 */
	var NgbModal = (function () {
	    function NgbModal(_moduleCFR, _injector, _modalStack) {
	        this._moduleCFR = _moduleCFR;
	        this._injector = _injector;
	        this._modalStack = _modalStack;
	    }
	    /**
	     * Opens a new modal window with the specified content and using supplied options. Content can be provided
	     * as a TemplateRef or a component type. If you pass a component type as content than instances of those
	     * components can be injected with an instance of the NgbActiveModal class. You can use methods on the
	     * NgbActiveModal class to close / dismiss modals from "inside" of a component.
	     */
	    NgbModal.prototype.open = function (content, options) {
	        if (options === void 0) { options = {}; }
	        return this._modalStack.open(this._moduleCFR, this._injector, content, options);
	    };
	    NgbModal = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [core_1.ComponentFactoryResolver, core_1.Injector, modal_stack_1.NgbModalStack])
	    ], NgbModal);
	    return NgbModal;
	}());
	exports.NgbModal = NgbModal;
	//# sourceMappingURL=modal.js.map
	
	/***/ }),
	/* 60 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var util_1 = __webpack_require__(1);
	var pagination_config_1 = __webpack_require__(34);
	/**
	 * A directive that will take care of visualising a pagination bar and enable / disable buttons correctly!
	 */
	var NgbPagination = (function () {
	    function NgbPagination(config) {
	        this.pageCount = 0;
	        this.pages = [];
	        /**
	         *  Current page.
	         */
	        this.page = 0;
	        /**
	         *  An event fired when the page is changed.
	         *  Event's payload equals to the newly selected page.
	         */
	        this.pageChange = new core_1.EventEmitter(true);
	        this.disabled = config.disabled;
	        this.boundaryLinks = config.boundaryLinks;
	        this.directionLinks = config.directionLinks;
	        this.ellipses = config.ellipses;
	        this.maxSize = config.maxSize;
	        this.pageSize = config.pageSize;
	        this.rotate = config.rotate;
	        this.size = config.size;
	    }
	    NgbPagination.prototype.hasPrevious = function () { return this.page > 1; };
	    NgbPagination.prototype.hasNext = function () { return this.page < this.pageCount; };
	    NgbPagination.prototype.selectPage = function (pageNumber) { this._updatePages(pageNumber); };
	    NgbPagination.prototype.ngOnChanges = function (changes) { this._updatePages(this.page); };
	    /**
	     * @internal
	     */
	    NgbPagination.prototype.isEllipsis = function (pageNumber) { return pageNumber === -1; };
	    /**
	     * Appends ellipses and first/last page number to the displayed pages
	     */
	    NgbPagination.prototype._applyEllipses = function (start, end) {
	        if (this.ellipses) {
	            if (start > 0) {
	                if (start > 1) {
	                    this.pages.unshift(-1);
	                }
	                this.pages.unshift(1);
	            }
	            if (end < this.pageCount) {
	                if (end < (this.pageCount - 1)) {
	                    this.pages.push(-1);
	                }
	                this.pages.push(this.pageCount);
	            }
	        }
	    };
	    /**
	     * Rotates page numbers based on maxSize items visible.
	     * Currently selected page stays in the middle:
	     *
	     * Ex. for selected page = 6:
	     * [5,*6*,7] for maxSize = 3
	     * [4,5,*6*,7] for maxSize = 4
	     */
	    NgbPagination.prototype._applyRotation = function () {
	        var start = 0;
	        var end = this.pageCount;
	        var leftOffset = Math.floor(this.maxSize / 2);
	        var rightOffset = this.maxSize % 2 === 0 ? leftOffset - 1 : leftOffset;
	        if (this.page <= leftOffset) {
	            // very beginning, no rotation -> [0..maxSize]
	            end = this.maxSize;
	        }
	        else if (this.pageCount - this.page < leftOffset) {
	            // very end, no rotation -> [len-maxSize..len]
	            start = this.pageCount - this.maxSize;
	        }
	        else {
	            // rotate
	            start = this.page - leftOffset - 1;
	            end = this.page + rightOffset;
	        }
	        return [start, end];
	    };
	    /**
	     * Paginates page numbers based on maxSize items per page
	     */
	    NgbPagination.prototype._applyPagination = function () {
	        var page = Math.ceil(this.page / this.maxSize) - 1;
	        var start = page * this.maxSize;
	        var end = start + this.maxSize;
	        return [start, end];
	    };
	    NgbPagination.prototype._setPageInRange = function (newPageNo) {
	        var prevPageNo = this.page;
	        this.page = util_1.getValueInRange(newPageNo, this.pageCount, 1);
	        if (this.page !== prevPageNo) {
	            this.pageChange.emit(this.page);
	        }
	    };
	    NgbPagination.prototype._updatePages = function (newPage) {
	        this.pageCount = Math.ceil(this.collectionSize / this.pageSize);
	        if (!util_1.isNumber(this.pageCount)) {
	            this.pageCount = 0;
	        }
	        // fill-in model needed to render pages
	        this.pages.length = 0;
	        for (var i = 1; i <= this.pageCount; i++) {
	            this.pages.push(i);
	        }
	        // set page within 1..max range
	        this._setPageInRange(newPage);
	        // apply maxSize if necessary
	        if (this.maxSize > 0 && this.pageCount > this.maxSize) {
	            var start = 0;
	            var end = this.pageCount;
	            // either paginating or rotating page numbers
	            if (this.rotate) {
	                _a = this._applyRotation(), start = _a[0], end = _a[1];
	            }
	            else {
	                _b = this._applyPagination(), start = _b[0], end = _b[1];
	            }
	            this.pages = this.pages.slice(start, end);
	            // adding ellipses
	            this._applyEllipses(start, end);
	        }
	        var _a, _b;
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbPagination.prototype, "disabled", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbPagination.prototype, "boundaryLinks", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbPagination.prototype, "directionLinks", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbPagination.prototype, "ellipses", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbPagination.prototype, "rotate", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], NgbPagination.prototype, "collectionSize", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], NgbPagination.prototype, "maxSize", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbPagination.prototype, "page", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], NgbPagination.prototype, "pageSize", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', Object)
	    ], NgbPagination.prototype, "pageChange", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbPagination.prototype, "size", void 0);
	    NgbPagination = __decorate([
	        core_1.Component({
	            selector: 'ngb-pagination',
	            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
	            template: "\n    <nav>\n      <ul [class]=\"'pagination' + (size ? ' pagination-' + size : '')\">\n        <li *ngIf=\"boundaryLinks\" class=\"page-item\" \n          [class.disabled]=\"!hasPrevious() || disabled\">\n          <a aria-label=\"First\" class=\"page-link\" href (click)=\"!!selectPage(1)\" [attr.tabindex]=\"hasPrevious() ? null : '-1'\">\n            <span aria-hidden=\"true\">&laquo;&laquo;</span>\n            <span class=\"sr-only\">First</span>\n          </a>                \n        </li>\n      \n        <li *ngIf=\"directionLinks\" class=\"page-item\" \n          [class.disabled]=\"!hasPrevious() || disabled\">\n          <a aria-label=\"Previous\" class=\"page-link\" href (click)=\"!!selectPage(page-1)\" [attr.tabindex]=\"hasPrevious() ? null : '-1'\">\n            <span aria-hidden=\"true\">&laquo;</span>\n            <span class=\"sr-only\">Previous</span>\n          </a>\n        </li>\n        <li *ngFor=\"let pageNumber of pages\" class=\"page-item\" [class.active]=\"pageNumber === page\" \n          [class.disabled]=\"isEllipsis(pageNumber) || disabled\">\n          <a *ngIf=\"isEllipsis(pageNumber)\" class=\"page-link\">...</a>\n          <a *ngIf=\"!isEllipsis(pageNumber)\" class=\"page-link\" href (click)=\"!!selectPage(pageNumber)\">{{pageNumber}}</a>\n        </li>\n        <li *ngIf=\"directionLinks\" class=\"page-item\" [class.disabled]=\"!hasNext() || disabled\">\n          <a aria-label=\"Next\" class=\"page-link\" href (click)=\"!!selectPage(page+1)\" [attr.tabindex]=\"hasNext() ? null : '-1'\">\n            <span aria-hidden=\"true\">&raquo;</span>\n            <span class=\"sr-only\">Next</span>\n          </a>\n        </li>\n        \n        <li *ngIf=\"boundaryLinks\" class=\"page-item\" [class.disabled]=\"!hasNext() || disabled\">\n          <a aria-label=\"Last\" class=\"page-link\" href (click)=\"!!selectPage(pageCount)\" [attr.tabindex]=\"hasNext() ? null : '-1'\">\n            <span aria-hidden=\"true\">&raquo;&raquo;</span>\n            <span class=\"sr-only\">Last</span>\n          </a>                \n        </li>        \n      </ul>\n    </nav>\n  "
	        }), 
	        __metadata('design:paramtypes', [pagination_config_1.NgbPaginationConfig])
	    ], NgbPagination);
	    return NgbPagination;
	}());
	exports.NgbPagination = NgbPagination;
	//# sourceMappingURL=pagination.js.map
	
	/***/ }),
	/* 61 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var triggers_1 = __webpack_require__(69);
	var positioning_1 = __webpack_require__(8);
	var popup_1 = __webpack_require__(7);
	var popover_config_1 = __webpack_require__(35);
	var NgbPopoverWindow = (function () {
	    function NgbPopoverWindow() {
	        this.placement = 'top';
	    }
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbPopoverWindow.prototype, "placement", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], NgbPopoverWindow.prototype, "title", void 0);
	    NgbPopoverWindow = __decorate([
	        core_1.Component({
	            selector: 'ngb-popover-window',
	            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
	            host: { '[class]': '"popover show popover-" + placement', 'role': 'tooltip' },
	            template: "\n    <h3 class=\"popover-title\">{{title}}</h3><div class=\"popover-content\"><ng-content></ng-content></div>\n    "
	        }), 
	        __metadata('design:paramtypes', [])
	    ], NgbPopoverWindow);
	    return NgbPopoverWindow;
	}());
	exports.NgbPopoverWindow = NgbPopoverWindow;
	/**
	 * A lightweight, extensible directive for fancy popover creation.
	 */
	var NgbPopover = (function () {
	    function NgbPopover(_elementRef, _renderer, injector, componentFactoryResolver, viewContainerRef, config, ngZone) {
	        var _this = this;
	        this._elementRef = _elementRef;
	        this._renderer = _renderer;
	        /**
	         * Emits an event when the popover is shown
	         */
	        this.shown = new core_1.EventEmitter();
	        /**
	         * Emits an event when the popover is hidden
	         */
	        this.hidden = new core_1.EventEmitter();
	        this.placement = config.placement;
	        this.triggers = config.triggers;
	        this.container = config.container;
	        this._popupService = new popup_1.PopupService(NgbPopoverWindow, injector, viewContainerRef, _renderer, componentFactoryResolver);
	        this._zoneSubscription = ngZone.onStable.subscribe(function () {
	            if (_this._windowRef) {
	                positioning_1.positionElements(_this._elementRef.nativeElement, _this._windowRef.location.nativeElement, _this.placement, _this.container === 'body');
	            }
	        });
	    }
	    /**
	     * Opens an element’s popover. This is considered a “manual” triggering of the popover.
	     * The context is an optional value to be injected into the popover template when it is created.
	     */
	    NgbPopover.prototype.open = function (context) {
	        if (!this._windowRef) {
	            this._windowRef = this._popupService.open(this.ngbPopover, context);
	            this._windowRef.instance.placement = this.placement;
	            this._windowRef.instance.title = this.popoverTitle;
	            if (this.container === 'body') {
	                window.document.querySelector(this.container).appendChild(this._windowRef.location.nativeElement);
	            }
	            // we need to manually invoke change detection since events registered via
	            // Renderer::listen() are not picked up by change detection with the OnPush strategy
	            this._windowRef.changeDetectorRef.markForCheck();
	            this.shown.emit();
	        }
	    };
	    /**
	     * Closes an element’s popover. This is considered a “manual” triggering of the popover.
	     */
	    NgbPopover.prototype.close = function () {
	        if (this._windowRef) {
	            this._popupService.close();
	            this._windowRef = null;
	            this.hidden.emit();
	        }
	    };
	    /**
	     * Toggles an element’s popover. This is considered a “manual” triggering of the popover.
	     */
	    NgbPopover.prototype.toggle = function () {
	        if (this._windowRef) {
	            this.close();
	        }
	        else {
	            this.open();
	        }
	    };
	    /**
	     * Returns whether or not the popover is currently being shown
	     */
	    NgbPopover.prototype.isOpen = function () { return this._windowRef != null; };
	    NgbPopover.prototype.ngOnInit = function () {
	        this._unregisterListenersFn = triggers_1.listenToTriggers(this._renderer, this._elementRef.nativeElement, this.triggers, this.open.bind(this), this.close.bind(this), this.toggle.bind(this));
	    };
	    NgbPopover.prototype.ngOnDestroy = function () {
	        this.close();
	        this._unregisterListenersFn();
	        this._zoneSubscription.unsubscribe();
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbPopover.prototype, "ngbPopover", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], NgbPopover.prototype, "popoverTitle", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbPopover.prototype, "placement", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], NgbPopover.prototype, "triggers", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], NgbPopover.prototype, "container", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', Object)
	    ], NgbPopover.prototype, "shown", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', Object)
	    ], NgbPopover.prototype, "hidden", void 0);
	    NgbPopover = __decorate([
	        core_1.Directive({ selector: '[ngbPopover]', exportAs: 'ngbPopover' }), 
	        __metadata('design:paramtypes', [core_1.ElementRef, core_1.Renderer, core_1.Injector, core_1.ComponentFactoryResolver, core_1.ViewContainerRef, popover_config_1.NgbPopoverConfig, core_1.NgZone])
	    ], NgbPopover);
	    return NgbPopover;
	}());
	exports.NgbPopover = NgbPopover;
	//# sourceMappingURL=popover.js.map
	
	/***/ }),
	/* 62 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var util_1 = __webpack_require__(1);
	var progressbar_config_1 = __webpack_require__(36);
	/**
	 * Directive that can be used to provide feedback on the progress of a workflow or an action.
	 */
	var NgbProgressbar = (function () {
	    function NgbProgressbar(config) {
	        /**
	         * Current value to be displayed in the progressbar. Should be smaller or equal to "max" value.
	         */
	        this.value = 0;
	        this.max = config.max;
	        this.animated = config.animated;
	        this.striped = config.striped;
	        this.type = config.type;
	        this.showValue = config.showValue;
	    }
	    NgbProgressbar.prototype.getValue = function () { return util_1.getValueInRange(this.value, this.max); };
	    NgbProgressbar.prototype.getPercentValue = function () { return 100 * this.getValue() / this.max; };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], NgbProgressbar.prototype, "max", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbProgressbar.prototype, "animated", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbProgressbar.prototype, "striped", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbProgressbar.prototype, "showValue", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], NgbProgressbar.prototype, "type", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbProgressbar.prototype, "value", void 0);
	    NgbProgressbar = __decorate([
	        core_1.Component({
	            selector: 'ngb-progressbar',
	            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
	            template: "\n    <div class=\"progress\">\n      <div class=\"progress-bar{{type ? ' bg-' + type : ''}}{{animated ? ' progress-bar-animated' : ''}}{{striped ?\n    ' progress-bar-striped' : ''}}\" role=\"progressbar\" [style.width.%]=\"getPercentValue()\"\n    [attr.aria-valuenow]=\"getValue()\" aria-valuemin=\"0\" [attr.aria-valuemax]=\"max\">\n        <span *ngIf=\"showValue\">{{getPercentValue()}}%</span><ng-content></ng-content>\n      </div>\n    </div>\n  "
	        }), 
	        __metadata('design:paramtypes', [progressbar_config_1.NgbProgressbarConfig])
	    ], NgbProgressbar);
	    return NgbProgressbar;
	}());
	exports.NgbProgressbar = NgbProgressbar;
	//# sourceMappingURL=progressbar.js.map
	
	/***/ }),
	/* 63 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var rating_config_1 = __webpack_require__(37);
	var util_1 = __webpack_require__(1);
	var forms_1 = __webpack_require__(4);
	var Key;
	(function (Key) {
	    Key[Key["End"] = 35] = "End";
	    Key[Key["Home"] = 36] = "Home";
	    Key[Key["ArrowLeft"] = 37] = "ArrowLeft";
	    Key[Key["ArrowUp"] = 38] = "ArrowUp";
	    Key[Key["ArrowRight"] = 39] = "ArrowRight";
	    Key[Key["ArrowDown"] = 40] = "ArrowDown";
	})(Key || (Key = {}));
	var NGB_RATING_VALUE_ACCESSOR = {
	    provide: forms_1.NG_VALUE_ACCESSOR,
	    useExisting: core_1.forwardRef(function () { return NgbRating; }),
	    multi: true
	};
	/**
	 * Rating directive that will take care of visualising a star rating bar.
	 */
	var NgbRating = (function () {
	    function NgbRating(config, _changeDetectorRef) {
	        this._changeDetectorRef = _changeDetectorRef;
	        this.range = [];
	        /**
	         * An event fired when a user is hovering over a given rating.
	         * Event's payload equals to the rating being hovered over.
	         */
	        this.hover = new core_1.EventEmitter();
	        /**
	         * An event fired when a user stops hovering over a given rating.
	         * Event's payload equals to the rating of the last item being hovered over.
	         */
	        this.leave = new core_1.EventEmitter();
	        /**
	         * An event fired when a user selects a new rating.
	         * Event's payload equals to the newly selected rating.
	         */
	        this.rateChange = new core_1.EventEmitter(true);
	        this.onChange = function (_) { };
	        this.onTouched = function () { };
	        this.max = config.max;
	        this.readonly = config.readonly;
	    }
	    NgbRating.prototype.ariaValueText = function () { return this.rate + " out of " + this.max; };
	    NgbRating.prototype.enter = function (value) {
	        if (!this.readonly) {
	            this.rate = value;
	        }
	        this.hover.emit(value);
	    };
	    NgbRating.prototype.handleKeyDown = function (event) {
	        if (Key[util_1.toString(event.which)]) {
	            event.preventDefault();
	            switch (event.which) {
	                case Key.ArrowDown:
	                case Key.ArrowLeft:
	                    this.update(this.rate - 1);
	                    break;
	                case Key.ArrowUp:
	                case Key.ArrowRight:
	                    this.update(this.rate + 1);
	                    break;
	                case Key.Home:
	                    this.update(0);
	                    break;
	                case Key.End:
	                    this.update(this.max);
	                    break;
	            }
	        }
	    };
	    NgbRating.prototype.getFillValue = function (index) {
	        var diff = this.rate - index;
	        if (diff >= 1) {
	            return 100;
	        }
	        if (diff < 1 && diff > 0) {
	            return Number.parseInt((diff * 100).toFixed(2));
	        }
	        return 0;
	    };
	    NgbRating.prototype.ngOnChanges = function (changes) {
	        if (changes['rate']) {
	            this.update(this.rate);
	            this._oldRate = this.rate;
	        }
	    };
	    NgbRating.prototype.ngOnInit = function () { this.range = Array.from({ length: this.max }, function (v, k) { return k + 1; }); };
	    NgbRating.prototype.registerOnChange = function (fn) { this.onChange = fn; };
	    NgbRating.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	    NgbRating.prototype.reset = function () {
	        this.leave.emit(this.rate);
	        this.rate = this._oldRate;
	    };
	    NgbRating.prototype.update = function (value, internalChange) {
	        if (internalChange === void 0) { internalChange = true; }
	        if (!this.readonly) {
	            var newRate = value ? util_1.getValueInRange(value, this.max, 0) : 0;
	            if (this._oldRate !== newRate) {
	                this._oldRate = newRate;
	                this.rate = newRate;
	                this.rateChange.emit(newRate);
	                if (internalChange) {
	                    this.onChange(this.rate);
	                }
	            }
	        }
	    };
	    NgbRating.prototype.writeValue = function (value) {
	        this.update(value, false);
	        this._changeDetectorRef.markForCheck();
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], NgbRating.prototype, "max", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], NgbRating.prototype, "rate", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbRating.prototype, "readonly", void 0);
	    __decorate([
	        core_1.Input(),
	        core_1.ContentChild(core_1.TemplateRef), 
	        __metadata('design:type', core_1.TemplateRef)
	    ], NgbRating.prototype, "starTemplate", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', Object)
	    ], NgbRating.prototype, "hover", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', Object)
	    ], NgbRating.prototype, "leave", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', Object)
	    ], NgbRating.prototype, "rateChange", void 0);
	    NgbRating = __decorate([
	        core_1.Component({
	            selector: 'ngb-rating',
	            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
	            host: { '(keydown)': 'handleKeyDown($event)' },
	            template: "\n    <template #t let-fill=\"fill\">{{ fill === 100 ? '&#9733;' : '&#9734;' }}</template>\n    <span tabindex=\"0\" (mouseleave)=\"reset()\" role=\"slider\" aria-valuemin=\"0\"\n      [attr.aria-valuemax]=\"max\" [attr.aria-valuenow]=\"rate\" [attr.aria-valuetext]=\"ariaValueText()\">\n      <template ngFor [ngForOf]=\"range\" let-index=\"index\">\n        <span class=\"sr-only\">({{ index < rate ? '*' : ' ' }})</span>\n        <span (mouseenter)=\"enter(index + 1)\" (click)=\"update(index + 1)\" \n        [style.cursor]=\"readonly ? 'default' : 'pointer'\">\n          <template [ngTemplateOutlet]=\"starTemplate || t\" [ngOutletContext]=\"{fill: getFillValue(index)}\"></template>\n        </span>\n      </template>\n    </span>\n  ",
	            providers: [NGB_RATING_VALUE_ACCESSOR]
	        }), 
	        __metadata('design:paramtypes', [rating_config_1.NgbRatingConfig, core_1.ChangeDetectorRef])
	    ], NgbRating);
	    return NgbRating;
	}());
	exports.NgbRating = NgbRating;
	//# sourceMappingURL=rating.js.map
	
	/***/ }),
	/* 64 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var tabset_config_1 = __webpack_require__(38);
	var nextId = 0;
	/**
	 * This directive should be used to wrap tab titles that need to contain HTML markup or other directives.
	 */
	var NgbTabTitle = (function () {
	    function NgbTabTitle(templateRef) {
	        this.templateRef = templateRef;
	    }
	    NgbTabTitle = __decorate([
	        core_1.Directive({ selector: 'template[ngbTabTitle]' }), 
	        __metadata('design:paramtypes', [core_1.TemplateRef])
	    ], NgbTabTitle);
	    return NgbTabTitle;
	}());
	exports.NgbTabTitle = NgbTabTitle;
	/**
	 * This directive must be used to wrap content to be displayed in a tab.
	 */
	var NgbTabContent = (function () {
	    function NgbTabContent(templateRef) {
	        this.templateRef = templateRef;
	    }
	    NgbTabContent = __decorate([
	        core_1.Directive({ selector: 'template[ngbTabContent]' }), 
	        __metadata('design:paramtypes', [core_1.TemplateRef])
	    ], NgbTabContent);
	    return NgbTabContent;
	}());
	exports.NgbTabContent = NgbTabContent;
	/**
	 * A directive representing an individual tab.
	 */
	var NgbTab = (function () {
	    function NgbTab() {
	        /**
	         * Unique tab identifier. Must be unique for the entire document for proper accessibility support.
	         */
	        this.id = "ngb-tab-" + nextId++;
	        /**
	         * Allows toggling disabled state of a given state. Disabled tabs can't be selected.
	         */
	        this.disabled = false;
	    }
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], NgbTab.prototype, "id", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], NgbTab.prototype, "title", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbTab.prototype, "disabled", void 0);
	    __decorate([
	        core_1.ContentChild(NgbTabContent), 
	        __metadata('design:type', NgbTabContent)
	    ], NgbTab.prototype, "contentTpl", void 0);
	    __decorate([
	        core_1.ContentChild(NgbTabTitle), 
	        __metadata('design:type', NgbTabTitle)
	    ], NgbTab.prototype, "titleTpl", void 0);
	    NgbTab = __decorate([
	        core_1.Directive({ selector: 'ngb-tab' }), 
	        __metadata('design:paramtypes', [])
	    ], NgbTab);
	    return NgbTab;
	}());
	exports.NgbTab = NgbTab;
	/**
	 * A component that makes it easy to create tabbed interface.
	 */
	var NgbTabset = (function () {
	    function NgbTabset(config) {
	        /**
	         * A tab change event fired right before the tab selection happens. See NgbTabChangeEvent for payload details
	         */
	        this.tabChange = new core_1.EventEmitter();
	        this.type = config.type;
	        this.justify = config.justify;
	    }
	    /**
	     * Selects the tab with the given id and shows its associated pane.
	     * Any other tab that was previously selected becomes unselected and its associated pane is hidden.
	     */
	    NgbTabset.prototype.select = function (tabId) {
	        var selectedTab = this._getTabById(tabId);
	        if (selectedTab && !selectedTab.disabled && this.activeId !== selectedTab.id) {
	            var defaultPrevented_1 = false;
	            this.tabChange.emit({ activeId: this.activeId, nextId: selectedTab.id, preventDefault: function () { defaultPrevented_1 = true; } });
	            if (!defaultPrevented_1) {
	                this.activeId = selectedTab.id;
	            }
	        }
	    };
	    NgbTabset.prototype.ngAfterContentChecked = function () {
	        // auto-correct activeId that might have been set incorrectly as input
	        var activeTab = this._getTabById(this.activeId);
	        this.activeId = activeTab ? activeTab.id : (this.tabs.length ? this.tabs.first.id : null);
	    };
	    NgbTabset.prototype._getTabById = function (id) {
	        var tabsWithId = this.tabs.filter(function (tab) { return tab.id === id; });
	        return tabsWithId.length ? tabsWithId[0] : null;
	    };
	    __decorate([
	        core_1.ContentChildren(NgbTab), 
	        __metadata('design:type', core_1.QueryList)
	    ], NgbTabset.prototype, "tabs", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], NgbTabset.prototype, "activeId", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbTabset.prototype, "justify", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbTabset.prototype, "type", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', Object)
	    ], NgbTabset.prototype, "tabChange", void 0);
	    NgbTabset = __decorate([
	        core_1.Component({
	            selector: 'ngb-tabset',
	            exportAs: 'ngbTabset',
	            template: "\n    <ul [class]=\"'nav nav-' + type + ' justify-content-' + justify\" role=\"tablist\">\n      <li class=\"nav-item\" *ngFor=\"let tab of tabs\">\n        <a [id]=\"tab.id\" class=\"nav-link\" [class.active]=\"tab.id === activeId\" [class.disabled]=\"tab.disabled\"\n          href (click)=\"!!select(tab.id)\" role=\"tab\" [attr.aria-controls]=\"tab.id + '-panel'\" [attr.aria-expanded]=\"tab.id === activeId\">\n          {{tab.title}}<template [ngTemplateOutlet]=\"tab.titleTpl?.templateRef\"></template>\n        </a>\n      </li>\n    </ul>\n    <div class=\"tab-content\">\n      <template ngFor let-tab [ngForOf]=\"tabs\">\n        <div class=\"tab-pane active\" *ngIf=\"tab.id === activeId\" role=\"tabpanel\" [attr.aria-labelledby]=\"tab.id\" id=\"{{tab.id}}-panel\">\n          <template [ngTemplateOutlet]=\"tab.contentTpl.templateRef\"></template>\n        </div>\n      </template>\n    </div>\n  "
	        }), 
	        __metadata('design:paramtypes', [tabset_config_1.NgbTabsetConfig])
	    ], NgbTabset);
	    return NgbTabset;
	}());
	exports.NgbTabset = NgbTabset;
	//# sourceMappingURL=tabset.js.map
	
	/***/ }),
	/* 65 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var forms_1 = __webpack_require__(4);
	var util_1 = __webpack_require__(1);
	var ngb_time_1 = __webpack_require__(71);
	var timepicker_config_1 = __webpack_require__(39);
	var NGB_TIMEPICKER_VALUE_ACCESSOR = {
	    provide: forms_1.NG_VALUE_ACCESSOR,
	    useExisting: core_1.forwardRef(function () { return NgbTimepicker; }),
	    multi: true
	};
	/**
	 * A lightweight & configurable timepicker directive.
	 */
	var NgbTimepicker = (function () {
	    function NgbTimepicker(config) {
	        this.onChange = function (_) { };
	        this.onTouched = function () { };
	        this.meridian = config.meridian;
	        this.spinners = config.spinners;
	        this.seconds = config.seconds;
	        this.hourStep = config.hourStep;
	        this.minuteStep = config.minuteStep;
	        this.secondStep = config.secondStep;
	        this.disabled = config.disabled;
	        this.readonlyInputs = config.readonlyInputs;
	        this.size = config.size;
	    }
	    NgbTimepicker.prototype.writeValue = function (value) {
	        this.model = value ? new ngb_time_1.NgbTime(value.hour, value.minute, value.second) : new ngb_time_1.NgbTime();
	        if (!this.seconds && (!value || !util_1.isNumber(value.second))) {
	            this.model.second = 0;
	        }
	    };
	    NgbTimepicker.prototype.registerOnChange = function (fn) { this.onChange = fn; };
	    NgbTimepicker.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	    NgbTimepicker.prototype.setDisabledState = function (isDisabled) { this.disabled = isDisabled; };
	    NgbTimepicker.prototype.changeHour = function (step) {
	        this.model.changeHour(step);
	        this.propagateModelChange();
	    };
	    NgbTimepicker.prototype.changeMinute = function (step) {
	        this.model.changeMinute(step);
	        this.propagateModelChange();
	    };
	    NgbTimepicker.prototype.changeSecond = function (step) {
	        this.model.changeSecond(step);
	        this.propagateModelChange();
	    };
	    NgbTimepicker.prototype.updateHour = function (newVal) {
	        this.model.updateHour(util_1.toInteger(newVal));
	        this.propagateModelChange();
	    };
	    NgbTimepicker.prototype.updateMinute = function (newVal) {
	        this.model.updateMinute(util_1.toInteger(newVal));
	        this.propagateModelChange();
	    };
	    NgbTimepicker.prototype.updateSecond = function (newVal) {
	        this.model.updateSecond(util_1.toInteger(newVal));
	        this.propagateModelChange();
	    };
	    NgbTimepicker.prototype.toggleMeridian = function () {
	        if (this.meridian) {
	            this.changeHour(12);
	        }
	    };
	    NgbTimepicker.prototype.formatHour = function (value) {
	        if (util_1.isNumber(value)) {
	            if (this.meridian) {
	                return util_1.padNumber(value % 12 === 0 ? 12 : value % 12);
	            }
	            else {
	                return util_1.padNumber(value % 24);
	            }
	        }
	        else {
	            return util_1.padNumber(NaN);
	        }
	    };
	    NgbTimepicker.prototype.formatMinSec = function (value) { return util_1.padNumber(value); };
	    NgbTimepicker.prototype.setFormControlSize = function () { return { 'form-control-sm': this.size === 'small', 'form-control-lg': this.size === 'large' }; };
	    NgbTimepicker.prototype.setMeridanSize = function () { return { 'btn-sm': this.size === 'small', 'btn-lg': this.size === 'large' }; };
	    NgbTimepicker.prototype.ngOnChanges = function (changes) {
	        if (changes['seconds'] && !this.seconds && this.model && !util_1.isNumber(this.model.second)) {
	            this.model.second = 0;
	            this.propagateModelChange(false);
	        }
	    };
	    NgbTimepicker.prototype.propagateModelChange = function (touched) {
	        if (touched === void 0) { touched = true; }
	        if (touched) {
	            this.onTouched();
	        }
	        if (this.model.isValid(this.seconds)) {
	            this.onChange({ hour: this.model.hour, minute: this.model.minute, second: this.model.second });
	        }
	        else {
	            this.onChange(null);
	        }
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbTimepicker.prototype, "meridian", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbTimepicker.prototype, "spinners", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbTimepicker.prototype, "seconds", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], NgbTimepicker.prototype, "hourStep", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], NgbTimepicker.prototype, "minuteStep", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], NgbTimepicker.prototype, "secondStep", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbTimepicker.prototype, "readonlyInputs", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbTimepicker.prototype, "size", void 0);
	    NgbTimepicker = __decorate([
	        core_1.Component({
	            selector: 'ngb-timepicker',
	            styles: ["\n    .chevron::before {\n      border-style: solid;\n      border-width: 0.29em 0.29em 0 0;\n      content: '';\n      display: inline-block;\n      height: 0.69em;\n      left: 0.05em;\n      position: relative;\n      top: 0.15em;\n      transform: rotate(-45deg);\n      -webkit-transform: rotate(-45deg);\n      -ms-transform: rotate(-45deg);\n      vertical-align: middle;\n      width: 0.71em;\n    }\n\n    .chevron.bottom:before {\n      top: -.3em;\n      -webkit-transform: rotate(135deg);\n      -ms-transform: rotate(135deg);\n      transform: rotate(135deg);\n    }\n\n    .btn-link {\n      outline: 0;\n    }\n\n    .btn-link.disabled {\n      cursor: not-allowed;\n      opacity: .65;\n    }\n\n    input {\n      text-align: center;\n    }\n  "],
	            template: "\n     <fieldset [disabled]=\"disabled\" [class.disabled]=\"disabled\">\n      <table>\n        <tr *ngIf=\"spinners\">\n          <td class=\"text-center\">\n            <button type=\"button\" class=\"btn-link\" (click)=\"changeHour(hourStep)\"\n              [disabled]=\"disabled\" [class.disabled]=\"disabled\">\n              <span class=\"chevron\"></span>\n            </button>\n          </td>\n          <td>&nbsp;</td>\n          <td class=\"text-center\">\n            <button type=\"button\" class=\"btn-link\" (click)=\"changeMinute(minuteStep)\"\n              [disabled]=\"disabled\" [class.disabled]=\"disabled\">\n                <span class=\"chevron\"></span>\n            </button>\n          </td>\n          <template [ngIf]=\"seconds\">\n            <td>&nbsp;</td>\n            <td class=\"text-center\">\n              <button type=\"button\" class=\"btn-link\" (click)=\"changeSecond(secondStep)\"\n                [disabled]=\"disabled\" [class.disabled]=\"disabled\">\n                <span class=\"chevron\"></span>\n              </button>\n            </td>\n          </template>\n          <template [ngIf]=\"meridian\">\n            <td>&nbsp;</td>\n            <td>&nbsp;</td>\n          </template>\n        </tr>\n        <tr>\n          <td>\n            <input type=\"text\" class=\"form-control\" [ngClass]=\"setFormControlSize()\" maxlength=\"2\" size=\"2\" placeholder=\"HH\"\n              [value]=\"formatHour(model?.hour)\" (change)=\"updateHour($event.target.value)\"\n              [readonly]=\"readonlyInputs\" [disabled]=\"disabled\">\n          </td>\n          <td>&nbsp;:&nbsp;</td>\n          <td>\n            <input type=\"text\" class=\"form-control\" [ngClass]=\"setFormControlSize()\" maxlength=\"2\" size=\"2\" placeholder=\"MM\"\n              [value]=\"formatMinSec(model?.minute)\" (change)=\"updateMinute($event.target.value)\"\n              [readonly]=\"readonlyInputs\" [disabled]=\"disabled\">\n          </td>\n          <template [ngIf]=\"seconds\">\n            <td>&nbsp;:&nbsp;</td>\n            <td>\n              <input type=\"text\" class=\"form-control\" [ngClass]=\"setFormControlSize()\" maxlength=\"2\" size=\"2\" placeholder=\"SS\"\n                [value]=\"formatMinSec(model?.second)\" (change)=\"updateSecond($event.target.value)\"\n                [readonly]=\"readonlyInputs\" [disabled]=\"disabled\">\n            </td>\n          </template>\n          <template [ngIf]=\"meridian\">\n            <td>&nbsp;&nbsp;</td>\n            <td>\n              <button type=\"button\" class=\"btn btn-outline-primary\" [ngClass]=\"setMeridanSize()\"\n                (click)=\"toggleMeridian()\">{{model.hour >= 12 ? 'PM' : 'AM'}}</button>\n            </td>\n          </template>\n        </tr>\n        <tr *ngIf=\"spinners\">\n          <td class=\"text-center\">\n            <button type=\"button\" class=\"btn-link\" (click)=\"changeHour(-hourStep)\"\n              [disabled]=\"disabled\" [class.disabled]=\"disabled\">\n              <span class=\"chevron bottom\"></span>\n            </button>\n          </td>\n          <td>&nbsp;</td>\n          <td class=\"text-center\">\n            <button type=\"button\" class=\"btn-link\" (click)=\"changeMinute(-minuteStep)\"\n              [disabled]=\"disabled\" [class.disabled]=\"disabled\">\n              <span class=\"chevron bottom\"></span>\n            </button>\n          </td>\n          <template [ngIf]=\"seconds\">\n            <td>&nbsp;</td>\n            <td class=\"text-center\">\n              <button type=\"button\" class=\"btn-link\" (click)=\"changeSecond(-secondStep)\"\n                [disabled]=\"disabled\" [class.disabled]=\"disabled\">\n                <span class=\"chevron bottom\"></span>\n              </button>\n            </td>\n          </template>\n          <template [ngIf]=\"meridian\">\n            <td>&nbsp;</td>\n            <td>&nbsp;</td>\n          </template>\n        </tr>\n      </table>\n    </fieldset>\n  ",
	            providers: [NGB_TIMEPICKER_VALUE_ACCESSOR]
	        }), 
	        __metadata('design:paramtypes', [timepicker_config_1.NgbTimepickerConfig])
	    ], NgbTimepicker);
	    return NgbTimepicker;
	}());
	exports.NgbTimepicker = NgbTimepicker;
	//# sourceMappingURL=timepicker.js.map
	
	/***/ }),
	/* 66 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var triggers_1 = __webpack_require__(69);
	var positioning_1 = __webpack_require__(8);
	var popup_1 = __webpack_require__(7);
	var tooltip_config_1 = __webpack_require__(40);
	var NgbTooltipWindow = (function () {
	    function NgbTooltipWindow() {
	        this.placement = 'top';
	    }
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbTooltipWindow.prototype, "placement", void 0);
	    NgbTooltipWindow = __decorate([
	        core_1.Component({
	            selector: 'ngb-tooltip-window',
	            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
	            host: { '[class]': '"tooltip show tooltip-" + placement', 'role': 'tooltip' },
	            template: "\n    <div class=\"tooltip-inner\"><ng-content></ng-content></div>\n    "
	        }), 
	        __metadata('design:paramtypes', [])
	    ], NgbTooltipWindow);
	    return NgbTooltipWindow;
	}());
	exports.NgbTooltipWindow = NgbTooltipWindow;
	/**
	 * A lightweight, extensible directive for fancy tooltip creation.
	 */
	var NgbTooltip = (function () {
	    function NgbTooltip(_elementRef, _renderer, injector, componentFactoryResolver, viewContainerRef, config, ngZone) {
	        var _this = this;
	        this._elementRef = _elementRef;
	        this._renderer = _renderer;
	        /**
	       * Emits an event when the tooltip is shown
	       */
	        this.shown = new core_1.EventEmitter();
	        /**
	         * Emits an event when the tooltip is hidden
	         */
	        this.hidden = new core_1.EventEmitter();
	        this.placement = config.placement;
	        this.triggers = config.triggers;
	        this.container = config.container;
	        this._popupService = new popup_1.PopupService(NgbTooltipWindow, injector, viewContainerRef, _renderer, componentFactoryResolver);
	        this._zoneSubscription = ngZone.onStable.subscribe(function () {
	            if (_this._windowRef) {
	                positioning_1.positionElements(_this._elementRef.nativeElement, _this._windowRef.location.nativeElement, _this.placement, _this.container === 'body');
	            }
	        });
	    }
	    Object.defineProperty(NgbTooltip.prototype, "ngbTooltip", {
	        get: function () { return this._ngbTooltip; },
	        /**
	         * Content to be displayed as tooltip. If falsy, the tooltip won't open.
	         */
	        set: function (value) {
	            this._ngbTooltip = value;
	            if (!value && this._windowRef) {
	                this.close();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Opens an element’s tooltip. This is considered a “manual” triggering of the tooltip.
	     * The context is an optional value to be injected into the tooltip template when it is created.
	     */
	    NgbTooltip.prototype.open = function (context) {
	        if (!this._windowRef && this._ngbTooltip) {
	            this._windowRef = this._popupService.open(this._ngbTooltip, context);
	            this._windowRef.instance.placement = this.placement;
	            if (this.container === 'body') {
	                window.document.querySelector(this.container).appendChild(this._windowRef.location.nativeElement);
	            }
	            // we need to manually invoke change detection since events registered via
	            // Renderer::listen() - to be determined if this is a bug in the Angular itself
	            this._windowRef.changeDetectorRef.markForCheck();
	            this.shown.emit();
	        }
	    };
	    /**
	     * Closes an element’s tooltip. This is considered a “manual” triggering of the tooltip.
	     */
	    NgbTooltip.prototype.close = function () {
	        if (this._windowRef != null) {
	            this._popupService.close();
	            this._windowRef = null;
	            this.hidden.emit();
	        }
	    };
	    /**
	     * Toggles an element’s tooltip. This is considered a “manual” triggering of the tooltip.
	     */
	    NgbTooltip.prototype.toggle = function () {
	        if (this._windowRef) {
	            this.close();
	        }
	        else {
	            this.open();
	        }
	    };
	    /**
	     * Returns whether or not the tooltip is currently being shown
	     */
	    NgbTooltip.prototype.isOpen = function () { return this._windowRef != null; };
	    NgbTooltip.prototype.ngOnInit = function () {
	        this._unregisterListenersFn = triggers_1.listenToTriggers(this._renderer, this._elementRef.nativeElement, this.triggers, this.open.bind(this), this.close.bind(this), this.toggle.bind(this));
	    };
	    NgbTooltip.prototype.ngOnDestroy = function () {
	        this.close();
	        this._unregisterListenersFn();
	        this._zoneSubscription.unsubscribe();
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbTooltip.prototype, "placement", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], NgbTooltip.prototype, "triggers", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], NgbTooltip.prototype, "container", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', Object)
	    ], NgbTooltip.prototype, "shown", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', Object)
	    ], NgbTooltip.prototype, "hidden", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object), 
	        __metadata('design:paramtypes', [Object])
	    ], NgbTooltip.prototype, "ngbTooltip", null);
	    NgbTooltip = __decorate([
	        core_1.Directive({ selector: '[ngbTooltip]', exportAs: 'ngbTooltip' }), 
	        __metadata('design:paramtypes', [core_1.ElementRef, core_1.Renderer, core_1.Injector, core_1.ComponentFactoryResolver, core_1.ViewContainerRef, tooltip_config_1.NgbTooltipConfig, core_1.NgZone])
	    ], NgbTooltip);
	    return NgbTooltip;
	}());
	exports.NgbTooltip = NgbTooltip;
	//# sourceMappingURL=tooltip.js.map
	
	/***/ }),
	/* 67 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var util_1 = __webpack_require__(1);
	var NgbHighlight = (function () {
	    function NgbHighlight() {
	        this.highlightClass = 'ngb-highlight';
	    }
	    NgbHighlight.prototype.ngOnChanges = function (changes) {
	        var resultStr = util_1.toString(this.result);
	        var resultLC = resultStr.toLowerCase();
	        var termLC = util_1.toString(this.term).toLowerCase();
	        var currentIdx = 0;
	        if (termLC.length > 0) {
	            this.parts = resultLC.split(new RegExp("(" + util_1.regExpEscape(termLC) + ")")).map(function (part) {
	                var originalPart = resultStr.substr(currentIdx, part.length);
	                currentIdx += part.length;
	                return originalPart;
	            });
	        }
	        else {
	            this.parts = [resultStr];
	        }
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbHighlight.prototype, "highlightClass", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], NgbHighlight.prototype, "result", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], NgbHighlight.prototype, "term", void 0);
	    NgbHighlight = __decorate([
	        core_1.Component({
	            selector: 'ngb-highlight',
	            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
	            template: "<template ngFor [ngForOf]=\"parts\" let-part let-isOdd=\"odd\">" +
	                "<span *ngIf=\"isOdd\" class=\"{{highlightClass}}\">{{part}}</span><template [ngIf]=\"!isOdd\">{{part}}</template>" +
	                "</template>",
	            styles: ["\n    .ngb-highlight {\n      font-weight: bold;\n    }\n  "]
	        }), 
	        __metadata('design:paramtypes', [])
	    ], NgbHighlight);
	    return NgbHighlight;
	}());
	exports.NgbHighlight = NgbHighlight;
	//# sourceMappingURL=highlight.js.map
	
	/***/ }),
	/* 68 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var forms_1 = __webpack_require__(4);
	var let_1 = __webpack_require__(74);
	var do_1 = __webpack_require__(73);
	var fromEvent_1 = __webpack_require__(72);
	var positioning_1 = __webpack_require__(8);
	var typeahead_window_1 = __webpack_require__(42);
	var popup_1 = __webpack_require__(7);
	var util_1 = __webpack_require__(1);
	var typeahead_config_1 = __webpack_require__(41);
	var Key;
	(function (Key) {
	    Key[Key["Tab"] = 9] = "Tab";
	    Key[Key["Enter"] = 13] = "Enter";
	    Key[Key["Escape"] = 27] = "Escape";
	    Key[Key["ArrowUp"] = 38] = "ArrowUp";
	    Key[Key["ArrowDown"] = 40] = "ArrowDown";
	})(Key || (Key = {}));
	var NGB_TYPEAHEAD_VALUE_ACCESSOR = {
	    provide: forms_1.NG_VALUE_ACCESSOR,
	    useExisting: core_1.forwardRef(function () { return NgbTypeahead; }),
	    multi: true
	};
	/**
	 * NgbTypeahead directive provides a simple way of creating powerful typeaheads from any text input
	 */
	var NgbTypeahead = (function () {
	    function NgbTypeahead(_elementRef, _viewContainerRef, _renderer, _injector, componentFactoryResolver, config, ngZone) {
	        var _this = this;
	        this._elementRef = _elementRef;
	        this._viewContainerRef = _viewContainerRef;
	        this._renderer = _renderer;
	        this._injector = _injector;
	        /**
	         * An event emitted when a match is selected. Event payload is of type NgbTypeaheadSelectItemEvent.
	         */
	        this.selectItem = new core_1.EventEmitter();
	        this._onTouched = function () { };
	        this._onChange = function (_) { };
	        this.editable = config.editable;
	        this.focusFirst = config.focusFirst;
	        this.showHint = config.showHint;
	        this._valueChanges = fromEvent_1.fromEvent(_elementRef.nativeElement, 'input', function ($event) { return $event.target.value; });
	        this._popupService = new popup_1.PopupService(typeahead_window_1.NgbTypeaheadWindow, _injector, _viewContainerRef, _renderer, componentFactoryResolver);
	        this._zoneSubscription = ngZone.onStable.subscribe(function () {
	            if (_this._windowRef) {
	                positioning_1.positionElements(_this._elementRef.nativeElement, _this._windowRef.location.nativeElement, 'bottom-left');
	            }
	        });
	    }
	    NgbTypeahead.prototype.ngOnInit = function () {
	        var _this = this;
	        var inputValues$ = do_1._do.call(this._valueChanges, function (value) {
	            _this._userInput = value;
	            if (_this.editable) {
	                _this._onChange(value);
	            }
	        });
	        var results$ = let_1.letProto.call(inputValues$, this.ngbTypeahead);
	        var userInput$ = do_1._do.call(results$, function () {
	            if (!_this.editable) {
	                _this._onChange(undefined);
	            }
	        });
	        this._subscription = this._subscribeToUserInput(userInput$);
	    };
	    NgbTypeahead.prototype.ngOnDestroy = function () {
	        this._unsubscribeFromUserInput();
	        this._zoneSubscription.unsubscribe();
	    };
	    NgbTypeahead.prototype.registerOnChange = function (fn) { this._onChange = fn; };
	    NgbTypeahead.prototype.registerOnTouched = function (fn) { this._onTouched = fn; };
	    NgbTypeahead.prototype.writeValue = function (value) { this._writeInputValue(this._formatItemForInput(value)); };
	    NgbTypeahead.prototype.setDisabledState = function (isDisabled) {
	        this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
	    };
	    NgbTypeahead.prototype.dismissPopup = function () {
	        if (this.isPopupOpen()) {
	            this._closePopup();
	            this._writeInputValue(this._userInput);
	        }
	    };
	    NgbTypeahead.prototype.isPopupOpen = function () { return this._windowRef != null; };
	    NgbTypeahead.prototype.handleBlur = function () { this._onTouched(); };
	    NgbTypeahead.prototype.handleKeyDown = function (event) {
	        if (!this._windowRef) {
	            return;
	        }
	        if (Key[util_1.toString(event.which)]) {
	            switch (event.which) {
	                case Key.ArrowDown:
	                    event.preventDefault();
	                    this._windowRef.instance.next();
	                    this._showHint();
	                    break;
	                case Key.ArrowUp:
	                    event.preventDefault();
	                    this._windowRef.instance.prev();
	                    this._showHint();
	                    break;
	                case Key.Enter:
	                case Key.Tab:
	                    var result = this._windowRef.instance.getActive();
	                    if (util_1.isDefined(result)) {
	                        event.preventDefault();
	                        event.stopPropagation();
	                        this._selectResult(result);
	                    }
	                    this._closePopup();
	                    break;
	                case Key.Escape:
	                    event.preventDefault();
	                    this.dismissPopup();
	                    break;
	            }
	        }
	    };
	    NgbTypeahead.prototype._openPopup = function () {
	        var _this = this;
	        if (!this._windowRef) {
	            this._windowRef = this._popupService.open();
	            this._windowRef.instance.selectEvent.subscribe(function (result) { return _this._selectResultClosePopup(result); });
	        }
	    };
	    NgbTypeahead.prototype._closePopup = function () {
	        this._popupService.close();
	        this._windowRef = null;
	    };
	    NgbTypeahead.prototype._selectResult = function (result) {
	        var defaultPrevented = false;
	        this.selectItem.emit({ item: result, preventDefault: function () { defaultPrevented = true; } });
	        if (!defaultPrevented) {
	            this.writeValue(result);
	            this._onChange(result);
	        }
	    };
	    NgbTypeahead.prototype._selectResultClosePopup = function (result) {
	        this._selectResult(result);
	        this._closePopup();
	    };
	    NgbTypeahead.prototype._showHint = function () {
	        if (this.showHint) {
	            var userInputLowerCase = this._userInput.toLowerCase();
	            var formattedVal = this._formatItemForInput(this._windowRef.instance.getActive());
	            if (userInputLowerCase === formattedVal.substr(0, this._userInput.length).toLowerCase()) {
	                this._writeInputValue(this._userInput + formattedVal.substr(this._userInput.length));
	                this._renderer.invokeElementMethod(this._elementRef.nativeElement, 'setSelectionRange', [this._userInput.length, formattedVal.length]);
	            }
	            else {
	                this.writeValue(this._windowRef.instance.getActive());
	            }
	        }
	    };
	    NgbTypeahead.prototype._formatItemForInput = function (item) {
	        return item && this.inputFormatter ? this.inputFormatter(item) : util_1.toString(item);
	    };
	    NgbTypeahead.prototype._writeInputValue = function (value) {
	        this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', value);
	    };
	    NgbTypeahead.prototype._subscribeToUserInput = function (userInput$) {
	        var _this = this;
	        return userInput$.subscribe(function (results) {
	            if (!results || results.length === 0) {
	                _this._closePopup();
	            }
	            else {
	                _this._openPopup();
	                _this._windowRef.instance.focusFirst = _this.focusFirst;
	                _this._windowRef.instance.results = results;
	                _this._windowRef.instance.term = _this._elementRef.nativeElement.value;
	                if (_this.resultFormatter) {
	                    _this._windowRef.instance.formatter = _this.resultFormatter;
	                }
	                if (_this.resultTemplate) {
	                    _this._windowRef.instance.resultTemplate = _this.resultTemplate;
	                }
	                _this._showHint();
	                // The observable stream we are subscribing to might have async steps
	                // and if a component containing typeahead is using the OnPush strategy
	                // the change detection turn wouldn't be invoked automatically.
	                _this._windowRef.changeDetectorRef.detectChanges();
	            }
	        });
	    };
	    NgbTypeahead.prototype._unsubscribeFromUserInput = function () {
	        if (this._subscription) {
	            this._subscription.unsubscribe();
	        }
	        this._subscription = null;
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbTypeahead.prototype, "editable", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbTypeahead.prototype, "focusFirst", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Function)
	    ], NgbTypeahead.prototype, "inputFormatter", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Function)
	    ], NgbTypeahead.prototype, "ngbTypeahead", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Function)
	    ], NgbTypeahead.prototype, "resultFormatter", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', core_1.TemplateRef)
	    ], NgbTypeahead.prototype, "resultTemplate", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbTypeahead.prototype, "showHint", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', Object)
	    ], NgbTypeahead.prototype, "selectItem", void 0);
	    NgbTypeahead = __decorate([
	        core_1.Directive({
	            selector: 'input[ngbTypeahead]',
	            host: {
	                '(blur)': 'handleBlur()',
	                '[class.open]': 'isPopupOpen()',
	                '(document:click)': 'dismissPopup()',
	                '(keydown)': 'handleKeyDown($event)',
	                'autocomplete': 'off',
	                'autocapitalize': 'off',
	                'autocorrect': 'off'
	            },
	            providers: [NGB_TYPEAHEAD_VALUE_ACCESSOR]
	        }), 
	        __metadata('design:paramtypes', [core_1.ElementRef, core_1.ViewContainerRef, core_1.Renderer, core_1.Injector, core_1.ComponentFactoryResolver, typeahead_config_1.NgbTypeaheadConfig, core_1.NgZone])
	    ], NgbTypeahead);
	    return NgbTypeahead;
	}());
	exports.NgbTypeahead = NgbTypeahead;
	//# sourceMappingURL=typeahead.js.map
	
	/***/ }),
	/* 69 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var Trigger = (function () {
	    function Trigger(open, close) {
	        this.open = open;
	        this.close = close;
	        if (!close) {
	            this.close = open;
	        }
	    }
	    Trigger.prototype.isManual = function () { return this.open === 'manual' || this.close === 'manual'; };
	    return Trigger;
	}());
	exports.Trigger = Trigger;
	var DEFAULT_ALIASES = {
	    hover: ['mouseenter', 'mouseleave']
	};
	function parseTriggers(triggers, aliases) {
	    if (aliases === void 0) { aliases = DEFAULT_ALIASES; }
	    var trimmedTriggers = (triggers || '').trim();
	    if (trimmedTriggers.length === 0) {
	        return [];
	    }
	    var parsedTriggers = trimmedTriggers.split(/\s+/).map(function (trigger) { return trigger.split(':'); }).map(function (triggerPair) {
	        var alias = aliases[triggerPair[0]] || triggerPair;
	        return new Trigger(alias[0], alias[1]);
	    });
	    var manualTriggers = parsedTriggers.filter(function (triggerPair) { return triggerPair.isManual(); });
	    if (manualTriggers.length > 1) {
	        throw 'Triggers parse error: only one manual trigger is allowed';
	    }
	    if (manualTriggers.length === 1 && parsedTriggers.length > 1) {
	        throw 'Triggers parse error: manual trigger can\'t be mixed with other triggers';
	    }
	    return parsedTriggers;
	}
	exports.parseTriggers = parseTriggers;
	var noopFn = function () { };
	function listenToTriggers(renderer, nativeElement, triggers, openFn, closeFn, toggleFn) {
	    var parsedTriggers = parseTriggers(triggers);
	    var listeners = [];
	    if (parsedTriggers.length === 1 && parsedTriggers[0].isManual()) {
	        return noopFn;
	    }
	    parsedTriggers.forEach(function (trigger) {
	        if (trigger.open === trigger.close) {
	            listeners.push(renderer.listen(nativeElement, trigger.open, toggleFn));
	        }
	        else {
	            listeners.push(renderer.listen(nativeElement, trigger.open, openFn), renderer.listen(nativeElement, trigger.close, closeFn));
	        }
	    });
	    return function () { listeners.forEach(function (unsubscribeFn) { return unsubscribeFn(); }); };
	}
	exports.listenToTriggers = listenToTriggers;
	//# sourceMappingURL=triggers.js.map
	
	/***/ }),
	/* 70 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var util_1 = __webpack_require__(1);
	var popup_1 = __webpack_require__(7);
	var modal_backdrop_1 = __webpack_require__(55);
	var modal_window_1 = __webpack_require__(58);
	var modal_stack_1 = __webpack_require__(33);
	var modal_ref_1 = __webpack_require__(57);
	var NgbModalContainer = (function () {
	    function NgbModalContainer(_injector, _renderer, _viewContainerRef, _componentFactoryResolver, ngbModalStack) {
	        this._injector = _injector;
	        this._renderer = _renderer;
	        this._viewContainerRef = _viewContainerRef;
	        this._componentFactoryResolver = _componentFactoryResolver;
	        this._backdropFactory = _componentFactoryResolver.resolveComponentFactory(modal_backdrop_1.NgbModalBackdrop);
	        this._windowFactory = _componentFactoryResolver.resolveComponentFactory(modal_window_1.NgbModalWindow);
	        ngbModalStack.registerContainer(this);
	    }
	    NgbModalContainer.prototype.open = function (moduleCFR, contentInjector, content, options) {
	        var activeModal = new modal_ref_1.NgbActiveModal();
	        var contentRef = this._getContentRef(moduleCFR, contentInjector, content, activeModal);
	        var windowCmptRef;
	        var backdropCmptRef;
	        var ngbModalRef;
	        if (options.backdrop !== false) {
	            backdropCmptRef = this._viewContainerRef.createComponent(this._backdropFactory, 0, this._injector);
	        }
	        windowCmptRef = this._viewContainerRef.createComponent(this._windowFactory, this._viewContainerRef.length - 1, this._injector, contentRef.nodes);
	        ngbModalRef = new modal_ref_1.NgbModalRef(this._viewContainerRef, windowCmptRef, contentRef, backdropCmptRef);
	        activeModal.close = function (result) { ngbModalRef.close(result); };
	        activeModal.dismiss = function (reason) { ngbModalRef.dismiss(reason); };
	        this._applyWindowOptions(windowCmptRef.instance, options);
	        return ngbModalRef;
	    };
	    NgbModalContainer.prototype._applyWindowOptions = function (windowInstance, options) {
	        ['backdrop', 'keyboard', 'size', 'windowClass'].forEach(function (optionName) {
	            if (util_1.isDefined(options[optionName])) {
	                windowInstance[optionName] = options[optionName];
	            }
	        });
	    };
	    NgbModalContainer.prototype._getContentRef = function (moduleCFR, contentInjector, content, context) {
	        if (!content) {
	            return new popup_1.ContentRef([]);
	        }
	        else if (content instanceof core_1.TemplateRef) {
	            var viewRef = this._viewContainerRef.createEmbeddedView(content, context);
	            return new popup_1.ContentRef([viewRef.rootNodes], viewRef);
	        }
	        else if (util_1.isString(content)) {
	            return new popup_1.ContentRef([[this._renderer.createText(null, "" + content)]]);
	        }
	        else {
	            var contentCmptFactory = moduleCFR.resolveComponentFactory(content);
	            var modalContentInjector = core_1.ReflectiveInjector.resolveAndCreate([{ provide: modal_ref_1.NgbActiveModal, useValue: context }], contentInjector);
	            var componentRef = this._viewContainerRef.createComponent(contentCmptFactory, 0, modalContentInjector);
	            return new popup_1.ContentRef([[componentRef.location.nativeElement]], componentRef.hostView, componentRef);
	        }
	    };
	    NgbModalContainer = __decorate([
	        core_1.Directive({ selector: 'template[ngbModalContainer]' }), 
	        __metadata('design:paramtypes', [core_1.Injector, core_1.Renderer, core_1.ViewContainerRef, core_1.ComponentFactoryResolver, modal_stack_1.NgbModalStack])
	    ], NgbModalContainer);
	    return NgbModalContainer;
	}());
	exports.NgbModalContainer = NgbModalContainer;
	//# sourceMappingURL=modal-container.js.map
	
	/***/ }),
	/* 71 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var util_1 = __webpack_require__(1);
	var NgbTime = (function () {
	    function NgbTime(hour, minute, second) {
	        this.hour = util_1.toInteger(hour);
	        this.minute = util_1.toInteger(minute);
	        this.second = util_1.toInteger(second);
	    }
	    NgbTime.prototype.changeHour = function (step) {
	        if (step === void 0) { step = 1; }
	        this.updateHour((isNaN(this.hour) ? 0 : this.hour) + step);
	    };
	    NgbTime.prototype.updateHour = function (hour) {
	        if (util_1.isNumber(hour)) {
	            this.hour = (hour < 0 ? 24 + hour : hour) % 24;
	        }
	        else {
	            this.hour = NaN;
	        }
	    };
	    NgbTime.prototype.changeMinute = function (step) {
	        if (step === void 0) { step = 1; }
	        this.updateMinute((isNaN(this.minute) ? 0 : this.minute) + step);
	    };
	    NgbTime.prototype.updateMinute = function (minute) {
	        if (util_1.isNumber(minute)) {
	            this.minute = minute % 60 < 0 ? 60 + minute % 60 : minute % 60;
	            this.changeHour(Math.floor(minute / 60));
	        }
	        else {
	            this.minute = NaN;
	        }
	    };
	    NgbTime.prototype.changeSecond = function (step) {
	        if (step === void 0) { step = 1; }
	        this.updateSecond((isNaN(this.second) ? 0 : this.second) + step);
	    };
	    NgbTime.prototype.updateSecond = function (second) {
	        if (util_1.isNumber(second)) {
	            this.second = second < 0 ? 60 + second % 60 : second % 60;
	            this.changeMinute(Math.floor(second / 60));
	        }
	        else {
	            this.second = NaN;
	        }
	    };
	    NgbTime.prototype.isValid = function (checkSecs) {
	        if (checkSecs === void 0) { checkSecs = true; }
	        return util_1.isNumber(this.hour) && util_1.isNumber(this.minute) && (checkSecs ? util_1.isNumber(this.second) : true);
	    };
	    NgbTime.prototype.toString = function () { return (this.hour || 0) + ":" + (this.minute || 0) + ":" + (this.second || 0); };
	    return NgbTime;
	}());
	exports.NgbTime = NgbTime;
	//# sourceMappingURL=ngb-time.js.map
	
	/***/ }),
	/* 72 */
	/***/ (function(module, exports) {
	
	module.exports = __WEBPACK_EXTERNAL_MODULE_72__;
	
	/***/ }),
	/* 73 */
	/***/ (function(module, exports) {
	
	module.exports = __WEBPACK_EXTERNAL_MODULE_73__;
	
	/***/ }),
	/* 74 */
	/***/ (function(module, exports) {
	
	module.exports = __WEBPACK_EXTERNAL_MODULE_74__;
	
	/***/ }),
	/* 75 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var accordion_module_1 = __webpack_require__(9);
	var alert_module_1 = __webpack_require__(10);
	var radio_module_1 = __webpack_require__(11);
	var carousel_module_1 = __webpack_require__(12);
	var collapse_module_1 = __webpack_require__(13);
	var datepicker_module_1 = __webpack_require__(14);
	var dropdown_module_1 = __webpack_require__(15);
	var modal_module_1 = __webpack_require__(16);
	var pagination_module_1 = __webpack_require__(17);
	var popover_module_1 = __webpack_require__(18);
	var progressbar_module_1 = __webpack_require__(19);
	var rating_module_1 = __webpack_require__(20);
	var tabset_module_1 = __webpack_require__(21);
	var timepicker_module_1 = __webpack_require__(22);
	var tooltip_module_1 = __webpack_require__(23);
	var typeahead_module_1 = __webpack_require__(24);
	var accordion_module_2 = __webpack_require__(9);
	exports.NgbAccordionModule = accordion_module_2.NgbAccordionModule;
	exports.NgbAccordionConfig = accordion_module_2.NgbAccordionConfig;
	exports.NgbAccordion = accordion_module_2.NgbAccordion;
	exports.NgbPanel = accordion_module_2.NgbPanel;
	exports.NgbPanelTitle = accordion_module_2.NgbPanelTitle;
	exports.NgbPanelContent = accordion_module_2.NgbPanelContent;
	var alert_module_2 = __webpack_require__(10);
	exports.NgbAlertModule = alert_module_2.NgbAlertModule;
	exports.NgbAlertConfig = alert_module_2.NgbAlertConfig;
	exports.NgbAlert = alert_module_2.NgbAlert;
	var radio_module_2 = __webpack_require__(11);
	exports.NgbButtonsModule = radio_module_2.NgbButtonsModule;
	exports.NgbRadioGroup = radio_module_2.NgbRadioGroup;
	var carousel_module_2 = __webpack_require__(12);
	exports.NgbCarouselModule = carousel_module_2.NgbCarouselModule;
	exports.NgbCarouselConfig = carousel_module_2.NgbCarouselConfig;
	exports.NgbCarousel = carousel_module_2.NgbCarousel;
	exports.NgbSlide = carousel_module_2.NgbSlide;
	var collapse_module_2 = __webpack_require__(13);
	exports.NgbCollapseModule = collapse_module_2.NgbCollapseModule;
	exports.NgbCollapse = collapse_module_2.NgbCollapse;
	var datepicker_module_2 = __webpack_require__(14);
	exports.NgbDatepickerModule = datepicker_module_2.NgbDatepickerModule;
	exports.NgbDatepickerI18n = datepicker_module_2.NgbDatepickerI18n;
	exports.NgbDatepickerConfig = datepicker_module_2.NgbDatepickerConfig;
	exports.NgbDateParserFormatter = datepicker_module_2.NgbDateParserFormatter;
	exports.NgbDatepicker = datepicker_module_2.NgbDatepicker;
	exports.NgbInputDatepicker = datepicker_module_2.NgbInputDatepicker;
	var dropdown_module_2 = __webpack_require__(15);
	exports.NgbDropdownModule = dropdown_module_2.NgbDropdownModule;
	exports.NgbDropdownConfig = dropdown_module_2.NgbDropdownConfig;
	exports.NgbDropdown = dropdown_module_2.NgbDropdown;
	var modal_module_2 = __webpack_require__(16);
	exports.NgbModalModule = modal_module_2.NgbModalModule;
	exports.NgbModal = modal_module_2.NgbModal;
	exports.NgbActiveModal = modal_module_2.NgbActiveModal;
	exports.NgbModalRef = modal_module_2.NgbModalRef;
	exports.ModalDismissReasons = modal_module_2.ModalDismissReasons;
	var pagination_module_2 = __webpack_require__(17);
	exports.NgbPaginationModule = pagination_module_2.NgbPaginationModule;
	exports.NgbPaginationConfig = pagination_module_2.NgbPaginationConfig;
	exports.NgbPagination = pagination_module_2.NgbPagination;
	var popover_module_2 = __webpack_require__(18);
	exports.NgbPopoverModule = popover_module_2.NgbPopoverModule;
	exports.NgbPopoverConfig = popover_module_2.NgbPopoverConfig;
	exports.NgbPopover = popover_module_2.NgbPopover;
	var progressbar_module_2 = __webpack_require__(19);
	exports.NgbProgressbarModule = progressbar_module_2.NgbProgressbarModule;
	exports.NgbProgressbarConfig = progressbar_module_2.NgbProgressbarConfig;
	exports.NgbProgressbar = progressbar_module_2.NgbProgressbar;
	var rating_module_2 = __webpack_require__(20);
	exports.NgbRatingModule = rating_module_2.NgbRatingModule;
	exports.NgbRatingConfig = rating_module_2.NgbRatingConfig;
	exports.NgbRating = rating_module_2.NgbRating;
	var tabset_module_2 = __webpack_require__(21);
	exports.NgbTabsetModule = tabset_module_2.NgbTabsetModule;
	exports.NgbTabsetConfig = tabset_module_2.NgbTabsetConfig;
	exports.NgbTabset = tabset_module_2.NgbTabset;
	exports.NgbTab = tabset_module_2.NgbTab;
	exports.NgbTabContent = tabset_module_2.NgbTabContent;
	exports.NgbTabTitle = tabset_module_2.NgbTabTitle;
	var timepicker_module_2 = __webpack_require__(22);
	exports.NgbTimepickerModule = timepicker_module_2.NgbTimepickerModule;
	exports.NgbTimepickerConfig = timepicker_module_2.NgbTimepickerConfig;
	exports.NgbTimepicker = timepicker_module_2.NgbTimepicker;
	var tooltip_module_2 = __webpack_require__(23);
	exports.NgbTooltipModule = tooltip_module_2.NgbTooltipModule;
	exports.NgbTooltipConfig = tooltip_module_2.NgbTooltipConfig;
	exports.NgbTooltip = tooltip_module_2.NgbTooltip;
	var typeahead_module_2 = __webpack_require__(24);
	exports.NgbTypeaheadModule = typeahead_module_2.NgbTypeaheadModule;
	exports.NgbTypeaheadConfig = typeahead_module_2.NgbTypeaheadConfig;
	exports.NgbTypeahead = typeahead_module_2.NgbTypeahead;
	var NGB_MODULES = [
	    accordion_module_1.NgbAccordionModule, alert_module_1.NgbAlertModule, radio_module_1.NgbButtonsModule, carousel_module_1.NgbCarouselModule, collapse_module_1.NgbCollapseModule, datepicker_module_1.NgbDatepickerModule,
	    dropdown_module_1.NgbDropdownModule, modal_module_1.NgbModalModule, pagination_module_1.NgbPaginationModule, popover_module_1.NgbPopoverModule, progressbar_module_1.NgbProgressbarModule, rating_module_1.NgbRatingModule,
	    tabset_module_1.NgbTabsetModule, timepicker_module_1.NgbTimepickerModule, tooltip_module_1.NgbTooltipModule, typeahead_module_1.NgbTypeaheadModule
	];
	var NgbRootModule = (function () {
	    function NgbRootModule() {
	    }
	    NgbRootModule = __decorate([
	        core_1.NgModule({
	            imports: [
	                alert_module_1.NgbAlertModule.forRoot(), radio_module_1.NgbButtonsModule.forRoot(), collapse_module_1.NgbCollapseModule.forRoot(), progressbar_module_1.NgbProgressbarModule.forRoot(),
	                tooltip_module_1.NgbTooltipModule.forRoot(), typeahead_module_1.NgbTypeaheadModule.forRoot(), accordion_module_1.NgbAccordionModule.forRoot(), carousel_module_1.NgbCarouselModule.forRoot(),
	                datepicker_module_1.NgbDatepickerModule.forRoot(), dropdown_module_1.NgbDropdownModule.forRoot(), modal_module_1.NgbModalModule.forRoot(), pagination_module_1.NgbPaginationModule.forRoot(),
	                popover_module_1.NgbPopoverModule.forRoot(), progressbar_module_1.NgbProgressbarModule.forRoot(), rating_module_1.NgbRatingModule.forRoot(), tabset_module_1.NgbTabsetModule.forRoot(),
	                timepicker_module_1.NgbTimepickerModule.forRoot(), tooltip_module_1.NgbTooltipModule.forRoot()
	            ],
	            exports: NGB_MODULES
	        }), 
	        __metadata('design:paramtypes', [])
	    ], NgbRootModule);
	    return NgbRootModule;
	}());
	exports.NgbRootModule = NgbRootModule;
	var NgbModule = (function () {
	    function NgbModule() {
	    }
	    NgbModule.forRoot = function () { return { ngModule: NgbRootModule }; };
	    NgbModule = __decorate([
	        core_1.NgModule({ imports: NGB_MODULES, exports: NGB_MODULES }), 
	        __metadata('design:paramtypes', [])
	    ], NgbModule);
	    return NgbModule;
	}());
	exports.NgbModule = NgbModule;
	//# sourceMappingURL=index.js.map
	
	/***/ })
	/******/ ]);
	});
	//# sourceMappingURL=ng-bootstrap.js.map

/***/ },
/* 335 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var calendar_pipe_1 = __webpack_require__(239);
	exports.CalendarPipe = calendar_pipe_1.CalendarPipe;
	var date_format_pipe_1 = __webpack_require__(240);
	exports.DateFormatPipe = date_format_pipe_1.DateFormatPipe;
	var difference_pipe_1 = __webpack_require__(241);
	exports.DifferencePipe = difference_pipe_1.DifferencePipe;
	var duration_pipe_1 = __webpack_require__(242);
	exports.DurationPipe = duration_pipe_1.DurationPipe;
	var from_unix_pipe_1 = __webpack_require__(243);
	exports.FromUnixPipe = from_unix_pipe_1.FromUnixPipe;
	var moment_module_1 = __webpack_require__(336);
	exports.MomentModule = moment_module_1.MomentModule;
	var time_ago_pipe_1 = __webpack_require__(244);
	exports.TimeAgoPipe = time_ago_pipe_1.TimeAgoPipe;
	var utc_pipe_1 = __webpack_require__(245);
	exports.UtcPipe = utc_pipe_1.UtcPipe;
	//# sourceMappingURL=index.js.map

/***/ },
/* 336 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var core_1 = __webpack_require__(3);
	var calendar_pipe_1 = __webpack_require__(239);
	var date_format_pipe_1 = __webpack_require__(240);
	var difference_pipe_1 = __webpack_require__(241);
	var duration_pipe_1 = __webpack_require__(242);
	var from_unix_pipe_1 = __webpack_require__(243);
	var time_ago_pipe_1 = __webpack_require__(244);
	var utc_pipe_1 = __webpack_require__(245);
	var ANGULAR_MOMENT_PIPES = [calendar_pipe_1.CalendarPipe, date_format_pipe_1.DateFormatPipe, difference_pipe_1.DifferencePipe, duration_pipe_1.DurationPipe, from_unix_pipe_1.FromUnixPipe, time_ago_pipe_1.TimeAgoPipe,
	    utc_pipe_1.UtcPipe];
	var MomentModule = (function () {
	    function MomentModule() {
	    }
	    MomentModule.decorators = [
	        { type: core_1.NgModule, args: [{
	                    declarations: ANGULAR_MOMENT_PIPES,
	                    exports: ANGULAR_MOMENT_PIPES
	                },] },
	    ];
	    /** @nocollapse */
	    MomentModule.ctorParameters = [];
	    return MomentModule;
	}());
	exports.MomentModule = MomentModule;
	//# sourceMappingURL=moment.module.js.map

/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const masonry_1 = __webpack_require__(69);
	const brick_1 = __webpack_require__(194);
	var module_1 = __webpack_require__(338);
	exports.MasonryModule = module_1.MasonryModule;
	var masonry_2 = __webpack_require__(69);
	exports.AngularMasonry = masonry_2.AngularMasonry;
	var brick_2 = __webpack_require__(194);
	exports.AngularMasonryBrick = brick_2.AngularMasonryBrick;
	var masonry_options_1 = __webpack_require__(246);
	exports.MasonryOptions = masonry_options_1.MasonryOptions;
	exports.MASONRY_DIRECTIVES = [
	    masonry_1.AngularMasonry,
	    brick_1.AngularMasonryBrick
	];


/***/ },
/* 338 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	const core_1 = __webpack_require__(3);
	const masonry_1 = __webpack_require__(69);
	const brick_1 = __webpack_require__(194);
	const DIRECTIVES = [masonry_1.AngularMasonry, brick_1.AngularMasonryBrick];
	let MasonryModule = class MasonryModule {
	};
	MasonryModule = __decorate([
	    core_1.NgModule({
	        declarations: DIRECTIVES,
	        exports: DIRECTIVES
	    }), 
	    __metadata('design:paramtypes', [])
	], MasonryModule);
	exports.MasonryModule = MasonryModule;


/***/ },
/* 339 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	const core_1 = __webpack_require__(3);
	const router_1 = __webpack_require__(22);
	const app_routes_1 = __webpack_require__(341);
	const app_1 = __webpack_require__(342);
	const forms_1 = __webpack_require__(68);
	const platform_browser_1 = __webpack_require__(52);
	const http_1 = __webpack_require__(40);
	const angular2_moment_1 = __webpack_require__(335);
	const ng2_social_share_1 = __webpack_require__(548);
	const ng2_parallax_scroll_1 = __webpack_require__(544);
	const angular2_masonry_1 = __webpack_require__(337);
	const prismic_1 = __webpack_require__(19);
	const home_1 = __webpack_require__(250);
	const article_1 = __webpack_require__(252);
	const review_1 = __webpack_require__(255);
	const collection_filter_pipe_1 = __webpack_require__(343);
	const ng2_awesome_disqus_1 = __webpack_require__(351);
	const ng2_sharebuttons_1 = __webpack_require__(355);
	const material_1 = __webpack_require__(333);
	const ng_bootstrap_1 = __webpack_require__(334);
	const card_board_1 = __webpack_require__(247);
	const runway_board_1 = __webpack_require__(248);
	const otherseason_board_1 = __webpack_require__(249);
	const nav_bar_1 = __webpack_require__(347);
	const card_1 = __webpack_require__(345);
	const collection_card_1 = __webpack_require__(346);
	const image_modal_popup_1 = __webpack_require__(348);
	const collection_1 = __webpack_require__(253);
	const gallery_1 = __webpack_require__(254);
	const app_pipe_1 = __webpack_require__(340);
	const ng2_lazyload_image_1 = __webpack_require__(540);
	const instagram_service_1 = __webpack_require__(251);
	// Use the endpoint of your repository
	const ENDPOINT = 'https://charshu.prismic.io/api';
	// Specify an access token if your API is set to private
	const ACCESS_TOKEN = null;
	// Customize this to match your routing pattern
	const APP_CONFIG_DATA = {
	    server_ip_addr: 'http://localhost:8080'
	};
	const APP_CONFIG_TOKEN = new core_1.OpaqueToken('config');
	function linkResolver(doc) {
	    if (doc.type === 'article') {
	        const category = doc
	            .getLink('article.link')
	            .uid;
	        //menu fashion
	        if (category === 'shopping' || category === 'trends' || category === 'editorial' || category === 'style-du-jours') {
	            return `/fashion/` + category + `/` + encodeURIComponent(doc.uid);
	        }
	        else if (category === 'make-up' || category === 'skin-care') {
	            return `/beauty/` + category + `/` + encodeURIComponent(doc.uid);
	        }
	    }
	    else if (doc.type === 'category') {
	        const category = doc.uid;
	        if (category === 'shopping' || category === 'trends') {
	            return `/fashion/` + category;
	        }
	    }
	    else if (doc.type === 'collection') {
	        return `/runway/` + encodeURIComponent(doc.uid);
	    }
	    return `/${doc.type}/` + encodeURIComponent(doc.uid);
	}
	let AppModule = class AppModule {
	};
	AppModule = __decorate([
	    core_1.NgModule({
	        declarations: [
	            app_1.AppComponent,
	            article_1.Article,
	            home_1.Home,
	            nav_bar_1.NavBar,
	            card_board_1.CardBoardComponent,
	            card_1.Card,
	            app_pipe_1.TruncatePipe,
	            ng2_social_share_1.CeiboShare,
	            runway_board_1.RunwayBoardComponent,
	            collection_card_1.CollectionCard,
	            image_modal_popup_1.ImageModal,
	            collection_1.Collection,
	            gallery_1.Gallery,
	            review_1.Review,
	            otherseason_board_1.OtherSeasonComponent,
	            collection_filter_pipe_1.FilterPipe
	        ],
	        imports: [
	            platform_browser_1.BrowserModule, forms_1.FormsModule, http_1.HttpModule, router_1.RouterModule.forRoot(app_routes_1.rootRouterConfig),
	            angular2_moment_1.MomentModule,
	            ng2_parallax_scroll_1.Ng2ParallaxScrollModule,
	            ng2_awesome_disqus_1.DisqusModule,
	            ng2_sharebuttons_1.ShareButtonsModule,
	            material_1.MaterialModule.forRoot(),
	            ng_bootstrap_1.NgbModule.forRoot(),
	            angular2_masonry_1.MasonryModule,
	            ng2_lazyload_image_1.LazyLoadImageModule
	        ],
	        providers: [
	            prismic_1.PrismicService, instagram_service_1.InstagramService,
	            // {provide: LocationStrategy, useClass: HashLocationStrategy},
	            {
	                provide: 'PrismicEndpoint',
	                useValue: ENDPOINT
	            }, {
	                provide: 'PrismicAccessToken',
	                useValue: ACCESS_TOKEN
	            }, {
	                provide: 'LinkResolver',
	                useValue: linkResolver
	            }, {
	                provide: APP_CONFIG_TOKEN,
	                useValue: APP_CONFIG_DATA
	            }
	        ],
	        bootstrap: [app_1.AppComponent]
	    }), 
	    __metadata('design:paramtypes', [])
	], AppModule);
	exports.AppModule = AppModule;


/***/ },
/* 340 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	const core_1 = __webpack_require__(3);
	let TruncatePipe = class TruncatePipe {
	    transform(value, args) {
	        // let limit = args.length > 0 ? parseInt(args[0], 10) : 10;
	        // let trail = args.length > 1 ? args[1] : '...';
	        let limit = args ? parseInt(args, 10) : 10;
	        let trail = '';
	        return value.length > limit ? value.substring(0, limit) + trail : value;
	    }
	};
	TruncatePipe = __decorate([
	    core_1.Pipe({
	        name: 'limitTo'
	    }), 
	    __metadata('design:paramtypes', [])
	], TruncatePipe);
	exports.TruncatePipe = TruncatePipe;


/***/ },
/* 341 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const home_1 = __webpack_require__(250);
	const article_1 = __webpack_require__(252);
	const card_board_1 = __webpack_require__(247);
	const runway_board_1 = __webpack_require__(248);
	const collection_1 = __webpack_require__(253);
	const gallery_1 = __webpack_require__(254);
	const review_1 = __webpack_require__(255);
	const otherseason_board_1 = __webpack_require__(249);
	exports.rootRouterConfig = [
	    { path: '', component: home_1.Home },
	    { path: 'fashion/:category', component: card_board_1.CardBoardComponent },
	    { path: 'fashion/:category/:uid', component: article_1.Article },
	    { path: 'beauty/:category', component: card_board_1.CardBoardComponent },
	    { path: 'beauty/:category/:uid', component: article_1.Article },
	    { path: 'birls/:category', component: card_board_1.CardBoardComponent },
	    { path: 'birls/:category/:uid', component: article_1.Article },
	    { path: 'life-style/:category', component: card_board_1.CardBoardComponent },
	    { path: 'life-style/:category/:uid', component: article_1.Article },
	    { path: 'tags/:tagname', component: card_board_1.CardBoardComponent },
	    { path: 'runway', component: runway_board_1.RunwayBoardComponent },
	    {
	        path: 'runway/:uid', component: collection_1.Collection,
	        children: [
	            { path: '', redirectTo: 'collection', pathMatch: 'full' },
	            { path: 'review', component: review_1.Review },
	            { path: 'collection', component: gallery_1.Gallery },
	            { path: 'otherseason', component: otherseason_board_1.OtherSeasonComponent }
	        ]
	    }
	];


/***/ },
/* 342 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	const core_1 = __webpack_require__(3);
	const http_1 = __webpack_require__(40);
	const core_2 = __webpack_require__(3);
	let AppComponent = class AppComponent {
	    constructor(http, endpoint) {
	        this.http = http;
	        this.endpoint = endpoint;
	        this.fbUrl = 'https://www.facebook.com/birlsmagazine';
	        this.twUrl = 'https://www.facebook.com/birlsmagazine';
	        this.tags = ['#menswear', '#mensfashion', '#menstyle', '#mensstyle', '#menfashion', '#trend', '#trendy',
	            '#trends', '#trending', '#style', '#pink', '#outfit', '#fashionweek', '#hautecouture'];
	    }
	    ngOnInit() {
	        const repoEndpoint = this.endpoint.replace("/api", "");
	        this.http.post(repoEndpoint + '/app/settings/onboarding/run', {}, new http_1.Headers({ "Content-Type": "application/x-www-form-urlencoded", 'Access-Control-Allow-Origin': '*' })).subscribe(res => null, error => null);
	    }
	};
	AppComponent = __decorate([
	    core_1.Component({
	        selector: 'app',
	        template: __webpack_require__(572),
	        styles: [__webpack_require__(562)]
	    }),
	    __param(1, core_2.Inject('PrismicEndpoint')), 
	    __metadata('design:paramtypes', [(typeof (_a = typeof http_1.Http !== 'undefined' && http_1.Http) === 'function' && _a) || Object, String])
	], AppComponent);
	exports.AppComponent = AppComponent;
	var _a;


/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	const core_1 = __webpack_require__(3);
	let FilterPipe = class FilterPipe {
	    transform(items, args) {
	        if (!items)
	            return [];
	        return items.filter(it => {
	            console.log(args);
	            let season = it.getLink('collection.season');
	            let seasonName = season.getText('season.name');
	            let brand = it.getLink('collection.brand');
	            let brandName = brand.getText('brand.name');
	            if (args.brand === 'all' && args.season === 'all') {
	                return true;
	            }
	            else if (args.brand === 'all') {
	                if (season.id === args.season)
	                    return true;
	                else
	                    return false;
	            }
	            else if (args.season === 'all') {
	                if (brand.id === args.brand)
	                    return true;
	                else
	                    return false;
	            }
	            else {
	                if (brand.id === args.brand && season.id === args.season)
	                    return true;
	                else
	                    return false;
	            }
	        });
	    }
	};
	FilterPipe = __decorate([
	    core_1.Pipe({
	        name: 'myfilter'
	    }),
	    core_1.Injectable(), 
	    __metadata('design:paramtypes', [])
	], FilterPipe);
	exports.FilterPipe = FilterPipe;


/***/ },
/* 344 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	const core_1 = __webpack_require__(3);
	const prismic_io_1 = __webpack_require__(56);
	const PREVIEW_EXPIRES = 30 * 60 * 1000; // 30 minutes
	let PrismicService = class PrismicService {
	    constructor(endpoint, accessToken, linkResolver) {
	        this.endpoint = endpoint;
	        this.accessToken = accessToken;
	        this.linkResolver = linkResolver;
	    }
	    api() {
	        return prismic_io_1.Prismic.api(this.endpoint, {
	            accessToken: this.accessToken
	        });
	    }
	    setRef(token) {
	        document.cookie = `${prismic_io_1.Prismic.previewCookie}=${token}; expires=${PREVIEW_EXPIRES}`;
	    }
	    preview(token) {
	        return this.api().then((api) => {
	            return api.previewSession(token, this.linkResolver, '/').then((url) => {
	                this.setRef(token);
	                return url;
	            });
	        });
	    }
	};
	PrismicService = __decorate([
	    // 30 minutes
	    core_1.Injectable(),
	    __param(0, core_1.Inject('PrismicEndpoint')),
	    __param(1, core_1.Inject('PrismicAccessToken')),
	    __param(2, core_1.Inject('LinkResolver')), 
	    __metadata('design:paramtypes', [String, String, Object])
	], PrismicService);
	exports.PrismicService = PrismicService;


/***/ },
/* 345 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	const core_1 = __webpack_require__(3);
	const prismic_1 = __webpack_require__(19);
	let Card = class Card {
	    constructor(prismic, linkResolver) {
	        this.prismic = prismic;
	        this.linkResolver = linkResolver;
	        this.title = '';
	        this.titleText = '';
	        this.paragraph = '';
	        this.desc = '';
	        this.loadingImage = true;
	        this.isHover = false;
	        this.author = 'Crew';
	        this.limit = 100;
	        this.isMore = false;
	        this.loaded = false;
	    }
	    toggle() {
	        this.isHover = !this.isHover;
	        //console.log(this.isHover);
	    }
	    getRandomInt(min, max) {
	        return Math.floor(Math.random() * (max - min + 1)) + min;
	    }
	    capitalizeFirstLetter(string) {
	        if (string !== undefined) {
	            return string.charAt(0).toUpperCase() + string.slice(1);
	        }
	        return '';
	    }
	    ngOnInit() {
	        this.image = this.document.getImage('article.post-image');
	        if (this.randomHeight) {
	            this.imageHeight = this.getRandomInt(300, 450);
	        }
	        this.date = this.document.getDate('article.date');
	        this.category = this.document.getLink('article.link');
	        this.title = this.document.getStructuredText('article.title');
	        this.author = this.document.getText('article.author');
	        this.paragraph = this.document.getFirstParagraph();
	        this.desc = this.paragraph !== null ? this.paragraph.text : '';
	        if (this.desc.length >= this.limit) {
	            this.desc = this.desc.substring(0, this.limit);
	            this.desc = this.desc.substring(0, this.desc.lastIndexOf(' '));
	            let regexp = /[a-zA-Z]/;
	            while (!regexp.test(this.desc[this.desc.length - 1])) {
	                this.desc = this.desc.substring(0, this.desc.length - 1);
	            }
	            this.isMore = true;
	        }
	    }
	};
	__decorate([
	    core_1.Input(), 
	    __metadata('design:type', Object)
	], Card.prototype, "document", void 0);
	__decorate([
	    core_1.Input(), 
	    __metadata('design:type', Boolean)
	], Card.prototype, "randomHeight", void 0);
	__decorate([
	    core_1.Input(), 
	    __metadata('design:type', Number)
	], Card.prototype, "width", void 0);
	__decorate([
	    core_1.Input(), 
	    __metadata('design:type', Number)
	], Card.prototype, "imageHeight", void 0);
	__decorate([
	    core_1.Input(), 
	    __metadata('design:type', Number)
	], Card.prototype, "styleNumber", void 0);
	__decorate([
	    core_1.Input(), 
	    __metadata('design:type', String)
	], Card.prototype, "backgroundColor", void 0);
	__decorate([
	    core_1.Input(), 
	    __metadata('design:type', Object)
	], Card.prototype, "limit", void 0);
	Card = __decorate([
	    core_1.Component({
	        selector: 'card',
	        styles: [__webpack_require__(567)],
	        template: __webpack_require__(577)
	    }),
	    __param(1, core_1.Inject('LinkResolver')), 
	    __metadata('design:paramtypes', [(typeof (_a = typeof prismic_1.PrismicService !== 'undefined' && prismic_1.PrismicService) === 'function' && _a) || Object, Object])
	], Card);
	exports.Card = Card;
	var _a;


/***/ },
/* 346 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	const core_1 = __webpack_require__(3);
	const prismic_1 = __webpack_require__(19);
	let CollectionCard = class CollectionCard {
	    constructor(prismicService, linkResolver) {
	        this.prismicService = prismicService;
	        this.linkResolver = linkResolver;
	        this.limit = 100;
	        this.text = {
	            brand: 1,
	            season: 1
	        };
	        this.imagePointer = 0;
	        this.title = '';
	        this.titleText = '';
	        this.paragraph = '';
	        this.desc = '';
	        this.isHover = false;
	        this.isMore = false;
	        this.loaded = false;
	        this.loadingImage = true;
	        this.defaultImage = 'https://www.placecage.com/1000/1000';
	        this.image = 'https://images.unsplash.com/photo-1443890923422-7819ed4101c0?fm=jpg';
	        this.offset = 100;
	    }
	    toggle() {
	        this.isHover = !this.isHover;
	        //console.log(this.isHover);
	    }
	    getRandomInt(min, max) {
	        return Math.floor(Math.random() * (max - min + 1)) + min;
	    }
	    capitalizeFirstLetter(string) {
	        if (string !== undefined && string !== null) {
	            return string
	                .charAt(0)
	                .toUpperCase() + string.slice(1);
	        }
	        return '';
	    }
	    ngOnInit() {
	        this.enable_review = this.document.data['collection.enable-review'] !== undefined ? this.document.getBoolean('collection.enable-review') : false;
	        if (this.enable_review) {
	            this.title = this.document.getStructuredText('collection.title');
	            this.paragraph = this.document.getFirstParagraph();
	            this.desc = this.paragraph !== null ? this.paragraph.text : '';
	            if (this.desc.length >= this.limit) {
	                this.desc = this.desc.substring(0, this.limit);
	                this.desc = this.desc.substring(0, Math.min(this.desc.length, this.desc.lastIndexOf(' '))) + '...';
	                this.isMore = true;
	            }
	        }
	        this.card_h = 6.0 * 50 * this.cardSize;
	        this.card_w = 3.0 * 50 * this.cardSize;
	        this.text.brand = 1.4 * this.textSize;
	        this.text.season = 0.8 * this.textSize;
	        this.groupImages = this.document.getGroup('collection.gallery') ? this.document.getGroup('collection.gallery').toArray() : [];
	        this.image1 = this.groupImages[0].getImageView('image', 'thumb');
	        // this.image2 = this.groupImages[1].getImageView('image','thumb'); this.image3
	        // = this.groupImages[2].getImageView('image','thumb');
	        this.imageUrl = [
	            this.image1 !== undefined ? this.image1.url : ''
	        ];
	        this.date = this.document.getDate('collection.date');
	        this.season = this.document.getLink('collection.season');
	        this.brand = this.document.getLink('collection.brand');
	        console.log(this.brand);
	        this.loaded = true;
	    }
	};
	__decorate([
	    core_1.Input(), 
	    __metadata('design:type', Object)
	], CollectionCard.prototype, "document", void 0);
	__decorate([
	    core_1.Input(), 
	    __metadata('design:type', Boolean)
	], CollectionCard.prototype, "showDate", void 0);
	__decorate([
	    core_1.Input(), 
	    __metadata('design:type', Number)
	], CollectionCard.prototype, "cardSize", void 0);
	__decorate([
	    core_1.Input(), 
	    __metadata('design:type', Number)
	], CollectionCard.prototype, "textSize", void 0);
	__decorate([
	    core_1.Input(), 
	    __metadata('design:type', Number)
	], CollectionCard.prototype, "styleNumber", void 0);
	__decorate([
	    core_1.Input(), 
	    __metadata('design:type', Object)
	], CollectionCard.prototype, "limit", void 0);
	CollectionCard = __decorate([
	    core_1.Component({
	        selector: 'collection-card',
	        styles: [__webpack_require__(568)],
	        template: __webpack_require__(578)
	    }),
	    __param(1, core_1.Inject('LinkResolver')), 
	    __metadata('design:paramtypes', [(typeof (_a = typeof prismic_1.PrismicService !== 'undefined' && prismic_1.PrismicService) === 'function' && _a) || Object, Object])
	], CollectionCard);
	exports.CollectionCard = CollectionCard;
	var _a;


/***/ },
/* 347 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	const core_1 = __webpack_require__(3);
	const router_1 = __webpack_require__(22);
	const prismic_1 = __webpack_require__(19);
	let NavBar = class NavBar {
	    constructor(route, router, prismicService, linkResolver) {
	        this.route = route;
	        this.router = router;
	        this.prismicService = prismicService;
	        this.linkResolver = linkResolver;
	        this.tabs = [
	            {
	                label: 'Fashion',
	                link: 'fashion/all',
	                links: [
	                    {
	                        label: 'Shopping',
	                        url: 'fashion/shopping'
	                    }, {
	                        label: 'Trends',
	                        url: 'fashion/trends'
	                    }, {
	                        label: 'Style du Jours',
	                        url: 'fashion/style-du-jours'
	                    }, {
	                        label: 'Editorial',
	                        url: 'fashion/editorial'
	                    }, {
	                        label: 'Fashion mood board',
	                        url: 'fashion/mood-board'
	                    }
	                ],
	                groups: [
	                    {
	                        title: 'Mood board',
	                        style: 1,
	                        items: [
	                            {
	                                img: './../../../resources/img/menu/all.jpg',
	                                desc: 'All Fashion',
	                                url: 'fashion/all',
	                                active: false
	                            }
	                        ]
	                    }, {
	                        title: 'By Category',
	                        style: 2,
	                        items: [
	                            {
	                                img: './../../../resources/img/menu/shopping.jpg',
	                                desc: 'Shopping',
	                                url: 'fashion/shopping',
	                                active: false
	                            }, {
	                                img: './../../../resources/img/menu/trends.jpg',
	                                desc: 'Trends',
	                                url: 'fashion/trends',
	                                active: false
	                            }, {
	                                img: './../../../resources/img/menu/style.jpg',
	                                desc: 'Style du Jours',
	                                url: 'fashion/style-du-jours',
	                                active: false
	                            }, {
	                                img: './../../../resources/img/menu/editorial.jpg',
	                                desc: 'Editorial',
	                                url: 'fashion/editorial',
	                                active: false
	                            }
	                        ]
	                    }
	                ],
	                active: false
	            }, {
	                label: 'Beauty',
	                link: 'beauty/all',
	                links: [],
	                groups: [{
	                        title: 'Mood board',
	                        style: 1,
	                        items: [
	                            {
	                                img: './../../../resources/img/menu/all-beauty.jpg',
	                                desc: 'All Beauty',
	                                url: 'beauty/all',
	                                active: false
	                            }
	                        ]
	                    }, {
	                        title: 'By Category',
	                        style: 2,
	                        items: [
	                            {
	                                img: './../../../resources/img/menu/makeup.jpeg',
	                                desc: 'Make Up',
	                                url: 'beauty/make-up',
	                                active: false
	                            }, {
	                                img: './../../../resources/img/menu/skincare.jpeg',
	                                desc: 'Skin Care',
	                                url: 'beauty/skin-care',
	                                active: false
	                            }, {
	                                img: './../../../resources/img/menu/skincare.jpeg',
	                                desc: 'Beauty Tips',
	                                url: 'beauty/beauty-tips',
	                                active: false
	                            }, {
	                                img: './../../../resources/img/menu/skincare.jpeg',
	                                desc: 'Hair & Nail',
	                                url: 'beauty/hair-and-nail',
	                                active: false
	                            }
	                        ]
	                    }
	                ],
	                active: false
	            }, {
	                label: 'Birls',
	                link: 'birls/all',
	                links: [],
	                groups: [{
	                        title: '',
	                        style: 3,
	                        items: [
	                            {
	                                img: './../../../resources/img/menu/diary.jpg',
	                                desc: 'Editor\'s Diary',
	                                url: 'birls/editor-diary',
	                                active: false
	                            },
	                            {
	                                img: './../../../resources/img/menu/crew.jpg',
	                                desc: 'Birls Crew',
	                                url: 'birls/birls-crew',
	                                active: false
	                            }
	                        ]
	                    }],
	                active: false
	            }, {
	                label: 'Life Style',
	                link: 'life-style/all',
	                links: [],
	                groups: [{
	                        title: 'Mood board',
	                        style: 1,
	                        items: [
	                            {
	                                img: './../../../resources/img/menu/all.jpg',
	                                desc: 'All Fashion',
	                                url: 'life-style/all',
	                                active: false
	                            }
	                        ]
	                    }, {
	                        title: 'By Category',
	                        style: 2,
	                        items: [
	                            {
	                                img: './../../../resources/img/menu/diary.jpg',
	                                desc: 'Travel',
	                                url: 'life-style/travel',
	                                active: false
	                            },
	                            {
	                                img: './../../../resources/img/menu/crew.jpg',
	                                desc: 'Do',
	                                url: 'life-style/do',
	                                active: false
	                            },
	                            {
	                                img: './../../../resources/img/menu/crew.jpg',
	                                desc: 'Listen',
	                                url: 'life-style/listen',
	                                active: false
	                            },
	                            {
	                                img: './../../../resources/img/menu/crew.jpg',
	                                desc: 'See',
	                                url: 'life-style/see',
	                                active: false
	                            }
	                        ]
	                    }],
	                active: false
	            }, {
	                label: 'Runway',
	                link: 'runway',
	                links: [],
	                groups: [],
	                active: false
	            }, {
	                label: 'TV',
	                link: '',
	                links: [],
	                groups: [],
	                active: false
	            }, {
	                label: '<i class="fa fa-shopping-bag" aria-hidden="true"></i> Shop',
	                link: '',
	                links: [],
	                groups: [],
	                active: false
	            }
	        ];
	        this.lastIndex = -1;
	        this.backdrop = false;
	        this.sub = this
	            .route
	            .params
	            .subscribe(params => {
	            //    this.loaded = false;     prismicService.api().then((api) =>
	            // api.query([Prismic.Predicates.at('document.category', 'article'),
	            // Prismic.Predicates.at('my.article.link', categoryID)], { orderings:
	            // '[my.article.date desc]','fetchLinks': 'category.name' })).then((response) =>
	            // {         this.documents = response.results;         this.queryTitle =
	            // this.category;         this.loaded = true;       });
	        });
	    }
	    setActive(i) {
	        //console.log('mouseenter last' + this.lastIndex);
	        if (this.lastIndex === i) {
	            return;
	        }
	        if (this.lastIndex !== -1) {
	            this.tabs[this.lastIndex].active = false;
	        }
	        else {
	            //when mouse enter close all opening tabs before pop new tab
	            for (let i = 0; i < (this.tabs).length; i++) {
	                this.tabs[i].active = false;
	            }
	        }
	        this.lastIndex = i;
	        this.tabs[i].active = true;
	        //turn on backdrop only dropdown menu has links
	        if (this.tabs[i].links.length > 0 || this.tabs[i].groups.length > 0) {
	            this.backdrop = true;
	        }
	        else {
	            this.backdrop = false;
	        }
	        // console.log('mouseenter current' + this.lastIndex);
	    }
	    isActive(i) {
	        return this.tabs[i].active;
	    }
	    closeAll() {
	        //  console.log('mouseleave current' + this.lastIndex);
	        this.lastIndex = -1;
	        setTimeout(() => {
	            if (this.lastIndex === -1) {
	                for (let i = 0; i < (this.tabs).length; i++) {
	                    this.tabs[i].active = false;
	                }
	                this.backdrop = false;
	            }
	        }, 200);
	    }
	};
	NavBar = __decorate([
	    core_1.Component({
	        selector: 'nav-bar',
	        template: __webpack_require__(581),
	        styles: [__webpack_require__(571)]
	    }),
	    __param(3, core_1.Inject('LinkResolver')), 
	    __metadata('design:paramtypes', [(typeof (_a = typeof router_1.ActivatedRoute !== 'undefined' && router_1.ActivatedRoute) === 'function' && _a) || Object, (typeof (_b = typeof router_1.Router !== 'undefined' && router_1.Router) === 'function' && _b) || Object, (typeof (_c = typeof prismic_1.PrismicService !== 'undefined' && prismic_1.PrismicService) === 'function' && _c) || Object, Object])
	], NavBar);
	exports.NavBar = NavBar;
	var _a, _b, _c;


/***/ },
/* 348 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	const angular2_image_popup_1 = __webpack_require__(256);
	__export(__webpack_require__(256));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = {
	    directives: [angular2_image_popup_1.ImageModal]
	};


/***/ },
/* 349 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.DisqusComponent = undefined;
	
	var _core = __webpack_require__(3);
	
	var _disqus = __webpack_require__(257);
	
	var DisqusComponent = exports.DisqusComponent = function () {
	    function DisqusComponent(renderer, el, dService) {
	        this.renderer = renderer;
	        this.el = el;
	        this.dService = dService;
	        /** Track Comments */
	        this.comment = new _core.EventEmitter();
	    }
	    DisqusComponent.prototype.ngOnChanges = function (changes) {
	        if (!this.dService.disqus) {
	            this.addDisqusScript();
	        } else {
	            var idChange = changes['identifier'];
	            var urlChange = changes['url'];
	            var catChange = changes['categoryId'];
	            var titleChange = changes['title'];
	            var langChange = changes['language'];
	            var isResetNeeded = false;
	            if (idChange && idChange.currentValue !== idChange.previousValue) {
	                isResetNeeded = true;
	            }
	            if (urlChange && urlChange.currentValue !== urlChange.previousValue) {
	                isResetNeeded = true;
	            }
	            if (catChange && catChange.currentValue !== catChange.previousValue) {
	                isResetNeeded = true;
	            }
	            if (titleChange && titleChange.currentValue !== titleChange.previousValue) {
	                isResetNeeded = true;
	            }
	            if (langChange && langChange.currentValue !== langChange.previousValue) {
	                isResetNeeded = true;
	            }
	            if (isResetNeeded) {
	                this.reset();
	            }
	        }
	    };
	    DisqusComponent.prototype.addDisqusScript = function () {
	        /** Set disqus config */
	        this.dService.disqusConfig = this.getConfig();
	        /** Add DISQUS script */
	        var diqusScript = this.renderer.createElement(this.el.nativeElement, 'script');
	        diqusScript.src = "//" + this.shortname + ".disqus.com/embed.js";
	        diqusScript.async = true;
	        diqusScript.type = 'text/javascript';
	        this.renderer.setElementAttribute(diqusScript, 'data-timestamp', new Date().getTime().toString());
	    };
	    /** Reset disqus with new inputs. */
	    DisqusComponent.prototype.reset = function () {
	        this.dService.disqus.reset({
	            reload: true,
	            config: this.getConfig()
	        });
	    };
	    /** TODO: Get DISQUS Count */
	    /** ngAfterViewInit(){
	            this.dService.getCount().subscribe((res)=>{
	                console.log(res);
	            })
	        }
	    */
	    /** Get the valid URL */
	    DisqusComponent.prototype.validatedUrl = function () {
	        /** If URL is specified then validate it, otherwise use window URL */
	        if (this.url) {
	            var r = /(http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
	            if (r.test(this.url)) {
	                return this.url;
	            } else {
	                console.warn('[Disqus]: Invalid URL, fallback to Window URL');
	            }
	        }
	        /** fallback to "Window" URL, or to "Global" in universal */
	        return this.dService.url;
	    };
	    /** Get disqus settings from inputs */
	    DisqusComponent.prototype.getConfig = function () {
	        var self = this;
	        return function () {
	            this.page.identifier = self.identifier;
	            this.page.url = self.url;
	            this.page.title = self.title;
	            this.category_id = self.categoryId;
	            this.language = self.language;
	            /* Available callbacks are afterRender, onInit, onNewComment, onPaginate, onReady, preData, preInit, preReset */
	            this.callbacks.onNewComment = [function (comment) {
	                self.comment.emit(comment);
	            }];
	        };
	    };
	    DisqusComponent.prototype.ngOnDestroy = function () {
	        if (this.dService.window) {
	            this.dService.window.DISQUS = undefined;
	            this.dService.window.disqusConfig = undefined;
	            this.dService.window.DISQUSWIDGETS = undefined;
	        } else {
	            global.DISQUS = undefined;
	            global.disqusConfig = undefined;
	            global.DISQUSWIDGETS = undefined;
	        }
	    };
	    DisqusComponent.decorators = [{ type: _core.Component, args: [{
	            selector: 'disqus',
	            template: '<div id="disqus_thread"></div>',
	            changeDetection: _core.ChangeDetectionStrategy.OnPush
	        }] }];
	    /** @nocollapse */
	    DisqusComponent.ctorParameters = [{ type: _core.Renderer }, { type: _core.ElementRef }, { type: _disqus.DisqusService }];
	    DisqusComponent.propDecorators = {
	        'shortname': [{ type: _core.Input }],
	        'identifier': [{ type: _core.Input }],
	        'url': [{ type: _core.Input }],
	        'categoryId': [{ type: _core.Input }],
	        'language': [{ type: _core.Input }],
	        'title': [{ type: _core.Input }],
	        'count': [{ type: _core.Input }],
	        'removeOnDestroy': [{ type: _core.Input }],
	        'comment': [{ type: _core.Output }]
	    };
	    return DisqusComponent;
	}();
	//# sourceMappingURL=disqus.component.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 350 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.DisqusModule = undefined;
	
	var _core = __webpack_require__(3);
	
	var _disqus = __webpack_require__(349);
	
	var _disqus2 = __webpack_require__(257);
	
	// import { JsonpModule } from '@angular/http';
	var DisqusModule = exports.DisqusModule = function () {
	    function DisqusModule() {}
	    DisqusModule.decorators = [{ type: _core.NgModule, args: [{
	            declarations: [_disqus.DisqusComponent],
	            providers: [_disqus2.DisqusService],
	            // imports: [JsonpModule],/
	            exports: [_disqus.DisqusComponent]
	        }] }];
	    /** @nocollapse */
	    DisqusModule.ctorParameters = [];
	    return DisqusModule;
	}();
	//# sourceMappingURL=disqus.module.js.map

/***/ },
/* 351 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _disqus = __webpack_require__(350);
	
	Object.keys(_disqus).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function get() {
	      return _disqus[key];
	    }
	  });
	});

/***/ },
/* 352 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.ShareButtonComponent = undefined;
	
	var _core = __webpack_require__(3);
	
	var _shareButtons = __webpack_require__(195);
	
	var _shareButtons2 = __webpack_require__(258);
	
	var _window = __webpack_require__(259);
	
	var ShareButtonComponent = exports.ShareButtonComponent = function () {
	    function ShareButtonComponent(sbService, renderer, elementRef, window) {
	        this.sbService = sbService;
	        this.renderer = renderer;
	        this.elementRef = elementRef;
	        /** Show count, disabled by default */
	        this.count = false;
	        /** Output button count to calculate total share counts */
	        this.countOuter = new _core.EventEmitter();
	        /** Output pop up closed*/
	        this.popUpClosed = new _core.EventEmitter();
	        this.window = window.nativeWindow;
	    }
	    ShareButtonComponent.prototype.ngAfterViewInit = function () {
	        var _this = this;
	        /** If URL is not presented then set the current URL    */
	        if (this.url) {
	            /** If URL is presented check if it is a valid URL */
	            var r = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
	            if (!r.test(this.url)) {
	                console.warn('ShareButtons: Invalid URL, switching to window.location.href');
	                /** Use encodeURIComponent to get the full URL including after the hash */
	                this.url = this.window ? encodeURIComponent(this.window.location.href) : typeof global != 'undefined' ? global.url : '';
	            }
	        } else {
	            /** This supposed to fix window when undefined on Universal */
	            this.url = this.window ? encodeURIComponent(this.window.location.href) : typeof global != 'undefined' ? global.url : '';
	        }
	        /** Set button template */
	        this.renderer.setElementProperty(this.btn.nativeElement, 'innerHTML', this.button.template);
	        /** Set buttons classes */
	        var classes = this.button.classes.match(/\S+/g) || [];
	        classes.map(function (btnClass) {
	            return _this.renderer.setElementClass(_this.btn.nativeElement, btnClass, true);
	        });
	        /** Add share count if enabled */
	        if (this.count) {
	            this.sbService.count(this.button.provider, this.url).subscribe(function (shareCount) {
	                if (shareCount) {
	                    var counter = _this.renderer.createElement(_this.elementRef.nativeElement, 'span');
	                    _this.renderer.setElementClass(counter, 'sb-button-count', true);
	                    _this.renderer.setElementProperty(counter, 'textContent', _this.nFormatter(shareCount, 1));
	                    _this.countOuter.emit(shareCount);
	                }
	            });
	        }
	    };
	    /** Open share window */
	    ShareButtonComponent.prototype.share = function () {
	        var _this = this;
	        var shareArgs = new _shareButtons.ShareArgs(this.url, this.title, this.description, this.image, this.tags);
	        var popUp = this.window.open(this.sbService.share(this.button.provider, shareArgs), 'newwindow', this.sbService.windowAttr());
	        var pollTimer = this.window.setInterval(function () {
	            if (popUp.closed !== false) {
	                _this.window.clearInterval(pollTimer);
	                _this.popUpClosed.emit(_this.button.provider);
	            }
	        }, 200);
	    };
	    ShareButtonComponent.prototype.nFormatter = function (num, digits) {
	        var si = [{ value: 1E18, symbol: "E" }, { value: 1E15, symbol: "P" }, { value: 1E12, symbol: "T" }, { value: 1E9, symbol: "G" }, { value: 1E6, symbol: "M" }, { value: 1E3, symbol: "K" }],
	            rx = /\.0+$|(\.[0-9]*[1-9])0+$/,
	            i;
	        for (i = 0; i < si.length; i++) {
	            if (num >= si[i].value) {
	                return (num / si[i].value).toFixed(digits).replace(rx, "$1") + si[i].symbol;
	            }
	        }
	        return num.toFixed(digits).replace(rx, "$1");
	    };
	    ShareButtonComponent.decorators = [{ type: _core.Component, args: [{
	            selector: 'share-button',
	            template: '<button  #btn (click)="share()"></button>',
	            changeDetection: _core.ChangeDetectionStrategy.OnPush
	        }] }];
	    /** @nocollapse */
	    ShareButtonComponent.ctorParameters = [{ type: _shareButtons2.ShareButtonsService }, { type: _core.Renderer }, { type: _core.ElementRef }, { type: _window.WindowService }];
	    ShareButtonComponent.propDecorators = {
	        'url': [{ type: _core.Input }],
	        'title': [{ type: _core.Input }],
	        'description': [{ type: _core.Input }],
	        'image': [{ type: _core.Input }],
	        'tags': [{ type: _core.Input }],
	        'button': [{ type: _core.Input }],
	        'count': [{ type: _core.Input }],
	        'countOuter': [{ type: _core.Output }],
	        'popUpClosed': [{ type: _core.Output }],
	        'btn': [{ type: _core.ViewChild, args: ['btn'] }]
	    };
	    return ShareButtonComponent;
	}();
	//# sourceMappingURL=share-button.component.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 353 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.ShareButtonsComponent = undefined;
	
	var _core = __webpack_require__(3);
	
	var _shareButtons = __webpack_require__(195);
	
	var _shareProvider = __webpack_require__(196);
	
	var ShareButtonsComponent = exports.ShareButtonsComponent = function () {
	    function ShareButtonsComponent() {
	        /** Show count on share-buttons, disabled by default */
	        this.count = false;
	        /** Show total counts for all buttons, disabled by default */
	        this.totalCount = false;
	        /** Indicates weather default style is applied to the buttons */
	        this.defaultStyle = true;
	        /** Buttons default templates */
	        this.facebook = "<i class='fa fa-facebook'></i>";
	        this.twitter = "<i class='fa fa-twitter'></i>";
	        this.linkedIn = "<i class='fa fa-linkedin'></i>";
	        this.tumblr = "<i class='fa fa-tumblr'></i>";
	        this.google = "<i class='fa fa-google-plus'></i>";
	        this.pinterest = "<i class='fa fa-pinterest-p'></i>";
	        this.stumbleUpOn = "<i class='fa fa-stumbleupon'></i>";
	        this.reddit = "<i class='fa fa-reddit-alien'></i>";
	        this.popUpClosed = new _core.EventEmitter();
	        /** Total Count: the sum of all buttons share count */
	        this.tCount = 0;
	    }
	    ShareButtonsComponent.prototype.ngOnInit = function () {
	        this.buttons = [];
	        if (this.facebook) {
	            this.buttons.push(new _shareButtons.ShareButton(_shareProvider.ShareProvider.FACEBOOK, this.facebook, 'facebook'));
	        }
	        if (this.twitter) {
	            this.buttons.push(new _shareButtons.ShareButton(_shareProvider.ShareProvider.TWITTER, this.twitter, 'twitter'));
	        }
	        if (this.google) {
	            this.buttons.push(new _shareButtons.ShareButton(_shareProvider.ShareProvider.GOOGLEPLUS, this.google, 'googleplus'));
	        }
	        if (this.pinterest) {
	            this.buttons.push(new _shareButtons.ShareButton(_shareProvider.ShareProvider.PINTEREST, this.pinterest, 'pinterest'));
	        }
	        if (this.linkedIn) {
	            this.buttons.push(new _shareButtons.ShareButton(_shareProvider.ShareProvider.LINKEDIN, this.linkedIn, 'linkedin'));
	        }
	        if (this.tumblr) {
	            this.buttons.push(new _shareButtons.ShareButton(_shareProvider.ShareProvider.TUMBLR, this.tumblr, 'tumblr'));
	        }
	        if (this.reddit) {
	            this.buttons.push(new _shareButtons.ShareButton(_shareProvider.ShareProvider.REDDIT, this.reddit, 'reddit'));
	        }
	        if (this.stumbleUpOn) {
	            this.buttons.push(new _shareButtons.ShareButton(_shareProvider.ShareProvider.STUMBLEUPON, this.stumbleUpOn, 'stumbleupon'));
	        }
	    };
	    ShareButtonsComponent.prototype.counter = function (count) {
	        this.tCount += count;
	    };
	    ShareButtonsComponent.prototype.popUpClose = function (provider) {
	        this.popUpClosed.emit(provider);
	    };
	    ShareButtonsComponent.decorators = [{ type: _core.Component, args: [{
	            selector: 'share-buttons',
	            template: "\n      <div class=\"sb-container\">\n\n          <h3>\n              <span *ngIf=\"totalCount && tCount\" class=\"sb-count\">\n              {{tCount | nFormatter: 1}}\n          </span>\n              <span *ngIf=\"shareTitle\" class=\"sb-title\">{{shareTitle}}</span>\n          </h3>\n\n          <div class=\"sb-buttons\" [class.sb-default-style]=\"defaultStyle\">\n              <share-button class=\"sb-button\" *ngFor=\"let button of buttons\"\n                            [button]=\"button\"\n                            [url]=\"url\"\n                            [image]=\"image\"\n                            [title]=\"title\"\n                            [description]=\"description\"\n                            [tags]=\"tags\"\n                            [count]=\"count\"\n                            (countOuter)=\"counter($event)\"\n                            (popUpClosed)=\"popUpClose($event)\"\n              ></share-button>\n          </div>\n\n      </div>\n    ",
	            styles: ["\n      .sb-container .btn,.sb-container button{display:inline-block;margin-right:5px;background-color:#fff;border-radius:4px;padding:.43333em}.sb-container .btn:hover,.sb-container button:hover{color:#fff}.sb-container a:hover,.sb-container button{cursor:pointer;outline:0;border:0}.sb-container .sb-buttons{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-pack:distribute;justify-content:space-around;-ms-flex-wrap:wrap;flex-wrap:wrap;margin:20px 0}.sb-container .sb-buttons .sb-button{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-flex:1;-ms-flex:1 1 auto;flex:1 1 auto}.sb-container .sb-buttons .sb-button-count{font-size:.8em;text-align:center;position:relative;color:#333;margin-top:10px}.sb-container .sb-buttons .sb-button-count:before{position:absolute;top:-7px;left:50%;margin-left:-4px;content:\"\";width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-bottom:5px solid #e03237}.sb-container button{max-width:80px;min-width:50px;width:100%;background-color:transparent;margin:5px;font-size:1.2em}.sb-container button:hover{-webkit-transition:all .5s ease;transition:all .5s ease}.sb-default-style .facebook{color:#3b5998}.sb-default-style .facebook:hover{background:#3b5998}.sb-default-style .twitter{color:#00acee}.sb-default-style .twitter:hover{background:#00acee}.sb-default-style .googleplus{color:#e93f2e}.sb-default-style .googleplus:hover{background:#e93f2e}.sb-default-style .stumbleupon{color:#f74425}.sb-default-style .stumbleupon:hover{background:#f74425}.sb-default-style .linkedin{color:#0e76a8}.sb-default-style .linkedin:hover{background:#0e76a8}.sb-default-style .pinterest{color:#c92228}.sb-default-style .pinterest:hover{background:#c92228}.sb-default-style .reddit{color:#ff4006}.sb-default-style .reddit:hover{background:#ff4006}.sb-default-style .tumblr{color:#36465d}.sb-default-style .tumblr:hover{background:#36465d}.sb-default-style .github{color:purple}.sb-default-style .github:hover{background:purple}.sb-default-style .stackoverflow{color:#f48023}.sb-default-style .stackoverflow:hover{background:#f48023}\n    "],
	            encapsulation: _core.ViewEncapsulation.None,
	            changeDetection: _core.ChangeDetectionStrategy.OnPush
	        }] }];
	    /** @nocollapse */
	    ShareButtonsComponent.ctorParameters = [];
	    ShareButtonsComponent.propDecorators = {
	        'url': [{ type: _core.Input }],
	        'title': [{ type: _core.Input }],
	        'description': [{ type: _core.Input }],
	        'image': [{ type: _core.Input }],
	        'tags': [{ type: _core.Input }],
	        'shareTitle': [{ type: _core.Input }],
	        'count': [{ type: _core.Input }],
	        'totalCount': [{ type: _core.Input }],
	        'defaultStyle': [{ type: _core.Input }],
	        'facebook': [{ type: _core.Input }],
	        'twitter': [{ type: _core.Input }],
	        'linkedIn': [{ type: _core.Input }],
	        'tumblr': [{ type: _core.Input }],
	        'google': [{ type: _core.Input }],
	        'pinterest': [{ type: _core.Input }],
	        'stumbleUpOn': [{ type: _core.Input }],
	        'reddit': [{ type: _core.Input }],
	        'popUpClosed': [{ type: _core.Output }]
	    };
	    return ShareButtonsComponent;
	}();
	//# sourceMappingURL=share-buttons.component.js.map

/***/ },
/* 354 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.NFormatterPipe = undefined;
	
	var _core = __webpack_require__(3);
	
	var NFormatterPipe = exports.NFormatterPipe = function () {
	    function NFormatterPipe() {}
	    NFormatterPipe.prototype.transform = function (value, args) {
	        if (value) {
	            return this.nFormatter(value, args);
	        }
	    };
	    NFormatterPipe.prototype.nFormatter = function (num, digits) {
	        var si = [{ value: 1E18, symbol: "E" }, { value: 1E15, symbol: "P" }, { value: 1E12, symbol: "T" }, { value: 1E9, symbol: "G" }, { value: 1E6, symbol: "M" }, { value: 1E3, symbol: "K" }],
	            rx = /\.0+$|(\.[0-9]*[1-9])0+$/,
	            i;
	        for (i = 0; i < si.length; i++) {
	            if (num >= si[i].value) {
	                return (num / si[i].value).toFixed(digits).replace(rx, "$1") + si[i].symbol;
	            }
	        }
	        return num.toFixed(digits).replace(rx, "$1");
	    };
	    NFormatterPipe.decorators = [{ type: _core.Pipe, args: [{
	            name: 'nFormatter'
	        }] }];
	    /** @nocollapse */
	    NFormatterPipe.ctorParameters = [];
	    return NFormatterPipe;
	}();
	//# sourceMappingURL=n-formatter.pipe.js.map

/***/ },
/* 355 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _shareButtons = __webpack_require__(357);
	
	Object.keys(_shareButtons).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function get() {
	      return _shareButtons[key];
	    }
	  });
	});

/***/ },
/* 356 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	/** Share links functions:
	 *  ShareLinks: Provide a share links for all services
	 * */
	var ShareLinks = exports.ShareLinks = undefined;
	(function (ShareLinks) {
	    function fbShare(args) {
	        var shareUrl = 'https://www.facebook.com/sharer/sharer.php?u=' + args.url;
	        if (args.title) {
	            shareUrl += "&title=" + args.title;
	        }
	        if (args.description) {
	            shareUrl += "&description=" + args.description;
	        }
	        if (args.image) {
	            shareUrl += "&picture=" + args.image;
	        }
	        return shareUrl;
	    }
	    ShareLinks.fbShare = fbShare;
	    //TWITTER DOCS: https://dev.twitter.com/web/tweet-button/web-intent
	    function twitterShare(args) {
	        var shareUrl = 'https://twitter.com/intent/tweet?url=' + args.url;
	        if (args.description) {
	            shareUrl += '&text=' + args.description;
	        }
	        if (this.twitterAccount) {
	            shareUrl += '&via=' + this.twitterAccount;
	        }
	        if (args.tags) {
	            shareUrl += '&hashtags=' + args.tags;
	        }
	        return shareUrl;
	    }
	    ShareLinks.twitterShare = twitterShare;
	    //LINKEDIN DOCS https://developer.linkedin.com/docs/share-on-linkedin#!
	    function linkedInShare(args) {
	        var shareUrl = 'http://www.linkedin.com/shareArticle?url=' + args.url;
	        if (args.title) {
	            shareUrl += "&title=" + args.title;
	        }
	        if (args.description) {
	            shareUrl += "&summary=" + args.description;
	        }
	        return shareUrl;
	    }
	    ShareLinks.linkedInShare = linkedInShare;
	    //REDDIT DOCS: http://stackoverflow.com/questions/24823114/post-to-reddit-via-url
	    function redditShare(args) {
	        var shareUrl = 'http://www.reddit.com/submit?url=' + args.url;
	        if (args.title) {
	            shareUrl += "&title=" + args.title;
	        }
	        return shareUrl;
	    }
	    ShareLinks.redditShare = redditShare;
	    //TUMBLR DOCS: https://www.tumblr.com/docs/en/share_button
	    function tumblrShare(args) {
	        var shareUrl = 'http://tumblr.com/widgets/share/tool?canonicalUrl=' + args.url;
	        if (args.description) {
	            shareUrl += "&caption=" + args.description;
	        }
	        if (args.tags) {
	            shareUrl += "&tags=" + args.tags;
	        }
	        return shareUrl;
	    }
	    ShareLinks.tumblrShare = tumblrShare;
	    //STUMBLE DOCS: http://stackoverflow.com/questions/10591424/how-can-i-create-a-custom-stumbleupon-button
	    function stumbleShare(args) {
	        return 'http://www.stumbleupon.com/submit?url=' + args.url;
	    }
	    ShareLinks.stumbleShare = stumbleShare;
	    //GPLUS DOCS: https://developers.google.com/+/web/share/#sharelink
	    function gPlusShare(args) {
	        return 'https://plus.google.com/share?url=' + args.url;
	    }
	    ShareLinks.gPlusShare = gPlusShare;
	    function pinShare(args) {
	        var shareUrl = 'https://in.pinterest.com/pin/create/button/?url=' + args.url;
	        //if text is not provided, pin button won't work.
	        if (args.description) {
	            shareUrl += '&description=' + args.description;
	        } else {
	            var desc = document.querySelector('meta[property="og:description"]').getAttribute('content');
	            shareUrl += '&description=' + desc;
	        }
	        if (args.image) {
	            shareUrl += '&media=' + args.image;
	        } else {
	            var image = document.querySelector('meta[property="og:image"]').getAttribute('content');
	            shareUrl += '&media=' + image;
	        }
	        return shareUrl;
	    }
	    ShareLinks.pinShare = pinShare;
	})(ShareLinks || (exports.ShareLinks = ShareLinks = {}));
	//# sourceMappingURL=share-links.functions.js.map

/***/ },
/* 357 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.ShareArgs = exports.ShareButtonsService = exports.NFormatterPipe = exports.ShareButton = exports.ShareProvider = exports.ShareButtonComponent = exports.ShareButtonsComponent = exports.ShareButtonsModule = undefined;
	
	var _core = __webpack_require__(3);
	
	var _http = __webpack_require__(40);
	
	var _common = __webpack_require__(51);
	
	var _shareButtons = __webpack_require__(353);
	
	var _shareButton = __webpack_require__(352);
	
	var _shareButtons2 = __webpack_require__(258);
	
	var _window = __webpack_require__(259);
	
	var _nFormatter = __webpack_require__(354);
	
	var _shareProvider = __webpack_require__(196);
	
	var _shareButtons3 = __webpack_require__(195);
	
	var ShareButtonsModule = exports.ShareButtonsModule = function () {
	    function ShareButtonsModule() {}
	    ShareButtonsModule.decorators = [{ type: _core.NgModule, args: [{
	            declarations: [_shareButtons.ShareButtonsComponent, _shareButton.ShareButtonComponent, _nFormatter.NFormatterPipe],
	            imports: [_common.CommonModule, _http.JsonpModule],
	            providers: [_shareButtons2.ShareButtonsService, _window.WindowService],
	            exports: [_shareButtons.ShareButtonsComponent, _shareButton.ShareButtonComponent, _nFormatter.NFormatterPipe]
	        }] }];
	    /** @nocollapse */
	    ShareButtonsModule.ctorParameters = [];
	    return ShareButtonsModule;
	}();
	exports.ShareButtonsComponent = _shareButtons.ShareButtonsComponent;
	exports.ShareButtonComponent = _shareButton.ShareButtonComponent;
	exports.ShareProvider = _shareProvider.ShareProvider;
	exports.ShareButton = _shareButtons3.ShareButton;
	exports.NFormatterPipe = _nFormatter.NFormatterPipe;
	exports.ShareButtonsService = _shareButtons2.ShareButtonsService;
	exports.ShareArgs = _shareButtons3.ShareArgs;
	//# sourceMappingURL=share-buttons.module.js.map

/***/ },
/* 358 */
/***/ function(module, exports) {

	'use strict'
	
	exports.byteLength = byteLength
	exports.toByteArray = toByteArray
	exports.fromByteArray = fromByteArray
	
	var lookup = []
	var revLookup = []
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array
	
	var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
	for (var i = 0, len = code.length; i < len; ++i) {
	  lookup[i] = code[i]
	  revLookup[code.charCodeAt(i)] = i
	}
	
	revLookup['-'.charCodeAt(0)] = 62
	revLookup['_'.charCodeAt(0)] = 63
	
	function placeHoldersCount (b64) {
	  var len = b64.length
	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }
	
	  // the number of equal signs (place holders)
	  // if there are two placeholders, than the two characters before it
	  // represent one byte
	  // if there is only one, then the three characters before it represent 2 bytes
	  // this is just a cheap hack to not do indexOf twice
	  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
	}
	
	function byteLength (b64) {
	  // base64 is 4/3 + up to two characters of the original data
	  return b64.length * 3 / 4 - placeHoldersCount(b64)
	}
	
	function toByteArray (b64) {
	  var i, j, l, tmp, placeHolders, arr
	  var len = b64.length
	  placeHolders = placeHoldersCount(b64)
	
	  arr = new Arr(len * 3 / 4 - placeHolders)
	
	  // if there are placeholders, only get up to the last complete 4 chars
	  l = placeHolders > 0 ? len - 4 : len
	
	  var L = 0
	
	  for (i = 0, j = 0; i < l; i += 4, j += 3) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
	    arr[L++] = (tmp >> 16) & 0xFF
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }
	
	  if (placeHolders === 2) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
	    arr[L++] = tmp & 0xFF
	  } else if (placeHolders === 1) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }
	
	  return arr
	}
	
	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
	}
	
	function encodeChunk (uint8, start, end) {
	  var tmp
	  var output = []
	  for (var i = start; i < end; i += 3) {
	    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
	    output.push(tripletToBase64(tmp))
	  }
	  return output.join('')
	}
	
	function fromByteArray (uint8) {
	  var tmp
	  var len = uint8.length
	  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
	  var output = ''
	  var parts = []
	  var maxChunkLength = 16383 // must be multiple of 3
	
	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
	  }
	
	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1]
	    output += lookup[tmp >> 2]
	    output += lookup[(tmp << 4) & 0x3F]
	    output += '=='
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
	    output += lookup[tmp >> 10]
	    output += lookup[(tmp >> 4) & 0x3F]
	    output += lookup[(tmp << 2) & 0x3F]
	    output += '='
	  }
	
	  parts.push(output)
	
	  return parts.join('')
	}


/***/ },
/* 359 */,
/* 360 */
/***/ function(module, exports) {

	module.exports = {
	  "100": "Continue",
	  "101": "Switching Protocols",
	  "102": "Processing",
	  "200": "OK",
	  "201": "Created",
	  "202": "Accepted",
	  "203": "Non-Authoritative Information",
	  "204": "No Content",
	  "205": "Reset Content",
	  "206": "Partial Content",
	  "207": "Multi-Status",
	  "208": "Already Reported",
	  "226": "IM Used",
	  "300": "Multiple Choices",
	  "301": "Moved Permanently",
	  "302": "Found",
	  "303": "See Other",
	  "304": "Not Modified",
	  "305": "Use Proxy",
	  "307": "Temporary Redirect",
	  "308": "Permanent Redirect",
	  "400": "Bad Request",
	  "401": "Unauthorized",
	  "402": "Payment Required",
	  "403": "Forbidden",
	  "404": "Not Found",
	  "405": "Method Not Allowed",
	  "406": "Not Acceptable",
	  "407": "Proxy Authentication Required",
	  "408": "Request Timeout",
	  "409": "Conflict",
	  "410": "Gone",
	  "411": "Length Required",
	  "412": "Precondition Failed",
	  "413": "Payload Too Large",
	  "414": "URI Too Long",
	  "415": "Unsupported Media Type",
	  "416": "Range Not Satisfiable",
	  "417": "Expectation Failed",
	  "418": "I'm a teapot",
	  "421": "Misdirected Request",
	  "422": "Unprocessable Entity",
	  "423": "Locked",
	  "424": "Failed Dependency",
	  "425": "Unordered Collection",
	  "426": "Upgrade Required",
	  "428": "Precondition Required",
	  "429": "Too Many Requests",
	  "431": "Request Header Fields Too Large",
	  "451": "Unavailable For Legal Reasons",
	  "500": "Internal Server Error",
	  "501": "Not Implemented",
	  "502": "Bad Gateway",
	  "503": "Service Unavailable",
	  "504": "Gateway Timeout",
	  "505": "HTTP Version Not Supported",
	  "506": "Variant Also Negotiates",
	  "507": "Insufficient Storage",
	  "508": "Loop Detected",
	  "509": "Bandwidth Limit Exceeded",
	  "510": "Not Extended",
	  "511": "Network Authentication Required"
	}


/***/ },
/* 361 */,
/* 362 */,
/* 363 */,
/* 364 */,
/* 365 */,
/* 366 */,
/* 367 */,
/* 368 */,
/* 369 */,
/* 370 */,
/* 371 */,
/* 372 */,
/* 373 */,
/* 374 */,
/* 375 */,
/* 376 */,
/* 377 */,
/* 378 */,
/* 379 */,
/* 380 */,
/* 381 */,
/* 382 */,
/* 383 */,
/* 384 */,
/* 385 */,
/* 386 */,
/* 387 */,
/* 388 */,
/* 389 */,
/* 390 */,
/* 391 */,
/* 392 */,
/* 393 */,
/* 394 */,
/* 395 */,
/* 396 */,
/* 397 */,
/* 398 */,
/* 399 */,
/* 400 */,
/* 401 */,
/* 402 */,
/* 403 */,
/* 404 */,
/* 405 */,
/* 406 */,
/* 407 */,
/* 408 */,
/* 409 */,
/* 410 */,
/* 411 */,
/* 412 */,
/* 413 */,
/* 414 */,
/* 415 */,
/* 416 */,
/* 417 */,
/* 418 */,
/* 419 */,
/* 420 */,
/* 421 */,
/* 422 */,
/* 423 */,
/* 424 */,
/* 425 */,
/* 426 */,
/* 427 */,
/* 428 */,
/* 429 */,
/* 430 */,
/* 431 */,
/* 432 */,
/* 433 */,
/* 434 */,
/* 435 */,
/* 436 */,
/* 437 */,
/* 438 */,
/* 439 */,
/* 440 */,
/* 441 */,
/* 442 */,
/* 443 */,
/* 444 */,
/* 445 */,
/* 446 */,
/* 447 */,
/* 448 */,
/* 449 */,
/* 450 */,
/* 451 */,
/* 452 */,
/* 453 */,
/* 454 */,
/* 455 */,
/* 456 */,
/* 457 */,
/* 458 */,
/* 459 */,
/* 460 */,
/* 461 */,
/* 462 */,
/* 463 */,
/* 464 */,
/* 465 */,
/* 466 */,
/* 467 */,
/* 468 */,
/* 469 */,
/* 470 */,
/* 471 */,
/* 472 */,
/* 473 */,
/* 474 */,
/* 475 */,
/* 476 */,
/* 477 */,
/* 478 */,
/* 479 */,
/* 480 */,
/* 481 */,
/* 482 */,
/* 483 */,
/* 484 */,
/* 485 */,
/* 486 */,
/* 487 */,
/* 488 */,
/* 489 */,
/* 490 */,
/* 491 */,
/* 492 */,
/* 493 */,
/* 494 */,
/* 495 */,
/* 496 */,
/* 497 */,
/* 498 */,
/* 499 */,
/* 500 */,
/* 501 */,
/* 502 */,
/* 503 */,
/* 504 */,
/* 505 */,
/* 506 */,
/* 507 */,
/* 508 */,
/* 509 */,
/* 510 */,
/* 511 */,
/* 512 */,
/* 513 */,
/* 514 */,
/* 515 */,
/* 516 */,
/* 517 */,
/* 518 */,
/* 519 */,
/* 520 */,
/* 521 */,
/* 522 */,
/* 523 */,
/* 524 */,
/* 525 */,
/* 526 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * matchesSelector v2.0.2
	 * matchesSelector( element, '.selector' )
	 * MIT license
	 */
	
	/*jshint browser: true, strict: true, undef: true, unused: true */
	
	( function( window, factory ) {
	  /*global define: false, module: false */
	  'use strict';
	  // universal module definition
	  if ( true ) {
	    // AMD
	    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if ( typeof module == 'object' && module.exports ) {
	    // CommonJS
	    module.exports = factory();
	  } else {
	    // browser global
	    window.matchesSelector = factory();
	  }
	
	}( window, function factory() {
	  'use strict';
	
	  var matchesMethod = ( function() {
	    var ElemProto = window.Element.prototype;
	    // check for the standard method name first
	    if ( ElemProto.matches ) {
	      return 'matches';
	    }
	    // check un-prefixed
	    if ( ElemProto.matchesSelector ) {
	      return 'matchesSelector';
	    }
	    // check vendor prefixes
	    var prefixes = [ 'webkit', 'moz', 'ms', 'o' ];
	
	    for ( var i=0; i < prefixes.length; i++ ) {
	      var prefix = prefixes[i];
	      var method = prefix + 'MatchesSelector';
	      if ( ElemProto[ method ] ) {
	        return method;
	      }
	    }
	  })();
	
	  return function matchesSelector( elem, selector ) {
	    return elem[ matchesMethod ]( selector );
	  };
	
	}));


/***/ },
/* 527 */,
/* 528 */,
/* 529 */,
/* 530 */,
/* 531 */,
/* 532 */,
/* 533 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * Fizzy UI utils v2.0.3
	 * MIT license
	 */
	
	/*jshint browser: true, undef: true, unused: true, strict: true */
	
	( function( window, factory ) {
	  // universal module definition
	  /*jshint strict: false */ /*globals define, module, require */
	
	  if ( true ) {
	    // AMD
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	      __webpack_require__(526)
	    ], __WEBPACK_AMD_DEFINE_RESULT__ = function( matchesSelector ) {
	      return factory( window, matchesSelector );
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if ( typeof module == 'object' && module.exports ) {
	    // CommonJS
	    module.exports = factory(
	      window,
	      require('desandro-matches-selector')
	    );
	  } else {
	    // browser global
	    window.fizzyUIUtils = factory(
	      window,
	      window.matchesSelector
	    );
	  }
	
	}( window, function factory( window, matchesSelector ) {
	
	'use strict';
	
	var utils = {};
	
	// ----- extend ----- //
	
	// extends objects
	utils.extend = function( a, b ) {
	  for ( var prop in b ) {
	    a[ prop ] = b[ prop ];
	  }
	  return a;
	};
	
	// ----- modulo ----- //
	
	utils.modulo = function( num, div ) {
	  return ( ( num % div ) + div ) % div;
	};
	
	// ----- makeArray ----- //
	
	// turn element or nodeList into an array
	utils.makeArray = function( obj ) {
	  var ary = [];
	  if ( Array.isArray( obj ) ) {
	    // use object if already an array
	    ary = obj;
	  } else if ( obj && typeof obj.length == 'number' ) {
	    // convert nodeList to array
	    for ( var i=0; i < obj.length; i++ ) {
	      ary.push( obj[i] );
	    }
	  } else {
	    // array of single index
	    ary.push( obj );
	  }
	  return ary;
	};
	
	// ----- removeFrom ----- //
	
	utils.removeFrom = function( ary, obj ) {
	  var index = ary.indexOf( obj );
	  if ( index != -1 ) {
	    ary.splice( index, 1 );
	  }
	};
	
	// ----- getParent ----- //
	
	utils.getParent = function( elem, selector ) {
	  while ( elem != document.body ) {
	    elem = elem.parentNode;
	    if ( matchesSelector( elem, selector ) ) {
	      return elem;
	    }
	  }
	};
	
	// ----- getQueryElement ----- //
	
	// use element as selector string
	utils.getQueryElement = function( elem ) {
	  if ( typeof elem == 'string' ) {
	    return document.querySelector( elem );
	  }
	  return elem;
	};
	
	// ----- handleEvent ----- //
	
	// enable .ontype to trigger from .addEventListener( elem, 'type' )
	utils.handleEvent = function( event ) {
	  var method = 'on' + event.type;
	  if ( this[ method ] ) {
	    this[ method ]( event );
	  }
	};
	
	// ----- filterFindElements ----- //
	
	utils.filterFindElements = function( elems, selector ) {
	  // make array of elems
	  elems = utils.makeArray( elems );
	  var ffElems = [];
	
	  elems.forEach( function( elem ) {
	    // check that elem is an actual element
	    if ( !( elem instanceof HTMLElement ) ) {
	      return;
	    }
	    // add elem if no selector
	    if ( !selector ) {
	      ffElems.push( elem );
	      return;
	    }
	    // filter & find items if we have a selector
	    // filter
	    if ( matchesSelector( elem, selector ) ) {
	      ffElems.push( elem );
	    }
	    // find children
	    var childElems = elem.querySelectorAll( selector );
	    // concat childElems to filterFound array
	    for ( var i=0; i < childElems.length; i++ ) {
	      ffElems.push( childElems[i] );
	    }
	  });
	
	  return ffElems;
	};
	
	// ----- debounceMethod ----- //
	
	utils.debounceMethod = function( _class, methodName, threshold ) {
	  // original method
	  var method = _class.prototype[ methodName ];
	  var timeoutName = methodName + 'Timeout';
	
	  _class.prototype[ methodName ] = function() {
	    var timeout = this[ timeoutName ];
	    if ( timeout ) {
	      clearTimeout( timeout );
	    }
	    var args = arguments;
	
	    var _this = this;
	    this[ timeoutName ] = setTimeout( function() {
	      method.apply( _this, args );
	      delete _this[ timeoutName ];
	    }, threshold || 100 );
	  };
	};
	
	// ----- docReady ----- //
	
	utils.docReady = function( callback ) {
	  var readyState = document.readyState;
	  if ( readyState == 'complete' || readyState == 'interactive' ) {
	    // do async to allow for other scripts to run. metafizzy/flickity#441
	    setTimeout( callback );
	  } else {
	    document.addEventListener( 'DOMContentLoaded', callback );
	  }
	};
	
	// ----- htmlInit ----- //
	
	// http://jamesroberts.name/blog/2010/02/22/string-functions-for-javascript-trim-to-camel-case-to-dashed-and-to-underscore/
	utils.toDashed = function( str ) {
	  return str.replace( /(.)([A-Z])/g, function( match, $1, $2 ) {
	    return $1 + '-' + $2;
	  }).toLowerCase();
	};
	
	var console = window.console;
	/**
	 * allow user to initialize classes via [data-namespace] or .js-namespace class
	 * htmlInit( Widget, 'widgetName' )
	 * options are parsed from data-namespace-options
	 */
	utils.htmlInit = function( WidgetClass, namespace ) {
	  utils.docReady( function() {
	    var dashedNamespace = utils.toDashed( namespace );
	    var dataAttr = 'data-' + dashedNamespace;
	    var dataAttrElems = document.querySelectorAll( '[' + dataAttr + ']' );
	    var jsDashElems = document.querySelectorAll( '.js-' + dashedNamespace );
	    var elems = utils.makeArray( dataAttrElems )
	      .concat( utils.makeArray( jsDashElems ) );
	    var dataOptionsAttr = dataAttr + '-options';
	    var jQuery = window.jQuery;
	
	    elems.forEach( function( elem ) {
	      var attr = elem.getAttribute( dataAttr ) ||
	        elem.getAttribute( dataOptionsAttr );
	      var options;
	      try {
	        options = attr && JSON.parse( attr );
	      } catch ( error ) {
	        // log error, do not initialize
	        if ( console ) {
	          console.error( 'Error parsing ' + dataAttr + ' on ' + elem.className +
	          ': ' + error );
	        }
	        return;
	      }
	      // initialize
	      var instance = new WidgetClass( elem, options );
	      // make available via $().data('namespace')
	      if ( jQuery ) {
	        jQuery.data( elem, namespace, instance );
	      }
	    });
	
	  });
	};
	
	// -----  ----- //
	
	return utils;
	
	}));


/***/ },
/* 534 */
/***/ function(module, exports, __webpack_require__) {

	var http = __webpack_require__(237);
	
	var https = module.exports;
	
	for (var key in http) {
	    if (http.hasOwnProperty(key)) https[key] = http[key];
	};
	
	https.request = function (params, cb) {
	    if (!params) params = {};
	    params.scheme = 'https';
	    params.protocol = 'https:';
	    return http.request.call(this, params, cb);
	}


/***/ },
/* 535 */,
/* 536 */
/***/ function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]
	
	  i += d
	
	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}
	
	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}
	
	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}
	
	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0
	
	  value = Math.abs(value)
	
	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }
	
	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }
	
	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}
	
	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}
	
	  buffer[offset + i - d] |= s * 128
	}


/***/ },
/* 537 */,
/* 538 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * Masonry v4.1.1
	 * Cascading grid layout library
	 * http://masonry.desandro.com
	 * MIT License
	 * by David DeSandro
	 */
	
	( function( window, factory ) {
	  // universal module definition
	  /* jshint strict: false */ /*globals define, module, require */
	  if ( true ) {
	    // AMD
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	        __webpack_require__(552),
	        __webpack_require__(220)
	      ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if ( typeof module == 'object' && module.exports ) {
	    // CommonJS
	    module.exports = factory(
	      require('outlayer'),
	      require('get-size')
	    );
	  } else {
	    // browser global
	    window.Masonry = factory(
	      window.Outlayer,
	      window.getSize
	    );
	  }
	
	}( window, function factory( Outlayer, getSize ) {
	
	'use strict';
	
	// -------------------------- masonryDefinition -------------------------- //
	
	  // create an Outlayer layout class
	  var Masonry = Outlayer.create('masonry');
	  // isFitWidth -> fitWidth
	  Masonry.compatOptions.fitWidth = 'isFitWidth';
	
	  Masonry.prototype._resetLayout = function() {
	    this.getSize();
	    this._getMeasurement( 'columnWidth', 'outerWidth' );
	    this._getMeasurement( 'gutter', 'outerWidth' );
	    this.measureColumns();
	
	    // reset column Y
	    this.colYs = [];
	    for ( var i=0; i < this.cols; i++ ) {
	      this.colYs.push( 0 );
	    }
	
	    this.maxY = 0;
	  };
	
	  Masonry.prototype.measureColumns = function() {
	    this.getContainerWidth();
	    // if columnWidth is 0, default to outerWidth of first item
	    if ( !this.columnWidth ) {
	      var firstItem = this.items[0];
	      var firstItemElem = firstItem && firstItem.element;
	      // columnWidth fall back to item of first element
	      this.columnWidth = firstItemElem && getSize( firstItemElem ).outerWidth ||
	        // if first elem has no width, default to size of container
	        this.containerWidth;
	    }
	
	    var columnWidth = this.columnWidth += this.gutter;
	
	    // calculate columns
	    var containerWidth = this.containerWidth + this.gutter;
	    var cols = containerWidth / columnWidth;
	    // fix rounding errors, typically with gutters
	    var excess = columnWidth - containerWidth % columnWidth;
	    // if overshoot is less than a pixel, round up, otherwise floor it
	    var mathMethod = excess && excess < 1 ? 'round' : 'floor';
	    cols = Math[ mathMethod ]( cols );
	    this.cols = Math.max( cols, 1 );
	  };
	
	  Masonry.prototype.getContainerWidth = function() {
	    // container is parent if fit width
	    var isFitWidth = this._getOption('fitWidth');
	    var container = isFitWidth ? this.element.parentNode : this.element;
	    // check that this.size and size are there
	    // IE8 triggers resize on body size change, so they might not be
	    var size = getSize( container );
	    this.containerWidth = size && size.innerWidth;
	  };
	
	  Masonry.prototype._getItemLayoutPosition = function( item ) {
	    item.getSize();
	    // how many columns does this brick span
	    var remainder = item.size.outerWidth % this.columnWidth;
	    var mathMethod = remainder && remainder < 1 ? 'round' : 'ceil';
	    // round if off by 1 pixel, otherwise use ceil
	    var colSpan = Math[ mathMethod ]( item.size.outerWidth / this.columnWidth );
	    colSpan = Math.min( colSpan, this.cols );
	
	    var colGroup = this._getColGroup( colSpan );
	    // get the minimum Y value from the columns
	    var minimumY = Math.min.apply( Math, colGroup );
	    var shortColIndex = colGroup.indexOf( minimumY );
	
	    // position the brick
	    var position = {
	      x: this.columnWidth * shortColIndex,
	      y: minimumY
	    };
	
	    // apply setHeight to necessary columns
	    var setHeight = minimumY + item.size.outerHeight;
	    var setSpan = this.cols + 1 - colGroup.length;
	    for ( var i = 0; i < setSpan; i++ ) {
	      this.colYs[ shortColIndex + i ] = setHeight;
	    }
	
	    return position;
	  };
	
	  /**
	   * @param {Number} colSpan - number of columns the element spans
	   * @returns {Array} colGroup
	   */
	  Masonry.prototype._getColGroup = function( colSpan ) {
	    if ( colSpan < 2 ) {
	      // if brick spans only one column, use all the column Ys
	      return this.colYs;
	    }
	
	    var colGroup = [];
	    // how many different places could this brick fit horizontally
	    var groupCount = this.cols + 1 - colSpan;
	    // for each group potential horizontal position
	    for ( var i = 0; i < groupCount; i++ ) {
	      // make an array of colY values for that one group
	      var groupColYs = this.colYs.slice( i, i + colSpan );
	      // and get the max value of the array
	      colGroup[i] = Math.max.apply( Math, groupColYs );
	    }
	    return colGroup;
	  };
	
	  Masonry.prototype._manageStamp = function( stamp ) {
	    var stampSize = getSize( stamp );
	    var offset = this._getElementOffset( stamp );
	    // get the columns that this stamp affects
	    var isOriginLeft = this._getOption('originLeft');
	    var firstX = isOriginLeft ? offset.left : offset.right;
	    var lastX = firstX + stampSize.outerWidth;
	    var firstCol = Math.floor( firstX / this.columnWidth );
	    firstCol = Math.max( 0, firstCol );
	    var lastCol = Math.floor( lastX / this.columnWidth );
	    // lastCol should not go over if multiple of columnWidth #425
	    lastCol -= lastX % this.columnWidth ? 0 : 1;
	    lastCol = Math.min( this.cols - 1, lastCol );
	    // set colYs to bottom of the stamp
	
	    var isOriginTop = this._getOption('originTop');
	    var stampMaxY = ( isOriginTop ? offset.top : offset.bottom ) +
	      stampSize.outerHeight;
	    for ( var i = firstCol; i <= lastCol; i++ ) {
	      this.colYs[i] = Math.max( stampMaxY, this.colYs[i] );
	    }
	  };
	
	  Masonry.prototype._getContainerSize = function() {
	    this.maxY = Math.max.apply( Math, this.colYs );
	    var size = {
	      height: this.maxY
	    };
	
	    if ( this._getOption('fitWidth') ) {
	      size.width = this._getContainerFitWidth();
	    }
	
	    return size;
	  };
	
	  Masonry.prototype._getContainerFitWidth = function() {
	    var unusedCols = 0;
	    // count unused columns
	    var i = this.cols;
	    while ( --i ) {
	      if ( this.colYs[i] !== 0 ) {
	        break;
	      }
	      unusedCols++;
	    }
	    // fit container to columns that have been used
	    return ( this.cols - unusedCols ) * this.columnWidth - this.gutter;
	  };
	
	  Masonry.prototype.needsResizeLayout = function() {
	    var previousWidth = this.containerWidth;
	    this.getContainerWidth();
	    return previousWidth != this.containerWidth;
	  };
	
	  return Masonry;
	
	}));


/***/ },
/* 539 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./af": 81,
		"./af.js": 81,
		"./ar": 87,
		"./ar-dz": 82,
		"./ar-dz.js": 82,
		"./ar-ly": 83,
		"./ar-ly.js": 83,
		"./ar-ma": 84,
		"./ar-ma.js": 84,
		"./ar-sa": 85,
		"./ar-sa.js": 85,
		"./ar-tn": 86,
		"./ar-tn.js": 86,
		"./ar.js": 87,
		"./az": 88,
		"./az.js": 88,
		"./be": 89,
		"./be.js": 89,
		"./bg": 90,
		"./bg.js": 90,
		"./bn": 91,
		"./bn.js": 91,
		"./bo": 92,
		"./bo.js": 92,
		"./br": 93,
		"./br.js": 93,
		"./bs": 94,
		"./bs.js": 94,
		"./ca": 95,
		"./ca.js": 95,
		"./cs": 96,
		"./cs.js": 96,
		"./cv": 97,
		"./cv.js": 97,
		"./cy": 98,
		"./cy.js": 98,
		"./da": 99,
		"./da.js": 99,
		"./de": 101,
		"./de-at": 100,
		"./de-at.js": 100,
		"./de.js": 101,
		"./dv": 102,
		"./dv.js": 102,
		"./el": 103,
		"./el.js": 103,
		"./en-au": 104,
		"./en-au.js": 104,
		"./en-ca": 105,
		"./en-ca.js": 105,
		"./en-gb": 106,
		"./en-gb.js": 106,
		"./en-ie": 107,
		"./en-ie.js": 107,
		"./en-nz": 108,
		"./en-nz.js": 108,
		"./eo": 109,
		"./eo.js": 109,
		"./es": 111,
		"./es-do": 110,
		"./es-do.js": 110,
		"./es.js": 111,
		"./et": 112,
		"./et.js": 112,
		"./eu": 113,
		"./eu.js": 113,
		"./fa": 114,
		"./fa.js": 114,
		"./fi": 115,
		"./fi.js": 115,
		"./fo": 116,
		"./fo.js": 116,
		"./fr": 119,
		"./fr-ca": 117,
		"./fr-ca.js": 117,
		"./fr-ch": 118,
		"./fr-ch.js": 118,
		"./fr.js": 119,
		"./fy": 120,
		"./fy.js": 120,
		"./gd": 121,
		"./gd.js": 121,
		"./gl": 122,
		"./gl.js": 122,
		"./he": 123,
		"./he.js": 123,
		"./hi": 124,
		"./hi.js": 124,
		"./hr": 125,
		"./hr.js": 125,
		"./hu": 126,
		"./hu.js": 126,
		"./hy-am": 127,
		"./hy-am.js": 127,
		"./id": 128,
		"./id.js": 128,
		"./is": 129,
		"./is.js": 129,
		"./it": 130,
		"./it.js": 130,
		"./ja": 131,
		"./ja.js": 131,
		"./jv": 132,
		"./jv.js": 132,
		"./ka": 133,
		"./ka.js": 133,
		"./kk": 134,
		"./kk.js": 134,
		"./km": 135,
		"./km.js": 135,
		"./ko": 136,
		"./ko.js": 136,
		"./ky": 137,
		"./ky.js": 137,
		"./lb": 138,
		"./lb.js": 138,
		"./lo": 139,
		"./lo.js": 139,
		"./lt": 140,
		"./lt.js": 140,
		"./lv": 141,
		"./lv.js": 141,
		"./me": 142,
		"./me.js": 142,
		"./mi": 143,
		"./mi.js": 143,
		"./mk": 144,
		"./mk.js": 144,
		"./ml": 145,
		"./ml.js": 145,
		"./mr": 146,
		"./mr.js": 146,
		"./ms": 148,
		"./ms-my": 147,
		"./ms-my.js": 147,
		"./ms.js": 148,
		"./my": 149,
		"./my.js": 149,
		"./nb": 150,
		"./nb.js": 150,
		"./ne": 151,
		"./ne.js": 151,
		"./nl": 153,
		"./nl-be": 152,
		"./nl-be.js": 152,
		"./nl.js": 153,
		"./nn": 154,
		"./nn.js": 154,
		"./pa-in": 155,
		"./pa-in.js": 155,
		"./pl": 156,
		"./pl.js": 156,
		"./pt": 158,
		"./pt-br": 157,
		"./pt-br.js": 157,
		"./pt.js": 158,
		"./ro": 159,
		"./ro.js": 159,
		"./ru": 160,
		"./ru.js": 160,
		"./se": 161,
		"./se.js": 161,
		"./si": 162,
		"./si.js": 162,
		"./sk": 163,
		"./sk.js": 163,
		"./sl": 164,
		"./sl.js": 164,
		"./sq": 165,
		"./sq.js": 165,
		"./sr": 167,
		"./sr-cyrl": 166,
		"./sr-cyrl.js": 166,
		"./sr.js": 167,
		"./ss": 168,
		"./ss.js": 168,
		"./sv": 169,
		"./sv.js": 169,
		"./sw": 170,
		"./sw.js": 170,
		"./ta": 171,
		"./ta.js": 171,
		"./te": 172,
		"./te.js": 172,
		"./tet": 173,
		"./tet.js": 173,
		"./th": 174,
		"./th.js": 174,
		"./tl-ph": 175,
		"./tl-ph.js": 175,
		"./tlh": 176,
		"./tlh.js": 176,
		"./tr": 177,
		"./tr.js": 177,
		"./tzl": 178,
		"./tzl.js": 178,
		"./tzm": 180,
		"./tzm-latn": 179,
		"./tzm-latn.js": 179,
		"./tzm.js": 180,
		"./uk": 181,
		"./uk.js": 181,
		"./uz": 182,
		"./uz.js": 182,
		"./vi": 183,
		"./vi.js": 183,
		"./x-pseudo": 184,
		"./x-pseudo.js": 184,
		"./yo": 185,
		"./yo.js": 185,
		"./zh-cn": 186,
		"./zh-cn.js": 186,
		"./zh-hk": 187,
		"./zh-hk.js": 187,
		"./zh-tw": 188,
		"./zh-tw.js": 188
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 539;


/***/ },
/* 540 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var lazyload_image_directive_1 = __webpack_require__(300);
	exports.LazyLoadImageDirective = lazyload_image_directive_1.LazyLoadImageDirective;
	var lazyload_image_module_1 = __webpack_require__(542);
	exports.LazyLoadImageModule = lazyload_image_module_1.LazyLoadImageModule;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = lazyload_image_module_1.LazyLoadImageModule;


/***/ },
/* 541 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	__webpack_require__(311);
	__webpack_require__(310);
	__webpack_require__(600);
	__webpack_require__(597);
	__webpack_require__(226);
	__webpack_require__(309);
	var Observable_1 = __webpack_require__(4);
	function isVisible(element, threshold, _window) {
	    if (threshold === void 0) { threshold = 0; }
	    if (_window === void 0) { _window = window; }
	    var rect = element.getBoundingClientRect();
	    var elementLargerThenViewport = rect.top <= threshold && rect.bottom >= -threshold;
	    var topInsideViewport = rect.top >= 0 && rect.top <= _window.innerHeight;
	    var belowInsideViewport = rect.bottom >= 0 && rect.bottom <= _window.innerHeight;
	    var rightsideInViewport = rect.right >= -threshold && (rect.right - threshold) <= _window.innerWidth;
	    var leftsideInViewport = rect.left >= -threshold && (rect.left - threshold) <= _window.innerWidth;
	    return (elementLargerThenViewport ||
	        ((topInsideViewport || belowInsideViewport) &&
	            (rightsideInViewport || leftsideInViewport)));
	}
	function loadImage(imagePath) {
	    return Observable_1.Observable
	        .create(function (observer) {
	        var img = new Image();
	        img.src = imagePath;
	        img.onload = function () {
	            observer.next(imagePath);
	            observer.complete();
	        };
	        img.onerror = function (err) {
	            observer.error(null);
	        };
	    });
	}
	function setImage(element, imagePath) {
	    var isImgNode = element.nodeName.toLowerCase() === 'img';
	    if (isImgNode) {
	        element.src = imagePath;
	    }
	    else {
	        element.style.backgroundImage = "url('" + imagePath + "')";
	    }
	    return element;
	}
	function setLoadedStyle(element) {
	    var styles = element.className
	        .split(' ')
	        .filter(function (s) { return !!s; })
	        .filter(function (s) { return s !== 'ng2-lazyloading'; });
	    styles.push('ng2-lazyloaded');
	    element.className = styles.join(' ');
	    return element;
	}
	function lazyLoadImage(image, imagePath, defaultImagePath, errorImgPath, offset) {
	    if (defaultImagePath) {
	        setImage(image, defaultImagePath);
	    }
	    return function (scrollObservable) {
	        return scrollObservable
	            .filter(function () { return isVisible(image, offset); })
	            .take(1)
	            .mergeMap(function () { return loadImage(imagePath); })
	            .do(function () { return setImage(image, imagePath); })
	            .catch(function () {
	            if (errorImgPath) {
	                setImage(image, errorImgPath);
	            }
	            return Observable_1.Observable.of(1);
	        })
	            .do(function () { return setLoadedStyle(image); });
	    };
	}
	exports.lazyLoadImage = lazyLoadImage;


/***/ },
/* 542 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var core_1 = __webpack_require__(3);
	var lazyload_image_directive_1 = __webpack_require__(300);
	var LazyLoadImageModule = (function () {
	    function LazyLoadImageModule() {
	    }
	    return LazyLoadImageModule;
	}());
	LazyLoadImageModule = __decorate([
	    core_1.NgModule({
	        declarations: [lazyload_image_directive_1.LazyLoadImageDirective],
	        exports: [lazyload_image_directive_1.LazyLoadImageDirective]
	    })
	], LazyLoadImageModule);
	exports.LazyLoadImageModule = LazyLoadImageModule;


/***/ },
/* 543 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	__webpack_require__(599);
	__webpack_require__(598);
	__webpack_require__(313);
	__webpack_require__(308);
	var Observable_1 = __webpack_require__(4);
	var scrollListeners = new WeakMap();
	function sampleObservable(obs, scheduler) {
	    return obs
	        .sampleTime(100, scheduler)
	        .share()
	        .startWith('');
	}
	exports.sampleObservable = sampleObservable;
	exports.getScrollListener = function (scrollTarget) {
	    if (!scrollTarget || typeof scrollTarget.addEventListener !== 'function') {
	        console.warn('`addEventListener` on ' + scrollTarget + ' (scrollTarget) is not a function. Skipping this target');
	        return Observable_1.Observable.empty();
	    }
	    if (scrollListeners.has(scrollTarget)) {
	        return scrollListeners.get(scrollTarget);
	    }
	    var srollEvent = Observable_1.Observable.create(function (observer) {
	        var eventName = 'scroll';
	        var handler = function (event) { return observer.next(event); };
	        var options = { passive: true, capture: false };
	        scrollTarget.addEventListener(eventName, handler, options);
	        return function () { return scrollTarget.removeEventListener(eventName, handler, options); };
	    });
	    var listener = sampleObservable(srollEvent);
	    scrollListeners.set(scrollTarget, listener);
	    return listener;
	};


/***/ },
/* 544 */
/***/ function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory(__webpack_require__(3), __webpack_require__(68), __webpack_require__(51));
		else if(typeof define === 'function' && define.amd)
			define(["@angular/core", "@angular/forms", "@angular/common"], factory);
		else if(typeof exports === 'object')
			exports["ng2-parallax-scroll"] = factory(require("@angular/core"), require("@angular/forms"), require("@angular/common"));
		else
			root["ng2-parallax-scroll"] = factory(root["@angular/core"], root["@angular/forms"], root["@angular/common"]);
	})(this, function(__WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_5__) {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;
	/******/
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var ng2_parallax_scroll_directive_1 = __webpack_require__(1);
		exports.Ng2ParallaxScrollDirective = ng2_parallax_scroll_directive_1.Ng2ParallaxScrollDirective;
		var ng2_parallax_scroll_module_1 = __webpack_require__(3);
		exports.Ng2ParallaxScrollModule = ng2_parallax_scroll_module_1.Ng2ParallaxScrollModule;
	
	
	/***/ },
	/* 1 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
		    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
		    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
		    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
		    return c > 3 && r && Object.defineProperty(target, key, r), r;
		};
		var __metadata = (this && this.__metadata) || function (k, v) {
		    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
		};
		var core_1 = __webpack_require__(2);
		var Ng2ParallaxScrollDirective = (function () {
		    function Ng2ParallaxScrollDirective(viewContainer) {
		        this.viewContainer = viewContainer;
		        this.el = this.viewContainer.element.nativeElement;
		    }
		    Ng2ParallaxScrollDirective.prototype.ngAfterViewInit = function () {
		        var _this = this;
		        this.img = this.el.querySelector("img");
		        this.img.onload = function () {
		            _this.imgOrgWidth = _this.imgOrgWidth || _this.img.offsetWidth;
		            _this.imgOrgHeight = _this.imgOrgHeight || _this.img.offsetHeight;
		            console.log(_this.img.offsetWidth, _this.img.offsetHeight, _this.img.width, _this.img.height);
		            _this.setParallaxImage();
		            _this.updateParallaxImage();
		            window.addEventListener('scroll', function () {
		                _this.updateParallaxImage();
		            });
		            window.addEventListener('resize', function () {
		                _this.setParallaxImage();
		                _this.updateParallaxImage();
		            });
		        };
		    };
		    Ng2ParallaxScrollDirective.prototype.setParallaxImage = function () {
		        //set img style
		        var imgSize = this.imgOrgWidth > this.el.offsetWidth ?
		            { width: this.el.offsetWidth + 'px' } : { height: this.el.offsetHeight * 1.5 + 'px' };
		        Object.assign(this.img.style, {
		            display: 'block', position: 'absolute', bottom: 0, left: 0
		        }, imgSize);
		        // set container style
		        Object.assign(this.el.style, {
		            position: 'relative', overflow: 'hidden'
		        });
		        // wrap image with a div, then set style
		        var imgWrapperEl = this.el.querySelector('.parallax-img-wrapper');
		        if (!imgWrapperEl) {
		            imgWrapperEl = document.createElement('div');
		            imgWrapperEl.className = 'parallax-img-wrapper';
		            imgWrapperEl.appendChild(this.img);
		            this.el.appendChild(imgWrapperEl);
		        }
		        Object.assign(imgWrapperEl.style, {
		            position: 'absolute', top: 0, left: 0, right: 0, bottom: 0, zIndex: -1
		        });
		    };
		    Ng2ParallaxScrollDirective.prototype.updateParallaxImage = function () {
		        var elRect = this.el.getBoundingClientRect();
		        var imgRect = this.img.getBoundingClientRect();
		        var imgDist = imgRect.height - elRect.height;
		        var bottom = this.el.offsetTop + elRect.height;
		        var top = this.el.offsetTop;
		        var scrollTop = document.body.scrollTop;
		        var windowBottom = scrollTop + window.innerHeight;
		        var percentScrolled = (windowBottom - top) / (elRect.height + window.innerHeight);
		        //console.log(imgDist, percentScrolled, imgDist * percentScrolled);
		        var parallax = Math.round((imgDist * percentScrolled));
		        if ((bottom > scrollTop) && (top < (scrollTop + window.innerHeight))) {
		            this.img.style.bottom = parallax * -1 + 'px';
		        }
		    };
		    return Ng2ParallaxScrollDirective;
		}());
		Ng2ParallaxScrollDirective = __decorate([
		    core_1.Directive({
		        selector: '[ng2-parallax], ng2-parallax'
		    }),
		    __metadata("design:paramtypes", [core_1.ViewContainerRef])
		], Ng2ParallaxScrollDirective);
		exports.Ng2ParallaxScrollDirective = Ng2ParallaxScrollDirective;
	
	
	/***/ },
	/* 2 */
	/***/ function(module, exports) {
	
		module.exports = __WEBPACK_EXTERNAL_MODULE_2__;
	
	/***/ },
	/* 3 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
		    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
		    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
		    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
		    return c > 3 && r && Object.defineProperty(target, key, r), r;
		};
		var __metadata = (this && this.__metadata) || function (k, v) {
		    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
		};
		var core_1 = __webpack_require__(2);
		var forms_1 = __webpack_require__(4);
		var common_1 = __webpack_require__(5);
		var ng2_parallax_scroll_directive_1 = __webpack_require__(1);
		var Ng2ParallaxScrollModule = (function () {
		    function Ng2ParallaxScrollModule() {
		    }
		    return Ng2ParallaxScrollModule;
		}());
		Ng2ParallaxScrollModule = __decorate([
		    core_1.NgModule({
		        imports: [common_1.CommonModule, forms_1.FormsModule],
		        declarations: [ng2_parallax_scroll_directive_1.Ng2ParallaxScrollDirective],
		        exports: [ng2_parallax_scroll_directive_1.Ng2ParallaxScrollDirective]
		    }),
		    __metadata("design:paramtypes", [])
		], Ng2ParallaxScrollModule);
		exports.Ng2ParallaxScrollModule = Ng2ParallaxScrollModule;
	
	
	/***/ },
	/* 4 */
	/***/ function(module, exports) {
	
		module.exports = __WEBPACK_EXTERNAL_MODULE_4__;
	
	/***/ },
	/* 5 */
	/***/ function(module, exports) {
	
		module.exports = __WEBPACK_EXTERNAL_MODULE_5__;
	
	/***/ }
	/******/ ])
	});
	;
	//# sourceMappingURL=ng2-parallax-scroll.umd.js.map

/***/ },
/* 545 */
/***/ function(module, exports) {

	"use strict";
	var FacebookParams = (function () {
	    function FacebookParams() {
	    }
	    return FacebookParams;
	}());
	exports.FacebookParams = FacebookParams;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjZWJvb2tQYXJhbXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJmYWNlYm9va1BhcmFtcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7SUFBQTtJQUVBLENBQUM7SUFBRCxxQkFBQztBQUFELENBQUMsQUFGRCxJQUVDO0FBRlksc0JBQWMsaUJBRTFCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgRmFjZWJvb2tQYXJhbXMge1xuICAgIHU6IHN0cmluZ1xufSJdfQ==

/***/ },
/* 546 */
/***/ function(module, exports) {

	"use strict";
	var GooglePlusParams = (function () {
	    function GooglePlusParams() {
	    }
	    return GooglePlusParams;
	}());
	exports.GooglePlusParams = GooglePlusParams;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29vZ2xlUGx1c1BhcmFtcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImdvb2dsZVBsdXNQYXJhbXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0lBQUE7SUFJQSxDQUFDO0lBQUQsdUJBQUM7QUFBRCxDQUFDLEFBSkQsSUFJQztBQUpZLHdCQUFnQixtQkFJNUIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBHb29nbGVQbHVzUGFyYW1zIHtcbiAgICBcbiAgICB1cmw6IHN0cmluZ1xuXG59Il19

/***/ },
/* 547 */
/***/ function(module, exports) {

	"use strict";
	var LinkedinParams = (function () {
	    function LinkedinParams() {
	    }
	    return LinkedinParams;
	}());
	exports.LinkedinParams = LinkedinParams;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlua2VkaW5QYXJhbXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsaW5rZWRpblBhcmFtcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7SUFBQTtJQUVBLENBQUM7SUFBRCxxQkFBQztBQUFELENBQUMsQUFGRCxJQUVDO0FBRlksc0JBQWMsaUJBRTFCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgTGlua2VkaW5QYXJhbXMge1xuICAgIHVybDpzdHJpbmdcbn0iXX0=

/***/ },
/* 548 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(3);
	var facebookParams_1 = __webpack_require__(545);
	var twitterParams_1 = __webpack_require__(550);
	var googlePlusParams_1 = __webpack_require__(546);
	var pinterestParams_1 = __webpack_require__(549);
	var linkedinParams_1 = __webpack_require__(547);
	var CeiboShare = (function () {
	    function CeiboShare() {
	        this.sharers = {
	            facebook: {
	                shareUrl: 'https://www.facebook.com/sharer/sharer.php',
	            },
	            googleplus: {
	                shareUrl: 'https://plus.google.com/share',
	            },
	            linkedin: {
	                shareUrl: 'https://www.linkedin.com/shareArticle',
	            },
	            twitter: {
	                shareUrl: 'https://twitter.com/intent/tweet/',
	            },
	            email: {
	                //shareUrl: 'mailto:' + this.to,
	                /*params: {
	                    subject: this.subject,
	                    body: this.title + '\n' + this.url
	                },*/
	                isLink: true
	            },
	            whatsapp: {
	                shareUrl: 'whatsapp://send',
	                /*params: {
	                    text: this.title + ' ' + this.url
	                },*/
	                isLink: true
	            },
	            telegram: {
	                shareUrl: 'tg://msg_url',
	                /*params: {
	                    text: this.title + ' ' + this.url
	                },*/
	                isLink: true
	            },
	            viber: {
	                shareUrl: 'viber://forward',
	                /*params: {
	                    text: this.title + ' ' + this.url
	                },*/
	                isLink: true
	            },
	            line: {
	                //shareUrl: 'http://line.me/R/msg/text/?' + encodeURIComponent(this.title + ' ' + this.url),
	                isLink: true
	            },
	            pinterest: {
	                shareUrl: 'https://www.pinterest.com/pin/create/button/',
	            },
	            tumblr: {
	                shareUrl: 'http://tumblr.com/widgets/share/tool',
	            },
	            hackernews: {
	                shareUrl: 'https://news.ycombinator.com/submitlink',
	            },
	            reddit: {
	                shareUrl: 'https://www.reddit.com/submit',
	            },
	            vk: {
	                shareUrl: 'http://vk.com/share.php',
	            },
	            xing: {
	                shareUrl: 'https://www.xing.com/app/user',
	            },
	            buffer: {
	                shareUrl: 'https://buffer.com/add',
	            },
	            instapaper: {
	                shareUrl: 'http://www.instapaper.com/edit',
	            },
	            pocket: {
	                shareUrl: 'https://getpocket.com/save',
	            },
	            digg: {
	                shareUrl: 'http://www.digg.com/submit',
	            },
	            stumbleupon: {
	                shareUrl: 'http://www.stumbleupon.com/submit',
	            },
	            flipboard: {
	                shareUrl: 'https://share.flipboard.com/bookmarklet/popout',
	            },
	            /*weibo: {
	                shareUrl: 'http://service.weibo.com/share/share.php',
	                params: {
	                    url: this.url,
	                    title: this.title,
	                    pic: this.image,
	                    appkey: this.getValue('appkey'),
	                    ralateUid: this.getValue('ralateuid'),
	                    language: 'zh_cn'
	                }
	            },*/
	            renren: {
	                shareUrl: 'http://share.renren.com/share/buttonshare',
	            },
	            myspace: {
	                shareUrl: 'https://myspace.com/post',
	            },
	            blogger: {
	                shareUrl: 'https://www.blogger.com/blog-this.g',
	            },
	            baidu: {
	                shareUrl: 'http://cang.baidu.com/do/add',
	            },
	            douban: {
	                shareUrl: 'https://www.douban.com/share/service',
	            },
	            okru: {
	                shareUrl: 'https://connect.ok.ru/dk',
	            }
	        };
	    }
	    CeiboShare.prototype.urlSharer = function (sharer) {
	        var p = sharer.params || {}, keys = Object.keys(p), i, str = keys.length > 0 ? '?' : '';
	        for (i = 0; i < keys.length; i++) {
	            if (str !== '?') {
	                str += '&';
	            }
	            if (p[keys[i]]) {
	                str += keys[i] + '=' + encodeURIComponent(p[keys[i]]);
	            }
	        }
	        sharer.shareUrl += str;
	        if (!sharer.isLink) {
	            var popWidth = sharer.width || 600, popHeight = sharer.height || 480, left = window.innerWidth / 2 - popWidth / 2 + window.screenX, top = window.innerHeight / 2 - popHeight / 2 + window.screenY, popParams = 'scrollbars=no, width=' + popWidth + ', height=' + popHeight + ', top=' + top + ', left=' + left, newWindow = window.open(sharer.shareUrl, '', popParams);
	            if (window.focus) {
	                newWindow.focus();
	            }
	        }
	        else {
	            window.location.href = sharer.shareUrl;
	        }
	    };
	    CeiboShare.prototype.getSharer = function () {
	        var _sharer = {};
	        if (this.facebook) {
	            _sharer = this.sharers['facebook'];
	            _sharer.params = this.facebook;
	        }
	        if (this.googlePlus) {
	            _sharer = this.sharers['googleplus'];
	            _sharer.params = this.googlePlus;
	        }
	        if (this.twitter) {
	            _sharer = this.sharers['twitter'];
	            _sharer.params = this.twitter;
	        }
	        if (this.pinterest) {
	            _sharer = this.sharers['pinterest'];
	            _sharer.params = this.pinterest;
	        }
	        if (this.linkedIn) {
	            _sharer = this.sharers['linkedin'];
	            _sharer.params = this.linkedIn;
	        }
	        return _sharer;
	    };
	    CeiboShare.prototype.share = function () {
	        var s = this.getSharer();
	        // custom popups sizes
	        if (s) {
	            s.width = this.shareWidth;
	            s.height = this.shareHeight;
	        }
	        return s !== undefined ? this.urlSharer(s) : false;
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', facebookParams_1.FacebookParams)
	    ], CeiboShare.prototype, "facebook", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', twitterParams_1.TwitterParams)
	    ], CeiboShare.prototype, "twitter", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', googlePlusParams_1.GooglePlusParams)
	    ], CeiboShare.prototype, "googlePlus", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', pinterestParams_1.PinterestParams)
	    ], CeiboShare.prototype, "pinterest", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', linkedinParams_1.LinkedinParams)
	    ], CeiboShare.prototype, "linkedIn", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], CeiboShare.prototype, "shareWidth", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], CeiboShare.prototype, "shareHeight", void 0);
	    __decorate([
	        core_1.HostListener('click'), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', []), 
	        __metadata('design:returntype', void 0)
	    ], CeiboShare.prototype, "share", null);
	    CeiboShare = __decorate([
	        core_1.Directive({
	            selector: '[ceiboShare]'
	        }), 
	        __metadata('design:paramtypes', [])
	    ], CeiboShare);
	    return CeiboShare;
	}());
	exports.CeiboShare = CeiboShare;
	//# sourceMappingURL=data:application/json;base64,

/***/ },
/* 549 */
/***/ function(module, exports) {

	"use strict";
	var PinterestParams = (function () {
	    function PinterestParams() {
	    }
	    return PinterestParams;
	}());
	exports.PinterestParams = PinterestParams;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGludGVyZXN0UGFyYW1zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicGludGVyZXN0UGFyYW1zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtJQUFBO0lBT0EsQ0FBQztJQUFELHNCQUFDO0FBQUQsQ0FBQyxBQVBELElBT0M7QUFKSyx1QkFBZSxrQkFJcEIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAvKipcbiAqIFBpbnRlcmVzdFBhcmFtc1xuICovXG5jbGFzcyBQaW50ZXJlc3RQYXJhbXMge1xuICAgIHVybDogc3RyaW5nO1xuICAgIG1lZGlhOiBzdHJpbmc7XG4gICAgZGVzY3JpcHRpb246IHN0cmluZztcbn0iXX0=

/***/ },
/* 550 */
/***/ function(module, exports) {

	"use strict";
	var TwitterParams = (function () {
	    function TwitterParams() {
	    }
	    return TwitterParams;
	}());
	exports.TwitterParams = TwitterParams;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHdpdHRlclBhcmFtcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInR3aXR0ZXJQYXJhbXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0lBQUE7SUFLQSxDQUFDO0lBQUQsb0JBQUM7QUFBRCxDQUFDLEFBTEQsSUFLQztBQUxZLHFCQUFhLGdCQUt6QixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIFR3aXR0ZXJQYXJhbXMge1xuICAgIHRleHQ6IHN0cmluZztcbiAgICB1cmw6IHN0cmluZztcbiAgICBoYXNodGFnczogc3RyaW5nO1xuICAgIHZpYTogc3RyaW5nO1xufSJdfQ==

/***/ },
/* 551 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * Outlayer Item
	 */
	
	( function( window, factory ) {
	  // universal module definition
	  /* jshint strict: false */ /* globals define, module, require */
	  if ( true ) {
	    // AMD - RequireJS
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	        __webpack_require__(219),
	        __webpack_require__(220)
	      ], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if ( typeof module == 'object' && module.exports ) {
	    // CommonJS - Browserify, Webpack
	    module.exports = factory(
	      require('ev-emitter'),
	      require('get-size')
	    );
	  } else {
	    // browser global
	    window.Outlayer = {};
	    window.Outlayer.Item = factory(
	      window.EvEmitter,
	      window.getSize
	    );
	  }
	
	}( window, function factory( EvEmitter, getSize ) {
	'use strict';
	
	// ----- helpers ----- //
	
	function isEmptyObj( obj ) {
	  for ( var prop in obj ) {
	    return false;
	  }
	  prop = null;
	  return true;
	}
	
	// -------------------------- CSS3 support -------------------------- //
	
	
	var docElemStyle = document.documentElement.style;
	
	var transitionProperty = typeof docElemStyle.transition == 'string' ?
	  'transition' : 'WebkitTransition';
	var transformProperty = typeof docElemStyle.transform == 'string' ?
	  'transform' : 'WebkitTransform';
	
	var transitionEndEvent = {
	  WebkitTransition: 'webkitTransitionEnd',
	  transition: 'transitionend'
	}[ transitionProperty ];
	
	// cache all vendor properties that could have vendor prefix
	var vendorProperties = {
	  transform: transformProperty,
	  transition: transitionProperty,
	  transitionDuration: transitionProperty + 'Duration',
	  transitionProperty: transitionProperty + 'Property',
	  transitionDelay: transitionProperty + 'Delay'
	};
	
	// -------------------------- Item -------------------------- //
	
	function Item( element, layout ) {
	  if ( !element ) {
	    return;
	  }
	
	  this.element = element;
	  // parent layout class, i.e. Masonry, Isotope, or Packery
	  this.layout = layout;
	  this.position = {
	    x: 0,
	    y: 0
	  };
	
	  this._create();
	}
	
	// inherit EvEmitter
	var proto = Item.prototype = Object.create( EvEmitter.prototype );
	proto.constructor = Item;
	
	proto._create = function() {
	  // transition objects
	  this._transn = {
	    ingProperties: {},
	    clean: {},
	    onEnd: {}
	  };
	
	  this.css({
	    position: 'absolute'
	  });
	};
	
	// trigger specified handler for event type
	proto.handleEvent = function( event ) {
	  var method = 'on' + event.type;
	  if ( this[ method ] ) {
	    this[ method ]( event );
	  }
	};
	
	proto.getSize = function() {
	  this.size = getSize( this.element );
	};
	
	/**
	 * apply CSS styles to element
	 * @param {Object} style
	 */
	proto.css = function( style ) {
	  var elemStyle = this.element.style;
	
	  for ( var prop in style ) {
	    // use vendor property if available
	    var supportedProp = vendorProperties[ prop ] || prop;
	    elemStyle[ supportedProp ] = style[ prop ];
	  }
	};
	
	 // measure position, and sets it
	proto.getPosition = function() {
	  var style = getComputedStyle( this.element );
	  var isOriginLeft = this.layout._getOption('originLeft');
	  var isOriginTop = this.layout._getOption('originTop');
	  var xValue = style[ isOriginLeft ? 'left' : 'right' ];
	  var yValue = style[ isOriginTop ? 'top' : 'bottom' ];
	  // convert percent to pixels
	  var layoutSize = this.layout.size;
	  var x = xValue.indexOf('%') != -1 ?
	    ( parseFloat( xValue ) / 100 ) * layoutSize.width : parseInt( xValue, 10 );
	  var y = yValue.indexOf('%') != -1 ?
	    ( parseFloat( yValue ) / 100 ) * layoutSize.height : parseInt( yValue, 10 );
	
	  // clean up 'auto' or other non-integer values
	  x = isNaN( x ) ? 0 : x;
	  y = isNaN( y ) ? 0 : y;
	  // remove padding from measurement
	  x -= isOriginLeft ? layoutSize.paddingLeft : layoutSize.paddingRight;
	  y -= isOriginTop ? layoutSize.paddingTop : layoutSize.paddingBottom;
	
	  this.position.x = x;
	  this.position.y = y;
	};
	
	// set settled position, apply padding
	proto.layoutPosition = function() {
	  var layoutSize = this.layout.size;
	  var style = {};
	  var isOriginLeft = this.layout._getOption('originLeft');
	  var isOriginTop = this.layout._getOption('originTop');
	
	  // x
	  var xPadding = isOriginLeft ? 'paddingLeft' : 'paddingRight';
	  var xProperty = isOriginLeft ? 'left' : 'right';
	  var xResetProperty = isOriginLeft ? 'right' : 'left';
	
	  var x = this.position.x + layoutSize[ xPadding ];
	  // set in percentage or pixels
	  style[ xProperty ] = this.getXValue( x );
	  // reset other property
	  style[ xResetProperty ] = '';
	
	  // y
	  var yPadding = isOriginTop ? 'paddingTop' : 'paddingBottom';
	  var yProperty = isOriginTop ? 'top' : 'bottom';
	  var yResetProperty = isOriginTop ? 'bottom' : 'top';
	
	  var y = this.position.y + layoutSize[ yPadding ];
	  // set in percentage or pixels
	  style[ yProperty ] = this.getYValue( y );
	  // reset other property
	  style[ yResetProperty ] = '';
	
	  this.css( style );
	  this.emitEvent( 'layout', [ this ] );
	};
	
	proto.getXValue = function( x ) {
	  var isHorizontal = this.layout._getOption('horizontal');
	  return this.layout.options.percentPosition && !isHorizontal ?
	    ( ( x / this.layout.size.width ) * 100 ) + '%' : x + 'px';
	};
	
	proto.getYValue = function( y ) {
	  var isHorizontal = this.layout._getOption('horizontal');
	  return this.layout.options.percentPosition && isHorizontal ?
	    ( ( y / this.layout.size.height ) * 100 ) + '%' : y + 'px';
	};
	
	proto._transitionTo = function( x, y ) {
	  this.getPosition();
	  // get current x & y from top/left
	  var curX = this.position.x;
	  var curY = this.position.y;
	
	  var compareX = parseInt( x, 10 );
	  var compareY = parseInt( y, 10 );
	  var didNotMove = compareX === this.position.x && compareY === this.position.y;
	
	  // save end position
	  this.setPosition( x, y );
	
	  // if did not move and not transitioning, just go to layout
	  if ( didNotMove && !this.isTransitioning ) {
	    this.layoutPosition();
	    return;
	  }
	
	  var transX = x - curX;
	  var transY = y - curY;
	  var transitionStyle = {};
	  transitionStyle.transform = this.getTranslate( transX, transY );
	
	  this.transition({
	    to: transitionStyle,
	    onTransitionEnd: {
	      transform: this.layoutPosition
	    },
	    isCleaning: true
	  });
	};
	
	proto.getTranslate = function( x, y ) {
	  // flip cooridinates if origin on right or bottom
	  var isOriginLeft = this.layout._getOption('originLeft');
	  var isOriginTop = this.layout._getOption('originTop');
	  x = isOriginLeft ? x : -x;
	  y = isOriginTop ? y : -y;
	  return 'translate3d(' + x + 'px, ' + y + 'px, 0)';
	};
	
	// non transition + transform support
	proto.goTo = function( x, y ) {
	  this.setPosition( x, y );
	  this.layoutPosition();
	};
	
	proto.moveTo = proto._transitionTo;
	
	proto.setPosition = function( x, y ) {
	  this.position.x = parseInt( x, 10 );
	  this.position.y = parseInt( y, 10 );
	};
	
	// ----- transition ----- //
	
	/**
	 * @param {Object} style - CSS
	 * @param {Function} onTransitionEnd
	 */
	
	// non transition, just trigger callback
	proto._nonTransition = function( args ) {
	  this.css( args.to );
	  if ( args.isCleaning ) {
	    this._removeStyles( args.to );
	  }
	  for ( var prop in args.onTransitionEnd ) {
	    args.onTransitionEnd[ prop ].call( this );
	  }
	};
	
	/**
	 * proper transition
	 * @param {Object} args - arguments
	 *   @param {Object} to - style to transition to
	 *   @param {Object} from - style to start transition from
	 *   @param {Boolean} isCleaning - removes transition styles after transition
	 *   @param {Function} onTransitionEnd - callback
	 */
	proto.transition = function( args ) {
	  // redirect to nonTransition if no transition duration
	  if ( !parseFloat( this.layout.options.transitionDuration ) ) {
	    this._nonTransition( args );
	    return;
	  }
	
	  var _transition = this._transn;
	  // keep track of onTransitionEnd callback by css property
	  for ( var prop in args.onTransitionEnd ) {
	    _transition.onEnd[ prop ] = args.onTransitionEnd[ prop ];
	  }
	  // keep track of properties that are transitioning
	  for ( prop in args.to ) {
	    _transition.ingProperties[ prop ] = true;
	    // keep track of properties to clean up when transition is done
	    if ( args.isCleaning ) {
	      _transition.clean[ prop ] = true;
	    }
	  }
	
	  // set from styles
	  if ( args.from ) {
	    this.css( args.from );
	    // force redraw. http://blog.alexmaccaw.com/css-transitions
	    var h = this.element.offsetHeight;
	    // hack for JSHint to hush about unused var
	    h = null;
	  }
	  // enable transition
	  this.enableTransition( args.to );
	  // set styles that are transitioning
	  this.css( args.to );
	
	  this.isTransitioning = true;
	
	};
	
	// dash before all cap letters, including first for
	// WebkitTransform => -webkit-transform
	function toDashedAll( str ) {
	  return str.replace( /([A-Z])/g, function( $1 ) {
	    return '-' + $1.toLowerCase();
	  });
	}
	
	var transitionProps = 'opacity,' + toDashedAll( transformProperty );
	
	proto.enableTransition = function(/* style */) {
	  // HACK changing transitionProperty during a transition
	  // will cause transition to jump
	  if ( this.isTransitioning ) {
	    return;
	  }
	
	  // make `transition: foo, bar, baz` from style object
	  // HACK un-comment this when enableTransition can work
	  // while a transition is happening
	  // var transitionValues = [];
	  // for ( var prop in style ) {
	  //   // dash-ify camelCased properties like WebkitTransition
	  //   prop = vendorProperties[ prop ] || prop;
	  //   transitionValues.push( toDashedAll( prop ) );
	  // }
	  // munge number to millisecond, to match stagger
	  var duration = this.layout.options.transitionDuration;
	  duration = typeof duration == 'number' ? duration + 'ms' : duration;
	  // enable transition styles
	  this.css({
	    transitionProperty: transitionProps,
	    transitionDuration: duration,
	    transitionDelay: this.staggerDelay || 0
	  });
	  // listen for transition end event
	  this.element.addEventListener( transitionEndEvent, this, false );
	};
	
	// ----- events ----- //
	
	proto.onwebkitTransitionEnd = function( event ) {
	  this.ontransitionend( event );
	};
	
	proto.onotransitionend = function( event ) {
	  this.ontransitionend( event );
	};
	
	// properties that I munge to make my life easier
	var dashedVendorProperties = {
	  '-webkit-transform': 'transform'
	};
	
	proto.ontransitionend = function( event ) {
	  // disregard bubbled events from children
	  if ( event.target !== this.element ) {
	    return;
	  }
	  var _transition = this._transn;
	  // get property name of transitioned property, convert to prefix-free
	  var propertyName = dashedVendorProperties[ event.propertyName ] || event.propertyName;
	
	  // remove property that has completed transitioning
	  delete _transition.ingProperties[ propertyName ];
	  // check if any properties are still transitioning
	  if ( isEmptyObj( _transition.ingProperties ) ) {
	    // all properties have completed transitioning
	    this.disableTransition();
	  }
	  // clean style
	  if ( propertyName in _transition.clean ) {
	    // clean up style
	    this.element.style[ event.propertyName ] = '';
	    delete _transition.clean[ propertyName ];
	  }
	  // trigger onTransitionEnd callback
	  if ( propertyName in _transition.onEnd ) {
	    var onTransitionEnd = _transition.onEnd[ propertyName ];
	    onTransitionEnd.call( this );
	    delete _transition.onEnd[ propertyName ];
	  }
	
	  this.emitEvent( 'transitionEnd', [ this ] );
	};
	
	proto.disableTransition = function() {
	  this.removeTransitionStyles();
	  this.element.removeEventListener( transitionEndEvent, this, false );
	  this.isTransitioning = false;
	};
	
	/**
	 * removes style property from element
	 * @param {Object} style
	**/
	proto._removeStyles = function( style ) {
	  // clean up transition styles
	  var cleanStyle = {};
	  for ( var prop in style ) {
	    cleanStyle[ prop ] = '';
	  }
	  this.css( cleanStyle );
	};
	
	var cleanTransitionStyle = {
	  transitionProperty: '',
	  transitionDuration: '',
	  transitionDelay: ''
	};
	
	proto.removeTransitionStyles = function() {
	  // remove transition
	  this.css( cleanTransitionStyle );
	};
	
	// ----- stagger ----- //
	
	proto.stagger = function( delay ) {
	  delay = isNaN( delay ) ? 0 : delay;
	  this.staggerDelay = delay + 'ms';
	};
	
	// ----- show/hide/remove ----- //
	
	// remove element from DOM
	proto.removeElem = function() {
	  this.element.parentNode.removeChild( this.element );
	  // remove display: none
	  this.css({ display: '' });
	  this.emitEvent( 'remove', [ this ] );
	};
	
	proto.remove = function() {
	  // just remove element if no transition support or no transition
	  if ( !transitionProperty || !parseFloat( this.layout.options.transitionDuration ) ) {
	    this.removeElem();
	    return;
	  }
	
	  // start transition
	  this.once( 'transitionEnd', function() {
	    this.removeElem();
	  });
	  this.hide();
	};
	
	proto.reveal = function() {
	  delete this.isHidden;
	  // remove display: none
	  this.css({ display: '' });
	
	  var options = this.layout.options;
	
	  var onTransitionEnd = {};
	  var transitionEndProperty = this.getHideRevealTransitionEndProperty('visibleStyle');
	  onTransitionEnd[ transitionEndProperty ] = this.onRevealTransitionEnd;
	
	  this.transition({
	    from: options.hiddenStyle,
	    to: options.visibleStyle,
	    isCleaning: true,
	    onTransitionEnd: onTransitionEnd
	  });
	};
	
	proto.onRevealTransitionEnd = function() {
	  // check if still visible
	  // during transition, item may have been hidden
	  if ( !this.isHidden ) {
	    this.emitEvent('reveal');
	  }
	};
	
	/**
	 * get style property use for hide/reveal transition end
	 * @param {String} styleProperty - hiddenStyle/visibleStyle
	 * @returns {String}
	 */
	proto.getHideRevealTransitionEndProperty = function( styleProperty ) {
	  var optionStyle = this.layout.options[ styleProperty ];
	  // use opacity
	  if ( optionStyle.opacity ) {
	    return 'opacity';
	  }
	  // get first property
	  for ( var prop in optionStyle ) {
	    return prop;
	  }
	};
	
	proto.hide = function() {
	  // set flag
	  this.isHidden = true;
	  // remove display: none
	  this.css({ display: '' });
	
	  var options = this.layout.options;
	
	  var onTransitionEnd = {};
	  var transitionEndProperty = this.getHideRevealTransitionEndProperty('hiddenStyle');
	  onTransitionEnd[ transitionEndProperty ] = this.onHideTransitionEnd;
	
	  this.transition({
	    from: options.visibleStyle,
	    to: options.hiddenStyle,
	    // keep hidden stuff hidden
	    isCleaning: true,
	    onTransitionEnd: onTransitionEnd
	  });
	};
	
	proto.onHideTransitionEnd = function() {
	  // check if still hidden
	  // during transition, item may have been un-hidden
	  if ( this.isHidden ) {
	    this.css({ display: 'none' });
	    this.emitEvent('hide');
	  }
	};
	
	proto.destroy = function() {
	  this.css({
	    position: '',
	    left: '',
	    right: '',
	    top: '',
	    bottom: '',
	    transition: '',
	    transform: ''
	  });
	};
	
	return Item;
	
	}));


/***/ },
/* 552 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * Outlayer v2.1.0
	 * the brains and guts of a layout library
	 * MIT license
	 */
	
	( function( window, factory ) {
	  'use strict';
	  // universal module definition
	  /* jshint strict: false */ /* globals define, module, require */
	  if ( true ) {
	    // AMD - RequireJS
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	        __webpack_require__(219),
	        __webpack_require__(220),
	        __webpack_require__(533),
	        __webpack_require__(551)
	      ], __WEBPACK_AMD_DEFINE_RESULT__ = function( EvEmitter, getSize, utils, Item ) {
	        return factory( window, EvEmitter, getSize, utils, Item);
	      }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if ( typeof module == 'object' && module.exports ) {
	    // CommonJS - Browserify, Webpack
	    module.exports = factory(
	      window,
	      require('ev-emitter'),
	      require('get-size'),
	      require('fizzy-ui-utils'),
	      require('./item')
	    );
	  } else {
	    // browser global
	    window.Outlayer = factory(
	      window,
	      window.EvEmitter,
	      window.getSize,
	      window.fizzyUIUtils,
	      window.Outlayer.Item
	    );
	  }
	
	}( window, function factory( window, EvEmitter, getSize, utils, Item ) {
	'use strict';
	
	// ----- vars ----- //
	
	var console = window.console;
	var jQuery = window.jQuery;
	var noop = function() {};
	
	// -------------------------- Outlayer -------------------------- //
	
	// globally unique identifiers
	var GUID = 0;
	// internal store of all Outlayer intances
	var instances = {};
	
	
	/**
	 * @param {Element, String} element
	 * @param {Object} options
	 * @constructor
	 */
	function Outlayer( element, options ) {
	  var queryElement = utils.getQueryElement( element );
	  if ( !queryElement ) {
	    if ( console ) {
	      console.error( 'Bad element for ' + this.constructor.namespace +
	        ': ' + ( queryElement || element ) );
	    }
	    return;
	  }
	  this.element = queryElement;
	  // add jQuery
	  if ( jQuery ) {
	    this.$element = jQuery( this.element );
	  }
	
	  // options
	  this.options = utils.extend( {}, this.constructor.defaults );
	  this.option( options );
	
	  // add id for Outlayer.getFromElement
	  var id = ++GUID;
	  this.element.outlayerGUID = id; // expando
	  instances[ id ] = this; // associate via id
	
	  // kick it off
	  this._create();
	
	  var isInitLayout = this._getOption('initLayout');
	  if ( isInitLayout ) {
	    this.layout();
	  }
	}
	
	// settings are for internal use only
	Outlayer.namespace = 'outlayer';
	Outlayer.Item = Item;
	
	// default options
	Outlayer.defaults = {
	  containerStyle: {
	    position: 'relative'
	  },
	  initLayout: true,
	  originLeft: true,
	  originTop: true,
	  resize: true,
	  resizeContainer: true,
	  // item options
	  transitionDuration: '0.4s',
	  hiddenStyle: {
	    opacity: 0,
	    transform: 'scale(0.001)'
	  },
	  visibleStyle: {
	    opacity: 1,
	    transform: 'scale(1)'
	  }
	};
	
	var proto = Outlayer.prototype;
	// inherit EvEmitter
	utils.extend( proto, EvEmitter.prototype );
	
	/**
	 * set options
	 * @param {Object} opts
	 */
	proto.option = function( opts ) {
	  utils.extend( this.options, opts );
	};
	
	/**
	 * get backwards compatible option value, check old name
	 */
	proto._getOption = function( option ) {
	  var oldOption = this.constructor.compatOptions[ option ];
	  return oldOption && this.options[ oldOption ] !== undefined ?
	    this.options[ oldOption ] : this.options[ option ];
	};
	
	Outlayer.compatOptions = {
	  // currentName: oldName
	  initLayout: 'isInitLayout',
	  horizontal: 'isHorizontal',
	  layoutInstant: 'isLayoutInstant',
	  originLeft: 'isOriginLeft',
	  originTop: 'isOriginTop',
	  resize: 'isResizeBound',
	  resizeContainer: 'isResizingContainer'
	};
	
	proto._create = function() {
	  // get items from children
	  this.reloadItems();
	  // elements that affect layout, but are not laid out
	  this.stamps = [];
	  this.stamp( this.options.stamp );
	  // set container style
	  utils.extend( this.element.style, this.options.containerStyle );
	
	  // bind resize method
	  var canBindResize = this._getOption('resize');
	  if ( canBindResize ) {
	    this.bindResize();
	  }
	};
	
	// goes through all children again and gets bricks in proper order
	proto.reloadItems = function() {
	  // collection of item elements
	  this.items = this._itemize( this.element.children );
	};
	
	
	/**
	 * turn elements into Outlayer.Items to be used in layout
	 * @param {Array or NodeList or HTMLElement} elems
	 * @returns {Array} items - collection of new Outlayer Items
	 */
	proto._itemize = function( elems ) {
	
	  var itemElems = this._filterFindItemElements( elems );
	  var Item = this.constructor.Item;
	
	  // create new Outlayer Items for collection
	  var items = [];
	  for ( var i=0; i < itemElems.length; i++ ) {
	    var elem = itemElems[i];
	    var item = new Item( elem, this );
	    items.push( item );
	  }
	
	  return items;
	};
	
	/**
	 * get item elements to be used in layout
	 * @param {Array or NodeList or HTMLElement} elems
	 * @returns {Array} items - item elements
	 */
	proto._filterFindItemElements = function( elems ) {
	  return utils.filterFindElements( elems, this.options.itemSelector );
	};
	
	/**
	 * getter method for getting item elements
	 * @returns {Array} elems - collection of item elements
	 */
	proto.getItemElements = function() {
	  return this.items.map( function( item ) {
	    return item.element;
	  });
	};
	
	// ----- init & layout ----- //
	
	/**
	 * lays out all items
	 */
	proto.layout = function() {
	  this._resetLayout();
	  this._manageStamps();
	
	  // don't animate first layout
	  var layoutInstant = this._getOption('layoutInstant');
	  var isInstant = layoutInstant !== undefined ?
	    layoutInstant : !this._isLayoutInited;
	  this.layoutItems( this.items, isInstant );
	
	  // flag for initalized
	  this._isLayoutInited = true;
	};
	
	// _init is alias for layout
	proto._init = proto.layout;
	
	/**
	 * logic before any new layout
	 */
	proto._resetLayout = function() {
	  this.getSize();
	};
	
	
	proto.getSize = function() {
	  this.size = getSize( this.element );
	};
	
	/**
	 * get measurement from option, for columnWidth, rowHeight, gutter
	 * if option is String -> get element from selector string, & get size of element
	 * if option is Element -> get size of element
	 * else use option as a number
	 *
	 * @param {String} measurement
	 * @param {String} size - width or height
	 * @private
	 */
	proto._getMeasurement = function( measurement, size ) {
	  var option = this.options[ measurement ];
	  var elem;
	  if ( !option ) {
	    // default to 0
	    this[ measurement ] = 0;
	  } else {
	    // use option as an element
	    if ( typeof option == 'string' ) {
	      elem = this.element.querySelector( option );
	    } else if ( option instanceof HTMLElement ) {
	      elem = option;
	    }
	    // use size of element, if element
	    this[ measurement ] = elem ? getSize( elem )[ size ] : option;
	  }
	};
	
	/**
	 * layout a collection of item elements
	 * @api public
	 */
	proto.layoutItems = function( items, isInstant ) {
	  items = this._getItemsForLayout( items );
	
	  this._layoutItems( items, isInstant );
	
	  this._postLayout();
	};
	
	/**
	 * get the items to be laid out
	 * you may want to skip over some items
	 * @param {Array} items
	 * @returns {Array} items
	 */
	proto._getItemsForLayout = function( items ) {
	  return items.filter( function( item ) {
	    return !item.isIgnored;
	  });
	};
	
	/**
	 * layout items
	 * @param {Array} items
	 * @param {Boolean} isInstant
	 */
	proto._layoutItems = function( items, isInstant ) {
	  this._emitCompleteOnItems( 'layout', items );
	
	  if ( !items || !items.length ) {
	    // no items, emit event with empty array
	    return;
	  }
	
	  var queue = [];
	
	  items.forEach( function( item ) {
	    // get x/y object from method
	    var position = this._getItemLayoutPosition( item );
	    // enqueue
	    position.item = item;
	    position.isInstant = isInstant || item.isLayoutInstant;
	    queue.push( position );
	  }, this );
	
	  this._processLayoutQueue( queue );
	};
	
	/**
	 * get item layout position
	 * @param {Outlayer.Item} item
	 * @returns {Object} x and y position
	 */
	proto._getItemLayoutPosition = function( /* item */ ) {
	  return {
	    x: 0,
	    y: 0
	  };
	};
	
	/**
	 * iterate over array and position each item
	 * Reason being - separating this logic prevents 'layout invalidation'
	 * thx @paul_irish
	 * @param {Array} queue
	 */
	proto._processLayoutQueue = function( queue ) {
	  this.updateStagger();
	  queue.forEach( function( obj, i ) {
	    this._positionItem( obj.item, obj.x, obj.y, obj.isInstant, i );
	  }, this );
	};
	
	// set stagger from option in milliseconds number
	proto.updateStagger = function() {
	  var stagger = this.options.stagger;
	  if ( stagger === null || stagger === undefined ) {
	    this.stagger = 0;
	    return;
	  }
	  this.stagger = getMilliseconds( stagger );
	  return this.stagger;
	};
	
	/**
	 * Sets position of item in DOM
	 * @param {Outlayer.Item} item
	 * @param {Number} x - horizontal position
	 * @param {Number} y - vertical position
	 * @param {Boolean} isInstant - disables transitions
	 */
	proto._positionItem = function( item, x, y, isInstant, i ) {
	  if ( isInstant ) {
	    // if not transition, just set CSS
	    item.goTo( x, y );
	  } else {
	    item.stagger( i * this.stagger );
	    item.moveTo( x, y );
	  }
	};
	
	/**
	 * Any logic you want to do after each layout,
	 * i.e. size the container
	 */
	proto._postLayout = function() {
	  this.resizeContainer();
	};
	
	proto.resizeContainer = function() {
	  var isResizingContainer = this._getOption('resizeContainer');
	  if ( !isResizingContainer ) {
	    return;
	  }
	  var size = this._getContainerSize();
	  if ( size ) {
	    this._setContainerMeasure( size.width, true );
	    this._setContainerMeasure( size.height, false );
	  }
	};
	
	/**
	 * Sets width or height of container if returned
	 * @returns {Object} size
	 *   @param {Number} width
	 *   @param {Number} height
	 */
	proto._getContainerSize = noop;
	
	/**
	 * @param {Number} measure - size of width or height
	 * @param {Boolean} isWidth
	 */
	proto._setContainerMeasure = function( measure, isWidth ) {
	  if ( measure === undefined ) {
	    return;
	  }
	
	  var elemSize = this.size;
	  // add padding and border width if border box
	  if ( elemSize.isBorderBox ) {
	    measure += isWidth ? elemSize.paddingLeft + elemSize.paddingRight +
	      elemSize.borderLeftWidth + elemSize.borderRightWidth :
	      elemSize.paddingBottom + elemSize.paddingTop +
	      elemSize.borderTopWidth + elemSize.borderBottomWidth;
	  }
	
	  measure = Math.max( measure, 0 );
	  this.element.style[ isWidth ? 'width' : 'height' ] = measure + 'px';
	};
	
	/**
	 * emit eventComplete on a collection of items events
	 * @param {String} eventName
	 * @param {Array} items - Outlayer.Items
	 */
	proto._emitCompleteOnItems = function( eventName, items ) {
	  var _this = this;
	  function onComplete() {
	    _this.dispatchEvent( eventName + 'Complete', null, [ items ] );
	  }
	
	  var count = items.length;
	  if ( !items || !count ) {
	    onComplete();
	    return;
	  }
	
	  var doneCount = 0;
	  function tick() {
	    doneCount++;
	    if ( doneCount == count ) {
	      onComplete();
	    }
	  }
	
	  // bind callback
	  items.forEach( function( item ) {
	    item.once( eventName, tick );
	  });
	};
	
	/**
	 * emits events via EvEmitter and jQuery events
	 * @param {String} type - name of event
	 * @param {Event} event - original event
	 * @param {Array} args - extra arguments
	 */
	proto.dispatchEvent = function( type, event, args ) {
	  // add original event to arguments
	  var emitArgs = event ? [ event ].concat( args ) : args;
	  this.emitEvent( type, emitArgs );
	
	  if ( jQuery ) {
	    // set this.$element
	    this.$element = this.$element || jQuery( this.element );
	    if ( event ) {
	      // create jQuery event
	      var $event = jQuery.Event( event );
	      $event.type = type;
	      this.$element.trigger( $event, args );
	    } else {
	      // just trigger with type if no event available
	      this.$element.trigger( type, args );
	    }
	  }
	};
	
	// -------------------------- ignore & stamps -------------------------- //
	
	
	/**
	 * keep item in collection, but do not lay it out
	 * ignored items do not get skipped in layout
	 * @param {Element} elem
	 */
	proto.ignore = function( elem ) {
	  var item = this.getItem( elem );
	  if ( item ) {
	    item.isIgnored = true;
	  }
	};
	
	/**
	 * return item to layout collection
	 * @param {Element} elem
	 */
	proto.unignore = function( elem ) {
	  var item = this.getItem( elem );
	  if ( item ) {
	    delete item.isIgnored;
	  }
	};
	
	/**
	 * adds elements to stamps
	 * @param {NodeList, Array, Element, or String} elems
	 */
	proto.stamp = function( elems ) {
	  elems = this._find( elems );
	  if ( !elems ) {
	    return;
	  }
	
	  this.stamps = this.stamps.concat( elems );
	  // ignore
	  elems.forEach( this.ignore, this );
	};
	
	/**
	 * removes elements to stamps
	 * @param {NodeList, Array, or Element} elems
	 */
	proto.unstamp = function( elems ) {
	  elems = this._find( elems );
	  if ( !elems ){
	    return;
	  }
	
	  elems.forEach( function( elem ) {
	    // filter out removed stamp elements
	    utils.removeFrom( this.stamps, elem );
	    this.unignore( elem );
	  }, this );
	};
	
	/**
	 * finds child elements
	 * @param {NodeList, Array, Element, or String} elems
	 * @returns {Array} elems
	 */
	proto._find = function( elems ) {
	  if ( !elems ) {
	    return;
	  }
	  // if string, use argument as selector string
	  if ( typeof elems == 'string' ) {
	    elems = this.element.querySelectorAll( elems );
	  }
	  elems = utils.makeArray( elems );
	  return elems;
	};
	
	proto._manageStamps = function() {
	  if ( !this.stamps || !this.stamps.length ) {
	    return;
	  }
	
	  this._getBoundingRect();
	
	  this.stamps.forEach( this._manageStamp, this );
	};
	
	// update boundingLeft / Top
	proto._getBoundingRect = function() {
	  // get bounding rect for container element
	  var boundingRect = this.element.getBoundingClientRect();
	  var size = this.size;
	  this._boundingRect = {
	    left: boundingRect.left + size.paddingLeft + size.borderLeftWidth,
	    top: boundingRect.top + size.paddingTop + size.borderTopWidth,
	    right: boundingRect.right - ( size.paddingRight + size.borderRightWidth ),
	    bottom: boundingRect.bottom - ( size.paddingBottom + size.borderBottomWidth )
	  };
	};
	
	/**
	 * @param {Element} stamp
	**/
	proto._manageStamp = noop;
	
	/**
	 * get x/y position of element relative to container element
	 * @param {Element} elem
	 * @returns {Object} offset - has left, top, right, bottom
	 */
	proto._getElementOffset = function( elem ) {
	  var boundingRect = elem.getBoundingClientRect();
	  var thisRect = this._boundingRect;
	  var size = getSize( elem );
	  var offset = {
	    left: boundingRect.left - thisRect.left - size.marginLeft,
	    top: boundingRect.top - thisRect.top - size.marginTop,
	    right: thisRect.right - boundingRect.right - size.marginRight,
	    bottom: thisRect.bottom - boundingRect.bottom - size.marginBottom
	  };
	  return offset;
	};
	
	// -------------------------- resize -------------------------- //
	
	// enable event handlers for listeners
	// i.e. resize -> onresize
	proto.handleEvent = utils.handleEvent;
	
	/**
	 * Bind layout to window resizing
	 */
	proto.bindResize = function() {
	  window.addEventListener( 'resize', this );
	  this.isResizeBound = true;
	};
	
	/**
	 * Unbind layout to window resizing
	 */
	proto.unbindResize = function() {
	  window.removeEventListener( 'resize', this );
	  this.isResizeBound = false;
	};
	
	proto.onresize = function() {
	  this.resize();
	};
	
	utils.debounceMethod( Outlayer, 'onresize', 100 );
	
	proto.resize = function() {
	  // don't trigger if size did not change
	  // or if resize was unbound. See #9
	  if ( !this.isResizeBound || !this.needsResizeLayout() ) {
	    return;
	  }
	
	  this.layout();
	};
	
	/**
	 * check if layout is needed post layout
	 * @returns Boolean
	 */
	proto.needsResizeLayout = function() {
	  var size = getSize( this.element );
	  // check that this.size and size are there
	  // IE8 triggers resize on body size change, so they might not be
	  var hasSizes = this.size && size;
	  return hasSizes && size.innerWidth !== this.size.innerWidth;
	};
	
	// -------------------------- methods -------------------------- //
	
	/**
	 * add items to Outlayer instance
	 * @param {Array or NodeList or Element} elems
	 * @returns {Array} items - Outlayer.Items
	**/
	proto.addItems = function( elems ) {
	  var items = this._itemize( elems );
	  // add items to collection
	  if ( items.length ) {
	    this.items = this.items.concat( items );
	  }
	  return items;
	};
	
	/**
	 * Layout newly-appended item elements
	 * @param {Array or NodeList or Element} elems
	 */
	proto.appended = function( elems ) {
	  var items = this.addItems( elems );
	  if ( !items.length ) {
	    return;
	  }
	  // layout and reveal just the new items
	  this.layoutItems( items, true );
	  this.reveal( items );
	};
	
	/**
	 * Layout prepended elements
	 * @param {Array or NodeList or Element} elems
	 */
	proto.prepended = function( elems ) {
	  var items = this._itemize( elems );
	  if ( !items.length ) {
	    return;
	  }
	  // add items to beginning of collection
	  var previousItems = this.items.slice(0);
	  this.items = items.concat( previousItems );
	  // start new layout
	  this._resetLayout();
	  this._manageStamps();
	  // layout new stuff without transition
	  this.layoutItems( items, true );
	  this.reveal( items );
	  // layout previous items
	  this.layoutItems( previousItems );
	};
	
	/**
	 * reveal a collection of items
	 * @param {Array of Outlayer.Items} items
	 */
	proto.reveal = function( items ) {
	  this._emitCompleteOnItems( 'reveal', items );
	  if ( !items || !items.length ) {
	    return;
	  }
	  var stagger = this.updateStagger();
	  items.forEach( function( item, i ) {
	    item.stagger( i * stagger );
	    item.reveal();
	  });
	};
	
	/**
	 * hide a collection of items
	 * @param {Array of Outlayer.Items} items
	 */
	proto.hide = function( items ) {
	  this._emitCompleteOnItems( 'hide', items );
	  if ( !items || !items.length ) {
	    return;
	  }
	  var stagger = this.updateStagger();
	  items.forEach( function( item, i ) {
	    item.stagger( i * stagger );
	    item.hide();
	  });
	};
	
	/**
	 * reveal item elements
	 * @param {Array}, {Element}, {NodeList} items
	 */
	proto.revealItemElements = function( elems ) {
	  var items = this.getItems( elems );
	  this.reveal( items );
	};
	
	/**
	 * hide item elements
	 * @param {Array}, {Element}, {NodeList} items
	 */
	proto.hideItemElements = function( elems ) {
	  var items = this.getItems( elems );
	  this.hide( items );
	};
	
	/**
	 * get Outlayer.Item, given an Element
	 * @param {Element} elem
	 * @param {Function} callback
	 * @returns {Outlayer.Item} item
	 */
	proto.getItem = function( elem ) {
	  // loop through items to get the one that matches
	  for ( var i=0; i < this.items.length; i++ ) {
	    var item = this.items[i];
	    if ( item.element == elem ) {
	      // return item
	      return item;
	    }
	  }
	};
	
	/**
	 * get collection of Outlayer.Items, given Elements
	 * @param {Array} elems
	 * @returns {Array} items - Outlayer.Items
	 */
	proto.getItems = function( elems ) {
	  elems = utils.makeArray( elems );
	  var items = [];
	  elems.forEach( function( elem ) {
	    var item = this.getItem( elem );
	    if ( item ) {
	      items.push( item );
	    }
	  }, this );
	
	  return items;
	};
	
	/**
	 * remove element(s) from instance and DOM
	 * @param {Array or NodeList or Element} elems
	 */
	proto.remove = function( elems ) {
	  var removeItems = this.getItems( elems );
	
	  this._emitCompleteOnItems( 'remove', removeItems );
	
	  // bail if no items to remove
	  if ( !removeItems || !removeItems.length ) {
	    return;
	  }
	
	  removeItems.forEach( function( item ) {
	    item.remove();
	    // remove item from collection
	    utils.removeFrom( this.items, item );
	  }, this );
	};
	
	// ----- destroy ----- //
	
	// remove and disable Outlayer instance
	proto.destroy = function() {
	  // clean up dynamic styles
	  var style = this.element.style;
	  style.height = '';
	  style.position = '';
	  style.width = '';
	  // destroy items
	  this.items.forEach( function( item ) {
	    item.destroy();
	  });
	
	  this.unbindResize();
	
	  var id = this.element.outlayerGUID;
	  delete instances[ id ]; // remove reference to instance by id
	  delete this.element.outlayerGUID;
	  // remove data for jQuery
	  if ( jQuery ) {
	    jQuery.removeData( this.element, this.constructor.namespace );
	  }
	
	};
	
	// -------------------------- data -------------------------- //
	
	/**
	 * get Outlayer instance from element
	 * @param {Element} elem
	 * @returns {Outlayer}
	 */
	Outlayer.data = function( elem ) {
	  elem = utils.getQueryElement( elem );
	  var id = elem && elem.outlayerGUID;
	  return id && instances[ id ];
	};
	
	
	// -------------------------- create Outlayer class -------------------------- //
	
	/**
	 * create a layout class
	 * @param {String} namespace
	 */
	Outlayer.create = function( namespace, options ) {
	  // sub-class Outlayer
	  var Layout = subclass( Outlayer );
	  // apply new options and compatOptions
	  Layout.defaults = utils.extend( {}, Outlayer.defaults );
	  utils.extend( Layout.defaults, options );
	  Layout.compatOptions = utils.extend( {}, Outlayer.compatOptions  );
	
	  Layout.namespace = namespace;
	
	  Layout.data = Outlayer.data;
	
	  // sub-class Item
	  Layout.Item = subclass( Item );
	
	  // -------------------------- declarative -------------------------- //
	
	  utils.htmlInit( Layout, namespace );
	
	  // -------------------------- jQuery bridge -------------------------- //
	
	  // make into jQuery plugin
	  if ( jQuery && jQuery.bridget ) {
	    jQuery.bridget( namespace, Layout );
	  }
	
	  return Layout;
	};
	
	function subclass( Parent ) {
	  function SubClass() {
	    Parent.apply( this, arguments );
	  }
	
	  SubClass.prototype = Object.create( Parent.prototype );
	  SubClass.prototype.constructor = SubClass;
	
	  return SubClass;
	}
	
	// ----- helpers ----- //
	
	// how many milliseconds are in each unit
	var msUnits = {
	  ms: 1,
	  s: 1000
	};
	
	// munge time-like parameter into millisecond number
	// '0.4s' -> 40
	function getMilliseconds( time ) {
	  if ( typeof time == 'number' ) {
	    return time;
	  }
	  var matches = time.match( /(^\d*\.?\d*)(\w*)/ );
	  var num = matches && matches[1];
	  var unit = matches && matches[2];
	  if ( !num.length ) {
	    return 0;
	  }
	  num = parseFloat( num );
	  var mult = msUnits[ unit ] || 1;
	  return num * mult;
	}
	
	// ----- fin ----- //
	
	// back in global
	Outlayer.Item = Item;
	
	return Outlayer;
	
	}));


/***/ },
/* 553 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	var Requests = __webpack_require__(558),
	    Cookies = __webpack_require__(555),
	    documents = __webpack_require__(221),
	    ApiCache = __webpack_require__(554),
	    Predicates = __webpack_require__(302),
	    experiments = __webpack_require__(301);
	
	var Experiments = experiments.Experiments,
	    Document = documents.Document;
	
	var experimentCookie = "io.prismic.experiment",
	    previewCookie = "io.prismic.preview";
	
	/**
	 * Initialisation of the API object.
	 * This is for internal use, from outside this kit, you should call Prismic.Api()
	 * @private
	 */
	function Api(url, options) {
	  var opts = options || {};
	  this.accessToken = opts.accessToken;
	  this.url = url + (this.accessToken ? (url.indexOf('?') > -1 ? '&' : '?') + 'access_token=' + this.accessToken : '');
	  this.req = opts.req;
	  this.apiCache = opts.apiCache || globalCache();
	  this.requestHandler = opts.requestHandler || Requests.request;
	  this.apiCacheKey = this.url + (this.accessToken ? ('#' + this.accessToken) : '');
	  this.apiDataTTL = opts.apiDataTTL || 5;
	  return this;
	}
	
	Api.prototype = {
	
	  // Predicates
	  AT: "at",
	  ANY: "any",
	  SIMILAR: "similar",
	  FULLTEXT: "fulltext",
	  NUMBER: {
	    GT: "number.gt",
	    LT: "number.lt"
	  },
	  DATE: {
	    // Other date operators are available: see the documentation.
	    AFTER: "date.after",
	    BEFORE: "date.before",
	    BETWEEN: "date.between"
	  },
	
	  // Fragment: usable as the second element of a query array on most predicates (except SIMILAR).
	  // You can also use "my.*" for your custom fields.
	  DOCUMENT: {
	    ID: "document.id",
	    TYPE: "document.type",
	    TAGS: "document.tags"
	  },
	
	  data: null,
	
	  /**
	   * Fetches data used to construct the api client, from cache if it's
	   * present, otherwise from calling the prismic api endpoint (which is
	   * then cached).
	   *
	   * @param {function} callback - Callback to receive the data. Optional, you can use the promise result.
	   * @returns {Promise} Promise holding the data or error
	   */
	  get: function(callback) {
	    var self = this;
	    var cacheKey = this.apiCacheKey;
	
	    return new Promise(function (resolve, reject) {
	      var cb = function(err, value, xhr, ttl) {
	        if (callback) callback(err, value, xhr, ttl);
	        if (value) resolve(value);
	        if (err) reject(err);
	      };
	      self.apiCache.get(cacheKey, function (err, value) {
	        if (err || value) {
	          cb(err, value);
	          return;
	        }
	
	        self.requestHandler(self.url, function(err, data, xhr, ttl) {
	          if (err) {
	            cb(err, null, xhr, ttl);
	            return;
	          }
	
	          var parsed = self.parse(data);
	          ttl = ttl || self.apiDataTTL;
	
	          self.apiCache.set(cacheKey, parsed, ttl, function (err) {
	            cb(err, parsed, xhr, ttl);
	          });
	        });
	      });
	    });
	  },
	
	  /**
	   * Cleans api data from the cache and fetches an up to date copy.
	   *
	   * @param {function} callback - Optional callback function that is called after the data has been refreshed
	   * @returns {Promise}
	   */
	  refresh: function (callback) {
	    var self = this;
	    var cacheKey = this.apiCacheKey;
	
	    return new Promise(function(resolve, reject) {
	      var cb = function(err, value, xhr) {
	        if (callback) callback(err, value, xhr);
	        if (value) resolve(value);
	        if (err) reject(err);
	      };
	      self.apiCache.remove(cacheKey, function (err) {
	        if (err) { cb(err); return; }
	
	        self.get(function (err, data) {
	          if (err) { cb(err); return; }
	
	          self.data = data;
	          self.bookmarks = data.bookmarks;
	          self.experiments = new Experiments(data.experiments);
	
	          cb();
	        });
	      });
	    });
	  },
	
	  /**
	   * Parses and returns the /api document.
	   * This is for internal use, from outside this kit, you should call Prismic.Api()
	   *
	   * @param {string} data - The JSON document responded on the API's endpoint
	   * @returns {Api} - The Api object that can be manipulated
	   * @private
	   */
	  parse: function(data) {
	    var refs,
	        master,
	        forms = {},
	        form,
	        types,
	        tags,
	        f,
	        i;
	
	    // Parse the forms
	    for (i in data.forms) {
	      if (data.forms.hasOwnProperty(i)) {
	        f = data.forms[i];
	
	        if(this.accessToken) {
	          f.fields['access_token'] = {};
	          f.fields['access_token']['type'] = 'string';
	          f.fields['access_token']['default'] = this.accessToken;
	        }
	
	        form = new Form(
	          f.name,
	          f.fields,
	          f.form_method,
	          f.rel,
	          f.enctype,
	          f.action
	        );
	
	        forms[i] = form;
	      }
	    }
	
	    refs = data.refs.map(function (r) {
	      return new Ref(
	        r.ref,
	        r.label,
	        r.isMasterRef,
	        r.scheduledAt,
	        r.id
	      );
	    }) || [];
	
	    master = refs.filter(function (r) {
	      return r.isMaster === true;
	    });
	
	    types = data.types;
	
	    tags = data.tags;
	
	    if (master.length === 0) {
	      throw ("No master ref.");
	    }
	
	    return {
	      bookmarks: data.bookmarks || {},
	      refs: refs,
	      forms: forms,
	      master: master[0],
	      types: types,
	      tags: tags,
	      experiments: data.experiments,
	      oauthInitiate: data['oauth_initiate'],
	      oauthToken: data['oauth_token'],
	      quickRoutes: data.quickRoutes
	    };
	
	  },
	
	  /**
	   * @deprecated use form() now
	   * @param {string} formId - The id of a form, like "everything", or "products"
	   * @returns {SearchForm} - the SearchForm that can be used.
	   */
	  forms: function(formId) {
	    return this.form(formId);
	  },
	
	  /**
	   * Returns a useable form from its id, as described in the RESTful description of the API.
	   * For instance: api.form("everything") works on every repository (as "everything" exists by default)
	   * You can then chain the calls: api.form("everything").query('[[:d = at(document.id, "UkL0gMuvzYUANCpf")]]').ref(ref).submit()
	   *
	   * @param {string} formId - The id of a form, like "everything", or "products"
	   * @returns {SearchForm} - the SearchForm that can be used.
	   */
	  form: function(formId) {
	    var form = this.data.forms[formId];
	    if(form) {
	      return new SearchForm(this, form, {});
	    }
	    return null;
	  },
	
	  /**
	   * The ID of the master ref on this prismic.io API.
	   * Do not use like this: searchForm.ref(api.master()).
	   * Instead, set your ref once in a variable, and call it when you need it; this will allow to change the ref you're viewing easily for your entire page.
	   *
	   * @returns {string}
	   */
	  master: function() {
	    return this.data.master.ref;
	  },
	
	  /**
	   * Returns the ref ID for a given ref's label.
	   * Do not use like this: searchForm.ref(api.ref("Future release label")).
	   * Instead, set your ref once in a variable, and call it when you need it; this will allow to change the ref you're viewing easily for your entire page.
	   *
	   * @param {string} label - the ref's label
	   * @returns {string}
	   */
	  ref: function(label) {
	    for(var i=0; i<this.data.refs.length; i++) {
	      if(this.data.refs[i].label == label) {
	        return this.data.refs[i].ref;
	      }
	    }
	    return null;
	  },
	
	  /**
	   * The current experiment, or null
	   * @returns {Experiment}
	   */
	  currentExperiment: function() {
	    return this.experiments.current();
	  },
	
	  quickRoutesEnabled: function() {
	    return this.data.quickRoutes.enabled;
	  },
	
	  /**
	   * Retrieve quick routes definitions
	   */
	  quickRoutes: function(callback) {
	    var self = this;
	    return new Promise(function(resolve, reject) {
	      self.requestHandler(self.data.quickRoutes.url, function(err, data, xhr) {
	        if (callback) callback(err, data, xhr);
	        if (err) reject(err);
	        if (data) resolve(data);
	      });
	    });
	  },
	
	  /**
	   * Query the repository
	   * @param {string|array|Predicate} the query itself
	   * @param {object} additional parameters. In NodeJS, pass the request as 'req'.
	   * @param {function} callback(err, response)
	   */
	  query: function(q, options, callback) {
	    var opts = options || {};
	    var form = this.form('everything');
	    for (var key in opts) {
	      form = form.set(key, options[key]);
	    }
	    // Don't override the ref if the caller specified one in the options
	    if (!opts['ref']) {
	      // Look in cookies if we have a ref (preview or experiment)
	      var cookieString = '';
	      if (this.req) { // NodeJS
	        cookieString = this.req.headers["cookie"] || '';
	      } else if (typeof window !== 'undefined') { // Browser
	        cookieString = window.document.cookie || '';
	      }
	      var cookies = Cookies.parse(cookieString);
	      var previewRef = cookies[previewCookie];
	      var experimentRef = cookies[experimentCookie];
	      form = form.ref(previewRef || experimentRef || this.master());
	    }
	    return form.query(q).submit(callback);
	  },
	
	  /**
	   * Retrieve the document with the given id
	   * @param {string} id
	   * @param {object} additional parameters
	   * @param {function} callback(err, response)
	   */
	  getByID: function(id, options, callback) {
	    return this.query(Predicates.at('document.id', id), options, function(err, response) {
	      if (callback) {
	        var result = response.results.length > 0 ? response.results[0] : null;
	        callback(err, result);
	      }
	    }).then(function(response){
	      return response && response.results && response.results[0];
	    });
	  },
	
	  /**
	   * Retrieve multiple documents from an array of id
	   * @param {array} ids
	   * @param {object} additional parameters
	   * @param {function} callback(err, response)
	   */
	  getByIDs: function(ids, options, callback) {
	    return this.query(['in', 'document.id', ids], options, callback);
	  },
	
	  /**
	   * Retrieve the document with the given uid
	   * @param {string} type the custom type of the document
	   * @param {string} uid
	   * @param {object} additional parameters
	   * @param {function} callback(err, response)
	   */
	  getByUID: function(type, uid, options, callback) {
	    if (typeof options === 'function') {
	      callback = options;
	      options = {};
	    }
	    var self = this;
	    return new Promise(function(resolve, reject) {
	      var cb = function(err, value, xhr) {
	        if (callback) callback(err, value, xhr);
	        if (err) {
	          reject(err);
	        } else {
	          resolve(value);
	        }
	      };
	      self.query(Predicates.at('my.'+type+'.uid', uid), options, function(err, response) {
	        var result = (response && response.results && response.results.length > 0) ? response.results[0] : null;
	        cb(err, result);
	      });
	    });
	  },
	
	  /**
	   * Retrieve the singleton document with the given type
	   * @param {string} type the custom type of the document
	   * @param {object} additional parameters
	   * @param {function} callback(err, response)
	   */
	  getSingle: function(type, options, callback) {
	    if (typeof options === 'function') {
	      callback = options;
	      options = {};
	    }
	    var self = this;
	    return new Promise(function(resolve, reject) {
	      var cb = function(err, value, xhr) {
	        if (callback) callback(err, value, xhr);
	        if (err) {
	          reject(err);
	        } else {
	          resolve(value);
	        }
	      };
	      self.query(Predicates.at('document.type', type), options, function(err, response) {
	        var result = (response && response.results && response.results.length > 0) ? response.results[0] : null;
	        cb(err, result);
	      });
	    });
	  },
	
	  /**
	   * Retrieve the document with the given bookmark
	   * @param {string} bookmark name
	   * @param {object} additional parameters
	   * @param {function} callback(err, response)
	   * @returns {Promise}
	   */
	  getBookmark: function(bookmark, options, callback) {
	    return new Promise(function(resolve, reject) {
	      var id = this.bookmarks[bookmark];
	      if (id) {
	        resolve(id);
	      } else {
	        var err = new Error("Error retrieving bookmarked id");
	        if (callback) callback(err);
	        reject(err);
	      }
	    }).then(function(id) {
	      return this.getByID(id, options, callback);
	    });
	  },
	
	  /**
	   * Return the URL to display a given preview
	   * @param {string} token as received from Prismic server to identify the content to preview
	   * @param {function} linkResolver the link resolver to build URL for your site
	   * @param {string} defaultUrl the URL to default to return if the preview doesn't correspond to a document
	   *                (usually the home page of your site)
	   * @param {function} callback to get the resulting URL (optional, you can get it from the Promise result)
	   * @returns {Promise}
	   */
	  previewSession: function(token, linkResolver, defaultUrl, callback) {
	    var api = this;
	    return new Promise(function(resolve, reject) {
	      var cb = function(err, value, xhr) {
	        if (callback) callback(err, value, xhr);
	        if (err) {
	          reject(err);
	        } else {
	          resolve(value);
	        }
	      };
	      api.requestHandler(token, function (err, result, xhr) {
	        if (err) {
	          cb(err, defaultUrl, xhr);
	          return;
	        }
	        try {
	          var mainDocumentId = result.mainDocument;
	          if (!mainDocumentId) {
	            cb(null, defaultUrl, xhr);
	          } else {
	            api.form("everything").query(Predicates.at("document.id", mainDocumentId)).ref(token).submit(function(err, response) {
	              if (err) {
	                cb(err);
	              }
	              try {
	                if (response.results.length === 0) {
	                  cb(null, defaultUrl, xhr);
	                } else {
	                  cb(null, linkResolver(response.results[0]), xhr);
	                }
	              } catch (e) {
	                cb(e);
	              }
	            });
	          }
	        } catch (e) {
	          cb(e, defaultUrl, xhr);
	        }
	      });
	    });
	  },
	
	  /**
	   * Fetch a URL corresponding to a query, and parse the response as a Response object
	   */
	  request: function(url, callback) {
	    var api = this;
	    var cacheKey = url + (this.accessToken ? ('#' + this.accessToken) : '');
	    var cache = this.apiCache;
	    cache.get(cacheKey, function (err, value) {
	      if (err || value) {
	        callback(err, api.response(value));
	        return;
	      }
	      api.requestHandler(url, function (err, documents, xhr, ttl) {
	        if (err) {
	          callback(err, null, xhr);
	          return;
	        }
	
	        if (ttl) {
	          cache.set(cacheKey, documents, ttl, function (err) {
	            callback(err, api.response(documents));
	          });
	        } else {
	          callback(null, api.response(documents));
	        }
	      });
	    });
	  },
	
	  /**
	   * JSON documents to Response object
	   */
	  response: function(documents){
	    var results = documents.results.map(parseDoc);
	    return new Response(
	      documents.page,
	      documents.results_per_page,
	      documents.results_size,
	      documents.total_results_size,
	      documents.total_pages,
	      documents.next_page,
	      documents.prev_page,
	      results || []);
	  }
	
	};
	
	/**
	 * Embodies a submittable RESTful form as described on the API endpoint (as per RESTful standards)
	 * @constructor
	 * @private
	 */
	function Form(name, fields, form_method, rel, enctype, action) {
	  this.name = name;
	  this.fields = fields;
	  this.form_method = form_method;
	  this.rel = rel;
	  this.enctype = enctype;
	  this.action = action;
	}
	
	Form.prototype = {};
	
	/**
	 * Parse json as a document
	 *
	 * @returns {Document}
	 */
	var parseDoc = function(json) {
	  var fragments = {};
	  for(var field in json.data[json.type]) {
	    fragments[json.type + '.' + field] = json.data[json.type][field];
	  }
	
	  var slugs = [];
	  if (json.slugs !== undefined) {
	    for (var i = 0; i < json.slugs.length; i++) {
	      slugs.push(decodeURIComponent(json.slugs[i]));
	    }
	  }
	
	  return new Document(
	    json.id,
	    json.uid || null,
	    json.type,
	    json.href,
	    json.tags,
	    slugs,
	    json.first_publication_date,
	    json.last_publication_date,
	    fragments
	  );
	};
	
	/**
	 * Embodies a SearchForm object. To create SearchForm objects that are allowed in the API, please use the API.form() method.
	 * @constructor
	 * @global
	 * @alias SearchForm
	 */
	function SearchForm(api, form, data) {
	  this.api = api;
	  this.form = form;
	  this.data = data || {};
	
	  for(var field in form.fields) {
	    if(form.fields[field]['default']) {
	      this.data[field] = [form.fields[field]['default']];
	    }
	  }
	}
	
	SearchForm.prototype = {
	
	  /**
	   * Set an API call parameter. This will only work if field is a valid field of the
	   * RESTful form in the first place (as described in the /api document); otherwise,
	   * an "Unknown field" error is thrown.
	   * Please prefer using dedicated methods like query(), orderings(), ...
	   *
	   * @param {string} field - The name of the field to set
	   * @param {string} value - The value that gets assigned
	   * @returns {SearchForm} - The SearchForm itself
	   */
	  set: function(field, value) {
	    var fieldDesc = this.form.fields[field];
	    if(!fieldDesc) throw new Error("Unknown field " + field);
	    var values= this.data[field] || [];
	    if(value === '' || value === undefined) {
	      // we must compare value to null because we want to allow 0
	      value = null;
	    }
	    if(fieldDesc.multiple) {
	      if (value) values.push(value);
	    } else {
	      values = value && [value];
	    }
	    this.data[field] = values;
	    return this;
	  },
	
	  /**
	   * Sets a ref to query on for this SearchForm. This is a mandatory
	   * method to call before calling submit(), and api.form('everything').submit()
	   * will not work.
	   *
	   * @param {Ref} ref - The Ref object defining the ref to query
	   * @returns {SearchForm} - The SearchForm itself
	   */
	  ref: function(ref) {
	    return this.set("ref", ref);
	  },
	
	  /**
	   * Sets a predicate-based query for this SearchForm. This is where you
	   * paste what you compose in your prismic.io API browser.
	   *
	   * @example form.query(Prismic.Predicates.at("document.id", "foobar"))
	   * @param {string|...array} query - Either a query as a string, or as many predicates as you want. See Prismic.Predicates.
	   * @returns {SearchForm} - The SearchForm itself
	   */
	  query: function(query) {
	    if (typeof query === 'string') {
	      return this.set("q", query);
	    } else {
	      var predicates;
	      if (query.constructor === Array && query.length > 0 && query[0].constructor === Array) {
	        predicates = query;
	      } else {
	        predicates = [].slice.apply(arguments); // Convert to a real JS array
	      }
	      var stringQueries = [];
	      predicates.forEach(function (predicate) {
	        stringQueries.push(Predicates.toQuery(predicate));
	      });
	      return this.query("[" + stringQueries.join("") + "]");
	    }
	  },
	
	  /**
	   * Sets a page size to query for this SearchForm. This is an optional method.
	   *
	   * @param {number} size - The page size
	   * @returns {SearchForm} - The SearchForm itself
	   */
	  pageSize: function(size) {
	    return this.set("pageSize", size);
	  },
	
	  /**
	   * Restrict the results document to the specified fields
	   *
	   * @param {string|array} fields - The list of fields, array or comma separated string
	   * @returns {SearchForm} - The SearchForm itself
	   */
	  fetch: function(fields) {
	    if (fields instanceof Array) {
	      fields = fields.join(",");
	    }
	    return this.set("fetch", fields);
	  },
	
	  /**
	   * Include the requested fields in the DocumentLink instances in the result
	   *
	   * @param {string|array} fields - The list of fields, array or comma separated string
	   * @returns {SearchForm} - The SearchForm itself
	   */
	  fetchLinks: function(fields) {
	    if (fields instanceof Array) {
	      fields = fields.join(",");
	    }
	    return this.set("fetchLinks", fields);
	  },
	
	  /**
	   * Sets the page number to query for this SearchForm. This is an optional method.
	   *
	   * @param {number} p - The page number
	   * @returns {SearchForm} - The SearchForm itself
	   */
	  page: function(p) {
	    return this.set("page", p);
	  },
	
	  /**
	   * Sets the orderings to query for this SearchForm. This is an optional method.
	   *
	   * @param {array} orderings - Array of string: list of fields, optionally followed by space and desc. Example: ['my.product.price desc', 'my.product.date']
	   * @returns {SearchForm} - The SearchForm itself
	   */
	  orderings: function(orderings) {
	    if (typeof orderings === 'string') {
	      // Backward compatibility
	      return this.set("orderings", orderings);
	    } else if (!orderings) {
	      // Noop
	      return this;
	    } else {
	      // Normal usage
	      return this.set("orderings", "[" + orderings.join(",") + "]");
	    }
	  },
	
	  /**
	   * Submits the query, and calls the callback function.
	   *
	   * @param {function} callback - Optional callback function that is called after the query was made,
	   * to which you may pass three parameters: a potential error (null if no problem),
	   * a Response object (containing all the pagination specifics + the array of Docs),
	   * and the XMLHttpRequest
	   */
	  submit: function(callback) {
	    var self = this;
	    var url = this.form.action;
	
	    if (this.data) {
	      var sep = (url.indexOf('?') > -1 ? '&' : '?');
	      for(var key in this.data) {
	        if (this.data.hasOwnProperty(key)) {
	          var values = this.data[key];
	          if (values) {
	            for (var i = 0; i < values.length; i++) {
	              url += sep + key + '=' + encodeURIComponent(values[i]);
	              sep = '&';
	            }
	          }
	        }
	      }
	    }
	
	    return new Promise(function(resolve, reject) {
	      self.api.request(url, function(err, value, xhr) {
	        if (callback) callback(err, value, xhr);
	        if (err) reject(err);
	        if (value) resolve(value);
	      });
	    });
	  }
	};
	
	/**
	 * Embodies the response of a SearchForm query as returned by the API.
	 * It includes all the fields that are useful for pagination (page, total_pages, total_results_size, ...),
	 * as well as the field "results", which is an array of {@link Document} objects, the documents themselves.
	 *
	 * @constructor
	 * @global
	 */
	function Response(page, results_per_page, results_size, total_results_size, total_pages, next_page, prev_page, results) {
	  /**
	   * The current page
	   * @type {number}
	   */
	  this.page = page;
	  /**
	   * The number of results per page
	   * @type {number}
	   */
	  this.results_per_page = results_per_page;
	  /**
	   * The size of the current page
	   * @type {number}
	   */
	  this.results_size = results_size;
	  /**
	   * The total size of results across all pages
	   * @type {number}
	   */
	  this.total_results_size = total_results_size;
	  /**
	   * The total number of pages
	   * @type {number}
	   */
	  this.total_pages = total_pages;
	  /**
	   * The URL of the next page in the API
	   * @type {string}
	   */
	  this.next_page = next_page;
	  /**
	   * The URL of the previous page in the API
	   * @type {string}
	   */
	  this.prev_page = prev_page;
	  /**
	   * Array of {@link Document} for the current page
	   * @type {Array}
	   */
	  this.results = results;
	}
	
	/**
	 * Embodies a prismic.io ref (a past or future point in time you can query)
	 * @constructor
	 * @global
	 */
	function Ref(ref, label, isMaster, scheduledAt, id) {
	  /**
	   * @field
	   * @description the ID of the ref
	   */
	  this.ref = ref;
	  /**
	   * @field
	   * @description the label of the ref
	   */
	  this.label = label;
	  /**
	   * @field
	   * @description is true if the ref is the master ref
	   */
	  this.isMaster = isMaster;
	  /**
	   * @field
	   * @description the scheduled date of the ref
	   */
	  this.scheduledAt = scheduledAt;
	  /**
	   * @field
	   * @description the name of the ref
	   */
	  this.id = id;
	}
	Ref.prototype = {};
	function globalCache() {
	  var g;
	  if (typeof global == 'object') {
	    g = global; // NodeJS
	  } else {
	    g = window; // browser
	  }
	  if (!g.prismicCache) {
	    g.prismicCache = new ApiCache();
	  }
	  return g.prismicCache;
	}
	
	module.exports = {
	  experimentCookie: experimentCookie,
	  previewCookie: previewCookie,
	  Api: Api,
	  Form: Form,
	  SearchForm: SearchForm,
	  Ref: Ref,
	  parseDoc: parseDoc
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 554 */
/***/ function(module, exports, __webpack_require__) {

	
	"use strict";
	
	var LRUCache = __webpack_require__(556);
	
	/**
	 * Api cache
	 */
	function ApiCache(limit) {
	  this.lru = new LRUCache(limit);
	}
	
	ApiCache.prototype = {
	
	  get: function(key, cb) {
	    var maybeEntry = this.lru.get(key);
	    if(maybeEntry && !this.isExpired(key)) {
	      return cb(null, maybeEntry.data);
	    }
	    return cb();
	  },
	
	  set: function(key, value, ttl, cb) {
	    this.lru.remove(key);
	    this.lru.put(key, {
	      data: value,
	      expiredIn: ttl ? (Date.now() + (ttl * 1000)) : 0
	    });
	
	    return cb();
	  },
	
	  isExpired: function(key) {
	    var entry = this.lru.get(key);
	    if(entry) {
	      return entry.expiredIn !== 0 && entry.expiredIn < Date.now();
	    } else {
	      return false;
	    }
	  },
	
	  remove: function(key, cb) {
	    this.lru.remove(key);
	    return cb();
	  },
	
	  clear: function(cb) {
	    this.lru.removeAll();
	    return cb();
	  }
	};
	
	module.exports = ApiCache;


/***/ },
/* 555 */
/***/ function(module, exports) {

	"use strict";
	
	// Some portions of code from https://github.com/jshttp/cookie
	
	var decode = decodeURIComponent;
	
	function tryDecode(str, decode) {
	  try {
	    return decode(str);
	  } catch (e) {
	    return str;
	  }
	}
	
	function parse(str, options) {
	  if (typeof str !== 'string') {
	    throw new TypeError('argument str must be a string');
	  }
	
	  var obj = {};
	  var opt = options || {};
	  var pairs = str.split(/; */);
	  var dec = opt.decode || decode;
	
	  pairs.forEach(function(pair) {
	    var eq_idx = pair.indexOf('=');
	
	    // skip things that don't look like key=value
	    if (eq_idx < 0) {
	      return;
	    }
	
	    var key = pair.substr(0, eq_idx).trim();
	    var val = pair.substr(++eq_idx, pair.length).trim();
	
	    // quoted values
	    if ('"' == val[0]) {
	      val = val.slice(1, -1);
	    }
	
	    // only assign once
	    if (undefined == obj[key]) {
	      obj[key] = tryDecode(val, dec);
	    }
	  });
	
	  return obj;
	}
	
	module.exports = {
	  parse: parse
	};
	


/***/ },
/* 556 */
/***/ function(module, exports) {

	
	/**
	 * A doubly linked list-based Least Recently Used (LRU) cache. Will keep most
	 * recently used items while discarding least recently used items when its limit
	 * is reached.
	 *
	 * Licensed under MIT. Copyright (c) 2010 Rasmus Andersson <http://hunch.se/>
	 * See README.md for details.
	 *
	 * Illustration of the design:
	 *
	 *       entry             entry             entry             entry
	 *       ______            ______            ______            ______
	 *      | head |.newer => |      |.newer => |      |.newer => | tail |
	 *      |  A   |          |  B   |          |  C   |          |  D   |
	 *      |______| <= older.|______| <= older.|______| <= older.|______|
	 *
	 *  removed  <--  <--  <--  <--  <--  <--  <--  <--  <--  <--  <--  added
	 */
	function LRUCache (limit) {
	  // Current size of the cache. (Read-only).
	  this.size = 0;
	  // Maximum number of items this cache can hold.
	  this.limit = limit;
	  this._keymap = {};
	}
	
	/**
	 * Put <value> into the cache associated with <key>. Returns the entry which was
	 * removed to make room for the new entry. Otherwise undefined is returned
	 * (i.e. if there was enough room already).
	 */
	LRUCache.prototype.put = function(key, value) {
	  var entry = {key:key, value:value};
	  // Note: No protection agains replacing, and thus orphan entries. By design.
	  this._keymap[key] = entry;
	  if (this.tail) {
	    // link previous tail to the new tail (entry)
	    this.tail.newer = entry;
	    entry.older = this.tail;
	  } else {
	    // we're first in -- yay
	    this.head = entry;
	  }
	  // add new entry to the end of the linked list -- it's now the freshest entry.
	  this.tail = entry;
	  if (this.size === this.limit) {
	    // we hit the limit -- remove the head
	    return this.shift();
	  } else {
	    // increase the size counter
	    this.size++;
	  }
	  return null;
	};
	
	/**
	 * Purge the least recently used (oldest) entry from the cache. Returns the
	 * removed entry or undefined if the cache was empty.
	 *
	 * If you need to perform any form of finalization of purged items, this is a
	 * good place to do it. Simply override/replace this function:
	 *
	 *   var c = new LRUCache(123);
	 *   c.shift = function() {
	 *     var entry = LRUCache.prototype.shift.call(this);
	 *     doSomethingWith(entry);
	 *     return entry;
	 *   }
	 */
	LRUCache.prototype.shift = function() {
	  // todo: handle special case when limit == 1
	  var entry = this.head;
	  if (entry) {
	    if (this.head.newer) {
	      this.head = this.head.newer;
	      this.head.older = undefined;
	    } else {
	      this.head = undefined;
	    }
	    // Remove last strong reference to <entry> and remove links from the purged
	    // entry being returned:
	    entry.newer = entry.older = undefined;
	    // delete is slow, but we need to do this to avoid uncontrollable growth:
	    delete this._keymap[entry.key];
	  }
	  return entry;
	};
	
	/**
	 * Get and register recent use of <key>. Returns the value associated with <key>
	 * or undefined if not in cache.
	 */
	LRUCache.prototype.get = function(key, returnEntry) {
	  // First, find our cache entry
	  var entry = this._keymap[key];
	  if (entry === undefined) return null; // Not cached. Sorry.
	  // As <key> was found in the cache, register it as being requested recently
	  if (entry === this.tail) {
	    // Already the most recenlty used entry, so no need to update the list
	    return returnEntry ? entry : entry.value;
	  }
	  // HEAD--------------TAIL
	  //   <.older   .newer>
	  //  <--- add direction --
	  //   A  B  C  <D>  E
	  if (entry.newer) {
	    if (entry === this.head)
	      this.head = entry.newer;
	    entry.newer.older = entry.older; // C <-- E.
	  }
	  if (entry.older)
	    entry.older.newer = entry.newer; // C. --> E
	  entry.newer = undefined; // D --x
	  entry.older = this.tail; // D. --> E
	  if (this.tail)
	    this.tail.newer = entry; // E. <-- D
	  this.tail = entry;
	  return returnEntry ? entry : entry.value;
	};
	
	// ----------------------------------------------------------------------------
	// Following code is optional and can be removed without breaking the core
	// functionality.
	
	/**
	 * Check if <key> is in the cache without registering recent use. Feasible if
	 * you do not want to chage the state of the cache, but only "peek" at it.
	 * Returns the entry associated with <key> if found, or undefined if not found.
	 */
	LRUCache.prototype.find = function(key) {
	  return this._keymap[key];
	};
	
	/**
	 * Update the value of entry with <key>. Returns the old value, or undefined if
	 * entry was not in the cache.
	 */
	LRUCache.prototype.set = function(key, value) {
	  var oldvalue, entry = this.get(key, true);
	  if (entry) {
	    oldvalue = entry.value;
	    entry.value = value;
	  } else {
	    oldvalue = this.put(key, value);
	    if (oldvalue) oldvalue = oldvalue.value;
	  }
	  return oldvalue;
	};
	
	/**
	 * Remove entry <key> from cache and return its value. Returns undefined if not
	 * found.
	 */
	LRUCache.prototype.remove = function(key) {
	  var entry = this._keymap[key];
	  if (!entry) return null;
	  delete this._keymap[entry.key]; // need to do delete unfortunately
	  if (entry.newer && entry.older) {
	    // relink the older entry with the newer entry
	    entry.older.newer = entry.newer;
	    entry.newer.older = entry.older;
	  } else if (entry.newer) {
	    // remove the link to us
	    entry.newer.older = undefined;
	    // link the newer entry to head
	    this.head = entry.newer;
	  } else if (entry.older) {
	    // remove the link to us
	    entry.older.newer = undefined;
	    // link the newer entry to head
	    this.tail = entry.older;
	  } else { // if(entry.older === undefined && entry.newer === undefined) {
	    this.head = this.tail = undefined;
	  }
	
	  this.size--;
	  return entry.value;
	};
	
	/** Removes all entries */
	LRUCache.prototype.removeAll = function() {
	  // This should be safe, as we never expose strong refrences to the outside
	  this.head = this.tail = undefined;
	  this.size = 0;
	  this._keymap = {};
	};
	
	/**
	 * Return an array containing all keys of entries stored in the cache object, in
	 * arbitrary order.
	 */
	if (typeof Object.keys === 'function') {
	  LRUCache.prototype.keys = function() { return Object.keys(this._keymap); };
	} else {
	  LRUCache.prototype.keys = function() {
	    var keys = [];
	    for (var k in this._keymap) keys.push(k);
	    return keys;
	  };
	}
	
	/**
	 * Call `fun` for each entry. Starting with the newest entry if `desc` is a true
	 * value, otherwise starts with the oldest (head) enrty and moves towards the
	 * tail.
	 *
	 * `fun` is called with 3 arguments in the context `context`:
	 *   `fun.call(context, Object key, Object value, LRUCache self)`
	 */
	LRUCache.prototype.forEach = function(fun, context, desc) {
	  var entry;
	  if (context === true) { desc = true; context = undefined; }
	  else if (typeof context !== 'object') context = this;
	  if (desc) {
	    entry = this.tail;
	    while (entry) {
	      fun.call(context, entry.key, entry.value, this);
	      entry = entry.older;
	    }
	  } else {
	    entry = this.head;
	    while (entry) {
	      fun.call(context, entry.key, entry.value, this);
	      entry = entry.newer;
	    }
	  }
	};
	
	/** Returns a JSON (array) representation */
	LRUCache.prototype.toJSON = function() {
	  var s = [], entry = this.head;
	  while (entry) {
	    s.push({key:entry.key.toJSON(), value:entry.value.toJSON()});
	    entry = entry.newer;
	  }
	  return s;
	};
	
	/** Returns a String representation */
	LRUCache.prototype.toString = function() {
	  var s = '', entry = this.head;
	  while (entry) {
	    s += String(entry.key)+':'+entry.value;
	    entry = entry.newer;
	    if (entry)
	      s += ' < ';
	  }
	  return s;
	};
	
	module.exports = LRUCache;


/***/ },
/* 557 */
/***/ function(module, exports) {

	
	var Kind = {
	  Dynamic: 'dynamic',
	  Static: 'static'
	};
	
	var Condition = {
	  ID: 'withId',
	  UID: 'withUid',
	  Singleton: 'singleton'
	};
	
	function toUrl(route, doc) {
	  if(!route.fragments || route.fragments.length == 0) {
	    return '/';
	  } else {
	    return route.fragments.reduce(function (acc, f) {
	      switch(f.kind) {
	      case Kind.Dynamic:
	        if (doc)
	          return acc + '/' + getFragmentValue(f, doc);
	        else
	          return acc + '/:' + toKey(f.key);
	
	      case Kind.Static:
	        return acc + '/' + f.value;
	
	      default:
	        return acc;
	      }
	    }, '');
	  }
	}
	
	function getFragmentValue(fragment, doc) {
	  var steps = fragment.key.split('.');
	  if (steps[0] == doc.type) {
	    switch(steps[1]) {
	    case 'uid':
	      return doc.uid;
	    case 'id':
	      return doc.id;
	    default:
	      throw Error("Unsupported dynamic fragment: " + fragment);
	    }
	  } else {
	    throw Error("Wrong doc type error: got " + doc.type + ", expected " + steps[0]);
	  }
	}
	
	
	function toKey(dotty) {
	  return dotty.split('.').join('_');
	}
	
	function fetchData(req, res, fetchers) {
	  return new Promise(function(resolve, reject) {
	    var pData = fetchers.map(function(f) {
	      return fetcherAction(f, req)
	        .then(function(doc) {
	          return { name: f.name, doc: doc };
	        })
	        .catch(function(err) {
	          reject(err);
	        });
	    });
	
	    Promise.all(pData).then(function(results) {
	      var data = {};
	      results.forEach(function(result) {
	        data[result.name] = result.doc;
	      });
	      resolve(data);
	    });
	  });
	}
	
	function fetcherAction(f, req) {
	  switch(f.condition.kind) {
	  case Condition.ID:
	    return req.prismic.api.getByID(f.mask, req.params[toKey(f.condition.key)]);
	
	  case Condition.UID:
	    return req.prismic.api.getByUID(f.mask, req.params[toKey(f.condition.key)]);
	
	  case Condition.Singleton:
	    return req.prismic.api.getSingle(f.mask);
	
	  default:
	    return Promise.reject(new Error("Unknown fetcher condition: " + f.condition.kind));
	  }
	}
	
	
	
	function makeLinkResolver(dynRoutes, linkResolver) {
	  return function(doc) {
	    var docRoute = dynRoutes.find(function(dr) {
	      return dr.forMask === doc.type;
	    });
	    if(docRoute) return toUrl(docRoute, doc);
	    else return linkResolver(doc);
	  };
	}
	
	module.exports = {
	  toUrl: toUrl,
	  makeLinkResolver: makeLinkResolver,
	  fetchData: fetchData
	};


/***/ },
/* 558 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {
	"use strict";
	
	var createError = function(status, message) {
	  var err = new Error(message);
	  err.status = status;
	  return err;
	};
	
	// -- Request handlers
	
	var ajaxRequest = (function() {
	  if(typeof XMLHttpRequest != 'undefined' && 'withCredentials' in new XMLHttpRequest()) {
	    return function(url, callback) {
	
	      var xhr = new XMLHttpRequest();
	
	      // Called on success
	      var resolve = function() {
	        var ttl, cacheControl = /max-age\s*=\s*(\d+)/.exec(
	          xhr.getResponseHeader('Cache-Control'));
	        if (cacheControl && cacheControl.length > 1) {
	          ttl = parseInt(cacheControl[1], 10);
	        }
	        callback(null, JSON.parse(xhr.responseText), xhr, ttl);
	      };
	
	      // Called on error
	      var reject = function() {
	        var status = xhr.status;
	        callback(createError(status, "Unexpected status code [" + status + "] on URL "+url), null, xhr);
	      };
	
	      // Bind the XHR finished callback
	      xhr.onreadystatechange = function() {
	        if (xhr.readyState === 4) {
	          if(xhr.status && xhr.status == 200) {
	            resolve();
	          } else {
	            reject();
	          }
	        }
	      };
	
	      // Open the XHR
	      xhr.open('GET', url, true);
	
	      // Kit version (can't override the user-agent client side)
	      // xhr.setRequestHeader("X-Prismic-User-Agent", "Prismic-javascript-kit/%VERSION%".replace("%VERSION%", Global.Prismic.version));
	
	      // Json request
	      xhr.setRequestHeader('Accept', 'application/json');
	
	      // Send the XHR
	      xhr.send();
	    };
	  }
	  return null;
	});
	
	var xdomainRequest = (function() {
	  if(typeof XDomainRequest != 'undefined') { // Internet Explorer
	    return function(url, callback) {
	
	      var xdr = new XDomainRequest();
	
	      // Called on success
	      var resolve = function() {
	        callback(null, JSON.parse(xdr.responseText), xdr, 0);
	      };
	
	      // Called on error
	      var reject = function(msg) {
	        callback(new Error(msg), null, xdr);
	      };
	
	      // Bind the XDR finished callback
	      xdr.onload = function() {
	        resolve(xdr);
	      };
	
	      // Bind the XDR error callback
	      xdr.onerror = function() {
	        reject("Unexpected status code on URL " + url);
	      };
	
	      // Open the XHR
	      xdr.open('GET', url, true);
	
	      // Bind the XDR timeout callback
	      xdr.ontimeout = function () {
	        reject("Request timeout");
	      };
	
	      // Empty callback. IE sometimes abort the reqeust if
	      // this is not present
	      xdr.onprogress = function () { };
	
	      xdr.send();
	    };
	  }
	  return null;
	});
	
	
	// The experimental fetch API, required by React Native for example.
	// We still use browser requests by default because there could be an
	// incomplete polyfill in the context (lacking CORS for example)
	var fetchRequest = (function() {
	  if (typeof fetch == "function") {
	    var pjson = __webpack_require__(299);
	    return function(requestUrl, callback) {
	      fetch(requestUrl, {
	        headers: {
	          'Accept': 'application/json',
	          'User-Agent': 'Prismic-javascript-kit/' + pjson.version + " NodeJS/" + process.version
	        }
	      }).then(function (response) {
	        if (~~(response.status / 100 != 2)) {
	          throw new createError(response.status, "Unexpected status code [" + response.status + "] on URL " + requestUrl);
	        } else {
	          return response.json().then(function(json) {
	            return {
	              response: response,
	              json: json
	            };
	          });
	        }
	      }).then(function(next) {
	        var response = next.response;
	        var json = next.json;
	        var cacheControl = response.headers['cache-control'];
	        var ttl = cacheControl && /max-age=(\d+)/.test(cacheControl) ? parseInt(/max-age=(\d+)/.exec(cacheControl)[1], 10) : undefined;
	        callback(null, json, response, ttl);
	      }).catch(function (error) {
	        callback(error);
	      });
	    };
	  }
	  return null;
	});
	
	var nodeJSRequest = (function() {
	  if("function" == 'function' && __webpack_require__(237)) {
	    var http = __webpack_require__(237),
	        https = __webpack_require__(534),
	        url = __webpack_require__(330),
	        pjson = __webpack_require__(299);
	
	    return function(requestUrl, callback) {
	      var parsed = url.parse(requestUrl),
	          h = parsed.protocol == 'https:' ? https : http,
	          options = {
	            hostname: parsed.hostname,
	            path: parsed.path,
	            query: parsed.query,
	            headers: {
	              'Accept': 'application/json',
	              'User-Agent': 'Prismic-javascript-kit/' + pjson.version + " NodeJS/" + process.version
	            }
	          };
	
	      if (!requestUrl) {
	        var e = new Error('dummy');
	        var stack = e.stack.replace(/^[^\(]+?[\n$]/gm, '')
	              .replace(/^\s+at\s+/gm, '')
	              .replace(/^Object.<anonymous>\s*\(/gm, '{anonymous}()@')
	              .split('\n');
	        console.log(stack);
	      }
	      var request = h.get(options, function(response) {
	        if (response.statusCode && response.statusCode == 200) {
	          var jsonStr = '';
	
	          response.setEncoding('utf8');
	          response.on('data', function (chunk) {
	            jsonStr += chunk;
	          });
	
	          response.on('end', function () {
	            var json;
	            try {
	              json = JSON.parse(jsonStr);
	            } catch (ex) {
	              console.log("Failed to parse json: " + jsonStr, ex);
	            }
	            var cacheControl = response.headers['cache-control'];
	            var ttl = cacheControl && /max-age=(\d+)/.test(cacheControl) ? parseInt(/max-age=(\d+)/.exec(cacheControl)[1], 10) : undefined;
	
	            callback(null, json, response, ttl);
	          });
	        } else {
	          callback(createError(response.statusCode, "Unexpected status code [" + response.statusCode + "] on URL "+requestUrl), null, response);
	        }
	      });
	
	      // properly handle timeouts
	      request.on('error', function(err) {
	        callback(new Error("Unexpected error on URL "+requestUrl), null, err);
	      });
	
	
	    };
	  }
	  return null;
	});
	
	// Number of maximum simultaneous connections to the prismic server
	var MAX_CONNECTIONS = 20;
	// Number of requests currently running (capped by MAX_CONNECTIONS)
	var running = 0;
	// Requests in queue
	var queue = [];
	
	var processQueue = function() {
	  if (queue.length === 0 || running >= MAX_CONNECTIONS) {
	    return;
	  }
	  running++;
	  var next = queue.shift();
	  var fn = ajaxRequest() || xdomainRequest() || fetchRequest() || nodeJSRequest() ||
	        (function() { throw new Error("No request handler available (tried XMLHttpRequest, fetch & NodeJS)"); })();
	  fn.call(this, next.url, function(error, result, xhr, ttl) {
	    running--;
	    next.callback(error, result, xhr, ttl);
	    processQueue();
	  });
	};
	
	var request = function (url, callback) {
	  queue.push({
	    'url': url,
	    'callback': callback
	  });
	  processQueue();
	};
	
	module.exports = {
	  MAX_CONNECTIONS: MAX_CONNECTIONS, // Number of maximum simultaneous connections to the prismic server
	  request: request
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(39)))

/***/ },
/* 559 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	'use strict';
	
	// If obj.hasOwnProperty has been overridden, then calling
	// obj.hasOwnProperty(prop) will break.
	// See: https://github.com/joyent/node/issues/1707
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}
	
	module.exports = function(qs, sep, eq, options) {
	  sep = sep || '&';
	  eq = eq || '=';
	  var obj = {};
	
	  if (typeof qs !== 'string' || qs.length === 0) {
	    return obj;
	  }
	
	  var regexp = /\+/g;
	  qs = qs.split(sep);
	
	  var maxKeys = 1000;
	  if (options && typeof options.maxKeys === 'number') {
	    maxKeys = options.maxKeys;
	  }
	
	  var len = qs.length;
	  // maxKeys <= 0 means that we should not limit keys count
	  if (maxKeys > 0 && len > maxKeys) {
	    len = maxKeys;
	  }
	
	  for (var i = 0; i < len; ++i) {
	    var x = qs[i].replace(regexp, '%20'),
	        idx = x.indexOf(eq),
	        kstr, vstr, k, v;
	
	    if (idx >= 0) {
	      kstr = x.substr(0, idx);
	      vstr = x.substr(idx + 1);
	    } else {
	      kstr = x;
	      vstr = '';
	    }
	
	    k = decodeURIComponent(kstr);
	    v = decodeURIComponent(vstr);
	
	    if (!hasOwnProperty(obj, k)) {
	      obj[k] = v;
	    } else if (Array.isArray(obj[k])) {
	      obj[k].push(v);
	    } else {
	      obj[k] = [obj[k], v];
	    }
	  }
	
	  return obj;
	};


/***/ },
/* 560 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	'use strict';
	
	var stringifyPrimitive = function(v) {
	  switch (typeof v) {
	    case 'string':
	      return v;
	
	    case 'boolean':
	      return v ? 'true' : 'false';
	
	    case 'number':
	      return isFinite(v) ? v : '';
	
	    default:
	      return '';
	  }
	};
	
	module.exports = function(obj, sep, eq, name) {
	  sep = sep || '&';
	  eq = eq || '=';
	  if (obj === null) {
	    obj = undefined;
	  }
	
	  if (typeof obj === 'object') {
	    return Object.keys(obj).map(function(k) {
	      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
	      if (Array.isArray(obj[k])) {
	        return obj[k].map(function(v) {
	          return ks + encodeURIComponent(stringifyPrimitive(v));
	        }).join(sep);
	      } else {
	        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
	      }
	    }).join(sep);
	
	  }
	
	  if (!name) return '';
	  return encodeURIComponent(stringifyPrimitive(name)) + eq +
	         encodeURIComponent(stringifyPrimitive(obj));
	};


/***/ },
/* 561 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.decode = exports.parse = __webpack_require__(559);
	exports.encode = exports.stringify = __webpack_require__(560);


/***/ },
/* 562 */
/***/ function(module, exports) {

	module.exports = "main {\n  min-height: 100%; }\n\ndiv#top-section {\n  position: relative;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: row;\n  flex-direction: row;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  -webkit-box-pack: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  background-color: white;\n  z-index: 1600; }\n  div#top-section img#top-logo {\n    margin: 5px;\n    position: relative;\n    width: 230px;\n    height: 70px;\n    -o-object-fit: contain;\n    object-fit: contain;\n    cursor: pointer; }\n\nfooter {\n  font-family: 'Roboto', sans-serif;\n  font-size: 0.9em;\n  width: 100%;\n  overflow: hidden;\n  background-color: #e0e0e0;\n  color: #555;\n  margin-top: 15px;\n  padding-top: 15px;\n  border-top: 1px solid #CCC; }\n\nfooter.container-fluid {\n  padding-right: 0px !important;\n  padding-left: 0px !important; }\n  footer.container-fluid .row {\n    padding-left: 10%;\n    padding-right: 10%;\n    margin-left: 0px !important;\n    margin-right: 0px !important; }\n\nfooter #links-section.row ul {\n  -webkit-padding-start: 0px; }\n  footer #links-section.row ul li {\n    display: inline-block;\n    margin-right: 20px; }\n\nfooter #links-section.row a {\n  display: block;\n  text-decoration: none;\n  margin-top: 10px;\n  color: #333;\n  font-weight: 700; }\n  footer #links-section.row a:hover {\n    color: #f1487c; }\n\n.footer-column {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  padding: 5px; }\n  .footer-column.center {\n    -webkit-box-pack: start;\n    -ms-flex-pack: start;\n    justify-content: flex-start;\n    -webkit-box-align: center;\n    -ms-flex-align: center;\n    align-items: center; }\n\n.footer-row {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: row;\n  flex-direction: row;\n  padding: 5px; }\n  .footer-row.center {\n    -webkit-box-pack: center;\n    -ms-flex-pack: center;\n    justify-content: center;\n    -webkit-box-align: center;\n    -ms-flex-align: center;\n    align-items: center; }\n\n.tag-container {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: row;\n  flex-direction: row;\n  -webkit-box-pack: start;\n  -ms-flex-pack: start;\n  justify-content: flex-start;\n  position: relative;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap; }\n\n.tag-box {\n  margin: 3px 3px 3px 0px;\n  font-size: 0.8em;\n  color: #f1487c;\n  border: 1px solid rgba(241, 72, 124, 0.8);\n  border-radius: 3px;\n  padding: 5px;\n  width: auto;\n  height: 32px;\n  text-align: center;\n  overflow: hidden;\n  cursor: pointer;\n  -webkit-transition: all .3s ease-in-out;\n  -webkit-transition: all .3 ease-in-out;\n  transition: all .3 ease-in-out; }\n  .tag-box:hover {\n    color: white;\n    border: 1px solid #f1487c;\n    background-color: #f1487c; }\n\nfooter #follow-section.row {\n  height: 80px; }\n\np.share {\n  display: block;\n  text-align: center;\n  margin-bottom: 3px !important; }\n\n.social-bar {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: row;\n  flex-direction: row;\n  -webkit-box-pack: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  position: relative;\n  width: 100%;\n  -webkit-box-align: baseline;\n  -ms-flex-align: baseline;\n  align-items: baseline; }\n  .social-bar i {\n    font-size: 1.5em;\n    color: #555;\n    padding: 5px 20px;\n    cursor: pointer; }\n    .social-bar i:hover {\n      color: #999; }\n\nsection {\n  position: relative;\n  background-color: white;\n  z-index: 999; }\n\n.menu-replacer {\n  position: relative;\n  width: 100%;\n  height: 0px; }\n  .menu-replacer.affix {\n    height: 56px; }\n\nnav-bar.affix {\n  width: 100%;\n  top: 0px;\n  z-index: 1999; }\n"

/***/ },
/* 563 */
/***/ function(module, exports) {

	module.exports = ".flex-row-center {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: row;\n  flex-direction: row;\n  -webkit-box-pack: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center; }\n\n.cover {\n  position: relative;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  -webkit-box-pack: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: cover;\n  height: 350px;\n  z-index: 98; }\n  .cover img {\n    width: 100%;\n    -o-object-fit: cover;\n    object-fit: cover;\n    z-index: 98; }\n  .cover.noise {\n    position: relative; }\n  .cover.noise:after {\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 350px;\n    content: \"\";\n    position: absolute;\n    background-image: url(\"./../../resources/img/noise.png\"); }\n  .cover h1 {\n    position: relative;\n    text-align: center;\n    color: white;\n    font-family: 'PT Serif', sans-serif;\n    font-size: 2.80em;\n    font-weight: 700;\n    text-shadow: 1px 1px 2px #555;\n    z-index: 99; }\n  .cover h6 {\n    font-family: 'PT Serif', sans-serif;\n    text-shadow: 1px 1px 2px #555;\n    color: white;\n    font-weight: 700;\n    z-index: 99; }\n  .cover .social-bar {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: horizontal;\n    -webkit-box-direction: normal;\n    -ms-flex-direction: row;\n    flex-direction: row;\n    -webkit-box-pack: center;\n    -ms-flex-pack: center;\n    justify-content: center;\n    position: relative;\n    width: 300px;\n    top: -100px;\n    z-index: 99; }\n    .cover .social-bar .circle {\n      margin: 3px;\n      font-size: 16px;\n      color: white;\n      border: 2px solid rgba(255, 255, 255, 0.8);\n      border-radius: 50%;\n      width: 32px;\n      height: 32px;\n      text-align: center;\n      line-height: 30px;\n      overflow: hidden;\n      cursor: pointer;\n      -webkit-transition: all .3s ease-in-out;\n      -webkit-transition: all .3 ease-in-out;\n      transition: all .3 ease-in-out; }\n      .cover .social-bar .circle.facebook:hover {\n        border: 2px solid #3b5998;\n        background-color: #3b5998; }\n      .cover .social-bar .circle.twitter:hover {\n        border: 2px solid #00aced;\n        background-color: #00aced; }\n      .cover .social-bar .circle.youtube:hover {\n        border: 2px solid #c4302b;\n        background-color: #c4302b; }\n\n#all-fashion {\n  margin-top: 20px;\n  padding: 20px;\n  background-color: white;\n  border-bottom: 1px solid #CCC; }\n\n#all-beauty {\n  margin-top: 20px;\n  padding: 20px;\n  background-color: white;\n  border-bottom: 1px solid #CCC; }\n\n#all-birls {\n  margin-top: 20px;\n  padding: 20px;\n  background-color: white;\n  border-bottom: 1px solid #CCC; }\n\n.title {\n  font-family: 'Oswald', sans-serif;\n  font-weight: 600;\n  font-size: 5em;\n  text-align: left;\n  padding-left: 30px;\n  vertical-align: bottom; }\n\n.custom-category1 {\n  position: relative;\n  font-family: 'Oswald', sans-serif;\n  font-weight: 600;\n  font-size: 3em;\n  text-align: center;\n  padding: 10px;\n  vertical-align: bottom; }\n  .custom-category1 a {\n    text-decoration: none;\n    color: inherit; }\n\n.custom-category2 {\n  position: relative;\n  font-family: 'Oswald', sans-serif;\n  font-weight: 600;\n  font-size: 2em;\n  text-align: right;\n  vertical-align: bottom; }\n  .custom-category2 a {\n    text-decoration: none;\n    color: inherit; }\n\n#popular-tags {\n  margin-top: 20px;\n  margin-bottom: 20px; }\n  #popular-tags .title {\n    font-family: 'Roboto', sans-serif;\n    text-align: center;\n    font-size: 1em;\n    font-weight: 700;\n    color: #333; }\n  #popular-tags .tag-container {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: horizontal;\n    -webkit-box-direction: normal;\n    -ms-flex-direction: row;\n    flex-direction: row;\n    -webkit-box-pack: start;\n    -ms-flex-pack: start;\n    justify-content: flex-start;\n    position: relative;\n    -ms-flex-wrap: wrap;\n    flex-wrap: wrap; }\n  #popular-tags .tag-box {\n    margin: 3px 3px 3px 0px;\n    font-size: 0.8em;\n    color: #f1487c;\n    border: 1px solid rgba(241, 72, 124, 0.8);\n    border-radius: 3px;\n    padding: 5px;\n    width: auto;\n    height: 32px;\n    text-align: center;\n    overflow: hidden;\n    cursor: pointer;\n    -webkit-transition: all .3s ease-in-out;\n    -webkit-transition: all .3 ease-in-out;\n    transition: all .3 ease-in-out; }\n    #popular-tags .tag-box:hover {\n      color: white;\n      border: 1px solid #f1487c;\n      background-color: #f1487c; }\n\n.mood-brick {\n  margin-bottom: 20px; }\n  @media only screen and (min-width: 992px) {\n    .mood-brick {\n      width: calc(100% / 3 - 30px); } }\n  @media only screen and (max-width: 992px) {\n    .mood-brick {\n      width: calc(100% / 3 - 30px); } }\n  @media only screen and (max-width: 702px) {\n    .mood-brick {\n      width: calc(100% / 2 - 30px); } }\n  @media only screen and (max-width: 502px) {\n    .mood-brick {\n      width: calc(100%); } }\n\n.mood-brick .img-box {\n  position: relative;\n  -webkit-transition: all .2s ease-in-out;\n  transition: all .2s ease-in-out; }\n  .mood-brick .img-box:hover {\n    -webkit-transform: scale(1.05);\n    transform: scale(1.05); }\n\n.mood-brick .img-box img {\n  width: 100%;\n  -o-object-fit: cover;\n  object-fit: cover;\n  -o-object-position: center;\n  object-position: center; }\n\n.mood-brick .img-box .caption {\n  position: absolute;\n  width: 100%;\n  bottom: 45%;\n  left: 0px;\n  color: white;\n  text-align: center;\n  text-shadow: #7a7a7a 2px 2px 0px; }\n  .mood-brick .img-box .caption h3 {\n    font-size: 1.5em;\n    font-weight: 700; }\n\n.brick {\n  margin-bottom: 50px; }\n  @media only screen and (min-width: 992px) {\n    .brick {\n      width: calc(100% / 4 - 20px); } }\n  @media only screen and (max-width: 992px) {\n    .brick {\n      width: calc(100% / 3 - 20px); } }\n  @media only screen and (max-width: 702px) {\n    .brick {\n      width: calc(100% / 2 - 20px); } }\n  @media only screen and (max-width: 502px) {\n    .brick {\n      width: calc(100%); } }\n\n.card-board {\n  -ms-flex-line-pack: start;\n  align-content: flex-start;\n  background-color: white;\n  min-height: 200px; }\n  @media only screen and (min-width: 992px) {\n    .card-board {\n      padding-top: 20px;\n      padding-bottom: 20px;\n      padding-left: 15%;\n      padding-right: 15%; } }\n  @media only screen and (max-width: 992px) {\n    .card-board {\n      padding: 20px; } }\n\n.card-wrapper {\n  margin-top: 20px; }\n  @media only screen and (min-width: 992px) {\n    .card-wrapper {\n      padding-left: 30px;\n      padding-right: 30px; } }\n\n.more {\n  position: relative;\n  text-align: center;\n  font-size: 3.00em;\n  font-weight: 900;\n  cursor: pointer;\n  -webkit-transition: all .3s ease-in-out;\n  -webkit-transition: all .3 ease-in-out;\n  transition: all .3 ease-in-out; }\n  .more:hover {\n    color: #00aced; }\n\n.torn {\n  width: 100%;\n  padding-top: 40px;\n  background-image: url(\"./../../resources/img/torn.png\");\n  background-color: #F6F6F6;\n  background-repeat: repeat-x; }\n\n.white {\n  padding-top: 10px;\n  background-color: white; }\n"

/***/ },
/* 564 */
/***/ function(module, exports) {

	module.exports = "h1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  margin: 0px !important; }\n\nh1 {\n  font-size: 4.00em;\n  font-weight: 900; }\n\nh2 {\n  font-family: 'Open Sans', sans-serif;\n  font-weight: 700;\n  font-size: 1.5em; }\n\nh6 {\n  font-weight: 700; }\n\n.shadow1 {\n  color: white;\n  text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.4); }\n\n.shadow2 {\n  color: white;\n  text-shadow: 2px 2px 3px rgba(0, 0, 0, 0.4); }\n\n.center {\n  display: block;\n  text-align: center;\n  margin: 10px;\n  z-index: 99; }\n\n#cover-wrapper {\n  height: 350px; }\n\n#cover-image {\n  width: 100%;\n  height: 350px;\n  -o-object-fit: cover;\n  object-fit: cover;\n  -o-object-position: center;\n  object-position: center;\n  z-index: 97; }\n\n.cover {\n  position: relative;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  width: 100%;\n  height: 350px;\n  background-image: -webkit-linear-gradient(right, rgba(0, 0, 0, 0.9) 0%, rgba(0, 0, 0, 0.1) 30%, rgba(0, 0, 0, 0.1) 50%, rgba(0, 0, 0, 0.1) 70%, rgba(0, 0, 0, 0.9) 100%);\n  background-image: linear-gradient(to left, rgba(0, 0, 0, 0.9) 0%, rgba(0, 0, 0, 0.1) 30%, rgba(0, 0, 0, 0.1) 50%, rgba(0, 0, 0, 0.1) 70%, rgba(0, 0, 0, 0.9) 100%);\n  z-index: 98;\n  padding-top: 150px; }\n  .cover.noise {\n    position: relative; }\n  .cover.noise:after {\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 450px;\n    content: \"\";\n    position: absolute;\n    background-image: url(\"./../../resources/img/noise.png\"); }\n  .cover .select-container {\n    z-index: 100;\n    height: auto; }\n    .cover .select-container span#search-label {\n      font-size: 15px;\n      font-weight: bold; }\n    .cover .select-container .form-group select {\n      width: 248px;\n      font-size: 14px;\n      line-height: 1;\n      border: 0;\n      border-radius: 0px;\n      height: 30px;\n      background: url(https://cdn0.iconfinder.com/data/icons/slim-square-icons-basics/100/basics-08-128.png) no-repeat right white;\n      background-size: 25px;\n      -webkit-appearance: none;\n      background-position-x: 215px; }\n      .cover .select-container .form-group select:disabled {\n        background-color: #CCC; }\n    .cover .select-container .btn {\n      border-radius: 0px;\n      height: 34px;\n      width: 100px; }\n  .cover .social-bar {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: horizontal;\n    -webkit-box-direction: normal;\n    -ms-flex-direction: row;\n    flex-direction: row;\n    -webkit-box-pack: center;\n    -ms-flex-pack: center;\n    justify-content: center;\n    position: relative;\n    width: 300px;\n    z-index: 99; }\n    .cover .social-bar .circle {\n      margin: 3px;\n      font-size: 16px;\n      color: white;\n      border: 2px solid rgba(255, 255, 255, 0.8);\n      border-radius: 50%;\n      width: 32px;\n      height: 32px;\n      text-align: center;\n      line-height: 30px;\n      overflow: hidden;\n      cursor: pointer;\n      -webkit-transition: all .3s ease-in-out;\n      -webkit-transition: all .3 ease-in-out;\n      transition: all .3 ease-in-out; }\n      .cover .social-bar .circle.facebook:hover {\n        border: 2px solid #3b5998;\n        background-color: #3b5998; }\n      .cover .social-bar .circle.twitter:hover {\n        border: 2px solid #00aced;\n        background-color: #00aced; }\n      .cover .social-bar .circle.youtube:hover {\n        border: 2px solid #c4302b;\n        background-color: #c4302b; }\n\n.group-title {\n  background-color: white;\n  border-bottom: 1px solid #CCC;\n  text-align: center;\n  padding: 20px 0px; }\n\n#collection-section {\n  margin: 0 0;\n  padding: 20px 0;\n  background-color: white;\n  position: relative;\n  min-height: 200px;\n  z-index: 100; }\n\n.torn {\n  width: 100%;\n  height: 40px;\n  background-image: url(\"./../../resources/img/torn.png\");\n  background-color: #F6F6F6;\n  background-repeat: repeat-x; }\n\n.more {\n  position: relative;\n  text-align: center;\n  font-size: 3.00em;\n  font-weight: 900;\n  cursor: pointer;\n  -webkit-transition: all .3s ease-in-out;\n  -webkit-transition: all .3 ease-in-out;\n  transition: all .3 ease-in-out; }\n  .more:hover {\n    color: #00aced; }\n"

/***/ },
/* 565 */
/***/ function(module, exports) {

	module.exports = "h1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-family: 'Roboto', sans-serif;\n  margin: 0px !important; }\n\nh1 {\n  font-size: 4.00em;\n  font-weight: 900; }\n\nh2 {\n  font-weight: 700;\n  font-size: 1.5em; }\n\nh6 {\n  font-weight: 700; }\n\n.group-title {\n  background-color: white;\n  border-bottom: 1px solid #CCC;\n  text-align: center;\n  padding: 20px 0px; }\n\n#collection-section {\n  margin: 0 0;\n  padding: 20px 0;\n  background-color: white;\n  position: relative;\n  min-height: 200px;\n  z-index: 100; }\n\n.more {\n  position: relative;\n  text-align: center;\n  font-size: 3.00em;\n  font-weight: 900;\n  cursor: pointer;\n  top: -100px;\n  -webkit-transition: all .3s ease-in-out;\n  -webkit-transition: all .3 ease-in-out;\n  transition: all .3 ease-in-out; }\n  .more:hover {\n    color: #00aced; }\n"

/***/ },
/* 566 */
/***/ function(module, exports) {

	module.exports = "#logo-container {\n  position: relative;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: row;\n  flex-direction: row;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  -webkit-box-pack: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  background-color: white;\n  z-index: 1000; }\n  #logo-container .top-logo {\n    position: relative;\n    width: 230px;\n    height: 150px;\n    background-image: url(\"./../../resources/svg/logo.svg\");\n    background-repeat: no-repeat;\n    background-size: contain;\n    fill: hotpink; }\n\nsection {\n  position: relative;\n  background-color: white;\n  z-index: 999; }\n\n#slider {\n  position: relative;\n  margin-bottom: 20px; }\n  #slider h3 {\n    text-align: center;\n    color: white;\n    font-family: 'Lato', sans-serif;\n    font-size: 2.50em;\n    font-weight: 900;\n    text-shadow: 2px 2px #555; }\n  #slider img {\n    height: 600px;\n    width: 100%;\n    -o-object-fit: cover;\n    object-fit: cover;\n    -o-object-position: center;\n    object-position: center; }\n\n#slider-frame {\n  position: relative;\n  display: block;\n  margin: auto;\n  z-index: 100;\n  width: 80%;\n  height: 600px;\n  border: 15px solid #f1487c;\n  outline: 40px solid white; }\n\n.carousel {\n  position: absolute;\n  z-index: 99;\n  width: 100%; }\n\n#inner {\n  top: 300px; }\n\n#custom-homepage {\n  height: 500px; }\n\n#cardboard-section {\n  z-index: 120;\n  position: relative;\n  border-bottom: 1px solid #CCC; }\n\n.title {\n  font-family: 'Oswald', sans-serif;\n  font-weight: 600;\n  font-size: 42px;\n  text-align: center;\n  padding-top: 10px;\n  width: 100%;\n  margin-bottom: 20px; }\n  .title.small {\n    font-size: 20px; }\n\n.svg-icon {\n  display: -webkit-inline-box;\n  display: -ms-inline-flexbox;\n  display: inline-flex;\n  -ms-flex-item-align: center;\n  align-self: center;\n  position: relative;\n  height: 1em;\n  width: 1em; }\n\n.svg-icon img.svg {\n  height: 1em;\n  width: 1em; }\n\n.svg-icon.svg-baseline img.svg {\n  bottom: -0.05em;\n  position: absolute; }\n\n.card-board {\n  min-height: 200px;\n  padding: 10px; }\n\n#video {\n  height: auto;\n  background-color: white; }\n\n.side-container {\n  margin-top: 20px;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  -webkit-box-pack: start;\n  -ms-flex-pack: start;\n  justify-content: flex-start;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  padding: 10px; }\n  .side-container.dark {\n    border: 1px solid #eee;\n    background-color: #f9f9f9; }\n  .side-container.light {\n    border: 1px solid #eee;\n    background-color: white; }\n\n.divider {\n  display: block;\n  height: 1px;\n  width: 60%;\n  margin: auto;\n  border-bottom: 1px solid #eee;\n  margin-bottom: 10px;\n  margin-top: 10px; }\n\n.vid-wrapper {\n  position: relative;\n  width: 100%; }\n  .vid-wrapper img {\n    width: 100%;\n    height: 200px;\n    position: absolute;\n    -o-object-fit: cover;\n    object-fit: cover;\n    -o-object-position: center;\n    object-position: center;\n    z-index: 200; }\n  .vid-wrapper .overlay {\n    position: relative;\n    width: 100%;\n    height: 200px;\n    z-index: 201;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: vertical;\n    -webkit-box-direction: normal;\n    -ms-flex-direction: column;\n    flex-direction: column;\n    -webkit-box-pack: center;\n    -ms-flex-pack: center;\n    justify-content: center;\n    -webkit-box-align: center;\n    -ms-flex-align: center;\n    align-items: center;\n    background-color: rgba(0, 0, 0, 0.2); }\n  .vid-wrapper .overlay:hover .play {\n    -webkit-transform: scale(1.2);\n    transform: scale(1.2); }\n  .vid-wrapper .play {\n    width: 35px;\n    height: 35px;\n    -webkit-transition: all .1s ease-in-out;\n    transition: all .1s ease-in-out; }\n    .vid-wrapper .play:hover {\n      -webkit-transform: scale(1.2);\n      transform: scale(1.2); }\n\n#popular .title {\n  font-size: 1.5em; }\n\n#popular ul {\n  font-family: 'Roboto';\n  font-size: 1em;\n  width: 100%;\n  -webkit-padding-start: 0px;\n  list-style: none; }\n  #popular ul li {\n    padding: 5px;\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: horizontal;\n    -webkit-box-direction: normal;\n    -ms-flex-direction: row;\n    flex-direction: row;\n    -webkit-box-pack: start;\n    -ms-flex-pack: start;\n    justify-content: flex-start;\n    -webkit-box-align: center;\n    -ms-flex-align: center;\n    align-items: center; }\n    #popular ul li .num {\n      padding: 15px;\n      font-size: 1.4em;\n      color: #f1487c; }\n    #popular ul li a {\n      color: inherit; }\n\n.white {\n  padding-top: 10px;\n  background-color: white; }\n\n.flex-row-center {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: row;\n  flex-direction: row;\n  -webkit-box-pack: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center; }\n\n.ig-left-section,\n.ig-right-section {\n  display: block;\n  width: 320px;\n  text-align: center;\n  background-color: white;\n  padding: 10px; }\n  .ig-left-section iframe,\n  .ig-right-section iframe {\n    border: 0;\n    width: 300px;\n    height: 300px;\n    margin: 0;\n    padding: 0; }\n\n#collection-review-section {\n  margin-top: 40px;\n  background-color: white;\n  border-bottom: 1px solid #CCC;\n  padding: 20px 5%; }\n\n.view-more {\n  text-align: right;\n  cursor: pointer;\n  font-weight: 700; }\n  .view-more:hover {\n    color: #f1487c; }\n\n@media only screen and (min-width: 992px) {\n  .review-padding {\n    padding: 40px; } }\n\n@media only screen and (max-width: 992px) {\n  .review-padding {\n    padding: 20px; } }\n\n.ig-image-container masonry {\n  margin: 0px auto; }\n\n.ig-image-container img {\n  width: 100px;\n  height: 100px;\n  -o-object-fit: contain;\n  object-fit: contain;\n  margin: 10px;\n  -webkit-transition: all 0.1s ease-in-out;\n  transition: all 0.1s ease-in-out; }\n\n.ig-image-container img:hover {\n  -webkit-transform: scale(1.1);\n  transform: scale(1.1); }\n\n#ig-section {\n  border-bottom: 1px solid #CCC;\n  border-top: 1px solid #CCC;\n  background-image: url();\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat; }\n"

/***/ },
/* 567 */
/***/ function(module, exports) {

	module.exports = ".mycard {\n  width: auto;\n  height: auto;\n  margin-bottom: 20px; }\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-family: 'Roboto', sans-serif;\n  margin: 0px;\n  line-height: 1.2;\n  font-weight: 700;\n  text-decoration: none; }\n\na {\n  text-decoration: none;\n  color: inherit;\n  text-align: center; }\n\n.inline {\n  display: inline; }\n\n.card-main-img {\n  -o-object-fit: cover;\n  object-fit: cover;\n  -o-object-position: center;\n  object-position: center;\n  -webkit-transition: all .1s ease-in-out;\n  transition: all .1s ease-in-out;\n  width: 100%;\n  cursor: pointer; }\n\n.rainbow-animate-text {\n  display: inline !important;\n  background-size: 200% 100%;\n  background-image: -webkit-linear-gradient(right, #e7adff 0%, #bad7ff 8%, #b2ffe6 16%, #edffb2 24%, #ffe6b2 32%, #ffd6e2 40%, #ffdbdb 50%, rgba(1, 1, 1, 0) 50%, rgba(1, 1, 1, 0) 100%);\n  background-image: linear-gradient(to left, #e7adff 0%, #bad7ff 8%, #b2ffe6 16%, #edffb2 24%, #ffe6b2 32%, #ffd6e2 40%, #ffdbdb 50%, rgba(1, 1, 1, 0) 50%, rgba(1, 1, 1, 0) 100%);\n  -webkit-transition: background-position 0.3s;\n  transition: background-position 0.3s;\n  color: #333333; }\n  .rainbow-animate-text.hover {\n    background-position: -100% 0; }\n\n#board-card h1,\n#related-card h1 {\n  font-size: 1.70em; }\n\n#board-card h2,\n#related-card h2 {\n  font-size: 1.00em; }\n\n#board-card .card-main-img,\n#related-card .card-main-img {\n  margin-bottom: 15px; }\n  #board-card .card-main-img.hover,\n  #related-card .card-main-img.hover {\n    -webkit-transform: scale(1.05);\n    transform: scale(1.05); }\n\n#horizon-card h1 {\n  font-size: 1.2em; }\n\n#horizon-card h2 {\n  font-size: 0.4em; }\n\n#horizon-card .right-block {\n  cursor: pointer; }\n\n#horizon-card .center {\n  position: relative;\n  width: 100px;\n  height: 100px;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  -webkit-box-pack: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center; }\n\n#horizon-card .card-main-img {\n  margin-right: 10px; }\n  #horizon-card .card-main-img.hover {\n    -webkit-transform: scale(1.05);\n    transform: scale(1.05); }\n\n#highlight-card h1 {\n  font-family: 'PT Serif', sans-serif;\n  font-weight: 700;\n  font-style: italic;\n  font-size: 33px;\n  text-align: center;\n  margin-bottom: 10px; }\n  #highlight-card h1.hover {\n    text-decoration: underline; }\n\n#highlight-card h2 {\n  font-size: 0.6em; }\n\n#highlight-card td {\n  height: 100%; }\n\n#highlight-card td.right-column {\n  background-color: #f9f9f9;\n  padding: 10px 7.5%; }\n\n#highlight-card .link-group {\n  text-align: center;\n  cursor: pointer; }\n\n#highlight-card span.date {\n  color: #afafaf;\n  margin-bottom: 5px; }\n\n.card-category {\n  color: lightgrey;\n  font-weight: 600; }\n\n.card-desc {\n  color: black; }\n\n.more {\n  color: gray;\n  font-weight: bold; }\n  .more.hover {\n    color: hotpink; }\n"

/***/ },
/* 568 */
/***/ function(module, exports) {

	module.exports = ".center {\n  position: relative;\n  width: 100%;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  -webkit-box-pack: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center; }\n\n.mycard {\n  position: relative;\n  width: 100%;\n  cursor: pointer;\n  -webkit-transition: all .1s ease-in-out;\n  transition: all .1s ease-in-out; }\n  .mycard.hover {\n    -webkit-transform: scale(1.05);\n    transform: scale(1.05); }\n\nimg {\n  width: 100%;\n  position: absolute;\n  z-index: 10;\n  -o-object-fit: cover;\n  object-fit: cover;\n  -webkit-transition: all .1s ease-in-out;\n  transition: all .1s ease-in-out; }\n  img.hover {\n    -webkit-transform: scale(1.05);\n    transform: scale(1.05); }\n\n.card-overlay {\n  position: relative;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  -webkit-box-pack: end;\n  -ms-flex-pack: end;\n  justify-content: flex-end;\n  background-image: -webkit-linear-gradient(transparent 60%, rgba(0, 0, 0, 0.9) 100%);\n  background-image: linear-gradient(transparent 60%, rgba(0, 0, 0, 0.9) 100%);\n  z-index: 99;\n  width: 100%;\n  margin-bottom: 20px;\n  -webkit-transition: all .1s ease-in-out;\n  transition: all .1s ease-in-out; }\n  .card-overlay.hover {\n    -webkit-transform: scale(1.05);\n    transform: scale(1.05); }\n  .card-overlay .card-brand {\n    display: block;\n    text-align: center;\n    font-weight: 700;\n    text-decoration: none;\n    -webkit-transition: all .1s ease-in-out;\n    transition: all .1s ease-in-out;\n    color: white;\n    z-index: 101;\n    margin-bottom: 5px; }\n  .card-overlay .card-season {\n    display: block;\n    text-align: center;\n    color: lightgrey;\n    z-index: 101;\n    margin-bottom: 10px; }\n  .card-overlay .card-date {\n    position: absolute;\n    top: 0px;\n    left: 0px;\n    height: 50px;\n    width: 50px;\n    border: 1px solid #CCC;\n    background-color: white;\n    color: black;\n    text-align: center;\n    vertical-align: center;\n    padding: 5px; }\n    .card-overlay .card-date .day {\n      display: block;\n      font-size: 1.2em; }\n    .card-overlay .card-date .month {\n      display: block;\n      font-size: 0.7em; }\n\n.more {\n  color: gray;\n  font-weight: bold; }\n  .more.hover {\n    color: hotpink; }\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-family: 'Roboto', sans-serif;\n  margin: 0px;\n  line-height: 1.2; }\n\nh1.card-title {\n  font-size: 1.5em;\n  font-weight: 700;\n  display: inline !important;\n  background-size: 200% 100%;\n  background-image: -webkit-linear-gradient(right, #e7adff 0%, #bad7ff 8%, #b2ffe6 16%, #edffb2 24%, #ffe6b2 32%, #ffd6e2 40%, #ffffff 49%, rgba(1, 1, 1, 0) 50%, rgba(1, 1, 1, 0) 100%);\n  background-image: linear-gradient(to left, #e7adff 0%, #bad7ff 8%, #b2ffe6 16%, #edffb2 24%, #ffe6b2 32%, #ffd6e2 40%, #ffffff 49%, rgba(1, 1, 1, 0) 50%, rgba(1, 1, 1, 0) 100%);\n  -webkit-transition: background-position 0.3s;\n  transition: background-position 0.3s;\n  color: #333333; }\n  h1.card-title.hover {\n    background-position: -100% 0; }\n\n.card-category {\n  color: lightgrey;\n  font-weight: 600; }\n\n.squarebox {\n  margin-top: 5px;\n  background-color: #ff69b3;\n  padding: 5px;\n  font-family: 'Roboto', sans-serif;\n  font-weight: 700;\n  text-align: center;\n  color: white;\n  text-shadow: #7a7a7a 2px 2px 0px;\n  -webkit-transition: all .1s ease-in-out;\n  transition: all .1s ease-in-out; }\n  .squarebox:hover {\n    background-color: #f1487c; }\n"

/***/ },
/* 569 */
/***/ function(module, exports) {

	module.exports = ".arrow_box {\n  position: relative;\n  background: #ffffff; }\n\n.arrow_box:after,\n.arrow_box:before {\n  top: 100%;\n  left: 50%;\n  border: solid transparent;\n  content: \" \";\n  height: 0;\n  width: 0;\n  position: absolute;\n  pointer-events: none; }\n\n.arrow_box:after {\n  border-color: rgba(255, 255, 255, 0);\n  border-top-color: #ffffff;\n  border-width: 15px;\n  margin-left: -15px; }\n\n.arrow_box:before {\n  border-color: rgba(204, 204, 204, 0);\n  border-top-color: #CCC;\n  border-width: 16px;\n  margin-left: -16px; }\n\n.nav2 {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: row;\n  flex-direction: row;\n  -webkit-box-pack: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  background-color: white;\n  border-bottom: 1px solid #CCC; }\n  .nav2 div {\n    display: block;\n    padding: 15px;\n    cursor: pointer; }\n  .nav2 a {\n    text-decoration: none;\n    color: inherit; }\n  .nav2 .item:hover {\n    color: #f1487c; }\n\n.main-body {\n  min-height: 600px; }\n\n.image-header {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: row;\n  flex-direction: row;\n  -webkit-box-pack: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  width: 100%; }\n  .image-header ul.title-container {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: horizontal;\n    -webkit-box-direction: normal;\n    -ms-flex-direction: row;\n    flex-direction: row;\n    -webkit-box-pack: start;\n    -ms-flex-pack: start;\n    justify-content: flex-start;\n    -webkit-box-align: center;\n    -ms-flex-align: center;\n    align-items: center;\n    width: 100%;\n    margin-bottom: 0px !important;\n    -webkit-padding-start: 20px !important; }\n    .image-header ul.title-container li {\n      font-family: 'Open Sans', sans-serif;\n      list-style: none;\n      font-size: 0.8em;\n      font-weight: bold;\n      color: #f1487c;\n      padding: 5px; }\n    .image-header ul.title-container span.slash-divider {\n      width: 1px;\n      height: 35px;\n      border-right: 1px solid #CCC;\n      -webkit-transform: rotate(35deg);\n      transform: rotate(35deg);\n      margin-top: 3px;\n      margin-bottom: 3px;\n      margin-left: 15px;\n      margin-right: 15px; }\n"

/***/ },
/* 570 */
/***/ function(module, exports) {

	module.exports = ".image-header {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: row;\n  flex-direction: row;\n  -webkit-box-pack: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  width: 100%;\n  font-family: 'Open Sans', sans-serif; }\n  .image-header .title-container {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: horizontal;\n    -webkit-box-direction: normal;\n    -ms-flex-direction: row;\n    flex-direction: row;\n    -webkit-box-pack: center;\n    -ms-flex-pack: center;\n    justify-content: center;\n    -webkit-box-align: center;\n    -ms-flex-align: center;\n    align-items: center;\n    background-color: white;\n    width: 100%; }\n    .image-header .title-container span {\n      font-size: 1em;\n      font-weight: bold;\n      margin: 5px;\n      color: #f1487c; }\n    .image-header .title-container span.slash-divider {\n      width: 1px;\n      height: 40px;\n      border-right: 1px solid #CCC;\n      -webkit-transform: rotate(35deg);\n      transform: rotate(35deg);\n      margin-top: 3px;\n      margin-bottom: 3px;\n      margin-left: 15px;\n      margin-right: 15px; }\n\n.image-container {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: row;\n  flex-direction: row;\n  -webkit-box-pack: start;\n  -ms-flex-pack: start;\n  justify-content: flex-start;\n  -webkit-box-align: start;\n  -ms-flex-align: start;\n  align-items: flex-start;\n  -ms-flex-line-pack: start;\n  align-content: flex-start;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  padding-top: 10px;\n  /*border: 1px dashed #CCC;*/ }\n\n.img-box {\n  position: relative;\n  width: 16.46vw;\n  height: 16.46vw;\n  margin: 0.1vw;\n  background-color: #CCC; }\n  .img-box:hover .img .desc {\n    visibility: visible;\n    background-color: rgba(0, 0, 0, 0.2); }\n  .img-box .img {\n    position: relative;\n    z-index: 99;\n    width: 16.46vw;\n    height: 16.46vw;\n    background-size: cover;\n    background-repeat: no-repeat;\n    background-position: center; }\n    .img-box .img .desc {\n      font-family: 'Open Sans', sans-serif;\n      position: absolute;\n      display: -webkit-box;\n      display: -ms-flexbox;\n      display: flex;\n      -webkit-box-orient: horizontal;\n      -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n      flex-direction: row;\n      -webkit-box-pack: center;\n      -ms-flex-pack: center;\n      justify-content: center;\n      -webkit-box-align: center;\n      -ms-flex-align: center;\n      align-items: center;\n      height: 16.46vw;\n      width: 16.46vw;\n      z-index: 100;\n      font-size: 1em;\n      visibility: hidden;\n      color: white;\n      font-weight: bold;\n      text-align: center;\n      cursor: pointer;\n      -webkit-transition: all .1s ease-in-out;\n      transition: all .1s ease-in-out; }\n"

/***/ },
/* 571 */
/***/ function(module, exports) {

	module.exports = ".tab-group {\n  position: relative;\n  background-color: white;\n  border-bottom: 1px solid lightgrey;\n  z-index: 1500; }\n  .tab-group .tab {\n    background-color: white;\n    text-align: center; }\n    .tab-group .tab a {\n      text-decoration: none;\n      color: inherit; }\n    .tab-group .tab .tab-label {\n      position: relative;\n      padding-top: 15px;\n      padding-bottom: 15px;\n      font-family: 'Open Sans', sans-serif;\n      font-weight: 600;\n      font-size: 0.9em;\n      text-decoration: none;\n      cursor: pointer;\n      z-index: 1500; }\n      .tab-group .tab .tab-label.hover {\n        opacity: 1;\n        color: deeppink; }\n      .tab-group .tab .tab-label:before {\n        content: \"\";\n        position: absolute;\n        width: 100%;\n        height: 2px;\n        bottom: 0;\n        left: 0;\n        background-color: deeppink;\n        visibility: hidden;\n        -webkit-transform: scaleX(0);\n        transform: scaleX(0);\n        -webkit-transition: all 0.3s ease-in-out 0s;\n        transition: all 0.3s ease-in-out 0s; }\n      .tab-group .tab .tab-label.hover:before {\n        visibility: visible;\n        -webkit-transform: scaleX(1);\n        transform: scaleX(1); }\n\n.tab-content {\n  position: absolute;\n  top: 128px;\n  visibility: hidden;\n  background-color: white;\n  width: 100%;\n  z-index: 1400; }\n  .tab-content.active {\n    visibility: visible; }\n  .tab-content.pullDown {\n    -webkit-animation-name: pullDown;\n    animation-name: pullDown;\n    -webkit-animation-duration: 0.5s;\n    animation-duration: 0.5s;\n    -webkit-animation-timing-function: ease-in-out;\n    animation-timing-function: ease-in-out;\n    -webkit-transform-origin: 50% 0%;\n    transform-origin: 50% 0%; }\n\n@-webkit-keyframes pullDown {\n  0% {\n    top: -203px;\n    opacity: 0; }\n  1% {\n    opacity: 0.1;\n    top: -200px; }\n  100% {\n    opacity: 1;\n    top: 128px; } }\n\n@keyframes pullDown {\n  0% {\n    top: -203px;\n    opacity: 0; }\n  1% {\n    opacity: 0.1;\n    top: -200px; }\n  100% {\n    opacity: 1;\n    top: 128px; } }\n  .tab-content .tab-link {\n    padding: 8px;\n    margin-right: 15px; }\n    .tab-content .tab-link li {\n      list-style: none; }\n      .tab-content .tab-link li a {\n        font-size: 1em;\n        font-weight: 800;\n        text-decoration: none;\n        -webkit-transition: background-position 0.5s;\n        transition: background-position 0.5s;\n        color: #333333; }\n        .tab-content .tab-link li a:hover {\n          color: hotpink; }\n  .tab-content #birls .item-box {\n    padding-right: 35px;\n    padding-left: 35px; }\n  @media only screen and (min-width: 992px) {\n    .tab-content #birls {\n      padding-left: 15%;\n      padding-right: 15%; } }\n  @media only screen and (max-width: 992px) {\n    .tab-content #birls {\n      padding: 20px; } }\n  .tab-content .group-title {\n    padding-top: 10px;\n    padding-bottom: 10px; }\n  .tab-content .item-box {\n    cursor: pointer;\n    -webkit-transition: opacity 0.2s ease-in-out;\n    transition: opacity 0.2s ease-in-out; }\n  .tab-content .fade {\n    opacity: 0.6; }\n  .tab-content img {\n    width: 100%;\n    height: 170px;\n    -o-object-fit: cover;\n    object-fit: cover;\n    -o-object-position: center;\n    object-position: center; }\n  .tab-content .item-desc {\n    font-family: 'Open Sans', sans-serif;\n    color: #555555;\n    font-size: 0.9em;\n    text-align: center;\n    padding: 10px 10px 10px 0px; }\n    .tab-content .item-desc.active {\n      color: #f1487c; }\n\n@-webkit-keyframes fadeInFromNone {\n  0% {\n    display: none;\n    opacity: 0; }\n  1% {\n    display: block;\n    opacity: 0; }\n  100% {\n    display: block;\n    opacity: 1; } }\n\n@keyframes fadeInFromNone {\n  0% {\n    display: none;\n    opacity: 0; }\n  1% {\n    display: block;\n    opacity: 0; }\n  100% {\n    display: block;\n    opacity: 1; } }\n\n.backdrop {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background-color: rgba(0, 0, 0, 0.7);\n  z-index: 990; }\n  .backdrop.fadeIn {\n    -webkit-animation: fadeInFromNone 0.5s ease-out;\n    animation: fadeInFromNone 0.5s ease-out; }\n"

/***/ },
/* 572 */
/***/ function(module, exports) {

	module.exports = "<main>\n    <div scrollSpy class=\"container-fluid\">\n        <div class=\"row\">\n            <div id=\"top-section\" class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n                <img id=\"top-logo\" src=\"./../../resources/svg/birls.svg\" alt=\"\" [routerLink]=\"['']\">\n            </div>\n        </div>\n    </div>\n    <div>\n    </div>\n    <!--<div data-spy=\"affix\" data-offset-top=\"150\" class=\"menu-replacer\"></div>\n    <nav-bar data-spy=\"affix\" data-offset-top=\"150\" data-offset-bottom=\"200\"></nav-bar>-->\n    <div data-offset-top=\"150\" class=\"menu-replacer\"></div>\n    <nav-bar data-offset-top=\"150\" data-offset-bottom=\"200\"></nav-bar>\n    <router-outlet></router-outlet>\n</main>\n<footer class=\"container-fluid\">\n    <div id=\"links-section\" class=\"row\">\n        <!--<div class=\"col-lg-4 footer-column center\">\n            <a href=\"\">{{ \"POPULAR TAGS\" | uppercase}}</a>\n          \n            <div class=\"tag-container\">\n                <div class=\"tag-box\" *ngFor=\"let tag of tags\">\n                    {{tag}}\n                </div>\n            </div>\n        </div>-->\n        <div class=\"col-lg-12 footer-row center\">\n            <ul>\n                <li><a href=\"\">{{ \"About Us\" | uppercase}}</a></li>\n                <li><a href=\"\">{{ \"Contacts\" | uppercase}}</a></li>\n                <li><a href=\"\">{{ \"Shop\" | uppercase}}</a></li>\n            </ul>\n        </div>\n \n    </div>\n    <div id=\"follow-section\" class=\"row\">\n        <div class=\"col-lg-12 footer-column\">\n            <p class=\"share\">FOLLOW US</p>\n            <div class=\"social-bar\">\n                <i class=\"fa fa-facebook\" ceiboShare [facebook]=\"{u: fbUrl}\" aria-hidden=\"true\"></i>\n                <i class=\"fa fa-twitter\" ceiboShare [facebook]=\"{url: twUrl}\" aria-hidden=\"true\"></i>\n                <i class=\"fa fa-youtube-play\" aria-hidden=\"true\"></i>\n            </div>\n        </div>\n    </div>\n</footer>"

/***/ },
/* 573 */
/***/ function(module, exports) {

	module.exports = "<!--fashion menu-->\n<div *ngIf=\"loaded \">\n    <!--cover image for category-->\n    <div *ngIf=\"image?true:false\" class=\"cover noise\" ng2-parallax>\n        <img [src]=\"image?image.url : ''\" (load)=\"loadingImg=false\" alt=\"\">\n        <h1>{{capitalizeFirstLetter(queryTitle)}}</h1>\n        <h6>{{description}}</h6>\n    </div>\n    <!--all fashion-->\n    <div id=\"all-fashion\" *ngIf=\"router.url==='/fashion/all'\" class=\"container-fluid\">\n        <div class=\"row visible-lg-block\" style=\"border-bottom: 5px solid black;margin-bottom:10px;\">\n            <div class=\"col-md-10 card-centered\">\n                <div class=\"title\">\n                    FASHION\n                </div>\n                <masonry [useImagesLoaded]=\"true\" [options]=\"{transitionDuration: '0.8s',gutter:30}\">\n                    <masonry-brick class=\"mood-brick\" *ngFor=\"let mood of fashion_moods;let i=index\">\n                        <div class=\"img-box\">\n                            <img [src]=\"mood.img\" alt=\"\">\n                            <div class=\"caption\">\n                                <h3>{{mood.caption}}!</h3>\n                            </div>\n                        </div>\n                    </masonry-brick>\n\n                </masonry>\n            </div>\n        </div>\n\n        <div class=\"custom-category1\" style=\"text-align: center;\"><a [routerLink]=\"['/fashion','shopping']\">SHOPPING</a> / <a [routerLink]=\"['/fashion','trends']\">TRENDS</a> /\n            <a\n                [routerLink]=\"['/fashion','style-du-jours']\">HOW TO</a> / <a [routerLink]=\"['/fashion','editorial']\">EDITORIAL</a> </div>\n    </div>\n    <!--all beauty-->\n    <div id=\"all-beauty\" *ngIf=\"router.url==='/beauty/all'\" class=\"container-fluid\">\n        <div class=\"row\">\n            <div class=\"col-md-10 card-centered\">\n                <table style=\"width:100%\">\n                    <tr>\n                        <td class=\"title\">BEAUTY</td>\n                        <td class=\"custom-category2\"><a [routerLink]=\"['/beauty','make-up']\">MAKEUP</a> / <a [routerLink]=\"['/beauty','skin-care']\">SKINCARE</a>                            / <a [routerLink]=\"['/beauty','hair-and-nail']\">HAIR & NAIL</a> / <a [routerLink]=\"['/beauty','beauty-tips']\">BEAUTY TIPS</a>                            </td>\n                    </tr>\n                </table>\n                <!-- <div class=\"row card-centered\">\n                    <div class=\"col-md-10\">\n                        <masonry [useImagesLoaded]=\"true\" [options]=\"{ transitionDuration: '0.8s',gutter:30}\">\n                            <masonry-brick class=\"mood-brick\" *ngFor=\"let mood of fashion_moods;let i=index\">\n                                <div class=\"img-box\">\n                                    <img [src]=\"mood.img\" alt=\"\">\n                                    <div class=\"caption\">\n                                        <h3>{{mood.caption}}!</h3>\n                                    </div>\n                                </div>\n                            </masonry-brick>\n\n                        </masonry>\n\n\n                    </div>\n\n                </div>-->\n            </div>\n\n        </div>\n    </div>\n\n    <!--all birls-->\n    <div id=\"all-birls\" *ngIf=\"router.url==='/birls/all'\" class=\"container-fluid\">\n        <div class=\"row\">\n            <div class=\"col-md-10 card-centered title\">\n                <h1>BIRLS</h1>\n            </div>\n            <!--<div class=\"col-md-12\">\n                <div class=\"row\">\n                    <div class=\"col-md-10 card-centered\">\n                        <masonry [useImagesLoaded]=\"true\" [options]=\"{ columnWidth: 100,transitionDuration: '0.8s',gutter:20}\">\n                            <masonry-brick class=\"mood-brick\" *ngFor=\"let mood of fashion_moods;let i=index\">\n                                <div class=\"img-box\">\n                                    <img [ngStyle]=\"{'width':mood.maxWidth+'px','height':mood.maxHeight+'px'}\" [src]=\"mood.img\" alt=\"\">\n                                    <div class=\"caption\">\n                                        <h3>{{mood.caption}}!</h3>\n                                    </div>\n                                </div>\n                            </masonry-brick>\n\n                        </masonry>\n\n\n                    </div>\n\n                </div>\n            </div>-->\n\n        </div>\n    </div>\n\n    <!--article card container-->\n    <div id=\"cardboard-section\" class=\"container-fluid\">\n        <div class=\"row white\">\n            <div class=\"col-md-10 card-centered\">\n                <masonry [options]=\"{ transitionDuration: '0.8s',gutter:20 }\">\n                    <masonry-brick class=\"brick\" *ngFor=\"let document of documents.slice(0,card_per_page)\">\n                        <card [document]=\"document\" [styleNumber]=\"1\" [randomHeight]=\"true\" [limit]=\"100\"></card>\n                    </masonry-brick>\n\n                </masonry>\n            </div>\n            <!--<template ngFor let-document [ngForOf]=\"documents\" let-i=\"index\"> \n            <div class=\"col-sm-12 col-md-6 col-lg-4 flex-row-center card-wrapper\">\n                <card *ngIf=\"i < card_per_page\" [document]=\"document\" [styleNumber]=\"1\" [randomHeight]=\"true\" [limit]=\"100\"></card>\n                \n            </div>\n            <div class=\"clearfix visible-xs-block\"></div>\n            </template>-->\n        </div>\n        <div class=\"row\">\n            <div class=\"col-lg-12 torn\">\n                <div class=\"more\" (click)=\"more()\">More..</div>\n            </div>\n        </div>\n\n    </div>\n    <!--popular tags -->\n    <div id=\"popular-tags\" *ngIf=\"category==='all' && tags\" class=\"container-fluid\">\n        <div class=\"row\">\n            <div class=\"col-lg-8 card-centered\">\n                <div class=\"title\">{{ \"what's hot now\"}}</div>\n                <div class=\"tag-container\">\n                    <div class=\"tag-box\" *ngFor=\"let tag of tags\" [routerLink]=\"['/tags/' + tag]\">\n                        {{'#'+tag}}\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<!--loading-->\n<div class=\"loading && loadingImg\" *ngIf=\"!loaded\">\n    <!--preloader-->\n    <div id=\"pre-bootstrap-container\">\n        <div id=\"pre-bootstrap\">\n            <div class=\"logo\"></div>\n            <div class=\"loader\"></div>\n        </div>\n    </div>\n</div>"

/***/ },
/* 574 */
/***/ function(module, exports) {

	module.exports = "<!-- runway menu -->\n<div *ngIf=\"loaded \">\n    <div id=\"cover-wrapper\" *ngIf=\"imageUrl!==''\" ng2-parallax>\n        <img id=\"cover-image\" [src]=\"imageUrl\" alt=\"\">\n        <div class=\"cover\">\n            <div class=\"row justify-content-center\">\n                <div class=\"col-sm-12 center\">\n                    <h1 class=\"shadow2\">Fashion Runway</h1>\n                </div>\n            </div>\n            <div class=\"row justify-content-center select-container\">\n                <span class=\"col-sm-3 col-md-2 col-lg-2 shadow1\" id=\"search-label\">I'm looking for.. </span>\n                <div class=\"col-sm-4 col-md-3 col-lg-3\">\n                    <div class=\"form-group\">\n                        <select class=\"form-control\" (change)=\"callSeason(selectedSeason.value)\" name=\"\" #selectedSeason [disabled]=\"!loadedSelect\">\n                <option value=\"all\" [selected]=\"selected.season === 'all'\">All season</option>\n                 <option *ngFor=\"let season of seasons\" [value]=\"season.id ? season.id : ''\" [selected]=\"selected.season === season.id\">\n                     {{season.getText('season.name') ? season.getText('season.name') : ''}}\n                     </option>\n            </select>\n                    </div>\n                </div>\n                <div class=\"col-sm-4 col-md-3 col-lg-3\">\n                    <div class=\"form-group\">\n                        <select class=\"form-control\" (change)=\"callBrand(selectedBrand.value)\" name=\"\" #selectedBrand [disabled]=\"!loadedSelect\">\n                    <option value=\"all\" [selected]=\"selected.brand === 'all'\">All brand</option>\n                 <option *ngFor=\"let brand of brands\" [value]=\"brand.id ? brand.id : ''\" [selected]=\"selected.brand === brand.id\">\n                     {{brand.getText('brand.name') ? capitalizeFirstLetter(brand.getText('brand.name')) : ''}}\n                 </option>\n            </select>\n                    </div>\n                </div>\n                <!--<button type=\"submit\" class=\"btn btn-default\" (click)=\"updateFilter()\">Search</button>-->\n            </div>\n\n\n        </div>\n\n\n    </div>\n    <div class=\"group-title\">\n        <h2>All Collection</h2>\n    </div>\n    <div id=\"collection-section\" class=\"row\">\n        <template ngFor let-document [ngForOf]=\"documents | myfilter : { brand:selected.brand,season:selected.season}\" let-i=\"index\">\n            <div *ngIf=\"i < card_per_page\" class=\"col-sm-12 col-md-2\">\n                <collection-card [showDate]=\"false\" [document]=\"document\" [cardSize]=\"1\" [textSize]=\"1.1\" [styleNumber]=\"1\"></collection-card>\n            </div>\n        </template>\n        <!--<div class=\"torn\"></div>-->\n    </div>\n    <div class=\"more\" (click)=\"more()\">More..</div>\n</div>\n<!--loading-->\n<div class=\"loading\" *ngIf=\"!loaded\">\n    <!--preloader-->\n    <div id=\"pre-bootstrap-container\">\n        <div id=\"pre-bootstrap\">\n            <div class=\"logo\"></div>\n            <div class=\"loader\"></div>\n        </div>\n    </div>\n</div>"

/***/ },
/* 575 */
/***/ function(module, exports) {

	module.exports = "<div *ngIf=\"loaded \">\n\n    <div class=\"group-title\">\n        <h2>Other Collection from {{brand.getText('brand.name')}}</h2>\n    </div>\n\n    <div id=\"collection-section\" class=\"row justify-content-center\">\n        <template ngFor let-document [ngForOf]=\"documents\" let-i=\"index\"> \n            <div class=\"col-md-2\" *ngIf=\"uid !== document.uid\">\n                <collection-card  [showDate]=\"false\" [document]=\"document\" [cardSize]=\"1.1\" [textSize]=\"1.1\" [styleNumber]=\"1\"></collection-card>\n            </div>\n        </template>\n        <!--<div class=\"torn\"></div>-->\n    </div>\n</div>\n\n<!--loading-->\n<div class=\"loading\" *ngIf=\"!loaded\">\n    <!--preloader-->\n    <div id=\"pre-bootstrap-container\">\n\n        <div id=\"pre-bootstrap\">\n            <div class=\"logo\"></div>\n            <div class=\"loader\"></div>\n        </div>\n\n    </div>\n</div>"

/***/ },
/* 576 */
/***/ function(module, exports) {

	module.exports = "<div *ngIf=\"loaded == 5\">\n    <div id=\"slider\">\n        <!--<ngb-carousel>\n            <template ngbSlide *ngFor=\"let image of images\">\n                <a [attr.href]=\"image.getText('url')\">\n                    <img [src]=\"image.getFirstImage()?image.getFirstImage().url:''\" alt=\"{{image.getText('slider.title')}}\">\n                </a>\n                <div class=\"carousel-caption\">\n                    <h3>{{image.getText('title')}}</h3>\n                    <p>{{image.getText('description')}}</p>\n                </div>\n            </template>\n        </ngb-carousel>-->\n\n        <div id=\"carousel\" class=\"carousel slide\" data-ride=\"carousel\">\n            <!-- Indicators -->\n            <ol class=\"carousel-indicators\">\n                <li [ngClass]=\"{'active':i===0}\" *ngFor=\"let image of images;let i = index\" data-target=\"#carousel\" [attr.data-slide-to]=\"i\"></li>\n            </ol>\n\n            <!-- Wrapper for slides -->\n            <div class=\"carousel-inner\" role=\"listbox\">\n                <div class=\"item\" [ngClass]=\"{'active':i==0}\" *ngFor=\"let image of images;let i = index;\">\n                    <img [src]=\"image.getFirstImage()?image.getFirstImage().url:''\" alt=\"{{image.getText('slider.title')}}\">\n                    <div class=\"carousel-caption\">\n                        <h3>{{image.getText('title')}}</h3>\n                        <p>{{image.getText('description')}}</p>\n                    </div>\n                </div>\n\n            </div>\n\n\n            <!-- Controls -->\n            <a class=\"left carousel-control\" href=\"#carousel\" role=\"button\" data-slide=\"prev\">\n                <span class=\"glyphicon glyphicon-chevron-left\" aria-hidden=\"true\"></span>\n                <span class=\"sr-only\">Previous</span>\n            </a>\n            <a class=\"right carousel-control\" href=\"#carousel\" role=\"button\" data-slide=\"next\">\n                <span class=\"glyphicon glyphicon-chevron-right\" aria-hidden=\"true\"></span>\n                <span class=\"sr-only\">Next</span>\n            </a>\n        </div>\n\n\n        <div id=\"slider-frame\" class=\"\">\n\n        </div>\n\n    </div>\n\n    <div class=\"container-fluid\">\n        <div id=\"cardboard-section\" class=\"row\">\n            <div class=\"col-sm-12 col-md-12\">\n                <!--fashion-->\n                <div class=\"row white\">\n                    <div id=\"fashion-section\" class=\"col-sm-12 col-md-10 card-centered\">\n                        <div class=\"row\">\n                            <!--<div class=\"col-sm-12 col-md-12 icon\">\n                                    <img src=\"./../../resources/svg/dress.svg\" alt=\"\">\n                                </div>-->\n                            <div class=\"col-sm-12 col-md-12 title\">\n                                FASHION\n                            </div>\n                        </div>\n                        <div class=\"row\">\n                            <div class=\"col-sm-4 col-md-4 \" *ngFor=\"let document of fashion_docs.slice(1,4);let i = index\">\n                                <card [document]=\"document\" [styleNumber]=\"1\" [imageHeight]=\"200\" [limit]=\"70\"></card>\n                            </div>\n                        </div>\n                        <div class=\"row\">\n                            <div class=\"col-sm-12 col-md-6\">\n                                <div class=\"row\">\n                                    <div class=\"col-sm-12 col-md-12 \" *ngFor=\"let document of fashion_docs.slice(0,1);let i = index\">\n                                        <card [document]=\"document\" [styleNumber]=\"1\" [imageHeight]=\"200\" [limit]=\"70\"></card>\n                                    </div>\n                                </div>\n                            </div>\n                            <div class=\"col-sm-12 col-md-6\">\n                                <div class=\"row\">\n                                    <div class=\"col-sm-12 col-md-12 \" *ngFor=\"let document of fashion_docs.slice(1,4);let i = index\">\n                                        <card [document]=\"document\" [styleNumber]=\"3\" [imageHeight]=\"100\" [limit]=\"70\"></card>\n                                    </div>\n                                </div>\n                            </div>\n\n                        </div>\n                        <!--<div class=\"row\">\n                                <div class=\"col-sm-12 col-md-12 justify-content-center\">\n                                    <span class=\"view-more\" [routerLink]=\"['fashion/all']\">View more fashion articles <i class=\"fa fa-long-arrow-right\" aria-hidden=\"true\"></i></span>\n                                </div>\n                            </div>-->\n                    </div>\n\n                </div>\n                <!--end fashion-->\n                <!--new row-->\n                <div id=\"ig-section\" class=\"row\" style=\"padding:30px;\">\n                    <div class=\"col-sm-12 col-md-12 col-lg-12\">\n                        <div class=\"row\">\n                            <div class=\"col-sm-12 col-md-12 title small\">\n                                <div class=\"svg-icon svg-baseline\">\n                                    <img class=\"svg\" src=\"./../../resources/svg/heart.svg\" alt=\"\">\n                                </div>\n                                KRISTABIRLSLIKEAGIRLS\n                            </div>\n                        </div>\n                        <div class=\"row ig-image-container\">\n\n                            <masonry [useImagesLoaded]=\"true\" [options]=\"{ columnWidth: 100,transitionDuration: '0.8s',gutter:20}\">\n                                <masonry-brick *ngFor=\"let IGimage of IGimages\">\n                                    <img [src]=\"IGimage.images.low_resolution.url\" alt=\"\" (click)=\"goUrl(IGimage.link)\">\n                                </masonry-brick>\n                            </masonry>\n                        </div>\n                    </div>\n                </div>\n                <!--beauty-->\n                <div class=\"row white\">\n                    <div id=\"beauty-section\" class=\"col-sm-12 col-md-10 card-centered\">\n                            <div class=\"title\">\n                                <!--<div class=\"svg-icon svg-baseline\">\n                                    <img class=\"svg\" src=\"./../../resources/svg/perfume.svg\" alt=\"\">\n                                </div>-->\n                                BEAUTY\n                            </div>\n                        <div class=\"row\">\n                            <div class=\"col-sm-12 col-md-10 card-centered \" *ngFor=\"let document of beauty_docs.slice(0,1);let i = index\">\n                                <card [document]=\"document\" [styleNumber]=\"4\" [imageHeight]=\"500\" [limit]=\"200\"></card>\n                            </div>\n                        </div>\n                        <div class=\"row\">\n                            <div class=\"col-sm-3 col-md-3 \" *ngFor=\"let document of makeUpDocs.slice(0,1);let i = index\">\n                                <div class=\"title\">\n                                    MAKE UP\n                                </div>\n                                <card [document]=\"document\" [styleNumber]=\"1\" [imageHeight]=\"200\" [limit]=\"70\"></card>\n                            </div>\n                            <div class=\"col-sm-3 col-md-3 \" *ngFor=\"let document of skinCareDocs.slice(0,1);let i = index\">\n                                <div class=\"title\">\n                                    SKIN CARE\n                                </div>\n                                <card [document]=\"document\" [styleNumber]=\"1\" [imageHeight]=\"200\" [limit]=\"70\"></card>\n                            </div>\n                            <div class=\"col-sm-3 col-md-3 \" *ngFor=\"let document of beautyTipsDocs.slice(0,1);let i = index\">\n                                <div class=\"title\">\n                                    BEAUTY TIPS\n                                </div>\n                                <card [document]=\"document\" [styleNumber]=\"1\" [imageHeight]=\"200\" [limit]=\"70\"></card>\n                            </div>\n                            <div class=\"col-sm-3 col-md-3 \" *ngFor=\"let document of hairAndNailDocs.slice(0,1);let i = index\">\n                                <div class=\"title\">\n                                    HAIR & NAIL\n                                </div>\n                                <card [document]=\"document\" [styleNumber]=\"1\" [imageHeight]=\"200\" [limit]=\"70\"></card>\n                            </div>\n                        </div>\n                        <div class=\"row\">\n                            <div class=\"col-sm-12 col-md-12 flex-row-center\">\n                                <span class=\"view-more\" [routerLink]=\"['beauty/all']\">View more beauty articles <i class=\"fa fa-long-arrow-right\" aria-hidden=\"true\"></i></span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <!--Runway -->\n                <div class=\"row white\">\n                    <div class=\"col-sm-12 col-md-10 card-centered\">\n                        <div class=\"row\">\n                            <div class=\"col-md-12 title\">\n                                <div class=\"svg-icon svg-baseline\">\n                                    <img class=\"svg\" src=\"./../../resources/svg/perfume.svg\" alt=\"\">\n                                </div>\n                                RUNWAY\n                            </div>\n                        </div>\n\n                        <div class=\"row\">\n                            <div class=\"col-sm-12 col-md-3 review-padding\" *ngFor=\"let document of collection_docs.slice(0,3);let i =index\">\n                                <collection-card [showDate]=\"true\" [document]=\"document\" [cardSize]=\"0.7\" [textSize]=\"1.2\" [styleNumber]=\"2\" [limit]=\"135\"></collection-card>\n                            </div>\n                        </div>\n                        <div class=\"row\">\n                            <div class=\"col-sm-12 col-md-12 flex-row-center text-center\">\n                                <span class=\"view-more\" [routerLink]=\"['runway']\">View more collection <i class=\"fa fa-long-arrow-right\" aria-hidden=\"true\"></i></span>\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n                <!--beauty-->\n                <div class=\"row white\">\n                    <div class=\"col-sm-12 col-md-10 card-centered\">\n                        <div class=\"row\">\n                            <div class=\"col-sm-12 col-md-12 title\">\n                                <div class=\"svg-icon svg-baseline\">\n                                    <img class=\"svg\" src=\"./../../resources/svg/pen.svg\" alt=\"\">\n                                </div>\n                                BIRLS ARTICLES\n                            </div>\n                        </div>\n                        <div class=\"row card-board\">\n                            <div class=\"col-sm-12 col-md-12\">\n                                <div class=\"row\">\n                                    <div class=\"col-sm-6 col-md-3 justify-content-center \" *ngFor=\"let document of birls_docs.slice(0,3);let i = index\">\n                                        <card [document]=\"document\" [styleNumber]=\"1\" [imageHeight]=\"200\" [limit]=\"70\"></card>\n                                    </div>\n                                </div>\n                            </div>\n\n\n                        </div>\n                        <div class=\"row\">\n                            <div class=\"col-sm-12 col-md-12 flex-row-center\">\n                                <span class=\"view-more\" [routerLink]=\"['birls/all']\">View more birls articles <i class=\"fa fa-long-arrow-right\" aria-hidden=\"true\"></i></span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <!--<div class=\"col-sm-12 col-md-4 \">\n                    <div id=\"video\" class=\"row justify-content-center\">\n                        <div class=\"col-sm-12 col-md-9\">\n\n                            \n                            <div id=\"popular\" class=\"side-container light\">\n                                <div class=\"title\">\n                                    Most Popular Articles\n                                </div>\n                                <div class=\"small\">\n                                    Subscribe our Youtube channel.\n                                </div>\n                                <div class=\"divider\"></div>\n                                \n                                <ul >\n                                    <li *ngFor=\"let popular of populars;let i=index\" class=\"popular\"><span class=\"num\">{{i+1}}</span><a href=\"\">{{popular}}</a></li>\n                                </ul>\n                            </div>\n                            <div class=\"side-container dark\" >\n                                <div class=\"title\">\n                                    TV\n                                </div>\n                                <div class=\"small\">\n                                    Subscribe our Youtube channel.\n                                </div>\n                                <div class=\"divider\"></div>\n                                \n                                <div class=\"vid-wrapper\">\n                                    <img [src]=\"video.ss\" alt=\"\">\n                                    <div class=\"overlay\" (click)=\"goUrl(video.url)\">\n                                        <img class=\"play\"  (click)=\"goUrl(video.url)\" src=\"./../../resources/svg/play.svg\" alt=\"\">\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                </div>-->\n\n\n\n        </div>\n\n\n    </div>\n\n\n</div>\n<!--loading-->\n<div class=\"loading\" *ngIf=\"loaded < 5\">\n    <!--preloader-->\n    <div id=\"pre-bootstrap-container\">\n        <div id=\"pre-bootstrap\">\n            <div class=\"logo\"></div>\n            <div class=\"loader\"></div>\n        </div>\n    </div>\n</div>"

/***/ },
/* 577 */
/***/ function(module, exports) {

	module.exports = "<template [ngIf]=\"document && styleNumber === 1\">\n    <article id=\"board-card\" class=\"mycard\" [routerLink]=\"[linkResolver(document)]\" [ngStyle]=\"{'width':width+'px'}\" (mouseenter)=\"isHover=true\"\n        (mouseleave)=\"isHover=false\">\n        <img [src]=\"image?image.url:''\" class=\"card-main-img\" [ngClass]=\"{'hover':isHover}\" [ngStyle]=\"{'height':imageHeight+'px'}\">\n        <h1 class=\"rainbow-animate-text\" [ngClass]=\"{'hover':isHover}\">{{title?title.getTitle().text:''}}</h1>\n        <div class=\"card-category\">{{capitalizeFirstLetter(category.getText('category.name'))}}</div>\n        <div class=\"card-desc\">{{desc}} <span class=\"more\" [ngClass]=\"{'hover':isHover}\" *ngIf=\"isMore\">  — read more</span></div>\n    </article>\n</template>\n<template [ngIf]=\"document && styleNumber === 2\">\n    <article id=\"related-card\" class=\"mycard\" [routerLink]=\"[linkResolver(document)]\" (mouseenter)=\"isHover=true\" (mouseleave)=\"isHover=false\">\n\n        <img [src]=\"image?image.url:''\" class=\"card-main-img\" [ngClass]=\"{'hover':isHover}\" [ngStyle]=\"{'height':imageHeight+'px'}\">\n        <h1 class=\"rainbow-animate-text\" [ngClass]=\"{'hover':isHover}\">{{title?title.getTitle().text:''}}</h1>\n        <div class=\"card-category\">{{capitalizeFirstLetter(category.getText('category.name'))}}</div>\n        <div class=\"card-desc\">{{desc}} <span class=\"more\" [ngClass]=\"{'hover':isHover}\" *ngIf=\"isMore\">  — read more</span></div>\n\n    </article>\n</template>\n<template [ngIf]=\"document && styleNumber === 3\">\n    <article id=\"horizon-card\" [routerLink]=\"[linkResolver(document)]\" class=\"mycard\" (mouseenter)=\"isHover=true\" (mouseleave)=\"isHover=false\">\n        <!--image laoder-->\n        <div class=\"center\" *ngIf=\"loadingImage\">\n            <i class=\"fa fa-circle-o-notch fa-spin fa-3x fa-fw\"></i>\n        </div>\n        <!---->\n        <table>\n            <tr>\n                <td>\n                    <img [src]=\"image?image.url:''\" class=\"card-main-img\" [hidden]=\"loadingImage\" (load)=\"loadingImage=false\" [ngClass]=\"{'hover':isHover}\"\n                        [ngStyle]=\"{'height':imageHeight+'px','width':imageHeight+'px'}\">\n                </td>\n                <td>\n                    <div [hidden]=\"loadingImage\" class=\"right-block\">\n                        <h1 class=\"rainbow-animate-text\" [ngClass]=\"{'hover':isHover}\">{{title?title.getTitle().text:''}}</h1>\n                        <div class=\"card-category\">{{capitalizeFirstLetter(category.getText('category.name'))}}</div>\n                        <div class=\"card-desc\">{{desc}} <span class=\"more\" [ngClass]=\"{'hover':isHover}\" *ngIf=\"isMore\">  — read more</span></div>\n                    </div>\n                </td>\n            </tr>\n        </table>\n    </article>\n</template>\n<template [ngIf]=\"document && styleNumber === 4\">\n    <article id=\"highlight-card\" class=\"mycard\" [ngStyle]=\"{'width':width+'px'}\" >\n        <table>\n            <tr>\n                <td width=\"35%\">\n                    <img [src]=\"image?image.url:''\" class=\"card-main-img\" [ngClass]=\"{'hover':isHover}\" [ngStyle]=\"{'height':imageHeight+'px'}\">\n                </td>\n                <td class=\"right-column\" [ngStyle]=\"{'height':imageHeight+'px','background-color':'#'+backgroundColor}\">\n                    <div class=\"link-group\" (mouseenter)=\"isHover=true\" (mouseleave)=\"isHover=false\">\n                        <h1  [routerLink]=\"[linkResolver(document)]\" [ngClass]=\"{'hover':isHover}\">{{title?title.getTitle().text:''}}</h1>\n                        <span class=\"date\">{{date | amDateFormat:'DD MMMM YYYY' | uppercase}} <i class=\"fi flaticon-quill-drawing-a-line\"></i> By {{ author }}</span>\n                        <div class=\"card-desc\">{{desc}} <span class=\"more\" [ngClass]=\"{'hover':isHover}\" *ngIf=\"isMore\">  — read more</span></div>\n                    </div>\n                        \n                    <!--<div class=\"card-category\">{{capitalizeFirstLetter(category.getText('category.name'))}}</div>-->\n                    <!--<div class=\"card-desc\">{{desc}} <span class=\"more\" [ngClass]=\"{'hover':isHover}\" *ngIf=\"isMore\">  — read more</span></div>-->\n                </td>\n            </tr>\n        </table>\n    </article>\n</template>\n<div *ngIf=\"loaded && !document\">\n    <h2>Not found!</h2>\n</div>"

/***/ },
/* 578 */
/***/ function(module, exports) {

	module.exports = "<div *ngIf=\"document && loaded && styleNumber === 1\">\n    <article class=\"mycard\" [routerLink]=\"[linkResolver(document)]\" (mouseenter)=\"isHover=true\" (mouseleave)=\"isHover=false\" [ngClass]=\"{'hover':isHover,'height':card_h+'px'}\">\n        <!--pre-loading icon-->\n        <div class=\"center\" *ngIf=\"loadingImage\" [ngStyle]=\"{'height':card_h+'px'}\">\n            <i class=\"fa fa-circle-o-notch fa-spin fa-3x fa-fw\"></i>\n        </div>\n        <!---->\n        <img [src]=\"imageUrl[0]\" [ngStyle]=\"{'display':loadingImage && imageUrl[0]!==''?'none':'block','height':card_h+'px'}\"\n            (load)=\"loadingImage=false\">\n        <div [hidden]=\"loadingImage\" [ngClass]=\"{'card-overlay':!loadingImage}\" [ngStyle]=\"{'height':card_h+'px'}\">\n            <div *ngIf=\"showDate\" class=\"card-date\">\n                <div class=\"day\">\n                    {{date | amDateFormat:'D'}}\n                </div>\n                <div class=\"month\">\n                    {{date | amDateFormat:'MMM'}}\n                </div>\n            </div>\n            <div *ngIf=\"brand\" class=\"card-brand\" [ngClass]=\"{'hover':isHover}\" [ngStyle]=\"{'font-size':text.brand+'em'}\">{{capitalizeFirstLetter(brand.getText('brand.name'))}}</div>\n            <div *ngIf=\"season\" class=\"card-season\" [ngStyle]=\"{'font-size':text.season+'em'}\">{{capitalizeFirstLetter(season.getText('season.name'))}}</div>\n        </div>\n    </article>\n</div>\n<!--collection review in home-->\n<div *ngIf=\"document && styleNumber === 2\">\n    <article class=\"mycard\" >\n        <!--pre-loading icon-->\n        <div class=\"center\" *ngIf=\"loadingImage\">\n            <i class=\"fa fa-circle-o-notch fa-spin fa-3x fa-fw\"></i>\n        </div>\n        <!---->\n        <img [hidden]=\"loadingImage\" [src]=\"imageUrl[0]\" [ngStyle]=\"{'height':card_h+'px'}\"\n            (load)=\"loadingImage=false\" [routerLink]=\"[linkResolver(document),'review']\" [ngClass]=\"{'hover':isHover}\"  >\n        <div *ngIf=\"!loadingImage\" [routerLink]=\"[linkResolver(document),'review']\"  [ngClass]=\"{'card-overlay':!loadingImage,'hover':isHover}\"  \n        [ngStyle]=\"{'height':card_h+'px'}\" (mouseenter)=\"isHover=true\" (mouseleave)=\"isHover=false\">\n            <div *ngIf=\"showDate\" class=\"card-date\">\n                <div class=\"day\">\n                    {{date | amDateFormat:'D'}}\n                </div>\n                <div class=\"month\">\n                    {{date | amDateFormat:'MMM'}}\n                </div>\n            </div>\n            <div *ngIf=\"brand\" class=\"card-brand\" [ngClass]=\"{'hover':isHover}\" [ngStyle]=\"{'font-size':text.brand+'em'}\">{{capitalizeFirstLetter(brand.getText('brand.name'))}}</div>\n            <div *ngIf=\"season\" class=\"card-season\" [ngStyle]=\"{'font-size':text.season+'em'}\">{{capitalizeFirstLetter(season.getText('season.name'))}}</div>\n        </div>\n        <div [routerLink]=\"[linkResolver(document),'review']\" (mouseenter)=\"isHover=true\" (mouseleave)=\"isHover=false\" >\n            <h1 [ngClass]=\"{'card-title':true,'hover':isHover}\">{{title?title.getTitle().text:''}}</h1>\n            <div class=\"card-category\">Collection Review</div>\n            <div class=\"card-desc\">{{desc}} <span [ngClass]=\"{'more':true,'hover':isHover}\" *ngIf=\"isMore\">  — read review</span></div>\n            \n        </div>\n        <!--<div class=\"squarebox\" [routerLink]=\"[linkResolver(document)]\"><i class=\"fa fa-camera\" aria-hidden=\"true\"></i> View all {{groupImages.length}} collection images</div>-->\n        \n    </article>\n    <!--<article id=\"related-card\" class=\"mycard\" (mouseenter)=\"isHover=true\" (mouseleave)=\"isHover=false\">\n        <a [routerLink]=\"[linkResolver(document)]\">\n            <img [src]=\"image?image.url:''\" [ngClass]=\"{'card-img':true,'hover':isHover}\" [ngStyle]=\"{'height':imageHeight+'px'}\">\n            <h1 [ngClass]=\"{'card-title':true,'hover':isHover}\">{{title?title.getTitle().text:''}}</h1>\n            <div class=\"card-desc\">{{desc}} <span [ngClass]=\"{'more':true,'hover':isHover}\" *ngIf=\"isMore\">  — read more</span></div>\n            <div class=\"image-counter\">{{capitalizeFirstLetter(category.getText('category.name'))}}</div>\n        </a>\n    </article>-->\n</div>\n\n<div *ngIf=\"loaded && !document\">\n    <h2>Not found!</h2>\n</div>"

/***/ },
/* 579 */
/***/ function(module, exports) {

	module.exports = "<!--<div *ngIf=\"document\">\n    <div class=\"document-body\" [innerHtml]=document.asHtml(linkResolver)></div>\n</div>-->\n<div class=\"main-body\">\n    <div class=\"nav2\">\n        <div class=\"item\" [routerLinkActive]=\"['arrow_box']\" [routerLink]=\"['collection']\"><i class=\"fa fa-camera\" aria-hidden=\"true\"></i><span> Collection</span></div>\n        <div class=\"item\" [routerLinkActive]=\"['arrow_box']\" *ngIf=\"enable\" [routerLink]=\"['review']\"><span>Review</span></div>\n        <div class=\"item\" [routerLinkActive]=\"['arrow_box']\" [routerLink]=\"['otherseason']\"><span>Other Season</span></div>\n    </div>\n    <div *ngIf=\"document && loaded\">\n        <div class=\"image-header\">\n            <ul class=\"title-container\">\n                <li>{{season.getText('season.name') | uppercase}}</li><span class=\"slash-divider\"></span>\n                <li>{{brand.getText('brand.name') | uppercase}}</li><span class=\"slash-divider\"></span>\n                <li>{{date | amDateFormat:'D MMM YYYY'}}</li>\n            </ul>\n        </div>\n    </div>\n    <router-outlet></router-outlet>\n</div>\n<div *ngIf=\"loaded && !document\">\n    <h2>Not found!</h2>\n</div>"

/***/ },
/* 580 */
/***/ function(module, exports) {

	module.exports = "<div class=\"image-container\">\n    <div class=\"img-box\" *ngFor=\"let img of images; let i= index\">\n        <div class=\"img\" [ngStyle]=\"{'background-image': 'url('+img.thumb+')'}\" (click)=\"OpenImageModel(img.img,images)\" alt='Image'>\n            <div class=\"desc\" (click)=\"OpenImageModel(img.img,images)\">\n                <i class=\"fi flaticon-interface\"></i>&nbsp;<span class=\"view_img\">VIEW IMAGE</span>\n            </div>\n        </div>\n    </div>\n</div>\n<div *ngIf=\"openModalWindow\">\n    <ImageModal [modalImages]=\"images\" [imagePointer]=\"imagePointer\" (cancelEvent)=\"cancelImageModel()\"></ImageModal>\n</div>"

/***/ },
/* 581 */
/***/ function(module, exports) {

	module.exports = "<div class=\"container-fluid\" (mouseleave)=\"closeAll()\">\n    <div class=\"row tab-group\">\n        <div class=\"tab col-sm-3 col-md-1\" [ngClass]=\"{'col-md-offset-3':i==0}\" *ngFor=\"let tab of tabs;let i=index\" (mouseenter)=\"setActive(i)\">\n            <div [routerLink]=\"tab.link?tab.link:''\" (click)=\"closeAll()\" class=\"tab-label\" [ngClass]=\"{'hover':tab.active}\" [innerHTML]=\"tab.label\">\n            </div>\n        </div>\n    </div>\n    <div class=\"row tab-content\" *ngFor=\"let tab of tabs;let i=index\" [ngClass]=\"{'active':tab.active && (tab.links.length > 0 || tab.groups.length > 0),'pullDown':tab.active}\"\n        (mouseenter)=\"setActive(i)\">\n        <!--<div class=\"tab-link\">\n                <li *ngFor=\"let link of tab.links;\">\n                    <a [routerLink]=\"link.url\" (click)=\"closeAll()\" [innerHTML]=\"link.label\">\n                    </a>\n                </li>\n            </div>-->\n\n        <!--fashion ,group fashion all -->\n        <template ngFor let-group [ngForOf]=\"tab.groups\" let-setNumber=\"index\">\n            \n                <div class=\"col-md-offset-1 col-md-3\" *ngIf=\"group.style == 1\">\n                    <div class=\"row\">\n                        <div class=\"col-md-offset-3 col-md-7 col-lg-offset-6 col-lg-5\">\n                            <div class=\"group-title\">\n                                {{group.title?group.title:''}}\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-md-offset-3 col-md-7 col-lg-offset-6 col-lg-5\" *ngFor=\"let item of group.items;let i = index\">\n                            <div class=\"item-box\" [routerLink]=\"item.url\" (click)=\"closeAll()\" (mouseenter)=\"focus=true;item.active=true\" (mouseleave)=\"focus=false;item.active=false\"\n                                [ngClass]=\"{'fade':focus && !item.active}\">\n                                <img src=\"{{item.img}}\" alt=\"\">\n                                <div class=\"item-desc\" [ngClass]=\"{'active': item.active}\">\n                                    {{item.desc}}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            \n        </template>\n        <!--fashion ,group fashion category -->\n        <template ngFor let-group [ngForOf]=\"tab.groups\" let-setNumber=\"index\">\n            \n                <div class=\"col-md-8\" *ngIf=\"group.style == 2\">\n                    <div class=\"row\">\n                        <div class=\"col-md-2 col-lg-2\">\n                            <div class=\"group-title\">\n                                {{group.title?group.title:''}}\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-md-2 col-lg-2\" *ngFor=\"let item of group.items;let i = index\">\n                            <div class=\"item-box\" [routerLink]=\"item.url\" (click)=\"closeAll()\" (mouseenter)=\"focus=true;item.active=true\" (mouseleave)=\"focus=false;item.active=false\"\n                                [ngClass]=\"{'fade':focus && !item.active}\">\n                                <img src=\"{{item.img}}\" alt=\"\">\n                                <div class=\"item-desc\" [ngClass]=\"{'active': item.active}\">\n                                    {{item.desc}}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            \n        </template>\n        <!--fashion ,group birls -->\n        <template ngFor let-group [ngForOf]=\"tab.groups\">\n            \n                <div id=\"birls\" class=\"col-md-12\" *ngIf=\"group.style == 3\">\n\n                    <div class=\"row\">\n                        <div class=\"col-md-offset-2 col-md-2\">\n                            <div class=\"group-title\">\n                                {{group.title?group.title:''}}\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        \n                        <div class=\"col-md-4\" *ngFor=\"let item of group.items;let i = index\">\n                            <div class=\"item-box\" [routerLink]=\"item.url\" (click)=\"closeAll()\" (mouseenter)=\"focus=true;item.active=true\" (mouseleave)=\"focus=false;item.active=false\"\n                                [ngClass]=\"{'fade':focus && !item.active}\">\n                                <img src=\"{{item.img}}\" alt=\"\">\n                                <div class=\"item-desc\" [ngClass]=\"{'active': item.active}\">\n                                    {{item.desc}}\n                                </div>\n                            </div>\n                        </div>\n                        \n                    </div>\n                </div>\n               \n            \n        </template>\n\n\n    </div>\n</div>\n<div class=\"backdrop fadeIn\" *ngIf=\"backdrop\">\n</div>"

/***/ },
/* 582 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(48)


/***/ },
/* 583 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Buffer = __webpack_require__(53).Buffer;
	/*<replacement>*/
	var bufferShim = __webpack_require__(197);
	/*</replacement>*/
	
	module.exports = BufferList;
	
	function BufferList() {
	  this.head = null;
	  this.tail = null;
	  this.length = 0;
	}
	
	BufferList.prototype.push = function (v) {
	  var entry = { data: v, next: null };
	  if (this.length > 0) this.tail.next = entry;else this.head = entry;
	  this.tail = entry;
	  ++this.length;
	};
	
	BufferList.prototype.unshift = function (v) {
	  var entry = { data: v, next: this.head };
	  if (this.length === 0) this.tail = entry;
	  this.head = entry;
	  ++this.length;
	};
	
	BufferList.prototype.shift = function () {
	  if (this.length === 0) return;
	  var ret = this.head.data;
	  if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
	  --this.length;
	  return ret;
	};
	
	BufferList.prototype.clear = function () {
	  this.head = this.tail = null;
	  this.length = 0;
	};
	
	BufferList.prototype.join = function (s) {
	  if (this.length === 0) return '';
	  var p = this.head;
	  var ret = '' + p.data;
	  while (p = p.next) {
	    ret += s + p.data;
	  }return ret;
	};
	
	BufferList.prototype.concat = function (n) {
	  if (this.length === 0) return bufferShim.alloc(0);
	  if (this.length === 1) return this.head.data;
	  var ret = bufferShim.allocUnsafe(n >>> 0);
	  var p = this.head;
	  var i = 0;
	  while (p) {
	    p.data.copy(ret, i);
	    i += p.data.length;
	    p = p.next;
	  }
	  return ret;
	};

/***/ },
/* 584 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(305)


/***/ },
/* 585 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(223)


/***/ },
/* 586 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(224)


/***/ },
/* 587 */,
/* 588 */,
/* 589 */,
/* 590 */
/***/ function(module, exports) {

	"use strict";
	/**
	 * An execution context and a data structure to order tasks and schedule their
	 * execution. Provides a notion of (potentially virtual) time, through the
	 * `now()` getter method.
	 *
	 * Each unit of work in a Scheduler is called an {@link Action}.
	 *
	 * ```ts
	 * class Scheduler {
	 *   now(): number;
	 *   schedule(work, delay?, state?): Subscription;
	 * }
	 * ```
	 *
	 * @class Scheduler
	 */
	var Scheduler = (function () {
	    function Scheduler(SchedulerAction, now) {
	        if (now === void 0) { now = Scheduler.now; }
	        this.SchedulerAction = SchedulerAction;
	        this.now = now;
	    }
	    /**
	     * Schedules a function, `work`, for execution. May happen at some point in
	     * the future, according to the `delay` parameter, if specified. May be passed
	     * some context object, `state`, which will be passed to the `work` function.
	     *
	     * The given arguments will be processed an stored as an Action object in a
	     * queue of actions.
	     *
	     * @param {function(state: ?T): ?Subscription} work A function representing a
	     * task, or some unit of work to be executed by the Scheduler.
	     * @param {number} [delay] Time to wait before executing the work, where the
	     * time unit is implicit and defined by the Scheduler itself.
	     * @param {T} [state] Some contextual data that the `work` function uses when
	     * called by the Scheduler.
	     * @return {Subscription} A subscription in order to be able to unsubscribe
	     * the scheduled work.
	     */
	    Scheduler.prototype.schedule = function (work, delay, state) {
	        if (delay === void 0) { delay = 0; }
	        return new this.SchedulerAction(this, work).schedule(state, delay);
	    };
	    Scheduler.now = Date.now ? Date.now : function () { return +new Date(); };
	    return Scheduler;
	}());
	exports.Scheduler = Scheduler;
	//# sourceMappingURL=Scheduler.js.map

/***/ },
/* 591 */,
/* 592 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(4);
	var forkJoin_1 = __webpack_require__(608);
	Observable_1.Observable.forkJoin = forkJoin_1.forkJoin;
	//# sourceMappingURL=forkJoin.js.map

/***/ },
/* 593 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(4);
	var fromEvent_1 = __webpack_require__(315);
	Observable_1.Observable.fromEvent = fromEvent_1.fromEvent;
	//# sourceMappingURL=fromEvent.js.map

/***/ },
/* 594 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(4);
	var finally_1 = __webpack_require__(614);
	Observable_1.Observable.prototype.finally = finally_1._finally;
	Observable_1.Observable.prototype._finally = finally_1._finally;
	//# sourceMappingURL=finally.js.map

/***/ },
/* 595 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(4);
	var first_1 = __webpack_require__(321);
	Observable_1.Observable.prototype.first = first_1.first;
	//# sourceMappingURL=first.js.map

/***/ },
/* 596 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(4);
	var let_1 = __webpack_require__(322);
	Observable_1.Observable.prototype.let = let_1.letProto;
	Observable_1.Observable.prototype.letBind = let_1.letProto;
	//# sourceMappingURL=let.js.map

/***/ },
/* 597 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(4);
	var mergeMap_1 = __webpack_require__(229);
	Observable_1.Observable.prototype.mergeMap = mergeMap_1.mergeMap;
	Observable_1.Observable.prototype.flatMap = mergeMap_1.mergeMap;
	//# sourceMappingURL=mergeMap.js.map

/***/ },
/* 598 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(4);
	var sampleTime_1 = __webpack_require__(619);
	Observable_1.Observable.prototype.sampleTime = sampleTime_1.sampleTime;
	//# sourceMappingURL=sampleTime.js.map

/***/ },
/* 599 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(4);
	var startWith_1 = __webpack_require__(621);
	Observable_1.Observable.prototype.startWith = startWith_1.startWith;
	//# sourceMappingURL=startWith.js.map

/***/ },
/* 600 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(4);
	var take_1 = __webpack_require__(622);
	Observable_1.Observable.prototype.take = take_1.take;
	//# sourceMappingURL=take.js.map

/***/ },
/* 601 */,
/* 602 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subject_1 = __webpack_require__(49);
	var Observable_1 = __webpack_require__(4);
	var Subscriber_1 = __webpack_require__(14);
	var Subscription_1 = __webpack_require__(50);
	/**
	 * @class ConnectableObservable<T>
	 */
	var ConnectableObservable = (function (_super) {
	    __extends(ConnectableObservable, _super);
	    function ConnectableObservable(source, subjectFactory) {
	        _super.call(this);
	        this.source = source;
	        this.subjectFactory = subjectFactory;
	        this._refCount = 0;
	    }
	    ConnectableObservable.prototype._subscribe = function (subscriber) {
	        return this.getSubject().subscribe(subscriber);
	    };
	    ConnectableObservable.prototype.getSubject = function () {
	        var subject = this._subject;
	        if (!subject || subject.isStopped) {
	            this._subject = this.subjectFactory();
	        }
	        return this._subject;
	    };
	    ConnectableObservable.prototype.connect = function () {
	        var connection = this._connection;
	        if (!connection) {
	            connection = this._connection = new Subscription_1.Subscription();
	            connection.add(this.source
	                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));
	            if (connection.closed) {
	                this._connection = null;
	                connection = Subscription_1.Subscription.EMPTY;
	            }
	            else {
	                this._connection = connection;
	            }
	        }
	        return connection;
	    };
	    ConnectableObservable.prototype.refCount = function () {
	        return this.lift(new RefCountOperator(this));
	    };
	    return ConnectableObservable;
	}(Observable_1.Observable));
	exports.ConnectableObservable = ConnectableObservable;
	exports.connectableObservableDescriptor = {
	    operator: { value: null },
	    _refCount: { value: 0, writable: true },
	    _subscribe: { value: ConnectableObservable.prototype._subscribe },
	    getSubject: { value: ConnectableObservable.prototype.getSubject },
	    connect: { value: ConnectableObservable.prototype.connect },
	    refCount: { value: ConnectableObservable.prototype.refCount }
	};
	var ConnectableSubscriber = (function (_super) {
	    __extends(ConnectableSubscriber, _super);
	    function ConnectableSubscriber(destination, connectable) {
	        _super.call(this, destination);
	        this.connectable = connectable;
	    }
	    ConnectableSubscriber.prototype._error = function (err) {
	        this._unsubscribe();
	        _super.prototype._error.call(this, err);
	    };
	    ConnectableSubscriber.prototype._complete = function () {
	        this._unsubscribe();
	        _super.prototype._complete.call(this);
	    };
	    ConnectableSubscriber.prototype._unsubscribe = function () {
	        var connectable = this.connectable;
	        if (connectable) {
	            this.connectable = null;
	            var connection = connectable._connection;
	            connectable._refCount = 0;
	            connectable._subject = null;
	            connectable._connection = null;
	            if (connection) {
	                connection.unsubscribe();
	            }
	        }
	    };
	    return ConnectableSubscriber;
	}(Subject_1.SubjectSubscriber));
	var RefCountOperator = (function () {
	    function RefCountOperator(connectable) {
	        this.connectable = connectable;
	    }
	    RefCountOperator.prototype.call = function (subscriber, source) {
	        var connectable = this.connectable;
	        connectable._refCount++;
	        var refCounter = new RefCountSubscriber(subscriber, connectable);
	        var subscription = source.subscribe(refCounter);
	        if (!refCounter.closed) {
	            refCounter.connection = connectable.connect();
	        }
	        return subscription;
	    };
	    return RefCountOperator;
	}());
	var RefCountSubscriber = (function (_super) {
	    __extends(RefCountSubscriber, _super);
	    function RefCountSubscriber(destination, connectable) {
	        _super.call(this, destination);
	        this.connectable = connectable;
	    }
	    RefCountSubscriber.prototype._unsubscribe = function () {
	        var connectable = this.connectable;
	        if (!connectable) {
	            this.connection = null;
	            return;
	        }
	        this.connectable = null;
	        var refCount = connectable._refCount;
	        if (refCount <= 0) {
	            this.connection = null;
	            return;
	        }
	        connectable._refCount = refCount - 1;
	        if (refCount > 1) {
	            this.connection = null;
	            return;
	        }
	        ///
	        // Compare the local RefCountSubscriber's connection Subscription to the
	        // connection Subscription on the shared ConnectableObservable. In cases
	        // where the ConnectableObservable source synchronously emits values, and
	        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,
	        // execution continues to here before the RefCountOperator has a chance to
	        // supply the RefCountSubscriber with the shared connection Subscription.
	        // For example:
	        // ```
	        // Observable.range(0, 10)
	        //   .publish()
	        //   .refCount()
	        //   .take(5)
	        //   .subscribe();
	        // ```
	        // In order to account for this case, RefCountSubscriber should only dispose
	        // the ConnectableObservable's shared connection Subscription if the
	        // connection Subscription exists, *and* either:
	        //   a. RefCountSubscriber doesn't have a reference to the shared connection
	        //      Subscription yet, or,
	        //   b. RefCountSubscriber's connection Subscription reference is identical
	        //      to the shared connection Subscription
	        ///
	        var connection = this.connection;
	        var sharedConnection = connectable._connection;
	        this.connection = null;
	        if (sharedConnection && (!connection || sharedConnection === connection)) {
	            sharedConnection.unsubscribe();
	        }
	    };
	    return RefCountSubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=ConnectableObservable.js.map

/***/ },
/* 603 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(4);
	var EmptyObservable_1 = __webpack_require__(57);
	var isArray_1 = __webpack_require__(192);
	var subscribeToResult_1 = __webpack_require__(193);
	var OuterSubscriber_1 = __webpack_require__(189);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @extends {Ignored}
	 * @hide true
	 */
	var ForkJoinObservable = (function (_super) {
	    __extends(ForkJoinObservable, _super);
	    function ForkJoinObservable(sources, resultSelector) {
	        _super.call(this);
	        this.sources = sources;
	        this.resultSelector = resultSelector;
	    }
	    /* tslint:enable:max-line-length */
	    /**
	     * @param sources
	     * @return {any}
	     * @static true
	     * @name forkJoin
	     * @owner Observable
	     */
	    ForkJoinObservable.create = function () {
	        var sources = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            sources[_i - 0] = arguments[_i];
	        }
	        if (sources === null || arguments.length === 0) {
	            return new EmptyObservable_1.EmptyObservable();
	        }
	        var resultSelector = null;
	        if (typeof sources[sources.length - 1] === 'function') {
	            resultSelector = sources.pop();
	        }
	        // if the first and only other argument besides the resultSelector is an array
	        // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`
	        if (sources.length === 1 && isArray_1.isArray(sources[0])) {
	            sources = sources[0];
	        }
	        if (sources.length === 0) {
	            return new EmptyObservable_1.EmptyObservable();
	        }
	        return new ForkJoinObservable(sources, resultSelector);
	    };
	    ForkJoinObservable.prototype._subscribe = function (subscriber) {
	        return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);
	    };
	    return ForkJoinObservable;
	}(Observable_1.Observable));
	exports.ForkJoinObservable = ForkJoinObservable;
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var ForkJoinSubscriber = (function (_super) {
	    __extends(ForkJoinSubscriber, _super);
	    function ForkJoinSubscriber(destination, sources, resultSelector) {
	        _super.call(this, destination);
	        this.sources = sources;
	        this.resultSelector = resultSelector;
	        this.completed = 0;
	        this.haveValues = 0;
	        var len = sources.length;
	        this.total = len;
	        this.values = new Array(len);
	        for (var i = 0; i < len; i++) {
	            var source = sources[i];
	            var innerSubscription = subscribeToResult_1.subscribeToResult(this, source, null, i);
	            if (innerSubscription) {
	                innerSubscription.outerIndex = i;
	                this.add(innerSubscription);
	            }
	        }
	    }
	    ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.values[outerIndex] = innerValue;
	        if (!innerSub._hasValue) {
	            innerSub._hasValue = true;
	            this.haveValues++;
	        }
	    };
	    ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {
	        var destination = this.destination;
	        var _a = this, haveValues = _a.haveValues, resultSelector = _a.resultSelector, values = _a.values;
	        var len = values.length;
	        if (!innerSub._hasValue) {
	            destination.complete();
	            return;
	        }
	        this.completed++;
	        if (this.completed !== len) {
	            return;
	        }
	        if (haveValues === len) {
	            var value = resultSelector ? resultSelector.apply(this, values) : values;
	            destination.next(value);
	        }
	        destination.complete();
	    };
	    return ForkJoinSubscriber;
	}(OuterSubscriber_1.OuterSubscriber));
	//# sourceMappingURL=ForkJoinObservable.js.map

/***/ },
/* 604 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(4);
	var tryCatch_1 = __webpack_require__(327);
	var isFunction_1 = __webpack_require__(234);
	var errorObject_1 = __webpack_require__(233);
	var Subscription_1 = __webpack_require__(50);
	var toString = Object.prototype.toString;
	function isNodeStyleEventEmitter(sourceObj) {
	    return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';
	}
	function isJQueryStyleEventEmitter(sourceObj) {
	    return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';
	}
	function isNodeList(sourceObj) {
	    return !!sourceObj && toString.call(sourceObj) === '[object NodeList]';
	}
	function isHTMLCollection(sourceObj) {
	    return !!sourceObj && toString.call(sourceObj) === '[object HTMLCollection]';
	}
	function isEventTarget(sourceObj) {
	    return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';
	}
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @extends {Ignored}
	 * @hide true
	 */
	var FromEventObservable = (function (_super) {
	    __extends(FromEventObservable, _super);
	    function FromEventObservable(sourceObj, eventName, selector, options) {
	        _super.call(this);
	        this.sourceObj = sourceObj;
	        this.eventName = eventName;
	        this.selector = selector;
	        this.options = options;
	    }
	    /* tslint:enable:max-line-length */
	    /**
	     * Creates an Observable that emits events of a specific type coming from the
	     * given event target.
	     *
	     * <span class="informal">Creates an Observable from DOM events, or Node
	     * EventEmitter events or others.</span>
	     *
	     * <img src="./img/fromEvent.png" width="100%">
	     *
	     * Creates an Observable by attaching an event listener to an "event target",
	     * which may be an object with `addEventListener` and `removeEventListener`,
	     * a Node.js EventEmitter, a jQuery style EventEmitter, a NodeList from the
	     * DOM, or an HTMLCollection from the DOM. The event handler is attached when
	     * the output Observable is subscribed, and removed when the Subscription is
	     * unsubscribed.
	     *
	     * @example <caption>Emits clicks happening on the DOM document</caption>
	     * var clicks = Rx.Observable.fromEvent(document, 'click');
	     * clicks.subscribe(x => console.log(x));
	     *
	     * // Results in:
	     * // MouseEvent object logged to console everytime a click
	     * // occurs on the document.
	     *
	     * @see {@link from}
	     * @see {@link fromEventPattern}
	     *
	     * @param {EventTargetLike} target The DOMElement, event target, Node.js
	     * EventEmitter, NodeList or HTMLCollection to attach the event handler to.
	     * @param {string} eventName The event name of interest, being emitted by the
	     * `target`.
	     * @param {EventListenerOptions} [options] Options to pass through to addEventListener
	     * @param {SelectorMethodSignature<T>} [selector] An optional function to
	     * post-process results. It takes the arguments from the event handler and
	     * should return a single value.
	     * @return {Observable<T>}
	     * @static true
	     * @name fromEvent
	     * @owner Observable
	     */
	    FromEventObservable.create = function (target, eventName, options, selector) {
	        if (isFunction_1.isFunction(options)) {
	            selector = options;
	            options = undefined;
	        }
	        return new FromEventObservable(target, eventName, selector, options);
	    };
	    FromEventObservable.setupSubscription = function (sourceObj, eventName, handler, subscriber, options) {
	        var unsubscribe;
	        if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {
	            for (var i = 0, len = sourceObj.length; i < len; i++) {
	                FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);
	            }
	        }
	        else if (isEventTarget(sourceObj)) {
	            var source_1 = sourceObj;
	            sourceObj.addEventListener(eventName, handler, options);
	            unsubscribe = function () { return source_1.removeEventListener(eventName, handler); };
	        }
	        else if (isJQueryStyleEventEmitter(sourceObj)) {
	            var source_2 = sourceObj;
	            sourceObj.on(eventName, handler);
	            unsubscribe = function () { return source_2.off(eventName, handler); };
	        }
	        else if (isNodeStyleEventEmitter(sourceObj)) {
	            var source_3 = sourceObj;
	            sourceObj.addListener(eventName, handler);
	            unsubscribe = function () { return source_3.removeListener(eventName, handler); };
	        }
	        else {
	            throw new TypeError('Invalid event target');
	        }
	        subscriber.add(new Subscription_1.Subscription(unsubscribe));
	    };
	    FromEventObservable.prototype._subscribe = function (subscriber) {
	        var sourceObj = this.sourceObj;
	        var eventName = this.eventName;
	        var options = this.options;
	        var selector = this.selector;
	        var handler = selector ? function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i - 0] = arguments[_i];
	            }
	            var result = tryCatch_1.tryCatch(selector).apply(void 0, args);
	            if (result === errorObject_1.errorObject) {
	                subscriber.error(errorObject_1.errorObject.e);
	            }
	            else {
	                subscriber.next(result);
	            }
	        } : function (e) { return subscriber.next(e); };
	        FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);
	    };
	    return FromEventObservable;
	}(Observable_1.Observable));
	exports.FromEventObservable = FromEventObservable;
	//# sourceMappingURL=FromEventObservable.js.map

/***/ },
/* 605 */,
/* 606 */,
/* 607 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var EmptyObservable_1 = __webpack_require__(57);
	exports.empty = EmptyObservable_1.EmptyObservable.create;
	//# sourceMappingURL=empty.js.map

/***/ },
/* 608 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var ForkJoinObservable_1 = __webpack_require__(603);
	exports.forkJoin = ForkJoinObservable_1.ForkJoinObservable.create;
	//# sourceMappingURL=forkJoin.js.map

/***/ },
/* 609 */,
/* 610 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var isScheduler_1 = __webpack_require__(235);
	var ArrayObservable_1 = __webpack_require__(190);
	var mergeAll_1 = __webpack_require__(228);
	/* tslint:disable:max-line-length */
	/**
	 * Creates an output Observable which sequentially emits all values from every
	 * given input Observable after the current Observable.
	 *
	 * <span class="informal">Concatenates multiple Observables together by
	 * sequentially emitting their values, one Observable after the other.</span>
	 *
	 * <img src="./img/concat.png" width="100%">
	 *
	 * Joins this Observable with multiple other Observables by subscribing to them
	 * one at a time, starting with the source, and merging their results into the
	 * output Observable. Will wait for each Observable to complete before moving
	 * on to the next.
	 *
	 * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>
	 * var timer = Rx.Observable.interval(1000).take(4);
	 * var sequence = Rx.Observable.range(1, 10);
	 * var result = timer.concat(sequence);
	 * result.subscribe(x => console.log(x));
	 *
	 * // results in:
	 * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10
	 *
	 * @example <caption>Concatenate 3 Observables</caption>
	 * var timer1 = Rx.Observable.interval(1000).take(10);
	 * var timer2 = Rx.Observable.interval(2000).take(6);
	 * var timer3 = Rx.Observable.interval(500).take(10);
	 * var result = timer1.concat(timer2, timer3);
	 * result.subscribe(x => console.log(x));
	 *
	 * // results in the following:
	 * // (Prints to console sequentially)
	 * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9
	 * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5
	 * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9
	 *
	 * @see {@link concatAll}
	 * @see {@link concatMap}
	 * @see {@link concatMapTo}
	 *
	 * @param {Observable} other An input Observable to concatenate after the source
	 * Observable. More than one input Observables may be given as argument.
	 * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each
	 * Observable subscription on.
	 * @return {Observable} All values of each passed Observable merged into a
	 * single Observable, in order, in serial fashion.
	 * @method concat
	 * @owner Observable
	 */
	function concat() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i - 0] = arguments[_i];
	    }
	    return this.lift.call(concatStatic.apply(void 0, [this].concat(observables)));
	}
	exports.concat = concat;
	/* tslint:enable:max-line-length */
	/**
	 * Creates an output Observable which sequentially emits all values from every
	 * given input Observable after the current Observable.
	 *
	 * <span class="informal">Concatenates multiple Observables together by
	 * sequentially emitting their values, one Observable after the other.</span>
	 *
	 * <img src="./img/concat.png" width="100%">
	 *
	 * Joins multiple Observables together by subscribing to them one at a time and
	 * merging their results into the output Observable. Will wait for each
	 * Observable to complete before moving on to the next.
	 *
	 * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>
	 * var timer = Rx.Observable.interval(1000).take(4);
	 * var sequence = Rx.Observable.range(1, 10);
	 * var result = Rx.Observable.concat(timer, sequence);
	 * result.subscribe(x => console.log(x));
	 *
	 * // results in:
	 * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10
	 *
	 * @example <caption>Concatenate 3 Observables</caption>
	 * var timer1 = Rx.Observable.interval(1000).take(10);
	 * var timer2 = Rx.Observable.interval(2000).take(6);
	 * var timer3 = Rx.Observable.interval(500).take(10);
	 * var result = Rx.Observable.concat(timer1, timer2, timer3);
	 * result.subscribe(x => console.log(x));
	 *
	 * // results in the following:
	 * // (Prints to console sequentially)
	 * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9
	 * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5
	 * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9
	 *
	 * @see {@link concatAll}
	 * @see {@link concatMap}
	 * @see {@link concatMapTo}
	 *
	 * @param {Observable} input1 An input Observable to concatenate with others.
	 * @param {Observable} input2 An input Observable to concatenate with others.
	 * More than one input Observables may be given as argument.
	 * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each
	 * Observable subscription on.
	 * @return {Observable} All values of each passed Observable merged into a
	 * single Observable, in order, in serial fashion.
	 * @static true
	 * @name concat
	 * @owner Observable
	 */
	function concatStatic() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i - 0] = arguments[_i];
	    }
	    var scheduler = null;
	    var args = observables;
	    if (isScheduler_1.isScheduler(args[observables.length - 1])) {
	        scheduler = args.pop();
	    }
	    if (scheduler === null && observables.length === 1) {
	        return observables[0];
	    }
	    return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new mergeAll_1.MergeAllOperator(1));
	}
	exports.concatStatic = concatStatic;
	//# sourceMappingURL=concat.js.map

/***/ },
/* 611 */,
/* 612 */,
/* 613 */,
/* 614 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(14);
	var Subscription_1 = __webpack_require__(50);
	/**
	 * Returns an Observable that mirrors the source Observable, but will call a specified function when
	 * the source terminates on complete or error.
	 * @param {function} callback function to be called when source terminates.
	 * @return {Observable} an Observable that mirrors the source, but will call the specified function on termination.
	 * @method finally
	 * @owner Observable
	 */
	function _finally(callback) {
	    return this.lift(new FinallyOperator(callback));
	}
	exports._finally = _finally;
	var FinallyOperator = (function () {
	    function FinallyOperator(callback) {
	        this.callback = callback;
	    }
	    FinallyOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new FinallySubscriber(subscriber, this.callback));
	    };
	    return FinallyOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var FinallySubscriber = (function (_super) {
	    __extends(FinallySubscriber, _super);
	    function FinallySubscriber(destination, callback) {
	        _super.call(this, destination);
	        this.add(new Subscription_1.Subscription(callback));
	    }
	    return FinallySubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=finally.js.map

/***/ },
/* 615 */,
/* 616 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var ConnectableObservable_1 = __webpack_require__(602);
	/* tslint:disable:max-line-length */
	/**
	 * Returns an Observable that emits the results of invoking a specified selector on items
	 * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.
	 *
	 * <img src="./img/multicast.png" width="100%">
	 *
	 * @param {Function|Subject} Factory function to create an intermediate subject through
	 * which the source sequence's elements will be multicast to the selector function
	 * or Subject to push source elements into.
	 * @param {Function} Optional selector function that can use the multicasted source stream
	 * as many times as needed, without causing multiple subscriptions to the source stream.
	 * Subscribers to the given source will receive all notifications of the source from the
	 * time of the subscription forward.
	 * @return {Observable} an Observable that emits the results of invoking the selector
	 * on the items emitted by a `ConnectableObservable` that shares a single subscription to
	 * the underlying stream.
	 * @method multicast
	 * @owner Observable
	 */
	function multicast(subjectOrSubjectFactory, selector) {
	    var subjectFactory;
	    if (typeof subjectOrSubjectFactory === 'function') {
	        subjectFactory = subjectOrSubjectFactory;
	    }
	    else {
	        subjectFactory = function subjectFactory() {
	            return subjectOrSubjectFactory;
	        };
	    }
	    if (typeof selector === 'function') {
	        return this.lift(new MulticastOperator(subjectFactory, selector));
	    }
	    var connectable = Object.create(this, ConnectableObservable_1.connectableObservableDescriptor);
	    connectable.source = this;
	    connectable.subjectFactory = subjectFactory;
	    return connectable;
	}
	exports.multicast = multicast;
	var MulticastOperator = (function () {
	    function MulticastOperator(subjectFactory, selector) {
	        this.subjectFactory = subjectFactory;
	        this.selector = selector;
	    }
	    MulticastOperator.prototype.call = function (subscriber, source) {
	        var selector = this.selector;
	        var subject = this.subjectFactory();
	        var subscription = selector(subject).subscribe(subscriber);
	        subscription.add(source.subscribe(subject));
	        return subscription;
	    };
	    return MulticastOperator;
	}());
	exports.MulticastOperator = MulticastOperator;
	//# sourceMappingURL=multicast.js.map

/***/ },
/* 617 */,
/* 618 */,
/* 619 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(14);
	var async_1 = __webpack_require__(627);
	/**
	 * Emits the most recently emitted value from the source Observable within
	 * periodic time intervals.
	 *
	 * <span class="informal">Samples the source Observable at periodic time
	 * intervals, emitting what it samples.</span>
	 *
	 * <img src="./img/sampleTime.png" width="100%">
	 *
	 * `sampleTime` periodically looks at the source Observable and emits whichever
	 * value it has most recently emitted since the previous sampling, unless the
	 * source has not emitted anything since the previous sampling. The sampling
	 * happens periodically in time every `period` milliseconds (or the time unit
	 * defined by the optional `scheduler` argument). The sampling starts as soon as
	 * the output Observable is subscribed.
	 *
	 * @example <caption>Every second, emit the most recent click at most once</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var result = clicks.sampleTime(1000);
	 * result.subscribe(x => console.log(x));
	 *
	 * @see {@link auditTime}
	 * @see {@link debounceTime}
	 * @see {@link delay}
	 * @see {@link sample}
	 * @see {@link throttleTime}
	 *
	 * @param {number} period The sampling period expressed in milliseconds or the
	 * time unit determined internally by the optional `scheduler`.
	 * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for
	 * managing the timers that handle the sampling.
	 * @return {Observable<T>} An Observable that emits the results of sampling the
	 * values emitted by the source Observable at the specified time interval.
	 * @method sampleTime
	 * @owner Observable
	 */
	function sampleTime(period, scheduler) {
	    if (scheduler === void 0) { scheduler = async_1.async; }
	    return this.lift(new SampleTimeOperator(period, scheduler));
	}
	exports.sampleTime = sampleTime;
	var SampleTimeOperator = (function () {
	    function SampleTimeOperator(period, scheduler) {
	        this.period = period;
	        this.scheduler = scheduler;
	    }
	    SampleTimeOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));
	    };
	    return SampleTimeOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var SampleTimeSubscriber = (function (_super) {
	    __extends(SampleTimeSubscriber, _super);
	    function SampleTimeSubscriber(destination, period, scheduler) {
	        _super.call(this, destination);
	        this.period = period;
	        this.scheduler = scheduler;
	        this.hasValue = false;
	        this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period: period }));
	    }
	    SampleTimeSubscriber.prototype._next = function (value) {
	        this.lastValue = value;
	        this.hasValue = true;
	    };
	    SampleTimeSubscriber.prototype.notifyNext = function () {
	        if (this.hasValue) {
	            this.hasValue = false;
	            this.destination.next(this.lastValue);
	        }
	    };
	    return SampleTimeSubscriber;
	}(Subscriber_1.Subscriber));
	function dispatchNotification(state) {
	    var subscriber = state.subscriber, period = state.period;
	    subscriber.notifyNext();
	    this.schedule(state, period);
	}
	//# sourceMappingURL=sampleTime.js.map

/***/ },
/* 620 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var multicast_1 = __webpack_require__(616);
	var Subject_1 = __webpack_require__(49);
	function shareSubjectFactory() {
	    return new Subject_1.Subject();
	}
	/**
	 * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one
	 * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will
	 * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.
	 * This is an alias for .publish().refCount().
	 *
	 * <img src="./img/share.png" width="100%">
	 *
	 * @return {Observable<T>} an Observable that upon connection causes the source Observable to emit items to its Observers
	 * @method share
	 * @owner Observable
	 */
	function share() {
	    return multicast_1.multicast.call(this, shareSubjectFactory).refCount();
	}
	exports.share = share;
	;
	//# sourceMappingURL=share.js.map

/***/ },
/* 621 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var ArrayObservable_1 = __webpack_require__(190);
	var ScalarObservable_1 = __webpack_require__(227);
	var EmptyObservable_1 = __webpack_require__(57);
	var concat_1 = __webpack_require__(610);
	var isScheduler_1 = __webpack_require__(235);
	/* tslint:disable:max-line-length */
	/**
	 * Returns an Observable that emits the items in a specified Iterable before it begins to emit items emitted by the
	 * source Observable.
	 *
	 * <img src="./img/startWith.png" width="100%">
	 *
	 * @param {Values} an Iterable that contains the items you want the modified Observable to emit first.
	 * @return {Observable} an Observable that emits the items in the specified Iterable and then emits the items
	 * emitted by the source Observable.
	 * @method startWith
	 * @owner Observable
	 */
	function startWith() {
	    var array = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        array[_i - 0] = arguments[_i];
	    }
	    var scheduler = array[array.length - 1];
	    if (isScheduler_1.isScheduler(scheduler)) {
	        array.pop();
	    }
	    else {
	        scheduler = null;
	    }
	    var len = array.length;
	    if (len === 1) {
	        return concat_1.concatStatic(new ScalarObservable_1.ScalarObservable(array[0], scheduler), this);
	    }
	    else if (len > 1) {
	        return concat_1.concatStatic(new ArrayObservable_1.ArrayObservable(array, scheduler), this);
	    }
	    else {
	        return concat_1.concatStatic(new EmptyObservable_1.EmptyObservable(scheduler), this);
	    }
	}
	exports.startWith = startWith;
	//# sourceMappingURL=startWith.js.map

/***/ },
/* 622 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(14);
	var ArgumentOutOfRangeError_1 = __webpack_require__(628);
	var EmptyObservable_1 = __webpack_require__(57);
	/**
	 * Emits only the first `count` values emitted by the source Observable.
	 *
	 * <span class="informal">Takes the first `count` values from the source, then
	 * completes.</span>
	 *
	 * <img src="./img/take.png" width="100%">
	 *
	 * `take` returns an Observable that emits only the first `count` values emitted
	 * by the source Observable. If the source emits fewer than `count` values then
	 * all of its values are emitted. After that, it completes, regardless if the
	 * source completes.
	 *
	 * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>
	 * var interval = Rx.Observable.interval(1000);
	 * var five = interval.take(5);
	 * five.subscribe(x => console.log(x));
	 *
	 * @see {@link takeLast}
	 * @see {@link takeUntil}
	 * @see {@link takeWhile}
	 * @see {@link skip}
	 *
	 * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an
	 * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.
	 *
	 * @param {number} count The maximum number of `next` values to emit.
	 * @return {Observable<T>} An Observable that emits only the first `count`
	 * values emitted by the source Observable, or all of the values from the source
	 * if the source emits fewer than `count` values.
	 * @method take
	 * @owner Observable
	 */
	function take(count) {
	    if (count === 0) {
	        return new EmptyObservable_1.EmptyObservable();
	    }
	    else {
	        return this.lift(new TakeOperator(count));
	    }
	}
	exports.take = take;
	var TakeOperator = (function () {
	    function TakeOperator(total) {
	        this.total = total;
	        if (this.total < 0) {
	            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;
	        }
	    }
	    TakeOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new TakeSubscriber(subscriber, this.total));
	    };
	    return TakeOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var TakeSubscriber = (function (_super) {
	    __extends(TakeSubscriber, _super);
	    function TakeSubscriber(destination, total) {
	        _super.call(this, destination);
	        this.total = total;
	        this.count = 0;
	    }
	    TakeSubscriber.prototype._next = function (value) {
	        var total = this.total;
	        var count = ++this.count;
	        if (count <= total) {
	            this.destination.next(value);
	            if (count === total) {
	                this.destination.complete();
	                this.unsubscribe();
	            }
	        }
	    };
	    return TakeSubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=take.js.map

/***/ },
/* 623 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var root_1 = __webpack_require__(32);
	/* tslint:disable:max-line-length */
	/**
	 * Converts an Observable sequence to a ES2015 compliant promise.
	 *
	 * @example
	 * // Using normal ES2015
	 * let source = Rx.Observable
	 *   .just(42)
	 *   .toPromise();
	 *
	 * source.then((value) => console.log('Value: %s', value));
	 * // => Value: 42
	 *
	 * // Rejected Promise
	 * // Using normal ES2015
	 * let source = Rx.Observable
	 *   .throw(new Error('woops'))
	 *   .toPromise();
	 *
	 * source
	 *   .then((value) => console.log('Value: %s', value))
	 *   .catch((err) => console.log('Error: %s', err));
	 * // => Error: Error: woops
	 *
	 * // Setting via the config
	 * Rx.config.Promise = RSVP.Promise;
	 *
	 * let source = Rx.Observable
	 *   .of(42)
	 *   .toPromise();
	 *
	 * source.then((value) => console.log('Value: %s', value));
	 * // => Value: 42
	 *
	 * // Setting via the method
	 * let source = Rx.Observable
	 *   .just(42)
	 *   .toPromise(RSVP.Promise);
	 *
	 * source.then((value) => console.log('Value: %s', value));
	 * // => Value: 42
	 *
	 * @param PromiseCtor promise The constructor of the promise. If not provided,
	 * it will look for a constructor first in Rx.config.Promise then fall back to
	 * the native Promise constructor if available.
	 * @return {Promise<T>} An ES2015 compatible promise with the last value from
	 * the observable sequence.
	 * @method toPromise
	 * @owner Observable
	 */
	function toPromise(PromiseCtor) {
	    var _this = this;
	    if (!PromiseCtor) {
	        if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
	            PromiseCtor = root_1.root.Rx.config.Promise;
	        }
	        else if (root_1.root.Promise) {
	            PromiseCtor = root_1.root.Promise;
	        }
	    }
	    if (!PromiseCtor) {
	        throw new Error('no Promise impl found');
	    }
	    return new PromiseCtor(function (resolve, reject) {
	        var value;
	        _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });
	    });
	}
	exports.toPromise = toPromise;
	//# sourceMappingURL=toPromise.js.map

/***/ },
/* 624 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscription_1 = __webpack_require__(50);
	/**
	 * A unit of work to be executed in a {@link Scheduler}. An action is typically
	 * created from within a Scheduler and an RxJS user does not need to concern
	 * themselves about creating and manipulating an Action.
	 *
	 * ```ts
	 * class Action<T> extends Subscription {
	 *   new (scheduler: Scheduler, work: (state?: T) => void);
	 *   schedule(state?: T, delay: number = 0): Subscription;
	 * }
	 * ```
	 *
	 * @class Action<T>
	 */
	var Action = (function (_super) {
	    __extends(Action, _super);
	    function Action(scheduler, work) {
	        _super.call(this);
	    }
	    /**
	     * Schedules this action on its parent Scheduler for execution. May be passed
	     * some context object, `state`. May happen at some point in the future,
	     * according to the `delay` parameter, if specified.
	     * @param {T} [state] Some contextual data that the `work` function uses when
	     * called by the Scheduler.
	     * @param {number} [delay] Time to wait before executing the work, where the
	     * time unit is implicit and defined by the Scheduler.
	     * @return {void}
	     */
	    Action.prototype.schedule = function (state, delay) {
	        if (delay === void 0) { delay = 0; }
	        return this;
	    };
	    return Action;
	}(Subscription_1.Subscription));
	exports.Action = Action;
	//# sourceMappingURL=Action.js.map

/***/ },
/* 625 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var root_1 = __webpack_require__(32);
	var Action_1 = __webpack_require__(624);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var AsyncAction = (function (_super) {
	    __extends(AsyncAction, _super);
	    function AsyncAction(scheduler, work) {
	        _super.call(this, scheduler, work);
	        this.scheduler = scheduler;
	        this.work = work;
	        this.pending = false;
	    }
	    AsyncAction.prototype.schedule = function (state, delay) {
	        if (delay === void 0) { delay = 0; }
	        if (this.closed) {
	            return this;
	        }
	        // Always replace the current state with the new state.
	        this.state = state;
	        // Set the pending flag indicating that this action has been scheduled, or
	        // has recursively rescheduled itself.
	        this.pending = true;
	        var id = this.id;
	        var scheduler = this.scheduler;
	        //
	        // Important implementation note:
	        //
	        // Actions only execute once by default, unless rescheduled from within the
	        // scheduled callback. This allows us to implement single and repeat
	        // actions via the same code path, without adding API surface area, as well
	        // as mimic traditional recursion but across asynchronous boundaries.
	        //
	        // However, JS runtimes and timers distinguish between intervals achieved by
	        // serial `setTimeout` calls vs. a single `setInterval` call. An interval of
	        // serial `setTimeout` calls can be individually delayed, which delays
	        // scheduling the next `setTimeout`, and so on. `setInterval` attempts to
	        // guarantee the interval callback will be invoked more precisely to the
	        // interval period, regardless of load.
	        //
	        // Therefore, we use `setInterval` to schedule single and repeat actions.
	        // If the action reschedules itself with the same delay, the interval is not
	        // canceled. If the action doesn't reschedule, or reschedules with a
	        // different delay, the interval will be canceled after scheduled callback
	        // execution.
	        //
	        if (id != null) {
	            this.id = this.recycleAsyncId(scheduler, id, delay);
	        }
	        this.delay = delay;
	        // If this action has already an async Id, don't request a new one.
	        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
	        return this;
	    };
	    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) { delay = 0; }
	        return root_1.root.setInterval(scheduler.flush.bind(scheduler, this), delay);
	    };
	    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) { delay = 0; }
	        // If this action is rescheduled with the same delay time, don't clear the interval id.
	        if (delay !== null && this.delay === delay) {
	            return id;
	        }
	        // Otherwise, if the action's delay time is different from the current delay,
	        // clear the interval id
	        return root_1.root.clearInterval(id) && undefined || undefined;
	    };
	    /**
	     * Immediately executes this action and the `work` it contains.
	     * @return {any}
	     */
	    AsyncAction.prototype.execute = function (state, delay) {
	        if (this.closed) {
	            return new Error('executing a cancelled action');
	        }
	        this.pending = false;
	        var error = this._execute(state, delay);
	        if (error) {
	            return error;
	        }
	        else if (this.pending === false && this.id != null) {
	            // Dequeue if the action didn't reschedule itself. Don't call
	            // unsubscribe(), because the action could reschedule later.
	            // For example:
	            // ```
	            // scheduler.schedule(function doWork(counter) {
	            //   /* ... I'm a busy worker bee ... */
	            //   var originalAction = this;
	            //   /* wait 100ms before rescheduling the action */
	            //   setTimeout(function () {
	            //     originalAction.schedule(counter + 1);
	            //   }, 100);
	            // }, 1000);
	            // ```
	            this.id = this.recycleAsyncId(this.scheduler, this.id, null);
	        }
	    };
	    AsyncAction.prototype._execute = function (state, delay) {
	        var errored = false;
	        var errorValue = undefined;
	        try {
	            this.work(state);
	        }
	        catch (e) {
	            errored = true;
	            errorValue = !!e && e || new Error(e);
	        }
	        if (errored) {
	            this.unsubscribe();
	            return errorValue;
	        }
	    };
	    AsyncAction.prototype._unsubscribe = function () {
	        var id = this.id;
	        var scheduler = this.scheduler;
	        var actions = scheduler.actions;
	        var index = actions.indexOf(this);
	        this.work = null;
	        this.delay = null;
	        this.state = null;
	        this.pending = false;
	        this.scheduler = null;
	        if (index !== -1) {
	            actions.splice(index, 1);
	        }
	        if (id != null) {
	            this.id = this.recycleAsyncId(scheduler, id, null);
	        }
	    };
	    return AsyncAction;
	}(Action_1.Action));
	exports.AsyncAction = AsyncAction;
	//# sourceMappingURL=AsyncAction.js.map

/***/ },
/* 626 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Scheduler_1 = __webpack_require__(590);
	var AsyncScheduler = (function (_super) {
	    __extends(AsyncScheduler, _super);
	    function AsyncScheduler() {
	        _super.apply(this, arguments);
	        this.actions = [];
	        /**
	         * A flag to indicate whether the Scheduler is currently executing a batch of
	         * queued actions.
	         * @type {boolean}
	         */
	        this.active = false;
	        /**
	         * An internal ID used to track the latest asynchronous task such as those
	         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and
	         * others.
	         * @type {any}
	         */
	        this.scheduled = undefined;
	    }
	    AsyncScheduler.prototype.flush = function (action) {
	        var actions = this.actions;
	        if (this.active) {
	            actions.push(action);
	            return;
	        }
	        var error;
	        this.active = true;
	        do {
	            if (error = action.execute(action.state, action.delay)) {
	                break;
	            }
	        } while (action = actions.shift()); // exhaust the scheduler queue
	        this.active = false;
	        if (error) {
	            while (action = actions.shift()) {
	                action.unsubscribe();
	            }
	            throw error;
	        }
	    };
	    return AsyncScheduler;
	}(Scheduler_1.Scheduler));
	exports.AsyncScheduler = AsyncScheduler;
	//# sourceMappingURL=AsyncScheduler.js.map

/***/ },
/* 627 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var AsyncAction_1 = __webpack_require__(625);
	var AsyncScheduler_1 = __webpack_require__(626);
	exports.async = new AsyncScheduler_1.AsyncScheduler(AsyncAction_1.AsyncAction);
	//# sourceMappingURL=async.js.map

/***/ },
/* 628 */
/***/ function(module, exports) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * An error thrown when an element was queried at a certain index of an
	 * Observable, but no such index or position exists in that sequence.
	 *
	 * @see {@link elementAt}
	 * @see {@link take}
	 * @see {@link takeLast}
	 *
	 * @class ArgumentOutOfRangeError
	 */
	var ArgumentOutOfRangeError = (function (_super) {
	    __extends(ArgumentOutOfRangeError, _super);
	    function ArgumentOutOfRangeError() {
	        var err = _super.call(this, 'argument out of range');
	        this.name = err.name = 'ArgumentOutOfRangeError';
	        this.stack = err.stack;
	        this.message = err.message;
	    }
	    return ArgumentOutOfRangeError;
	}(Error));
	exports.ArgumentOutOfRangeError = ArgumentOutOfRangeError;
	//# sourceMappingURL=ArgumentOutOfRangeError.js.map

/***/ },
/* 629 */,
/* 630 */,
/* 631 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {var capability = __webpack_require__(328)
	var inherits = __webpack_require__(38)
	var response = __webpack_require__(632)
	var stream = __webpack_require__(225)
	var toArrayBuffer = __webpack_require__(638)
	
	var IncomingMessage = response.IncomingMessage
	var rStates = response.readyStates
	
	function decideMode (preferBinary, useFetch) {
		if (capability.fetch && useFetch) {
			return 'fetch'
		} else if (capability.mozchunkedarraybuffer) {
			return 'moz-chunked-arraybuffer'
		} else if (capability.msstream) {
			return 'ms-stream'
		} else if (capability.arraybuffer && preferBinary) {
			return 'arraybuffer'
		} else if (capability.vbArray && preferBinary) {
			return 'text:vbarray'
		} else {
			return 'text'
		}
	}
	
	var ClientRequest = module.exports = function (opts) {
		var self = this
		stream.Writable.call(self)
	
		self._opts = opts
		self._body = []
		self._headers = {}
		if (opts.auth)
			self.setHeader('Authorization', 'Basic ' + new Buffer(opts.auth).toString('base64'))
		Object.keys(opts.headers).forEach(function (name) {
			self.setHeader(name, opts.headers[name])
		})
	
		var preferBinary
		var useFetch = true
		if (opts.mode === 'disable-fetch' || 'timeout' in opts) {
			// If the use of XHR should be preferred and includes preserving the 'content-type' header.
			// Force XHR to be used since the Fetch API does not yet support timeouts.
			useFetch = false
			preferBinary = true
		} else if (opts.mode === 'prefer-streaming') {
			// If streaming is a high priority but binary compatibility and
			// the accuracy of the 'content-type' header aren't
			preferBinary = false
		} else if (opts.mode === 'allow-wrong-content-type') {
			// If streaming is more important than preserving the 'content-type' header
			preferBinary = !capability.overrideMimeType
		} else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {
			// Use binary if text streaming may corrupt data or the content-type header, or for speed
			preferBinary = true
		} else {
			throw new Error('Invalid value for opts.mode')
		}
		self._mode = decideMode(preferBinary, useFetch)
	
		self.on('finish', function () {
			self._onFinish()
		})
	}
	
	inherits(ClientRequest, stream.Writable)
	
	ClientRequest.prototype.setHeader = function (name, value) {
		var self = this
		var lowerName = name.toLowerCase()
		// This check is not necessary, but it prevents warnings from browsers about setting unsafe
		// headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but
		// http-browserify did it, so I will too.
		if (unsafeHeaders.indexOf(lowerName) !== -1)
			return
	
		self._headers[lowerName] = {
			name: name,
			value: value
		}
	}
	
	ClientRequest.prototype.getHeader = function (name) {
		var self = this
		return self._headers[name.toLowerCase()].value
	}
	
	ClientRequest.prototype.removeHeader = function (name) {
		var self = this
		delete self._headers[name.toLowerCase()]
	}
	
	ClientRequest.prototype._onFinish = function () {
		var self = this
	
		if (self._destroyed)
			return
		var opts = self._opts
	
		var headersObj = self._headers
		var body = null
		if (opts.method === 'POST' || opts.method === 'PUT' || opts.method === 'PATCH' || opts.method === 'MERGE') {
			if (capability.blobConstructor) {
				body = new global.Blob(self._body.map(function (buffer) {
					return toArrayBuffer(buffer)
				}), {
					type: (headersObj['content-type'] || {}).value || ''
				})
			} else {
				// get utf8 string
				body = Buffer.concat(self._body).toString()
			}
		}
	
		if (self._mode === 'fetch') {
			var headers = Object.keys(headersObj).map(function (name) {
				return [headersObj[name].name, headersObj[name].value]
			})
	
			global.fetch(self._opts.url, {
				method: self._opts.method,
				headers: headers,
				body: body || undefined,
				mode: 'cors',
				credentials: opts.withCredentials ? 'include' : 'same-origin'
			}).then(function (response) {
				self._fetchResponse = response
				self._connect()
			}, function (reason) {
				self.emit('error', reason)
			})
		} else {
			var xhr = self._xhr = new global.XMLHttpRequest()
			try {
				xhr.open(self._opts.method, self._opts.url, true)
			} catch (err) {
				process.nextTick(function () {
					self.emit('error', err)
				})
				return
			}
	
			// Can't set responseType on really old browsers
			if ('responseType' in xhr)
				xhr.responseType = self._mode.split(':')[0]
	
			if ('withCredentials' in xhr)
				xhr.withCredentials = !!opts.withCredentials
	
			if (self._mode === 'text' && 'overrideMimeType' in xhr)
				xhr.overrideMimeType('text/plain; charset=x-user-defined')
	
			if ('timeout' in opts) {
				xhr.timeout = opts.timeout
				xhr.ontimeout = function () {
					self.emit('timeout')
				}
			}
	
			Object.keys(headersObj).forEach(function (name) {
				xhr.setRequestHeader(headersObj[name].name, headersObj[name].value)
			})
	
			self._response = null
			xhr.onreadystatechange = function () {
				switch (xhr.readyState) {
					case rStates.LOADING:
					case rStates.DONE:
						self._onXHRProgress()
						break
				}
			}
			// Necessary for streaming in Firefox, since xhr.response is ONLY defined
			// in onprogress, not in onreadystatechange with xhr.readyState = 3
			if (self._mode === 'moz-chunked-arraybuffer') {
				xhr.onprogress = function () {
					self._onXHRProgress()
				}
			}
	
			xhr.onerror = function () {
				if (self._destroyed)
					return
				self.emit('error', new Error('XHR error'))
			}
	
			try {
				xhr.send(body)
			} catch (err) {
				process.nextTick(function () {
					self.emit('error', err)
				})
				return
			}
		}
	}
	
	/**
	 * Checks if xhr.status is readable and non-zero, indicating no error.
	 * Even though the spec says it should be available in readyState 3,
	 * accessing it throws an exception in IE8
	 */
	function statusValid (xhr) {
		try {
			var status = xhr.status
			return (status !== null && status !== 0)
		} catch (e) {
			return false
		}
	}
	
	ClientRequest.prototype._onXHRProgress = function () {
		var self = this
	
		if (!statusValid(self._xhr) || self._destroyed)
			return
	
		if (!self._response)
			self._connect()
	
		self._response._onXHRProgress()
	}
	
	ClientRequest.prototype._connect = function () {
		var self = this
	
		if (self._destroyed)
			return
	
		self._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode)
		self._response.on('error', function(err) {
			self.emit('error', err)
		})
	
		self.emit('response', self._response)
	}
	
	ClientRequest.prototype._write = function (chunk, encoding, cb) {
		var self = this
	
		self._body.push(chunk)
		cb()
	}
	
	ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function () {
		var self = this
		self._destroyed = true
		if (self._response)
			self._response._destroyed = true
		if (self._xhr)
			self._xhr.abort()
		// Currently, there isn't a way to truly abort a fetch.
		// If you like bikeshedding, see https://github.com/whatwg/fetch/issues/27
	}
	
	ClientRequest.prototype.end = function (data, encoding, cb) {
		var self = this
		if (typeof data === 'function') {
			cb = data
			data = undefined
		}
	
		stream.Writable.prototype.end.call(self, data, encoding, cb)
	}
	
	ClientRequest.prototype.flushHeaders = function () {}
	ClientRequest.prototype.setTimeout = function () {}
	ClientRequest.prototype.setNoDelay = function () {}
	ClientRequest.prototype.setSocketKeepAlive = function () {}
	
	// Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method
	var unsafeHeaders = [
		'accept-charset',
		'accept-encoding',
		'access-control-request-headers',
		'access-control-request-method',
		'connection',
		'content-length',
		'cookie',
		'cookie2',
		'date',
		'dnt',
		'expect',
		'host',
		'keep-alive',
		'origin',
		'referer',
		'te',
		'trailer',
		'transfer-encoding',
		'upgrade',
		'user-agent',
		'via'
	]
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(39)))

/***/ },
/* 632 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, global) {var capability = __webpack_require__(328)
	var inherits = __webpack_require__(38)
	var stream = __webpack_require__(225)
	
	var rStates = exports.readyStates = {
		UNSENT: 0,
		OPENED: 1,
		HEADERS_RECEIVED: 2,
		LOADING: 3,
		DONE: 4
	}
	
	var IncomingMessage = exports.IncomingMessage = function (xhr, response, mode) {
		var self = this
		stream.Readable.call(self)
	
		self._mode = mode
		self.headers = {}
		self.rawHeaders = []
		self.trailers = {}
		self.rawTrailers = []
	
		// Fake the 'close' event, but only once 'end' fires
		self.on('end', function () {
			// The nextTick is necessary to prevent the 'request' module from causing an infinite loop
			process.nextTick(function () {
				self.emit('close')
			})
		})
	
		if (mode === 'fetch') {
			self._fetchResponse = response
	
			self.url = response.url
			self.statusCode = response.status
			self.statusMessage = response.statusText
			
			response.headers.forEach(function(header, key){
				self.headers[key.toLowerCase()] = header
				self.rawHeaders.push(key, header)
			})
	
	
			// TODO: this doesn't respect backpressure. Once WritableStream is available, this can be fixed
			var reader = response.body.getReader()
			function read () {
				reader.read().then(function (result) {
					if (self._destroyed)
						return
					if (result.done) {
						self.push(null)
						return
					}
					self.push(new Buffer(result.value))
					read()
				}).catch(function(err) {
					self.emit('error', err)
				})
			}
			read()
	
		} else {
			self._xhr = xhr
			self._pos = 0
	
			self.url = xhr.responseURL
			self.statusCode = xhr.status
			self.statusMessage = xhr.statusText
			var headers = xhr.getAllResponseHeaders().split(/\r?\n/)
			headers.forEach(function (header) {
				var matches = header.match(/^([^:]+):\s*(.*)/)
				if (matches) {
					var key = matches[1].toLowerCase()
					if (key === 'set-cookie') {
						if (self.headers[key] === undefined) {
							self.headers[key] = []
						}
						self.headers[key].push(matches[2])
					} else if (self.headers[key] !== undefined) {
						self.headers[key] += ', ' + matches[2]
					} else {
						self.headers[key] = matches[2]
					}
					self.rawHeaders.push(matches[1], matches[2])
				}
			})
	
			self._charset = 'x-user-defined'
			if (!capability.overrideMimeType) {
				var mimeType = self.rawHeaders['mime-type']
				if (mimeType) {
					var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/)
					if (charsetMatch) {
						self._charset = charsetMatch[1].toLowerCase()
					}
				}
				if (!self._charset)
					self._charset = 'utf-8' // best guess
			}
		}
	}
	
	inherits(IncomingMessage, stream.Readable)
	
	IncomingMessage.prototype._read = function () {}
	
	IncomingMessage.prototype._onXHRProgress = function () {
		var self = this
	
		var xhr = self._xhr
	
		var response = null
		switch (self._mode) {
			case 'text:vbarray': // For IE9
				if (xhr.readyState !== rStates.DONE)
					break
				try {
					// This fails in IE8
					response = new global.VBArray(xhr.responseBody).toArray()
				} catch (e) {}
				if (response !== null) {
					self.push(new Buffer(response))
					break
				}
				// Falls through in IE8	
			case 'text':
				try { // This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4
					response = xhr.responseText
				} catch (e) {
					self._mode = 'text:vbarray'
					break
				}
				if (response.length > self._pos) {
					var newData = response.substr(self._pos)
					if (self._charset === 'x-user-defined') {
						var buffer = new Buffer(newData.length)
						for (var i = 0; i < newData.length; i++)
							buffer[i] = newData.charCodeAt(i) & 0xff
	
						self.push(buffer)
					} else {
						self.push(newData, self._charset)
					}
					self._pos = response.length
				}
				break
			case 'arraybuffer':
				if (xhr.readyState !== rStates.DONE || !xhr.response)
					break
				response = xhr.response
				self.push(new Buffer(new Uint8Array(response)))
				break
			case 'moz-chunked-arraybuffer': // take whole
				response = xhr.response
				if (xhr.readyState !== rStates.LOADING || !response)
					break
				self.push(new Buffer(new Uint8Array(response)))
				break
			case 'ms-stream':
				response = xhr.response
				if (xhr.readyState !== rStates.LOADING)
					break
				var reader = new global.MSStreamReader()
				reader.onprogress = function () {
					if (reader.result.byteLength > self._pos) {
						self.push(new Buffer(new Uint8Array(reader.result.slice(self._pos))))
						self._pos = reader.result.byteLength
					}
				}
				reader.onload = function () {
					self.push(null)
				}
				// reader.onerror = ??? // TODO: this
				reader.readAsArrayBuffer(response)
				break
		}
	
		// The ms-stream case handles end separately in reader.onload()
		if (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {
			self.push(null)
		}
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(39), (function() { return this; }())))

/***/ },
/* 633 */,
/* 634 */,
/* 635 */,
/* 636 */,
/* 637 */,
/* 638 */
/***/ function(module, exports, __webpack_require__) {

	var Buffer = __webpack_require__(53).Buffer
	
	module.exports = function (buf) {
		// If the buffer is backed by a Uint8Array, a faster version will work
		if (buf instanceof Uint8Array) {
			// If the buffer isn't a subarray, return the underlying ArrayBuffer
			if (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {
				return buf.buffer
			} else if (typeof buf.buffer.slice === 'function') {
				// Otherwise we need to get a proper copy
				return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength)
			}
		}
	
		if (Buffer.isBuffer(buf)) {
			// This is the slow version that will work with any Buffer
			// implementation (even in old browsers)
			var arrayCopy = new Uint8Array(buf.length)
			var len = buf.length
			for (var i = 0; i < len; i++) {
				arrayCopy[i] = buf[i]
			}
			return arrayCopy.buffer
		} else {
			throw new Error('Argument must be a Buffer')
		}
	}


/***/ },
/* 639 */,
/* 640 */,
/* 641 */,
/* 642 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! https://mths.be/punycode v1.3.2 by @mathias */
	;(function(root) {
	
		/** Detect free variables */
		var freeExports = typeof exports == 'object' && exports &&
			!exports.nodeType && exports;
		var freeModule = typeof module == 'object' && module &&
			!module.nodeType && module;
		var freeGlobal = typeof global == 'object' && global;
		if (
			freeGlobal.global === freeGlobal ||
			freeGlobal.window === freeGlobal ||
			freeGlobal.self === freeGlobal
		) {
			root = freeGlobal;
		}
	
		/**
		 * The `punycode` object.
		 * @name punycode
		 * @type Object
		 */
		var punycode,
	
		/** Highest positive signed 32-bit float value */
		maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1
	
		/** Bootstring parameters */
		base = 36,
		tMin = 1,
		tMax = 26,
		skew = 38,
		damp = 700,
		initialBias = 72,
		initialN = 128, // 0x80
		delimiter = '-', // '\x2D'
	
		/** Regular expressions */
		regexPunycode = /^xn--/,
		regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
		regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators
	
		/** Error messages */
		errors = {
			'overflow': 'Overflow: input needs wider integers to process',
			'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
			'invalid-input': 'Invalid input'
		},
	
		/** Convenience shortcuts */
		baseMinusTMin = base - tMin,
		floor = Math.floor,
		stringFromCharCode = String.fromCharCode,
	
		/** Temporary variable */
		key;
	
		/*--------------------------------------------------------------------------*/
	
		/**
		 * A generic error utility function.
		 * @private
		 * @param {String} type The error type.
		 * @returns {Error} Throws a `RangeError` with the applicable error message.
		 */
		function error(type) {
			throw RangeError(errors[type]);
		}
	
		/**
		 * A generic `Array#map` utility function.
		 * @private
		 * @param {Array} array The array to iterate over.
		 * @param {Function} callback The function that gets called for every array
		 * item.
		 * @returns {Array} A new array of values returned by the callback function.
		 */
		function map(array, fn) {
			var length = array.length;
			var result = [];
			while (length--) {
				result[length] = fn(array[length]);
			}
			return result;
		}
	
		/**
		 * A simple `Array#map`-like wrapper to work with domain name strings or email
		 * addresses.
		 * @private
		 * @param {String} domain The domain name or email address.
		 * @param {Function} callback The function that gets called for every
		 * character.
		 * @returns {Array} A new string of characters returned by the callback
		 * function.
		 */
		function mapDomain(string, fn) {
			var parts = string.split('@');
			var result = '';
			if (parts.length > 1) {
				// In email addresses, only the domain name should be punycoded. Leave
				// the local part (i.e. everything up to `@`) intact.
				result = parts[0] + '@';
				string = parts[1];
			}
			// Avoid `split(regex)` for IE8 compatibility. See #17.
			string = string.replace(regexSeparators, '\x2E');
			var labels = string.split('.');
			var encoded = map(labels, fn).join('.');
			return result + encoded;
		}
	
		/**
		 * Creates an array containing the numeric code points of each Unicode
		 * character in the string. While JavaScript uses UCS-2 internally,
		 * this function will convert a pair of surrogate halves (each of which
		 * UCS-2 exposes as separate characters) into a single code point,
		 * matching UTF-16.
		 * @see `punycode.ucs2.encode`
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode.ucs2
		 * @name decode
		 * @param {String} string The Unicode input string (UCS-2).
		 * @returns {Array} The new array of code points.
		 */
		function ucs2decode(string) {
			var output = [],
			    counter = 0,
			    length = string.length,
			    value,
			    extra;
			while (counter < length) {
				value = string.charCodeAt(counter++);
				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
					// high surrogate, and there is a next character
					extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) { // low surrogate
						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
					} else {
						// unmatched surrogate; only append this code unit, in case the next
						// code unit is the high surrogate of a surrogate pair
						output.push(value);
						counter--;
					}
				} else {
					output.push(value);
				}
			}
			return output;
		}
	
		/**
		 * Creates a string based on an array of numeric code points.
		 * @see `punycode.ucs2.decode`
		 * @memberOf punycode.ucs2
		 * @name encode
		 * @param {Array} codePoints The array of numeric code points.
		 * @returns {String} The new Unicode string (UCS-2).
		 */
		function ucs2encode(array) {
			return map(array, function(value) {
				var output = '';
				if (value > 0xFFFF) {
					value -= 0x10000;
					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
					value = 0xDC00 | value & 0x3FF;
				}
				output += stringFromCharCode(value);
				return output;
			}).join('');
		}
	
		/**
		 * Converts a basic code point into a digit/integer.
		 * @see `digitToBasic()`
		 * @private
		 * @param {Number} codePoint The basic numeric code point value.
		 * @returns {Number} The numeric value of a basic code point (for use in
		 * representing integers) in the range `0` to `base - 1`, or `base` if
		 * the code point does not represent a value.
		 */
		function basicToDigit(codePoint) {
			if (codePoint - 48 < 10) {
				return codePoint - 22;
			}
			if (codePoint - 65 < 26) {
				return codePoint - 65;
			}
			if (codePoint - 97 < 26) {
				return codePoint - 97;
			}
			return base;
		}
	
		/**
		 * Converts a digit/integer into a basic code point.
		 * @see `basicToDigit()`
		 * @private
		 * @param {Number} digit The numeric value of a basic code point.
		 * @returns {Number} The basic code point whose value (when used for
		 * representing integers) is `digit`, which needs to be in the range
		 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
		 * used; else, the lowercase form is used. The behavior is undefined
		 * if `flag` is non-zero and `digit` has no uppercase form.
		 */
		function digitToBasic(digit, flag) {
			//  0..25 map to ASCII a..z or A..Z
			// 26..35 map to ASCII 0..9
			return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
		}
	
		/**
		 * Bias adaptation function as per section 3.4 of RFC 3492.
		 * http://tools.ietf.org/html/rfc3492#section-3.4
		 * @private
		 */
		function adapt(delta, numPoints, firstTime) {
			var k = 0;
			delta = firstTime ? floor(delta / damp) : delta >> 1;
			delta += floor(delta / numPoints);
			for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
				delta = floor(delta / baseMinusTMin);
			}
			return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
		}
	
		/**
		 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
		 * symbols.
		 * @memberOf punycode
		 * @param {String} input The Punycode string of ASCII-only symbols.
		 * @returns {String} The resulting string of Unicode symbols.
		 */
		function decode(input) {
			// Don't use UCS-2
			var output = [],
			    inputLength = input.length,
			    out,
			    i = 0,
			    n = initialN,
			    bias = initialBias,
			    basic,
			    j,
			    index,
			    oldi,
			    w,
			    k,
			    digit,
			    t,
			    /** Cached calculation results */
			    baseMinusT;
	
			// Handle the basic code points: let `basic` be the number of input code
			// points before the last delimiter, or `0` if there is none, then copy
			// the first basic code points to the output.
	
			basic = input.lastIndexOf(delimiter);
			if (basic < 0) {
				basic = 0;
			}
	
			for (j = 0; j < basic; ++j) {
				// if it's not a basic code point
				if (input.charCodeAt(j) >= 0x80) {
					error('not-basic');
				}
				output.push(input.charCodeAt(j));
			}
	
			// Main decoding loop: start just after the last delimiter if any basic code
			// points were copied; start at the beginning otherwise.
	
			for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {
	
				// `index` is the index of the next character to be consumed.
				// Decode a generalized variable-length integer into `delta`,
				// which gets added to `i`. The overflow checking is easier
				// if we increase `i` as we go, then subtract off its starting
				// value at the end to obtain `delta`.
				for (oldi = i, w = 1, k = base; /* no condition */; k += base) {
	
					if (index >= inputLength) {
						error('invalid-input');
					}
	
					digit = basicToDigit(input.charCodeAt(index++));
	
					if (digit >= base || digit > floor((maxInt - i) / w)) {
						error('overflow');
					}
	
					i += digit * w;
					t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
	
					if (digit < t) {
						break;
					}
	
					baseMinusT = base - t;
					if (w > floor(maxInt / baseMinusT)) {
						error('overflow');
					}
	
					w *= baseMinusT;
	
				}
	
				out = output.length + 1;
				bias = adapt(i - oldi, out, oldi == 0);
	
				// `i` was supposed to wrap around from `out` to `0`,
				// incrementing `n` each time, so we'll fix that now:
				if (floor(i / out) > maxInt - n) {
					error('overflow');
				}
	
				n += floor(i / out);
				i %= out;
	
				// Insert `n` at position `i` of the output
				output.splice(i++, 0, n);
	
			}
	
			return ucs2encode(output);
		}
	
		/**
		 * Converts a string of Unicode symbols (e.g. a domain name label) to a
		 * Punycode string of ASCII-only symbols.
		 * @memberOf punycode
		 * @param {String} input The string of Unicode symbols.
		 * @returns {String} The resulting Punycode string of ASCII-only symbols.
		 */
		function encode(input) {
			var n,
			    delta,
			    handledCPCount,
			    basicLength,
			    bias,
			    j,
			    m,
			    q,
			    k,
			    t,
			    currentValue,
			    output = [],
			    /** `inputLength` will hold the number of code points in `input`. */
			    inputLength,
			    /** Cached calculation results */
			    handledCPCountPlusOne,
			    baseMinusT,
			    qMinusT;
	
			// Convert the input in UCS-2 to Unicode
			input = ucs2decode(input);
	
			// Cache the length
			inputLength = input.length;
	
			// Initialize the state
			n = initialN;
			delta = 0;
			bias = initialBias;
	
			// Handle the basic code points
			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue < 0x80) {
					output.push(stringFromCharCode(currentValue));
				}
			}
	
			handledCPCount = basicLength = output.length;
	
			// `handledCPCount` is the number of code points that have been handled;
			// `basicLength` is the number of basic code points.
	
			// Finish the basic string - if it is not empty - with a delimiter
			if (basicLength) {
				output.push(delimiter);
			}
	
			// Main encoding loop:
			while (handledCPCount < inputLength) {
	
				// All non-basic code points < n have been handled already. Find the next
				// larger one:
				for (m = maxInt, j = 0; j < inputLength; ++j) {
					currentValue = input[j];
					if (currentValue >= n && currentValue < m) {
						m = currentValue;
					}
				}
	
				// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
				// but guard against overflow
				handledCPCountPlusOne = handledCPCount + 1;
				if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
					error('overflow');
				}
	
				delta += (m - n) * handledCPCountPlusOne;
				n = m;
	
				for (j = 0; j < inputLength; ++j) {
					currentValue = input[j];
	
					if (currentValue < n && ++delta > maxInt) {
						error('overflow');
					}
	
					if (currentValue == n) {
						// Represent delta as a generalized variable-length integer
						for (q = delta, k = base; /* no condition */; k += base) {
							t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
							if (q < t) {
								break;
							}
							qMinusT = q - t;
							baseMinusT = base - t;
							output.push(
								stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
							);
							q = floor(qMinusT / baseMinusT);
						}
	
						output.push(stringFromCharCode(digitToBasic(q, 0)));
						bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
						delta = 0;
						++handledCPCount;
					}
				}
	
				++delta;
				++n;
	
			}
			return output.join('');
		}
	
		/**
		 * Converts a Punycode string representing a domain name or an email address
		 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
		 * it doesn't matter if you call it on a string that has already been
		 * converted to Unicode.
		 * @memberOf punycode
		 * @param {String} input The Punycoded domain name or email address to
		 * convert to Unicode.
		 * @returns {String} The Unicode representation of the given Punycode
		 * string.
		 */
		function toUnicode(input) {
			return mapDomain(input, function(string) {
				return regexPunycode.test(string)
					? decode(string.slice(4).toLowerCase())
					: string;
			});
		}
	
		/**
		 * Converts a Unicode string representing a domain name or an email address to
		 * Punycode. Only the non-ASCII parts of the domain name will be converted,
		 * i.e. it doesn't matter if you call it with a domain that's already in
		 * ASCII.
		 * @memberOf punycode
		 * @param {String} input The domain name or email address to convert, as a
		 * Unicode string.
		 * @returns {String} The Punycode representation of the given domain name or
		 * email address.
		 */
		function toASCII(input) {
			return mapDomain(input, function(string) {
				return regexNonASCII.test(string)
					? 'xn--' + encode(string)
					: string;
			});
		}
	
		/*--------------------------------------------------------------------------*/
	
		/** Define the public API */
		punycode = {
			/**
			 * A string representing the current Punycode.js version number.
			 * @memberOf punycode
			 * @type String
			 */
			'version': '1.3.2',
			/**
			 * An object of methods to convert from JavaScript's internal character
			 * representation (UCS-2) to Unicode code points, and back.
			 * @see <https://mathiasbynens.be/notes/javascript-encoding>
			 * @memberOf punycode
			 * @type Object
			 */
			'ucs2': {
				'decode': ucs2decode,
				'encode': ucs2encode
			},
			'decode': decode,
			'encode': encode,
			'toASCII': toASCII,
			'toUnicode': toUnicode
		};
	
		/** Expose `punycode` */
		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if (
			true
		) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return punycode;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (freeExports && freeModule) {
			if (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+
				freeModule.exports = punycode;
			} else { // in Narwhal or RingoJS v0.7.0-
				for (key in punycode) {
					punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
				}
			}
		} else { // in Rhino or a web browser
			root.punycode = punycode;
		}
	
	}(this));
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(331)(module), (function() { return this; }())))

/***/ },
/* 643 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = {
	  isString: function(arg) {
	    return typeof(arg) === 'string';
	  },
	  isObject: function(arg) {
	    return typeof(arg) === 'object' && arg !== null;
	  },
	  isNull: function(arg) {
	    return arg === null;
	  },
	  isNullOrUndefined: function(arg) {
	    return arg == null;
	  }
	};


/***/ },
/* 644 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {
	/**
	 * Module exports.
	 */
	
	module.exports = deprecate;
	
	/**
	 * Mark that a method should not be used.
	 * Returns a modified function which warns once by default.
	 *
	 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
	 *
	 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
	 * will throw an Error when invoked.
	 *
	 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
	 * will invoke `console.trace()` instead of `console.error()`.
	 *
	 * @param {Function} fn - the function to deprecate
	 * @param {String} msg - the string to print to the console when `fn` is invoked
	 * @returns {Function} a new "deprecated" version of `fn`
	 * @api public
	 */
	
	function deprecate (fn, msg) {
	  if (config('noDeprecation')) {
	    return fn;
	  }
	
	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (config('throwDeprecation')) {
	        throw new Error(msg);
	      } else if (config('traceDeprecation')) {
	        console.trace(msg);
	      } else {
	        console.warn(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }
	
	  return deprecated;
	}
	
	/**
	 * Checks `localStorage` for boolean values for the given `name`.
	 *
	 * @param {String} name
	 * @returns {Boolean}
	 * @api private
	 */
	
	function config (name) {
	  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
	  try {
	    if (!global.localStorage) return false;
	  } catch (_) {
	    return false;
	  }
	  var val = global.localStorage[name];
	  if (null == val) return false;
	  return String(val).toLowerCase() === 'true';
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 645 */
/***/ function(module, exports) {

	module.exports = extend
	
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	function extend() {
	    var target = {}
	
	    for (var i = 0; i < arguments.length; i++) {
	        var source = arguments[i]
	
	        for (var key in source) {
	            if (hasOwnProperty.call(source, key)) {
	                target[key] = source[key]
	            }
	        }
	    }
	
	    return target
	}


/***/ },
/* 646 */,
/* 647 */,
/* 648 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ }
]);
//# sourceMappingURL=main.map